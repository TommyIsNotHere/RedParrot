[
  {
    "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
    "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "`Free Meal Count (K-12)` / `Enrollment (K-12)`",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "`County Name`",
          "match_type": "精确匹配",
          "condition": "Alameda"
        }
      ]
    },
    "table_name": "frpm",
    "id": 0
  },
  {
    "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
    "SQL": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)` < 700",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CDSCode",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "`County Name`",
          "match_type": "精确匹配",
          "condition": "Los Angeles"
        },
        {
          "column": "`Free Meal Count (K-12)`",
          "match_type": "大于",
          "condition": 500
        },
        {
          "column": "`FRPM Count (K-12)`",
          "match_type": "小于",
          "condition": 700
        }
      ]
    },
    "table_name": "frpm",
    "id": 1
  },
  {
    "question": "Which school in Contra Costa has the highest number of test takers?",
    "SQL": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "sname"
        }
      ],
      "measure": [
        {
          "column": "NumTstTakr",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cname",
          "match_type": "精确匹配",
          "condition": "Contra Costa"
        },
        {
          "column": "sname",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "satscores",
    "id": 2
  },
  {
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "SQL": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DOC",
          "match_type": "等于",
          "condition": "52"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "OpenDate",
          "match_type": "绝对时间",
          "condition": [
            "1980-01-01",
            "1980-12-31"
          ]
        }
      ]
    },
    "table_name": "schools",
    "id": 3
  },
  {
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "SQL": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END)",
          "aggregate_function": "CAST"
        }
      ],
      "filter": [
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Merged"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Orange"
        }
      ]
    },
    "table_name": "schools",
    "id": 4
  },
  {
    "question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "County"
        },
        {
          "column": "School"
        },
        {
          "column": "ClosedDate"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "StatusType",
          "match_type": "等于",
          "condition": "Closed"
        },
        {
          "column": "school",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "County",
          "match_type": "等于",
          "condition": "( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 )"
        }
      ]
    },
    "table_name": "schools",
    "id": 5
  },
  {
    "question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.",
    "SQL": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "School"
        },
        {
          "column": "MailZip"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AdmFName1",
          "match_type": "精确匹配",
          "condition": "Avetik"
        },
        {
          "column": "AdmLName1",
          "match_type": "精确匹配",
          "condition": "Atoian"
        }
      ]
    },
    "table_name": "schools",
    "id": 6
  },
  {
    "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
    "SQL": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        },
        {
          "column": "SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "MailState",
          "match_type": "精确匹配",
          "condition": "CA"
        }
      ]
    },
    "table_name": "schools",
    "id": 7
  },
  {
    "question": "Of all the schools with a mailing state address in California, how many are active in San Joaquin city?",
    "SQL": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CDSCode",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "San Joaquin"
        },
        {
          "column": "MailState",
          "match_type": "精确匹配",
          "condition": "CA"
        },
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Active"
        }
      ]
    },
    "table_name": "schools",
    "id": 8
  },
  {
    "question": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.",
    "SQL": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "School"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Zip",
          "match_type": "精确匹配",
          "condition": "95203-3704"
        }
      ]
    },
    "table_name": "schools",
    "id": 9
  },
  {
    "question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?",
    "SQL": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "Website"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AdmFName1",
          "match_type": "精确匹配",
          "condition": "Mike"
        },
        {
          "column": "AdmLName1",
          "match_type": "精确匹配",
          "condition": "Larson"
        },
        {
          "column": "AdmFName1",
          "match_type": "精确匹配",
          "condition": "Dante"
        },
        {
          "column": "AdmLName1",
          "match_type": "精确匹配",
          "condition": "Alvarez"
        }
      ]
    },
    "table_name": "schools",
    "id": 10
  },
  {
    "question": "What are the websites for all the partially virtual chartered schools located in San Joaquin?",
    "SQL": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "Website"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "San Joaquin"
        },
        {
          "column": "Virtual",
          "match_type": "精确匹配",
          "condition": "P"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": 1
        }
      ]
    },
    "table_name": "schools",
    "id": 11
  },
  {
    "question": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DOC",
          "match_type": "等于",
          "condition": "52"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Hickman"
        }
      ]
    },
    "table_name": "schools",
    "id": 12
  },
  {
    "question": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs",
    "SQL": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "School"
        },
        {
          "column": "City"
        }
      ],
      "measure": [
        {
          "column": "AdmFName1",
          "aggregate_function": "None"
        },
        {
          "column": "AdmLName1",
          "aggregate_function": "None"
        }
      ],
      "filter": [
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "CharterNum",
          "match_type": "精确匹配",
          "condition": "00D2"
        }
      ]
    },
    "table_name": "schools",
    "id": 13
  },
  {
    "question": "What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?",
    "SQL": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CharterNum",
          "match_type": "精确匹配",
          "condition": "00D4"
        },
        {
          "column": "MailCity",
          "match_type": "精确匹配",
          "condition": "Hickman"
        }
      ]
    },
    "table_name": "schools",
    "id": 14
  },
  {
    "question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?",
    "SQL": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "FundingType",
          "aggregate_function": "CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END)"
        }
      ],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Santa Clara"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": 1
        }
      ]
    },
    "table_name": "schools",
    "id": 15
  },
  {
    "question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "OpenDate",
          "match_type": "绝对时间",
          "condition": [
            "2000-01-01",
            "2005-12-31"
          ]
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Stanislaus"
        },
        {
          "column": "FundingType",
          "match_type": "精确匹配",
          "condition": "Directly funded"
        }
      ]
    },
    "table_name": "schools",
    "id": 16
  },
  {
    "question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ClosedDate",
          "match_type": "绝对时间",
          "condition": [
            "1989-01-01",
            "1989-12-31"
          ]
        },
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "San Francisco"
        },
        {
          "column": "DOCType",
          "match_type": "精确匹配",
          "condition": "Community College District"
        }
      ]
    },
    "table_name": "schools",
    "id": 17
  },
  {
    "question": "Which county reported the most number of school closure in the 1980s with school ownership code belonging to Youth Authority Facilities (CEA)?",
    "SQL": "SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "County"
        }
      ],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ClosedDate",
          "match_type": "绝对时间",
          "condition": [
            "1980-01-01",
            "1989-12-31"
          ]
        },
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Closed"
        },
        {
          "column": "SOC",
          "match_type": "等于",
          "condition": 11
        }
      ]
    },
    "table_name": "schools",
    "id": 18
  },
  {
    "question": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.",
    "SQL": "SELECT NCESDist FROM schools WHERE SOC = 31",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "NCESDist"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SOC",
          "match_type": "等于",
          "condition": "31"
        }
      ]
    },
    "table_name": "schools",
    "id": 19
  },
  {
    "question": "How many active and closed District Community Day Schools are there in the county of Alpine?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "StatusType",
          "match_type": "等于",
          "condition": "Closed"
        },
        {
          "column": "StatusType",
          "match_type": "等于",
          "condition": "Active"
        },
        {
          "column": "SOC",
          "match_type": "等于",
          "condition": 69
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alpine"
        }
      ]
    },
    "table_name": "schools",
    "id": 20
  },
  {
    "question": "What is the most common type of grade span served in the city of Adelanto?",
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "GSserved"
        }
      ],
      "measure": [
        {
          "column": "GSserved",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Adelanto"
        }
      ]
    },
    "table_name": "schools",
    "id": 21
  },
  {
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "SQL": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "County"
        }
      ],
      "measure": [
        {
          "column": "Virtual",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "San Diego"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Santa Barbara"
        },
        {
          "column": "Virtual",
          "match_type": "精确匹配",
          "condition": "F"
        }
      ]
    },
    "table_name": "schools",
    "id": 22
  },
  {
    "question": "What is the grade span offered in the school with the highest longitude?",
    "SQL": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "GSoffered"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "longitude",
          "match_type": "最大值",
          "condition": ""
        }
      ]
    },
    "table_name": "schools",
    "id": 23
  },
  {
    "question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
    "SQL": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "AdmLName1"
        },
        {
          "column": "District"
        },
        {
          "column": "County"
        },
        {
          "column": "School"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "CharterNum",
          "match_type": "精确匹配",
          "condition": "0040"
        }
      ]
    },
    "table_name": "schools",
    "id": 24
  },
  {
    "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
    "SQL": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "A13",
          "aggregate_function": "AVG"
        },
        {
          "column": "A12",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "district",
    "id": 25
  },
  {
    "question": "List out the accounts who have the earliest trading date in 1995 ?",
    "SQL": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
    "db_id": "financial",
    "config": {
      "dimension": [
        {
          "column": "account_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "1995-01-01",
            "1995-12-31"
          ]
        }
      ]
    },
    "table_name": "trans",
    "id": 26
  },
  {
    "question": "What is the percentage of loan amount that has been fully paid with no issue.",
    "SQL": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "(CASE WHEN status = 'A' THEN amount ELSE 0 END)",
          "aggregate_function": "SUM"
        },
        {
          "column": "amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "status",
          "match_type": "等于",
          "condition": "A"
        }
      ]
    },
    "table_name": "loan",
    "id": 27
  },
  {
    "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "SQL": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "status = 'C'",
          "aggregate_function": "SUM"
        },
        {
          "column": "account_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "amount",
          "match_type": "小于",
          "condition": "100000"
        }
      ]
    },
    "table_name": "loan",
    "id": 28
  },
  {
    "question": "List the account IDs with monthly issuance of statements.",
    "SQL": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'",
    "db_id": "financial",
    "config": {
      "dimension": [
        {
          "column": "account_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Frequency",
          "match_type": "精确匹配",
          "condition": "POPLATEK MESICNE"
        }
      ]
    },
    "table_name": "account",
    "id": 29
  },
  {
    "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
    "SQL": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
    "db_id": "financial",
    "config": {
      "dimension": [
        {
          "column": "district_id"
        },
        {
          "column": "A2"
        }
      ],
      "measure": [
        {
          "column": "A13",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "district",
    "id": 30
  },
  {
    "question": "How many percent of 'Gold' cards were issued prior to 1998?",
    "SQL": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type = 'gold' AND STRFTIME('%Y', issued) < '1998'",
          "aggregate_function": "SUM"
        },
        {
          "column": "card_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "gold"
        },
        {
          "column": "issued",
          "match_type": "绝对时间",
          "condition": [
            "null",
            "1998-01-01"
          ]
        }
      ]
    },
    "table_name": "card",
    "id": 31
  },
  {
    "question": "How many credit card withdrawals were recorded after 1995?",
    "SQL": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "account_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "1996-01-01",
            null
          ]
        },
        {
          "column": "operation",
          "match_type": "精确匹配",
          "condition": "VYBER KARTOU"
        }
      ]
    },
    "table_name": "trans",
    "id": 32
  },
  {
    "question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
    "SQL": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "A16",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "A3",
          "match_type": "精确匹配",
          "condition": "east Bohemia"
        },
        {
          "column": "A3",
          "match_type": "精确匹配",
          "condition": "north Bohemia"
        },
        {
          "column": "year",
          "match_type": "等于",
          "condition": "1996"
        }
      ]
    },
    "table_name": "district",
    "id": 33
  },
  {
    "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
    "SQL": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type",
          "aggregate_function": "SUM"
        },
        {
          "column": "type",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "account_id",
          "match_type": "在区间",
          "condition": [
            1,
            10
          ]
        }
      ]
    },
    "table_name": "disp",
    "id": 34
  },
  {
    "question": "What is the most common bond type?",
    "SQL": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "bond_type"
        }
      ],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "bond",
    "id": 35
  },
  {
    "question": "How many triple type bonds are there?",
    "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "#"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 36
  },
  {
    "question": "In how many atoms is there no bromine?",
    "SQL": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "T.element",
          "match_type": "不等于",
          "condition": "br"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 37
  },
  {
    "question": "Of the first 100 molecules in number order, how many are carcinogenic?",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR000",
            "TR099"
          ]
        },
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 38
  },
  {
    "question": "Identify by their ID the molecules in which there is carbon.",
    "SQL": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "c"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 39
  },
  {
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 40
  },
  {
    "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?",
    "SQL": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "SUBSTR(T.bond_id, 1, 7)"
        },
        {
          "column": "T.molecule_id || SUBSTR(T.bond_id, 8, 2)"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        },
        {
          "column": "T.bond_id",
          "match_type": "精确匹配",
          "condition": "TR001_2_6"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 41
  },
  {
    "question": "What is the difference between the number of molecules that are carcinogenic and those that are not?",
    "SQL": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.label",
          "match_type": "等于",
          "condition": "+"
        },
        {
          "column": "T.label",
          "match_type": "等于",
          "condition": "-"
        }
      ]
    },
    "table_name": "molecule AS t",
    "id": 42
  },
  {
    "question": "What are the atom IDs of the bond TR000_2_5?",
    "SQL": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.bond_id",
          "match_type": "精确匹配",
          "condition": "TR000_2_5"
        }
      ]
    },
    "table_name": "connected AS T",
    "id": 43
  },
  {
    "question": "What are the bond IDs that have the same atom ID 2 of TR000_2?",
    "SQL": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.bond_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.atom_id2",
          "match_type": "精确匹配",
          "condition": "TR000_2"
        }
      ]
    },
    "table_name": "connected AS T",
    "id": 44
  },
  {
    "question": "Please list top five molecules that have double bonds in alphabetical order.",
    "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 45
  },
  {
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5)"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR008"
        },
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 46
  },
  {
    "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3)",
          "aggregate_function": "ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3)"
        }
      ],
      "filter": []
    },
    "table_name": "molecule AS t",
    "id": 47
  },
  {
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4)",
          "aggregate_function": "ROUND"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR206"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "h"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 48
  },
  {
    "question": "What is the type of bond that molecule TR000 has when involved in any bonds?",
    "SQL": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.bond_type"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 49
  },
  {
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "SQL": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "bond_type"
        }
      ],
      "measure": [
        {
          "column": "molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR010"
        }
      ]
    },
    "table_name": "bond AS T1",
    "id": 50
  },
  {
    "question": "How many molecules have a triple bond type?",
    "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "#"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 51
  },
  {
    "question": "How many connections does the atom 19 have?",
    "SQL": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.atom_id",
          "match_type": "精确匹配",
          "condition": "19"
        }
      ]
    },
    "table_name": "connected AS T",
    "id": 52
  },
  {
    "question": "List all the elements of the toxicology of the molecule \"TR004\".",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR004"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 53
  },
  {
    "question": "How many of the molecules are not carcinogenic?",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "label",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 54
  },
  {
    "question": "Calculate the total atoms consisting of the element carbon and hydrogen.",
    "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "'c'"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "'h'"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 55
  },
  {
    "question": "What are the labels for TR000, TR001 and TR002?",
    "SQL": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "molecule_id"
        },
        {
          "column": "T.label"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "['TR000', 'TR001', 'TR002']"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 56
  },
  {
    "question": "List down the molecule id for non carcinogenic molecules.",
    "SQL": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 57
  },
  {
    "question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR000",
            "TR030"
          ]
        },
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 58
  },
  {
    "question": "List the toxicology elements associated with molecule TR001.",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 59
  },
  {
    "question": "Give me the molecule ID of the double bond type.",
    "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 60
  },
  {
    "question": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.",
    "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.bond_id",
          "aggregate_function": "CUSTOM"
        }
      ],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "等于",
          "condition": "#"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 61
  },
  {
    "question": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.",
    "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        },
        {
          "column": "CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR047"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 62
  },
  {
    "question": "Is molecule TR151 carcinogenic?",
    "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.label"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR151"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 63
  },
  {
    "question": "Which toxic element can be found in the molecule TR151?",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR151"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 64
  },
  {
    "question": "How many chemical compounds in the database are identified as carcinogenic.",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 65
  },
  {
    "question": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.",
    "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR010",
            "TR050"
          ]
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "c"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 66
  },
  {
    "question": "Is molecule TR124 carcinogenic?",
    "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.label"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR124"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 67
  },
  {
    "question": "What atoms comprise TR186?",
    "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR186"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 68
  },
  {
    "question": "What is the bond type of TR007_4_19?",
    "SQL": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "bond_type"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bond_id",
          "match_type": "精确匹配",
          "condition": "TR007_4_19"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 69
  },
  {
    "question": "How many atoms belong to molecule id TR001?",
    "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 70
  },
  {
    "question": "How many single bonds are there in the list?",
    "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 71
  },
  {
    "question": "What is the element of toxicology for the atom with the ID of TR000_1?",
    "SQL": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.atom_id",
          "match_type": "精确匹配",
          "condition": "TR000_1"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 72
  },
  {
    "question": "Is molecule TR000 is carcinogenic or not?",
    "SQL": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "label",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 73
  },
  {
    "question": "Find the percentage of atoms with single bond.",
    "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        },
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "bond AS t",
    "id": 74
  },
  {
    "question": "How many of the molecules are carcinogenic?",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 75
  },
  {
    "question": "Among the molecules between TR004 to TR010, how many of them has single bonds?",
    "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "molecule_id"
        }
      ],
      "measure": [
        {
          "column": "molecule_id",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR004",
            "TR010"
          ]
        },
        {
          "column": "bond_type",
          "match_type": "等于",
          "condition": "-"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 76
  },
  {
    "question": "In the molecule TR008, how many carbons are present?",
    "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR008"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "c"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 77
  },
  {
    "question": "Which are the cards that have incredibly powerful foils.",
    "SQL": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 78
  },
  {
    "question": "What are the borderless cards available without powerful foils?",
    "SQL": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "borderless"
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": "IS NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 79
  },
  {
    "question": "List the card names with value that cost more converted mana for the face.",
    "SQL": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "faceConvertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "cards",
    "id": 80
  },
  {
    "question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
    "SQL": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "edhrecRank",
          "match_type": "小于",
          "condition": "100"
        },
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "table_name": "cards",
    "id": 81
  },
  {
    "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
    "SQL": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Aaron Boyd"
        }
      ]
    },
    "table_name": "cards",
    "id": 82
  },
  {
    "question": "What is the keyword found on card 'Angel of Mercy'?",
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "keywords"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Angel of Mercy"
        }
      ]
    },
    "table_name": "cards",
    "id": 83
  },
  {
    "question": "How many cards have infinite power?",
    "SQL": "SELECT COUNT(*) FROM cards WHERE power = '*'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "power",
          "match_type": "精确匹配",
          "condition": "*"
        }
      ]
    },
    "table_name": "cards",
    "id": 84
  },
  {
    "question": "What type of promotion is of card 'Duress'?",
    "SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "promoTypes"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Duress"
        },
        {
          "column": "promoTypes",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "cards",
    "id": 85
  },
  {
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "SQL": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "borderColor"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Ancestor's Chosen"
        }
      ]
    },
    "table_name": "cards",
    "id": 86
  },
  {
    "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
    "SQL": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "originalType"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Ancestor's Chosen"
        },
        {
          "column": "originalType",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 87
  },
  {
    "question": "What is the percentage of borderless cards?",
    "SQL": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "borderColor",
          "aggregate_function": "SUM"
        },
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "等于",
          "condition": "borderless"
        }
      ]
    },
    "table_name": "cards",
    "id": 88
  },
  {
    "question": "How many cards are there with toughness of 99?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE toughness = 99",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "toughness",
          "match_type": "等于",
          "condition": "99"
        }
      ]
    },
    "table_name": "cards",
    "id": 89
  },
  {
    "question": "Name the cards that were illustrated by Aaron Boyd.",
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Aaron Boyd"
        }
      ]
    },
    "table_name": "cards",
    "id": 90
  },
  {
    "question": "How many black border cards are only available on mtgo?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "mtgo"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 91
  },
  {
    "question": "List down all the card IDs with converted mana cost of 0.",
    "SQL": "SELECT id FROM cards WHERE convertedManaCost = 0",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "convertedManaCost",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "cards",
    "id": 92
  },
  {
    "question": "What are the card layout of cards with keyword of flying?",
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "layout"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "keywords",
          "match_type": "精确匹配",
          "condition": "Flying"
        }
      ]
    },
    "table_name": "cards",
    "id": 93
  },
  {
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "originalType",
          "match_type": "精确匹配",
          "condition": "Summon - Angel"
        },
        {
          "column": "subtypes",
          "match_type": "不等于",
          "condition": "Angel"
        }
      ]
    },
    "table_name": "cards",
    "id": 94
  },
  {
    "question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.",
    "SQL": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "cards",
    "id": 95
  },
  {
    "question": "What are the cards belong to duel deck a? List the ID.",
    "SQL": "SELECT id FROM cards WHERE duelDeck = 'a'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "duelDeck",
          "match_type": "精确匹配",
          "condition": "a"
        }
      ]
    },
    "table_name": "cards",
    "id": 96
  },
  {
    "question": "List the edhrecRank for cards with frame version 2015.",
    "SQL": "SELECT edhrecRank FROM cards WHERE frameVersion = 2015",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "edhrecRank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "table_name": "cards",
    "id": 97
  },
  {
    "question": "On how many cards designed by John Avon is its foil non-powerful?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "John Avon"
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": "IS NULL"
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": "IS NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 98
  },
  {
    "question": "How many white bordered cards are powerful?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "white"
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 99
  },
  {
    "question": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hAND",
          "match_type": "等于",
          "condition": "-1"
        },
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "UDON"
        },
        {
          "column": "Availability",
          "match_type": "精确匹配",
          "condition": "mtgo"
        }
      ]
    },
    "table_name": "cards",
    "id": 100
  },
  {
    "question": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": "1993"
        },
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "paper"
        },
        {
          "column": "hasContentWarning",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "cards",
    "id": 101
  },
  {
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "SQL": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "layout"
        },
        {
          "column": "frameVersion"
        },
        {
          "column": "borderColor"
        },
        {
          "column": "availability"
        }
      ],
      "measure": [
        {
          "column": "manaCost",
          "aggregate_function": "NULL"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "等于",
          "condition": "mtgo,paper"
        },
        {
          "column": "borderColor",
          "match_type": "等于",
          "condition": "black"
        },
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": 2003
        },
        {
          "column": "layout",
          "match_type": "等于",
          "condition": "normal"
        }
      ]
    },
    "table_name": "cards",
    "id": 102
  },
  {
    "question": "What is the unconverted mana do all the cards created by Rob Alexander cost in total?",
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "manaCost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Rob Alexander"
        }
      ]
    },
    "table_name": "cards",
    "id": 103
  },
  {
    "question": "Lists all types of cards available in arena.",
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "subtypes"
        },
        {
          "column": "supertypes"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "arena"
        },
        {
          "column": "subtypes",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "supertypes",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 104
  },
  {
    "question": "Lists the set code of all cards translated into Spanish.",
    "SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "setCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "language",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "set_translations",
    "id": 105
  },
  {
    "question": "What percentage of legendary frame effect cards that are only available in online game variations?",
    "SQL": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100",
          "aggregate_function": "SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100"
        }
      ],
      "filter": [
        {
          "column": "frameEffects",
          "match_type": "精确匹配",
          "condition": "legendary"
        }
      ]
    },
    "table_name": "cards",
    "id": 106
  },
  {
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "isTextless",
          "aggregate_function": "SUM"
        },
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "isStorySpotlight",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "cards",
    "id": 107
  },
  {
    "question": "Calculate the percentage of cards in Spanish. List them by name.",
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "language",
          "aggregate_function": "SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) * 100 / COUNT(*)"
        }
      ],
      "filter": [
        {
          "column": "language",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "foreign_data",
    "id": 108
  },
  {
    "question": "What kind of printing is on the card that Daren Bader created?",
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "availability"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Daren Bader"
        }
      ]
    },
    "table_name": "cards",
    "id": 109
  },
  {
    "question": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "edhrecRank",
          "match_type": "大于",
          "condition": "12000"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "borderless"
        }
      ]
    },
    "table_name": "cards",
    "id": 110
  },
  {
    "question": "How many cards are oversized, reprinted, and printed for promotions?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "isOversized",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "isReprint",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "isPromo",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "cards",
    "id": 111
  },
  {
    "question": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.",
    "SQL": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "power",
          "match_type": "精确匹配",
          "condition": "IS NULL OR LIKE '%*%'"
        },
        {
          "column": "promoTypes",
          "match_type": "精确匹配",
          "condition": "arenaleague"
        }
      ]
    },
    "table_name": "cards",
    "id": 112
  },
  {
    "question": "What is the language of the card with the multiverse number 149934?",
    "SQL": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "language"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "multiverseid",
          "match_type": "等于",
          "condition": "149934"
        }
      ]
    },
    "table_name": "foreign_data",
    "id": 113
  },
  {
    "question": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.",
    "SQL": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "cardKingdomFoilId"
        },
        {
          "column": "cardKingdomId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "cards",
    "id": 114
  },
  {
    "question": "What proportion of cards do not have a text box with a normal layout?",
    "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "isTextless",
          "aggregate_function": "SUM"
        },
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "isTextless",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "layout",
          "match_type": "等于",
          "condition": "normal"
        }
      ]
    },
    "table_name": "cards",
    "id": 115
  },
  {
    "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?",
    "SQL": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "subtypes",
          "match_type": "精确匹配",
          "condition": "Angel,Wizard"
        },
        {
          "column": "side",
          "match_type": "不为空",
          "condition": "IS NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 116
  },
  {
    "question": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.",
    "SQL": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "mtgoCode",
          "match_type": "不为空",
          "condition": "IS NULL"
        }
      ]
    },
    "table_name": "sets",
    "id": 117
  },
  {
    "question": "How many card border with black color ? List out the card id.",
    "SQL": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 118
  },
  {
    "question": "How many cards have frame effect as extendedart? List out the id of those cards.",
    "SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "frameEffects",
          "match_type": "精确匹配",
          "condition": "extendedart"
        }
      ]
    },
    "table_name": "cards",
    "id": 119
  },
  {
    "question": "Among black card borders, which card has full artwork?",
    "SQL": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        },
        {
          "column": "isFullArt",
          "match_type": "等于",
          "condition": 1
        }
      ]
    },
    "table_name": "cards",
    "id": 120
  },
  {
    "question": "Point out the language of set id \"174\"?",
    "SQL": "SELECT language FROM set_translations WHERE id = 174",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "language"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "id",
          "match_type": "等于",
          "condition": "174"
        }
      ]
    },
    "table_name": "set_translations",
    "id": 121
  },
  {
    "question": "List out the set name of the set code \"ALL\".",
    "SQL": "SELECT name FROM sets WHERE code = 'ALL'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "ALL"
        }
      ]
    },
    "table_name": "sets",
    "id": 122
  },
  {
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "language"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "A Pedra Fellwar"
        }
      ]
    },
    "table_name": "foreign_data",
    "id": 123
  },
  {
    "question": "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?",
    "SQL": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Aaron Miller"
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 124
  },
  {
    "question": "How many cards available in paper have a positive starting maximum hand size?",
    "SQL": "SELECT SUM(CASE WHEN availability = 'paper' AND hand = '3' THEN 1 ELSE 0 END) FROM cards",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN availability = 'paper' AND hand = '3' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "paper"
        },
        {
          "column": "hand",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "table_name": "cards",
    "id": 125
  },
  {
    "question": "Please list the names of the cards that have a text box.",
    "SQL": "SELECT DISTINCT name FROM cards WHERE isTextless = 0",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "isTextless",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "cards",
    "id": 126
  },
  {
    "question": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?",
    "SQL": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "manaCost",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Ancestor's Chosen"
        }
      ]
    },
    "table_name": "cards",
    "id": 127
  },
  {
    "question": "Among the cards with a white border color, how many of them have unknown power?",
    "SQL": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "power",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "white"
        },
        {
          "column": "power",
          "match_type": "模糊匹配",
          "condition": "%*%"
        },
        {
          "column": "power",
          "match_type": "不为空",
          "condition": "NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 128
  },
  {
    "question": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.",
    "SQL": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "isPromo",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "side",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 129
  },
  {
    "question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "subtypes"
        },
        {
          "column": "supertypes"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Molimo, Maro-Sorcerer"
        }
      ]
    },
    "table_name": "cards",
    "id": 130
  },
  {
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "purchaseUrls"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "promoTypes",
          "match_type": "精确匹配",
          "condition": "bundle"
        }
      ]
    },
    "table_name": "cards",
    "id": 131
  },
  {
    "question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?",
    "SQL": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "模糊匹配",
          "condition": "%arena,mtgo%"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 132
  },
  {
    "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "SQL": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Serra Angel"
        },
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Shrine Keeper"
        }
      ]
    },
    "table_name": "cards",
    "id": 133
  },
  {
    "question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
    "SQL": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "artist"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "flavorName",
          "match_type": "精确匹配",
          "condition": "Battra, Dark Destroyer"
        }
      ]
    },
    "table_name": "cards",
    "id": 134
  },
  {
    "question": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.",
    "SQL": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": "2003"
        }
      ]
    },
    "table_name": "cards",
    "id": 135
  },
  {
    "question": "What's the code for the set which was released on 2017/7/14?",
    "SQL": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "code"
        },
        {
          "column": "releaseDate"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "releaseDate",
          "match_type": "精确匹配",
          "condition": "2017-07-14"
        }
      ]
    },
    "table_name": "sets",
    "id": 136
  },
  {
    "question": "List the keyrune code for the set whose code is 'PKHC'.",
    "SQL": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "keyruneCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "PKHC"
        }
      ]
    },
    "table_name": "sets",
    "id": 137
  },
  {
    "question": "For the set which had 'SS2' as the code, what is its magic card market id?",
    "SQL": "SELECT mcmId FROM sets WHERE code = 'SS2'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "mcmId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "SS2"
        }
      ]
    },
    "table_name": "sets",
    "id": 138
  },
  {
    "question": "What's the magic card market name for the set which was released on 2017/6/9?",
    "SQL": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "mcmName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "releaseDate",
          "match_type": "精确匹配",
          "condition": "2017-06-09"
        }
      ]
    },
    "table_name": "sets",
    "id": 139
  },
  {
    "question": "For the set \"From the Vault: Lore\", what is its expansion type?",
    "SQL": "SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "type"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "FROM the Vault: Lore"
        }
      ]
    },
    "table_name": "sets",
    "id": 140
  },
  {
    "question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "parentCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Commander 2014 Oversized"
        }
      ]
    },
    "table_name": "sets",
    "id": 141
  },
  {
    "question": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?",
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "availability"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Aleksi Briclot"
        },
        {
          "column": "isTextless",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "cards",
    "id": 142
  },
  {
    "question": "What is the unique id of the set that has the highest number of cards?",
    "SQL": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "baseSetSize",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "sets",
    "id": 143
  },
  {
    "question": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?",
    "SQL": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "artist"
        }
      ],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "side",
          "match_type": "IS NULL",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 144
  },
  {
    "question": "What is the most common visual frame effects among the incredibly powerful foils?",
    "SQL": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "frameEffects"
        }
      ],
      "measure": [
        {
          "column": "frameEffects",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "not null",
          "condition": ""
        },
        {
          "column": "cardKingdomId",
          "match_type": "not null",
          "condition": ""
        }
      ]
    },
    "table_name": "cards",
    "id": 145
  },
  {
    "question": "How many cards with unknown power that can't be found in foil is in duel deck A?",
    "SQL": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'",
    "db_id": "card_games",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "hasFoil",
          "match_type": "等于",
          "condition": "0"
        },
        {
          "column": "duelDeck",
          "match_type": "等于",
          "condition": "a"
        }
      ]
    },
    "table_name": "cards",
    "id": 146
  },
  {
    "question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "totalSetSize",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "commander"
        }
      ]
    },
    "table_name": "sets",
    "id": 147
  },
  {
    "question": "List the artists who illustrated cards with black borders which are available only in arena.",
    "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "artist"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "arena"
        },
        {
          "column": "BorderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 148
  },
  {
    "question": "Find the uuid of cards in which the old school format is restricted or banned.",
    "SQL": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "uuid"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "format",
          "match_type": "精确匹配",
          "condition": "oldschool"
        },
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "Banned"
        },
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "Restricted"
        }
      ]
    },
    "table_name": "legalities",
    "id": 149
  },
  {
    "question": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "artist"
        },
        {
          "column": "availability"
        }
      ],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Matthew D. Wilson"
        },
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "paper"
        }
      ]
    },
    "table_name": "cards",
    "id": 150
  },
  {
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "SQL": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "DisplayName",
          "match_type": "精确匹配",
          "condition": "IN ('Harlan', 'Jarrod Dixon')"
        }
      ]
    },
    "table_name": "users",
    "id": 151
  },
  {
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "SQL": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": [
            "2011-01-01",
            "2011-12-31"
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 152
  },
  {
    "question": "How many users last accessed the website after 2014/9/1?",
    "SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LastAccessDate",
          "match_type": "绝对时间",
          "condition": [
            "2014-09-01",
            null
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 153
  },
  {
    "question": "What is the display name of the user who has the most number of views?",
    "SQL": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Views",
          "match_type": "等于",
          "condition": "( SELECT MAX(Views) FROM users )"
        }
      ]
    },
    "table_name": "users",
    "id": 154
  },
  {
    "question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?",
    "SQL": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Upvotes",
          "match_type": "大于",
          "condition": "100"
        },
        {
          "column": "Downvotes",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "users",
    "id": 155
  },
  {
    "question": "How many users with more than 10 views created their account after the year 2013?",
    "SQL": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "大于",
          "condition": "2013"
        },
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "users",
    "id": 156
  },
  {
    "question": "How many votes did the user No.58 take on 2010/7/19?",
    "SQL": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": "58"
        },
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": [
            "2010-07-19",
            "2010-07-19"
          ]
        }
      ]
    },
    "table_name": "votes",
    "id": 157
  },
  {
    "question": "Indicate the creation date of the maximum number of votes.",
    "SQL": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "CreationDate"
        }
      ],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "votes",
    "id": 158
  },
  {
    "question": "Give the number of \"Revival\" badges.",
    "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Revival"
        }
      ]
    },
    "table_name": "badges",
    "id": 159
  },
  {
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ViewCount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Title",
          "match_type": "精确匹配",
          "condition": "Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer"
        }
      ]
    },
    "table_name": "posts",
    "id": 160
  },
  {
    "question": "Write the contents of comments with a score of 17.",
    "SQL": "SELECT Text FROM comments WHERE Score = 17",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Text"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Score",
          "match_type": "等于",
          "condition": "17"
        }
      ]
    },
    "table_name": "comments",
    "id": 161
  },
  {
    "question": "Which user has the website URL listed at 'http://stackoverflow.com'",
    "SQL": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "WebsiteUrl",
          "match_type": "精确匹配",
          "condition": "http://stackoverflow.com"
        }
      ]
    },
    "table_name": "users",
    "id": 162
  },
  {
    "question": "Give the total number of comments posted by user ID 13.",
    "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": "13"
        }
      ]
    },
    "table_name": "comments",
    "id": 163
  },
  {
    "question": "Which user ID has the highest reputation?",
    "SQL": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Id"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "users",
    "id": 164
  },
  {
    "question": "Which user ID has the lowest view?",
    "SQL": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Id"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "users",
    "id": 165
  },
  {
    "question": "How many users are awarded with supporter badge during year 2011?",
    "SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2011-01-01",
            "2011-12-31"
          ]
        },
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Supporter"
        }
      ]
    },
    "table_name": "badges",
    "id": 166
  },
  {
    "question": "How many users are awarded with more than 5 badges?",
    "SQL": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "UserId"
        }
      ],
      "measure": [
        {
          "column": "num",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "num",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "table_name": "badges",
    "id": 167
  },
  {
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Date",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Student"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2010-01-01",
            "2010-12-31"
          ]
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2011-01-01",
            "2011-12-31"
          ]
        }
      ]
    },
    "table_name": "badges",
    "id": 168
  },
  {
    "question": "How many users obtained the \"Announcer\" badge?",
    "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Announcer"
        }
      ]
    },
    "table_name": "badges",
    "id": 169
  },
  {
    "question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.",
    "SQL": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2010-07-19 19:39:08.0"
          ]
        }
      ]
    },
    "table_name": "badges",
    "id": 170
  },
  {
    "question": "How many positive comments are there on the list?",
    "SQL": "SELECT COUNT(id) FROM comments WHERE score > 60",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "score",
          "match_type": "大于",
          "condition": "60"
        }
      ]
    },
    "table_name": "comments",
    "id": 171
  },
  {
    "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
    "SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Text"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "精确匹配",
          "condition": "2010-07-19 19:16:14.0"
        }
      ]
    },
    "table_name": "comments",
    "id": 172
  },
  {
    "question": "How many posts have a score of 10 on the list?",
    "SQL": "SELECT COUNT(id) FROM posts WHERE Score = 10",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Score",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "posts",
    "id": 173
  },
  {
    "question": "What is the name of user with the ID of 30?",
    "SQL": "SELECT DisplayName FROM users WHERE Id = 30",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Id",
          "match_type": "等于",
          "condition": "30"
        }
      ]
    },
    "table_name": "users",
    "id": 174
  },
  {
    "question": "How many users were from New York?",
    "SQL": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "New York"
        }
      ]
    },
    "table_name": "users",
    "id": 175
  },
  {
    "question": "How many votes were made in 2010?",
    "SQL": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "等于",
          "condition": "2010"
        }
      ]
    },
    "table_name": "votes",
    "id": 176
  },
  {
    "question": "How many users were adult?",
    "SQL": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "在区间",
          "condition": [
            19,
            65
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 177
  },
  {
    "question": "Which users have the highest number of views?",
    "SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Id"
        },
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Views",
          "match_type": "等于",
          "condition": "( SELECT MAX(Views) FROM users )"
        }
      ]
    },
    "table_name": "users",
    "id": 178
  },
  {
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CreationDate",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "等于",
          "condition": "2010"
        },
        {
          "column": "CreationDate",
          "match_type": "等于",
          "condition": "2011"
        }
      ]
    },
    "table_name": "votes",
    "id": 179
  },
  {
    "question": "How many users received commentator badges in 2014?",
    "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Commentator"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2014-01-01",
            "2014-12-31"
          ]
        }
      ]
    },
    "table_name": "badges",
    "id": 180
  },
  {
    "question": "How many posts were created on 21st July, 2010?",
    "SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": [
            "2010-07-21",
            "2010-07-21"
          ]
        }
      ]
    },
    "table_name": "postHistory",
    "id": 181
  },
  {
    "question": "What are the display names and ages of user who got the highest in views?",
    "SQL": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        },
        {
          "column": "Age"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Views",
          "match_type": "等于",
          "condition": "( SELECT MAX(Views) FROM users )"
        }
      ]
    },
    "table_name": "users",
    "id": 182
  },
  {
    "question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "LastEditDate"
        },
        {
          "column": "LastEditorUserId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Title",
          "match_type": "精确匹配",
          "condition": "Detecting a given face in a database of facial images"
        }
      ]
    },
    "table_name": "posts",
    "id": 183
  },
  {
    "question": "How many negative comments were given by user ID 13?",
    "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": "13"
        },
        {
          "column": "Score",
          "match_type": "小于",
          "condition": "60"
        }
      ]
    },
    "table_name": "comments",
    "id": 184
  },
  {
    "question": "What are the titles of the top 5 posts with the highest popularity?",
    "SQL": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [
        {
          "column": "ViewCount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "posts",
    "id": 185
  },
  {
    "question": "How many tags have post count between 5,000 to 7,000?",
    "SQL": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Count",
          "match_type": "在区间",
          "condition": [
            5000,
            7000
          ]
        }
      ]
    },
    "table_name": "tags",
    "id": 186
  },
  {
    "question": "What is the owner user id of the most valuable post?",
    "SQL": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "OwnerUserId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "FavoriteCount",
          "match_type": "等于",
          "condition": "( SELECT MAX(FavoriteCount) FROM posts )"
        }
      ]
    },
    "table_name": "posts",
    "id": 187
  },
  {
    "question": "How old is the most influential user?",
    "SQL": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Reputation",
          "match_type": "等于",
          "condition": "( SELECT MAX(Reputation) FROM users )"
        }
      ]
    },
    "table_name": "users",
    "id": 188
  },
  {
    "question": "What is the id of the youngest user?",
    "SQL": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "( SELECT MIN(Age) FROM users )"
        }
      ]
    },
    "table_name": "users",
    "id": 189
  },
  {
    "question": "What is the sum of score of the post on 2010-07-19?",
    "SQL": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Score",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "LasActivityDate",
          "match_type": "绝对时间",
          "condition": "2010-07-19"
        }
      ]
    },
    "table_name": "posts",
    "id": 190
  },
  {
    "question": "Who has the highest reputation? Please give the display name.",
    "SQL": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "users",
    "id": 191
  },
  {
    "question": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?",
    "SQL": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Reputation",
          "match_type": "大于",
          "condition": "2000"
        },
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "table_name": "users",
    "id": 192
  },
  {
    "question": "Please list all display names of users who are adults.",
    "SQL": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "在区间",
          "condition": [
            19,
            65
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 193
  },
  {
    "question": "Identify the percentage of teenage users.",
    "SQL": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Age",
          "aggregate_function": "SUM"
        },
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "在区间",
          "condition": "13,18"
        }
      ]
    },
    "table_name": "users",
    "id": 194
  },
  {
    "question": "Identify the total number of posts with views above average.",
    "SQL": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ViewCount",
          "match_type": "大于",
          "condition": "( SELECT AVG(ViewCount) FROM posts )"
        }
      ]
    },
    "table_name": "posts",
    "id": 195
  },
  {
    "question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.",
    "SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ViewCount",
          "match_type": "大于",
          "condition": "35000"
        },
        {
          "column": "CommentCount",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "posts",
    "id": 196
  },
  {
    "question": "Identify the number of adult users who have cast over 5000 upvotes.",
    "SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "在区间",
          "condition": [
            19,
            65
          ]
        },
        {
          "column": "UpVotes",
          "match_type": "大于",
          "condition": 5000
        }
      ]
    },
    "table_name": "users",
    "id": 197
  },
  {
    "question": "How many users were awarded with 'Citizen Patrol' badge?",
    "SQL": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Citizen Patrol"
        }
      ]
    },
    "table_name": "badges",
    "id": 198
  },
  {
    "question": "Count the number of posts with a tag specified as 'careers'.",
    "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "TagName",
          "match_type": "精确匹配",
          "condition": "careers"
        }
      ]
    },
    "table_name": "tags",
    "id": 199
  },
  {
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "SUM"
        },
        {
          "column": "Views",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "DisplayName",
          "match_type": "精确匹配",
          "condition": "Jarrod Dixon"
        }
      ]
    },
    "table_name": "users",
    "id": 200
  },
  {
    "question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CommentCount",
          "aggregate_function": "SUM"
        },
        {
          "column": "AnswerCount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Title",
          "match_type": "精确匹配",
          "condition": "Clustering 1D data"
        }
      ]
    },
    "table_name": "posts",
    "id": 201
  },
  {
    "question": "When did the user known as 'IrishStat' create his or her account?",
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CreationDate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "DisplayName",
          "match_type": "精确匹配",
          "condition": "IrishStat"
        }
      ]
    },
    "table_name": "users",
    "id": 202
  },
  {
    "question": "Identify the number of posts that offer a bounty amount over 30.",
    "SQL": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "BountyAmount",
          "match_type": "大于等于",
          "condition": "30"
        }
      ]
    },
    "table_name": "votes",
    "id": 203
  },
  {
    "question": "How many posts have a score less than 20?",
    "SQL": "SELECT COUNT(id) FROM posts WHERE Score < 20",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Score",
          "match_type": "小于",
          "condition": "20"
        }
      ]
    },
    "table_name": "posts",
    "id": 204
  },
  {
    "question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?",
    "SQL": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Count",
          "match_type": "小于等于",
          "condition": "20"
        },
        {
          "column": "Id",
          "match_type": "小于",
          "condition": "15"
        }
      ]
    },
    "table_name": "tags",
    "id": 205
  },
  {
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "ExcerptPostId"
        },
        {
          "column": "WikiPostId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "TagName",
          "match_type": "精确匹配",
          "condition": "sample"
        }
      ]
    },
    "table_name": "tags",
    "id": 206
  },
  {
    "question": "Give the publisher ID of Star Trek.",
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "publisher_name",
          "match_type": "精确匹配",
          "condition": "Star Trek"
        }
      ]
    },
    "table_name": "publisher",
    "id": 207
  },
  {
    "question": "Calculate the average attribute value of all superheroes.",
    "SQL": "SELECT AVG(attribute_value) FROM hero_attribute",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "attribute_value",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "hero_attribute",
    "id": 208
  },
  {
    "question": "What is the total number of superheroes without full name?",
    "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "full_name",
          "match_type": "不为空",
          "condition": "IS NULL"
        }
      ]
    },
    "table_name": "superhero",
    "id": 209
  },
  {
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "SQL": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight_kg",
          "aggregate_function": "DIFFERENCE"
        }
      ],
      "filter": [
        {
          "column": "full_name",
          "match_type": "exact_match",
          "condition": "Emil Blonsky"
        },
        {
          "column": "full_name",
          "match_type": "exact_match",
          "condition": "Charles Chandler"
        }
      ]
    },
    "table_name": "superhero",
    "id": 210
  },
  {
    "question": "Calculate the average height for each superhero.",
    "SQL": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "height_cm",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "superhero",
    "id": 211
  },
  {
    "question": "Who is the tallest superhero?",
    "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [
        {
          "column": "height_cm",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "superhero",
    "id": 212
  },
  {
    "question": "What is the power ID of cryokinesis?",
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "power_name",
          "match_type": "精确匹配",
          "condition": "Cryokinesis"
        }
      ]
    },
    "table_name": "superpower",
    "id": 213
  },
  {
    "question": "Provide the name of superhero with superhero ID 294.",
    "SQL": "SELECT superhero_name FROM superhero WHERE id = 294",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "id",
          "match_type": "等于",
          "condition": "294"
        }
      ]
    },
    "table_name": "superhero",
    "id": 214
  },
  {
    "question": "List the full names of superheroes with missing weight.",
    "SQL": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "full_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "full_name",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "weight_kg",
          "match_type": "等于",
          "condition": "0"
        },
        {
          "column": "weight_kg",
          "match_type": "为空",
          "condition": ""
        }
      ]
    },
    "table_name": "superhero",
    "id": 215
  },
  {
    "question": "Name the tallest superhero.",
    "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height_cm",
          "match_type": "DESC",
          "condition": "LIMIT 1"
        }
      ]
    },
    "table_name": "superhero",
    "id": 216
  },
  {
    "question": "Name the superhero, otherwise known as Charles Chandler.",
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "full_name",
          "match_type": "精确匹配",
          "condition": "Charles Chandler"
        }
      ]
    },
    "table_name": "superhero",
    "id": 217
  },
  {
    "question": "What is the total number of superheroes that have John as their first name?",
    "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "full_name",
          "match_type": "模糊匹配",
          "condition": "John%"
        }
      ]
    },
    "table_name": "superhero",
    "id": 218
  },
  {
    "question": "Give the hero ID of superhero with the lowest attribute value.",
    "SQL": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "hero_id"
        }
      ],
      "measure": [
        {
          "column": "attribute_value",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "hero_attribute",
    "id": 219
  },
  {
    "question": "Provide the full name of the superhero named Alien.",
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "full_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "superhero_name",
          "match_type": "精确匹配",
          "condition": "Alien"
        }
      ]
    },
    "table_name": "superhero",
    "id": 220
  },
  {
    "question": "Which year was the first Singapore Grand Prix?",
    "SQL": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Singapore Grand Prix"
        }
      ]
    },
    "table_name": "races",
    "id": 221
  },
  {
    "question": "How many races were there in 2005? Name all the races in descending order.",
    "SQL": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2005"
        }
      ]
    },
    "table_name": "races",
    "id": 222
  },
  {
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "SQL": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": "最早记录的年月"
        }
      ]
    },
    "table_name": "races",
    "id": 223
  },
  {
    "question": "State the name and date of the last round of race in year 1999.",
    "SQL": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "1999"
        }
      ]
    },
    "table_name": "races",
    "id": 224
  },
  {
    "question": "Which year has the most number of races?",
    "SQL": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [
        {
          "column": "round",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "races",
    "id": 225
  },
  {
    "question": "Name the races in year 2017 that are not hosted in year 2000.",
    "SQL": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2017"
        },
        {
          "column": "name",
          "match_type": "不等于",
          "condition": "( SELECT name FROM races WHERE year = 2000 )"
        }
      ]
    },
    "table_name": "races",
    "id": 226
  },
  {
    "question": "How old is the youngest Japanese driver? What is his name?",
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "forename"
        },
        {
          "column": "surname"
        }
      ],
      "measure": [
        {
          "column": "STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob)",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "Japanese"
        }
      ]
    },
    "table_name": "drivers",
    "id": 227
  },
  {
    "question": "What's the location coordinates of Silverstone Circuit?",
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Silverstone Circuit"
        }
      ]
    },
    "table_name": "circuits",
    "id": 228
  },
  {
    "question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?",
    "SQL": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring')"
        }
      ]
    },
    "table_name": "circuits",
    "id": 229
  },
  {
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "circuitRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Marina Bay Street Circuit"
        }
      ]
    },
    "table_name": "circuits",
    "id": 230
  },
  {
    "question": "In which country can I find the circuit with the highest altitude?",
    "SQL": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "alt",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "circuits",
    "id": 231
  },
  {
    "question": "How many drivers don't have a code?",
    "SQL": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        },
        {
          "column": "code",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "code",
          "match_type": "IS NULL",
          "condition": ""
        }
      ]
    },
    "table_name": "drivers",
    "id": 232
  },
  {
    "question": "Which country is the oldest driver from?",
    "SQL": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "nationality"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "dob",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "drivers",
    "id": 233
  },
  {
    "question": "Please list the surnames of all the Italian drivers.",
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "surname"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "Italian"
        }
      ]
    },
    "table_name": "drivers",
    "id": 234
  },
  {
    "question": "Which website should I go to if I want to know more about Anthony Davidson?",
    "SQL": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "url"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "forename",
          "match_type": "精确匹配",
          "condition": "Anthony"
        },
        {
          "column": "surname",
          "match_type": "精确匹配",
          "condition": "Davidson"
        }
      ]
    },
    "table_name": "drivers",
    "id": 235
  },
  {
    "question": "What's Lewis Hamilton's reference name?",
    "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "forename",
          "match_type": "精确匹配",
          "condition": "Lewis"
        },
        {
          "column": "surname",
          "match_type": "精确匹配",
          "condition": "Hamilton"
        }
      ]
    },
    "table_name": "drivers",
    "id": 236
  },
  {
    "question": "How many circuits are there in Adelaide, Australia?",
    "SQL": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "circuitId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "Adelaide"
        },
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Australia"
        }
      ]
    },
    "table_name": "circuits",
    "id": 237
  },
  {
    "question": "Please list the location coordinates of the US circuits.",
    "SQL": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "circuits",
    "id": 238
  },
  {
    "question": "How many British drivers were born after 1980?",
    "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "British"
        },
        {
          "column": "dob",
          "match_type": "绝对时间",
          "condition": "1980-01-01"
        }
      ]
    },
    "table_name": "drivers",
    "id": 239
  },
  {
    "question": "List out the code for drivers who have nationality in America.",
    "SQL": "SELECT code FROM drivers WHERE Nationality = 'American'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "精确匹配",
          "condition": "American"
        }
      ]
    },
    "table_name": "drivers",
    "id": 240
  },
  {
    "question": "List out the Id number of races which were hold in 2009.",
    "SQL": "SELECT raceId FROM races WHERE year = 2009",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "raceId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2009"
        }
      ]
    },
    "table_name": "races",
    "id": 241
  },
  {
    "question": "How many driver participated in race ID number 18?",
    "SQL": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "raceId",
          "match_type": "等于",
          "condition": "18"
        }
      ]
    },
    "table_name": "driverStandings",
    "id": 242
  },
  {
    "question": "What is reference name of Robert Kubica?",
    "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "forename",
          "match_type": "精确匹配",
          "condition": "Robert"
        },
        {
          "column": "surname",
          "match_type": "精确匹配",
          "condition": "Kubica"
        }
      ]
    },
    "table_name": "drivers",
    "id": 243
  },
  {
    "question": "How many British drivers who were born in 1980?",
    "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "British"
        },
        {
          "column": "dob",
          "match_type": "精确匹配",
          "condition": "1980"
        }
      ]
    },
    "table_name": "drivers",
    "id": 244
  },
  {
    "question": "Please state the reference name of the oldest German driver.",
    "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "German"
        }
      ]
    },
    "table_name": "drivers",
    "id": 245
  },
  {
    "question": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.",
    "SQL": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "lap",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "lapTimes",
    "id": 246
  },
  {
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "SQL": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "IIF(time IS NOT NULL, 1, 0)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "statusId",
          "match_type": "等于",
          "condition": "2"
        },
        {
          "column": "raceID",
          "match_type": "在区间",
          "condition": [
            50,
            100
          ]
        }
      ]
    },
    "table_name": "results",
    "id": 247
  },
  {
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "location"
        },
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Austria"
        }
      ]
    },
    "table_name": "circuits",
    "id": 248
  },
  {
    "question": "What race number has the most finishers?",
    "SQL": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "raceId"
        }
      ],
      "measure": [
        {
          "column": "time IS NOT NULL",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "results",
    "id": 249
  },
  {
    "question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
    "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "forename"
        },
        {
          "column": "surname"
        },
        {
          "column": "dob"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "Austrian"
        },
        {
          "column": "dob",
          "match_type": "在区间",
          "condition": [
            "1981-01-01",
            "1991-12-31"
          ]
        }
      ]
    },
    "table_name": "drivers",
    "id": 250
  },
  {
    "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "forename"
        },
        {
          "column": "surname"
        },
        {
          "column": "url"
        },
        {
          "column": "dob"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "German"
        },
        {
          "column": "dob",
          "match_type": "在区间",
          "condition": [
            "1971-01-01",
            "1985-12-31"
          ]
        }
      ]
    },
    "table_name": "drivers",
    "id": 251
  },
  {
    "question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "country"
        },
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Hungaroring"
        }
      ]
    },
    "table_name": "circuits",
    "id": 252
  },
  {
    "question": "What is the annual average number of races held during the first 10 years of the 21st century?",
    "SQL": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "2000-01-01",
            "2010-12-31"
          ]
        }
      ]
    },
    "table_name": "races",
    "id": 253
  },
  {
    "question": "Which citizenship do the vast majority of the drivers hold?",
    "SQL": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "nationality"
        }
      ],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "drivers",
    "id": 254
  },
  {
    "question": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?",
    "SQL": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "wins",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "points",
          "match_type": "等于",
          "condition": "91"
        }
      ]
    },
    "table_name": "driverStandings",
    "id": 255
  },
  {
    "question": "What was the longest time a driver had ever spent at a pit stop?",
    "SQL": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "duration",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "pitStops",
    "id": 256
  },
  {
    "question": "Which player has the highest overall rating? Indicate the player's api id.",
    "SQL": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_api_id"
        }
      ],
      "measure": [
        {
          "column": "overall_rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Player_Attributes",
    "id": 257
  },
  {
    "question": "What is the height of the tallest player? Indicate his name.",
    "SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [
        {
          "column": "height",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Player",
    "id": 258
  },
  {
    "question": "What is the preferred foot when attacking of the player with the lowest potential?",
    "SQL": "SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "preferred_foot"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "potential",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 259
  },
  {
    "question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
    "SQL": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "overall_rating",
          "match_type": "在区间",
          "condition": [
            60,
            65
          ]
        },
        {
          "column": "defensive_work_rate",
          "match_type": "精确匹配",
          "condition": "low"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 260
  },
  {
    "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
    "SQL": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "crossing",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Player_Attributes",
    "id": 261
  },
  {
    "question": "What is the average height of players born between 1990 and 1995?",
    "SQL": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "height",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "birthday",
          "match_type": "在区间",
          "condition": [
            "1990-01-01",
            "1995-12-31"
          ]
        }
      ]
    },
    "table_name": "Player",
    "id": 262
  },
  {
    "question": "List the players' api id who had the highest above average overall ratings in 2010.",
    "SQL": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_api_id"
        }
      ],
      "measure": [
        {
          "column": "overall_rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "精确匹配",
          "condition": "2010"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 263
  },
  {
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "SQL": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "team_fifa_api_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "buildUpPlaySpeed",
          "match_type": "在区间",
          "condition": "(50, 60)"
        }
      ]
    },
    "table_name": "Team_Attributes",
    "id": 264
  },
  {
    "question": "What is the short name of the football team Queens Park Rangers?",
    "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "team_long_name",
          "match_type": "精确匹配",
          "condition": "Queens Park Rangers"
        }
      ]
    },
    "table_name": "Team",
    "id": 265
  },
  {
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "SQL": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birthday",
          "match_type": "绝对时间",
          "condition": [
            "1970-10-01",
            "1970-10-31"
          ]
        }
      ]
    },
    "table_name": "Player",
    "id": 266
  },
  {
    "question": "Please list player names which are higher than 180.",
    "SQL": "SELECT player_name FROM Player WHERE height > 180",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "table_name": "Player",
    "id": 267
  },
  {
    "question": "How many players were born after 1990?",
    "SQL": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "birthday",
          "match_type": "大于",
          "condition": "1990-01-01"
        }
      ]
    },
    "table_name": "Player",
    "id": 268
  },
  {
    "question": "How many players whose first names are Adam and weigh more than 170?",
    "SQL": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "170"
        },
        {
          "column": "player_name",
          "match_type": "模糊匹配",
          "condition": "Adam%"
        }
      ]
    },
    "table_name": "Player",
    "id": 269
  },
  {
    "question": "Which football player has the shortest height?",
    "SQL": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "player",
    "id": 270
  },
  {
    "question": "What's the long name for the team GEN?",
    "SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "team_long_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "team_short_name",
          "match_type": "精确匹配",
          "condition": "GEN"
        }
      ]
    },
    "table_name": "Team",
    "id": 271
  },
  {
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "SQL": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "player_name",
          "match_type": "精确匹配",
          "condition": "Aaron Lennon"
        },
        {
          "column": "player_name",
          "match_type": "精确匹配",
          "condition": "Abdelaziz Barrada"
        }
      ]
    },
    "table_name": "Player",
    "id": 272
  },
  {
    "question": "Which player is the tallest?",
    "SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [
        {
          "column": "height",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Player",
    "id": 273
  },
  {
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "SQL": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "player_api_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "preferred_foot",
          "match_type": "精确匹配",
          "condition": "left"
        },
        {
          "column": "attacking_work_rate",
          "match_type": "精确匹配",
          "condition": "low"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 274
  },
  {
    "question": "List down most tallest players' name.",
    "SQL": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rank",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Player",
    "id": 275
  },
  {
    "question": "List down the name of players who are 35 years old and above.",
    "SQL": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birthday",
          "match_type": "大于等于",
          "condition": "35"
        }
      ]
    },
    "table_name": "Player",
    "id": 276
  },
  {
    "question": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.",
    "SQL": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "table_name": "Player",
    "id": 277
  },
  {
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "SQL": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "birthday",
          "match_type": "大于",
          "condition": "1990"
        },
        {
          "column": "player_name",
          "match_type": "模糊匹配",
          "condition": "Aaron%"
        }
      ]
    },
    "table_name": "Player",
    "id": 278
  },
  {
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "SQL": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "jumping",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "id",
          "match_type": "等于",
          "condition": "6"
        },
        {
          "column": "id",
          "match_type": "等于",
          "condition": "23"
        }
      ]
    },
    "table_name": "Player_Attributes AS t1",
    "id": 279
  },
  {
    "question": "Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "SQL": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 5",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "preferred_foot",
          "match_type": "精确匹配",
          "condition": "right"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 280
  },
  {
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "SQL": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "t1.id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "t1.preferred_foot",
          "match_type": "精确匹配",
          "condition": "left"
        },
        {
          "column": "t1.crossing",
          "match_type": "等于",
          "condition": "( SELECT MAX(crossing) FROM Player_Attributes)"
        }
      ]
    },
    "table_name": "Player_Attributes AS t1",
    "id": 281
  },
  {
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Admission"
        }
      ],
      "measure": [
        {
          "column": "CASE WHEN Admission = '+' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        },
        {
          "column": "CASE WHEN Admission = '-' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "等于",
          "condition": "M"
        }
      ]
    },
    "table_name": "Patient",
    "id": 282
  },
  {
    "question": "What is the percentage of female patient were born after 1930?",
    "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        },
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "等于",
          "condition": "F"
        },
        {
          "column": "Birthday",
          "match_type": "大于",
          "condition": "1930-01-01"
        }
      ]
    },
    "table_name": "Patient",
    "id": 283
  },
  {
    "question": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Admission",
          "aggregate_function": "CUSTOM"
        }
      ],
      "filter": [
        {
          "column": "Birthday",
          "match_type": "在区间",
          "condition": [
            "1930-01-01",
            "1940-12-31"
          ]
        }
      ]
    },
    "table_name": "Patient",
    "id": 284
  },
  {
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "SQL": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Admission",
          "aggregate_function": "SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END)"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "SLE"
        }
      ]
    },
    "table_name": "Patient",
    "id": 285
  },
  {
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "SQL": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Description",
          "match_type": "绝对时间",
          "condition": "1997-01-01 至 1997-12-31"
        },
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        },
        {
          "column": "Admission",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "Patient",
    "id": 286
  },
  {
    "question": "What was the age of the youngest patient when they initially arrived at the hospital?",
    "SQL": "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "Patient",
    "id": 287
  },
  {
    "question": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?",
    "SQL": "SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ANA",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "3605340"
        },
        {
          "column": "Examination Date",
          "match_type": "绝对时间",
          "condition": [
            "1996-12-02",
            "1996-12-02"
          ]
        }
      ]
    },
    "table_name": "Examination",
    "id": 288
  },
  {
    "question": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?",
    "SQL": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Date"
        }
      ],
      "measure": [
        {
          "column": "`T-CHO`",
          "aggregate_function": "CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END"
        }
      ],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "2927464"
        },
        {
          "column": "Date",
          "match_type": "等于",
          "condition": "1995-09-04"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 289
  },
  {
    "question": "What was the gender of the first AORTITIS diagnosed patient?",
    "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "SEX"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "AORTITIS"
        },
        {
          "column": "`First Date`",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "Patient",
    "id": 290
  },
  {
    "question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "`Examination Date`",
          "match_type": "绝对时间",
          "condition": [
            "1997-01-01",
            "1997-12-31"
          ]
        },
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "Behcet"
        }
      ]
    },
    "table_name": "Examination",
    "id": 291
  },
  {
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "SQL": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "1987-07-06",
            "1996-01-31"
          ]
        },
        {
          "column": "GPT",
          "match_type": "大于",
          "condition": "30"
        },
        {
          "column": "ALB",
          "match_type": "小于",
          "condition": "4"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 292
  },
  {
    "question": "How many female patients born in 1964 were admitted to the hospital? List them by ID.",
    "SQL": "SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Birthday",
          "match_type": "等于",
          "condition": "1964"
        },
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        },
        {
          "column": "Admission",
          "match_type": "精确匹配",
          "condition": "+"
        }
      ]
    },
    "table_name": "Patient",
    "id": 293
  },
  {
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "SQL": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Thrombosis",
          "match_type": "等于",
          "condition": "2"
        },
        {
          "column": "`ANA Pattern`",
          "match_type": "精确匹配",
          "condition": "S"
        },
        {
          "column": "`aCL IgM`",
          "match_type": "大于",
          "condition": "(SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')"
        }
      ]
    },
    "table_name": "Examination",
    "id": 294
  },
  {
    "question": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?",
    "SQL": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "UA",
          "aggregate_function": "SUM"
        },
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UA",
          "match_type": "小于等于",
          "condition": "6.5"
        },
        {
          "column": "U-PRO",
          "match_type": "在区间",
          "condition": [
            "0",
            "30"
          ]
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 295
  },
  {
    "question": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Diagnosis",
          "aggregate_function": "SUM"
        },
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "BEHCET"
        },
        {
          "column": "First Date",
          "match_type": "绝对时间",
          "condition": [
            "1981-01-01",
            "1981-12-31"
          ]
        },
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "M"
        }
      ]
    },
    "table_name": "Patient",
    "id": 296
  },
  {
    "question": "What is the most common sign of patients with SLE disease?",
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Symptoms"
        }
      ],
      "measure": [
        {
          "column": "Symptoms",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "SLE"
        }
      ]
    },
    "table_name": "Examination",
    "id": 297
  },
  {
    "question": "When was the medical information on patient number 48473 first documented, and what disease did she have?",
    "SQL": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Diagnosis"
        }
      ],
      "measure": [
        {
          "column": "First Date",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "48473"
        }
      ]
    },
    "table_name": "Patient",
    "id": 298
  },
  {
    "question": "How many female patients were given an APS diagnosis?",
    "SQL": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        },
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "APS"
        }
      ]
    },
    "table_name": "Patient",
    "id": 299
  },
  {
    "question": "How many patients who underwent testing in 1997 had protein levels outside the normal range?",
    "SQL": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ALB",
          "match_type": "在区间",
          "condition": [
            "6.0",
            "8.5"
          ]
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "1997-01-01",
            "1997-12-31"
          ]
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 300
  },
  {
    "question": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Diagnosis",
          "aggregate_function": "SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) * 100 / COUNT(ID)"
        }
      ],
      "filter": [
        {
          "column": "Symptoms",
          "match_type": "精确匹配",
          "condition": "thrombocytopenia"
        }
      ]
    },
    "table_name": "Examination",
    "id": 301
  },
  {
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "SQL": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN SEX = 'F' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        },
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "RA"
        },
        {
          "column": "Birthday",
          "match_type": "精确匹配",
          "condition": "1980"
        }
      ]
    },
    "table_name": "Patient",
    "id": 302
  },
  {
    "question": "When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.",
    "SQL": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "48473"
        },
        {
          "column": "GOT",
          "match_type": "大于等于",
          "condition": "60"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 303
  },
  {
    "question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.",
    "SQL": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LDH",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LDH",
          "match_type": "小于",
          "condition": "500"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 304
  },
  {
    "question": "What is the examination date of the patient whose albumin is the highest in the normal range?",
    "SQL": "SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Date"
        }
      ],
      "measure": [
        {
          "column": "ALB",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "ALB",
          "match_type": "在区间",
          "condition": [
            3.5,
            5.5
          ]
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 305
  },
  {
    "question": "What is the most expensive item that was spent in support of club events?",
    "SQL": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "expense_description"
        }
      ],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "expense",
    "id": 306
  },
  {
    "question": "Give the location for \"Spring Budget Review\".",
    "SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "location"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "event_name",
          "match_type": "精确匹配",
          "condition": "Spring Budget Review"
        }
      ]
    },
    "table_name": "event",
    "id": 307
  },
  {
    "question": "What was the cost for the \"Posters\" on 2019/9/4?",
    "SQL": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "expense_description"
        },
        {
          "column": "expense_date"
        }
      ],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "精确匹配",
          "condition": "Posters"
        },
        {
          "column": "expense_date",
          "match_type": "绝对时间",
          "condition": "2019-09-04"
        }
      ]
    },
    "table_name": "expense",
    "id": 308
  },
  {
    "question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "category"
        }
      ],
      "measure": [
        {
          "column": "amount",
          "aggregate_function": "MAX"
        },
        {
          "column": "remaining",
          "aggregate_function": "none"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        }
      ]
    },
    "table_name": "budget",
    "id": 309
  },
  {
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "SQL": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "notes",
          "aggregate_function": "none"
        }
      ],
      "filter": [
        {
          "column": "source",
          "match_type": "精确匹配",
          "condition": "Fundraising"
        },
        {
          "column": "date_received",
          "match_type": "绝对时间",
          "condition": "2019-09-14"
        }
      ]
    },
    "table_name": "income",
    "id": 310
  },
  {
    "question": "How many majors are there in \"College of Humanities and Social Sciences\"?",
    "SQL": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "major_name",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "college",
          "match_type": "精确匹配",
          "condition": "College of Humanities and Social Sciences"
        }
      ]
    },
    "table_name": "major",
    "id": 311
  },
  {
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "SQL": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "phone"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Carlo"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Jacobs"
        }
      ]
    },
    "table_name": "member",
    "id": 312
  },
  {
    "question": "What is the total cost of the pizzas for all the events?",
    "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "精确匹配",
          "condition": "Pizza"
        }
      ]
    },
    "table_name": "expense",
    "id": 313
  },
  {
    "question": "How many cities are there in Orange County, Virginia?",
    "SQL": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "city",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "county",
          "match_type": "精确匹配",
          "condition": "Orange County"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Virginia"
        }
      ]
    },
    "table_name": "zip_code",
    "id": 314
  },
  {
    "question": "List all of the College of Humanities and Social Sciences' departments.",
    "SQL": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "department"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "college",
          "match_type": "精确匹配",
          "condition": "College of Humanities and Social Sciences"
        }
      ]
    },
    "table_name": "major",
    "id": 315
  },
  {
    "question": "How many student have the position of president?",
    "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "member_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "position",
          "match_type": "精确匹配",
          "condition": "President"
        }
      ]
    },
    "table_name": "member",
    "id": 316
  },
  {
    "question": "What is the highest amount of budget spend for an event?",
    "SQL": "SELECT MAX(spent) FROM budget",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "spent",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "budget",
    "id": 317
  },
  {
    "question": "How many meeting events were held in 2020?",
    "SQL": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "event_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Meeting"
        },
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2020-01-01",
            "2020-12-31"
          ]
        }
      ]
    },
    "table_name": "event",
    "id": 318
  },
  {
    "question": "What is the total amount of money spent for food?",
    "SQL": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "spent",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        }
      ]
    },
    "table_name": "budget",
    "id": 319
  },
  {
    "question": "What is the ratio between students majored in finance and physics?",
    "SQL": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "major_name",
          "aggregate_function": "SUM"
        },
        {
          "column": "major_name",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "major_name",
          "match_type": "精确匹配",
          "condition": "Finance"
        },
        {
          "column": "major_name",
          "match_type": "精确匹配",
          "condition": "Physics"
        }
      ]
    },
    "table_name": "major",
    "id": 320
  },
  {
    "question": "Provide the full name and email address of the Student_Club's Secretary.",
    "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "position",
          "match_type": "精确匹配",
          "condition": "Secretary"
        }
      ]
    },
    "table_name": "member",
    "id": 321
  },
  {
    "question": "On average, how much did the Student_Club spend on food for the typical event in the past?",
    "SQL": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "spent",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        },
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Closed"
        }
      ]
    },
    "table_name": "budget",
    "id": 322
  },
  {
    "question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'",
    "SQL": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type",
          "aggregate_function": "SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100 / COUNT(type)"
        }
      ],
      "filter": [
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2019-01-01",
            "2019-12-31"
          ]
        },
        {
          "column": "type",
          "match_type": "模糊匹配",
          "condition": "Community Service"
        }
      ]
    },
    "table_name": "event",
    "id": 323
  },
  {
    "question": "What is the most popular size of t-shirt ordered by the club members?",
    "SQL": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "t_shirt_size"
        }
      ],
      "measure": [
        {
          "column": "t_shirt_size",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "member",
    "id": 324
  },
  {
    "question": "Among the budgets for Food, which one has the highest budgeted amount?",
    "SQL": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "budget_id"
        }
      ],
      "measure": [
        {
          "column": "amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        }
      ]
    },
    "table_name": "budget",
    "id": 325
  },
  {
    "question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?",
    "SQL": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "budget_id"
        }
      ],
      "measure": [
        {
          "column": "amount",
          "aggregate_function": "DESC"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Advertisement"
        }
      ]
    },
    "table_name": "budget",
    "id": 326
  },
  {
    "question": "Calculate the total cost spent for Parking in the list.",
    "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "精确匹配",
          "condition": "Parking"
        }
      ]
    },
    "table_name": "expense",
    "id": 327
  },
  {
    "question": "Mention the total expense used on 8/20/2019.",
    "SQL": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_date",
          "match_type": "绝对时间",
          "condition": "2019-08-20"
        }
      ]
    },
    "table_name": "expense",
    "id": 328
  },
  {
    "question": "How many income are received with an amount of 50?",
    "SQL": "SELECT COUNT(income_id) FROM income WHERE amount = 50",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "income_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "amount",
          "match_type": "等于",
          "condition": "50"
        }
      ]
    },
    "table_name": "income",
    "id": 329
  },
  {
    "question": "Among the members, how many of them have an extra large t-shirt size?",
    "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "member_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "position",
          "match_type": "精确匹配",
          "condition": "Member"
        },
        {
          "column": "t_shirt_size",
          "match_type": "精确匹配",
          "condition": "X-Large"
        }
      ]
    },
    "table_name": "member",
    "id": 330
  },
  {
    "question": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?",
    "SQL": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "major_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "department",
          "match_type": "精确匹配",
          "condition": "School of Applied Sciences, Technology and Education"
        },
        {
          "column": "college",
          "match_type": "精确匹配",
          "condition": "College of Agriculture and Applied Sciences"
        }
      ]
    },
    "table_name": "major",
    "id": 331
  },
  {
    "question": "Which countries have zip codes with post office boxes?",
    "SQL": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "county"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "PO Box"
        },
        {
          "column": "county",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "zip_code",
    "id": 332
  },
  {
    "question": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?",
    "SQL": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "zip_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "PO Box"
        },
        {
          "column": "county",
          "match_type": "精确匹配",
          "condition": "San Juan Municipio"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Puerto Rico"
        }
      ]
    },
    "table_name": "zip_code",
    "id": 333
  },
  {
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "event_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Game"
        },
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2019-03-15",
            "2020-03-20"
          ]
        },
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "Closed"
        }
      ]
    },
    "table_name": "event",
    "id": 334
  },
  {
    "question": "What is the percentage of the events that went over budget?",
    "SQL": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "remaining",
          "aggregate_function": "SUM"
        },
        {
          "column": "budget_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "remaining",
          "match_type": "小于",
          "condition": "0"
        }
      ]
    },
    "table_name": "budget",
    "id": 335
  },
  {
    "question": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.",
    "SQL": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "event_id"
        },
        {
          "column": "location"
        },
        {
          "column": "status"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2019-11-01",
            "2020-03-31"
          ]
        }
      ]
    },
    "table_name": "event",
    "id": 336
  },
  {
    "question": "List the expenses that spend more than fifty dollars on average.",
    "SQL": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "expense_description"
        }
      ],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "cost",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "table_name": "expense",
    "id": 337
  },
  {
    "question": "Find the full name of members whose t-shirt size is extra large.",
    "SQL": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "t_shirt_size",
          "match_type": "精确匹配",
          "condition": "X-Large"
        }
      ]
    },
    "table_name": "member",
    "id": 338
  },
  {
    "question": "Calculate the percentage of zip codes that are PO boxes.",
    "SQL": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "zip_code",
          "aggregate_function": "COUNT"
        },
        {
          "column": "type",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "PO Box"
        }
      ]
    },
    "table_name": "zip_code",
    "id": 339
  },
  {
    "question": "How many gas stations in CZE has Premium gas?",
    "SQL": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GasStationID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Premium"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 340
  },
  {
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Currency",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Currency",
          "match_type": "精确匹配",
          "condition": "EUR"
        },
        {
          "column": "Currency",
          "match_type": "精确匹配",
          "condition": "CZK"
        }
      ]
    },
    "table_name": "customers",
    "id": 341
  },
  {
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Consumption",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "CustomerID",
          "match_type": "等于",
          "condition": "6"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2013-08-01",
            "2013-11-30"
          ]
        }
      ]
    },
    "table_name": "yearmonth",
    "id": 342
  },
  {
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "SQL": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Country",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Discount"
        },
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "SVK"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 343
  },
  {
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "SQL": "SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) FROM customers WHERE Segment = 'SME'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "SME"
        }
      ]
    },
    "table_name": "customers",
    "id": 344
  },
  {
    "question": "What percentage of KAM customers pay in euros?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CustomerID",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Currency",
          "aggregate_function": "SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)"
        }
      ],
      "filter": [
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "KAM"
        }
      ]
    },
    "table_name": "customers",
    "id": 345
  },
  {
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "SQL": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CustomerID",
          "aggregate_function": "COUNT"
        },
        {
          "column": "IIF(Consumption > 528.3, 1, 0)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "精确匹配",
          "condition": "201202"
        },
        {
          "column": "Consumption",
          "match_type": "大于",
          "condition": 528.3
        }
      ]
    },
    "table_name": "yearmonth",
    "id": 346
  },
  {
    "question": "What percentage of Slovakian gas stations are premium?",
    "SQL": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Segment",
          "aggregate_function": "SUM"
        },
        {
          "column": "GasStationID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "SVK"
        },
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Premium"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 347
  },
  {
    "question": "What is the highest monthly consumption in the year 2012?",
    "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [
        {
          "column": "SUBSTR(Date, 5, 2)"
        }
      ],
      "measure": [
        {
          "column": "Consumption",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "精确匹配",
          "condition": "2012"
        }
      ]
    },
    "table_name": "yearmonth",
    "id": 348
  },
  {
    "question": "What is the average total price of the transactions taken place in January, 2012?",
    "SQL": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Amount",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2012-01-01",
            "2012-01-31"
          ]
        }
      ]
    },
    "table_name": "transactions_1k",
    "id": 349
  },
  {
    "question": "Which customer paid the most in 2012/8/25?",
    "SQL": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [
        {
          "column": "CustomerID"
        }
      ],
      "measure": [
        {
          "column": "Price",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "精确匹配",
          "condition": "2012-08-25"
        }
      ]
    },
    "table_name": "transactions_1k",
    "id": 350
  },
  {
    "question": "Which gas station has the highest amount of revenue?",
    "SQL": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [
        {
          "column": "GasStationID"
        }
      ],
      "measure": [
        {
          "column": "Price",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "transactions_1k",
    "id": 351
  },
  {
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "SQL": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [
        {
          "column": "Country"
        },
        {
          "column": "Segment"
        }
      ],
      "measure": [
        {
          "column": "1",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "SVK"
        },
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Premium"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 352
  }
]