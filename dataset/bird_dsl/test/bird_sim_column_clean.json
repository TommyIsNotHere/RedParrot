[
  {
    "question": "What is the highest eligible free rate for K-12 students in the schools with a high school type in Alameda County?",
    "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' AND `School Type` = 'High Schools (Public)' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "db_id": "california_schools",
    "table_description": "Free and Reduced Price Meals (FRPM) data for schools in California",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "`Free Meal Count (K-12)` / `Enrollment (K-12)`",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "`County Name`",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "`School Type`",
          "match_type": "精确匹配",
          "condition": "High Schools (Public)"
        }
      ]
    },
    "table_name": "frpm",
    "id": 706
  },
  {
    "question": "In Alameda how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
    "SQL": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Alameda' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)` < 700",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CDSCode",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "`County Name`",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "`Free Meal Count (K-12)`",
          "match_type": "大于",
          "condition": 500
        },
        {
          "column": "`FRPM Count (K-12)`",
          "match_type": "小于",
          "condition": 700
        }
      ]
    },
    "table_name": "frpm",
    "id": 707
  },
  {
    "question": "Which school in Alameda has the highest number of test takers?",
    "SQL": "SELECT sname FROM satscores WHERE cname = 'Alameda' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "sname"
        }
      ],
      "measure": [
        {
          "column": "NumTstTakr",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cname",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "sname",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "satscores",
    "id": 708
  },
  {
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980, excluding charter schools?",
    "SQL": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980' AND Charter = 0",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California, including their status, location, and operational dates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DOC",
          "match_type": "等于",
          "condition": "52"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "OpenDate",
          "match_type": "绝对时间",
          "condition": [
            "1980-01-01",
            "1980-12-31"
          ]
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "schools",
    "id": 709
  },
  {
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools that are not virtual?",
    "SQL": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange' AND Virtual = 0",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their status, county, district, and other attributes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END)",
          "aggregate_function": "CAST"
        }
      ],
      "filter": [
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Merged"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Orange"
        },
        {
          "column": "Virtual",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "schools",
    "id": 710
  },
  {
    "question": "Which different county has the most number of closed schools with a specific charter status? Please provide the name of each school as well as the closure date.",
    "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' AND Charter = 1 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL AND Charter = 1",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California, including their status, county, district, and other details.",
    "config": {
      "dimension": [
        {
          "column": "County"
        },
        {
          "column": "School"
        },
        {
          "column": "ClosedDate"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "StatusType",
          "match_type": "等于",
          "condition": "Closed"
        },
        {
          "column": "school",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "County",
          "match_type": "等于",
          "condition": "( SELECT County FROM schools WHERE StatusType = 'Closed' AND Charter = 1 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 )"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": 1
        }
      ]
    },
    "table_name": "schools",
    "id": 711
  },
  {
    "question": "Please specify all of the schools and their related mailing zip codes that are under the administration of someone whose last name is Thompson.",
    "SQL": "SELECT School, MailZip FROM schools WHERE AdmLName1 = 'Thompson'",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their administrators and contact details.",
    "config": {
      "dimension": [
        {
          "column": "School"
        },
        {
          "column": "MailZip"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AdmFName1",
          "match_type": "精确匹配",
          "condition": "Avetik"
        },
        {
          "column": "AdmLName1",
          "match_type": "精确匹配",
          "condition": "Thompson"
        }
      ]
    },
    "table_name": "schools",
    "id": 712
  },
  {
    "question": "Of the schools with a mailing city address in Oakland, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
    "SQL": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailCity = 'Oakland'",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their location details such as county, city, and state.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        },
        {
          "column": "SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "MailCity",
          "match_type": "精确匹配",
          "condition": "Oakland"
        }
      ]
    },
    "table_name": "schools",
    "id": 713
  },
  {
    "question": "Of all the schools with a mailing state address in California, how many are active in Alameda county?",
    "SQL": "SELECT COUNT(CDSCode) FROM schools WHERE County = 'Alameda' AND MailState = 'CA' AND StatusType = 'Active'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CDSCode",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "MailState",
          "match_type": "精确匹配",
          "condition": "CA"
        },
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Active"
        }
      ]
    },
    "table_name": "schools",
    "id": 714
  },
  {
    "question": "What is the phone number and extension number for the school named 'Community School for Creative Education'? Indicate the school's name.",
    "SQL": "SELECT Phone, Ext, School FROM schools WHERE School = 'Community School for Creative Education'",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California, including their names, addresses, contact details, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "School"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "School",
          "match_type": "精确匹配",
          "condition": "Community School for Creative Education"
        }
      ]
    },
    "table_name": "schools",
    "id": 715
  },
  {
    "question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez, where the school status is active?",
    "SQL": "SELECT Website FROM schools WHERE ((AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')) AND StatusType = 'Active'",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their administrators, status, and websites.",
    "config": {
      "dimension": [
        {
          "column": "Website"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AdmFName1",
          "match_type": "精确匹配",
          "condition": "Mike"
        },
        {
          "column": "AdmLName1",
          "match_type": "精确匹配",
          "condition": "Larson"
        },
        {
          "column": "AdmFName1",
          "match_type": "精确匹配",
          "condition": "Dante"
        },
        {
          "column": "AdmLName1",
          "match_type": "精确匹配",
          "condition": "Alvarez"
        },
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Active"
        }
      ]
    },
    "table_name": "schools",
    "id": 716
  },
  {
    "question": "What are the websites for all the partially virtual chartered schools located in Alameda?",
    "SQL": "SELECT Website FROM schools WHERE County = 'Alameda' AND Virtual = 'P' AND Charter = 1",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California.",
    "config": {
      "dimension": [
        {
          "column": "Website"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "Virtual",
          "match_type": "精确匹配",
          "condition": "P"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": 1
        }
      ]
    },
    "table_name": "schools",
    "id": 717
  },
  {
    "question": "How many chartered schools located in Alameda County are owned by the Elementary School District?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND County = 'Alameda'",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DOC",
          "match_type": "等于",
          "condition": "52"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        }
      ]
    },
    "table_name": "schools",
    "id": 718
  },
  {
    "question": "In chartered schools with charter number 00D2, what are the names of all the administrators located in Oakland? Include the name of the school and the city to which it belongs",
    "SQL": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2' AND City = 'Oakland'",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California, including their charter status, charter number, and city.",
    "config": {
      "dimension": [
        {
          "column": "School"
        },
        {
          "column": "City"
        }
      ],
      "measure": [
        {
          "column": "AdmFName1",
          "aggregate_function": "None"
        },
        {
          "column": "AdmLName1",
          "aggregate_function": "None"
        }
      ],
      "filter": [
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "CharterNum",
          "match_type": "精确匹配",
          "condition": "00D2"
        },
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Oakland"
        }
      ]
    },
    "table_name": "schools",
    "id": 719
  },
  {
    "question": "What is the total number of schools with a mailing city in Oakland belonging to the charter number 00D4?",
    "SQL": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Oakland'",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their charter status, mailing addresses, and contact details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CharterNum",
          "match_type": "精确匹配",
          "condition": "00D4"
        },
        {
          "column": "MailCity",
          "match_type": "精确匹配",
          "condition": "Oakland"
        }
      ]
    },
    "table_name": "schools",
    "id": 720
  },
  {
    "question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding, excluding schools with a status of 'Closed'?",
    "SQL": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1 AND StatusType != 'Closed'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "FundingType",
          "aggregate_function": "CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END)"
        }
      ],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Santa Clara"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": 1
        },
        {
          "column": "StatusType",
          "match_type": "不等于",
          "condition": "Closed"
        }
      ]
    },
    "table_name": "schools",
    "id": 721
  },
  {
    "question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the city of Hayward?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND City = 'Hayward' AND FundingType = 'Directly funded'",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "OpenDate",
          "match_type": "绝对时间",
          "condition": [
            "2000-01-01",
            "2005-12-31"
          ]
        },
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Hayward"
        },
        {
          "column": "FundingType",
          "match_type": "精确匹配",
          "condition": "Directly funded"
        }
      ]
    },
    "table_name": "schools",
    "id": 722
  },
  {
    "question": "What is the total amount of Community College District closure in 1989 in Alameda County?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND County = 'Alameda' AND DOCType = 'Community College District'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ClosedDate",
          "match_type": "绝对时间",
          "condition": [
            "1989-01-01",
            "1989-12-31"
          ]
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "DOCType",
          "match_type": "精确匹配",
          "condition": "Community College District"
        }
      ]
    },
    "table_name": "schools",
    "id": 723
  },
  {
    "question": "Which county reported the most number of school closures in the 1980s with school ownership code belonging to County Office of Education (COE)?",
    "SQL": "SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOCType = 'County Office of Education (COE)' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California, including their status, ownership, and closure dates.",
    "config": {
      "dimension": [
        {
          "column": "County"
        }
      ],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ClosedDate",
          "match_type": "绝对时间",
          "condition": [
            "1980-01-01",
            "1989-12-31"
          ]
        },
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Closed"
        },
        {
          "column": "SOCType",
          "match_type": "精确匹配",
          "condition": "County Office of Education (COE)"
        }
      ]
    },
    "table_name": "schools",
    "id": 724
  },
  {
    "question": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code of 65 and are part of the State Special Schools.",
    "SQL": "SELECT NCESDist FROM schools WHERE SOC = 65",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their NCES district ID, school ownership code, and other details.",
    "config": {
      "dimension": [
        {
          "column": "NCESDist"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SOC",
          "match_type": "等于",
          "condition": "65"
        }
      ]
    },
    "table_name": "schools",
    "id": 725
  },
  {
    "question": "How many active and closed District Community Day Schools are there in the city of Hayward?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND City = 'Hayward'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "StatusType",
          "match_type": "等于",
          "condition": "Closed"
        },
        {
          "column": "StatusType",
          "match_type": "等于",
          "condition": "Active"
        },
        {
          "column": "SOC",
          "match_type": "等于",
          "condition": 69
        },
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Hayward"
        }
      ]
    },
    "table_name": "schools",
    "id": 726
  },
  {
    "question": "What is the most common type of grade span served in the county of Alameda?",
    "SQL": "SELECT GSserved FROM schools WHERE County = 'Alameda' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "GSserved"
        }
      ],
      "measure": [
        {
          "column": "GSserved",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        }
      ]
    },
    "table_name": "schools",
    "id": 727
  },
  {
    "question": "Between San Diego and Alameda, which county offers the most number of schools that do not have a physical building? Indicate the amount.",
    "SQL": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Alameda') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their location, status, and whether they have a physical building.",
    "config": {
      "dimension": [
        {
          "column": "County"
        }
      ],
      "measure": [
        {
          "column": "Virtual",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "San Diego"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "Virtual",
          "match_type": "精确匹配",
          "condition": "F"
        }
      ]
    },
    "table_name": "schools",
    "id": 728
  },
  {
    "question": "What is the grade span offered in the school located in Oakland with the highest longitude?",
    "SQL": "SELECT GSoffered FROM schools WHERE City = 'Oakland' ORDER BY ABS(Longitude) DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "GSoffered"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Oakland"
        },
        {
          "column": "Longitude",
          "match_type": "最大值",
          "condition": ""
        }
      ]
    },
    "table_name": "schools",
    "id": 729
  },
  {
    "question": "What is the administrator's last name that oversees the school with the name 'Envision Academy for Arts & Technology'? Indicate the district, the county where the school is situated, and the name of the school.",
    "SQL": "SELECT AdmLName1, District, County, School FROM schools WHERE School = 'Envision Academy for Arts & Technology'",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their administrators, districts, counties, and other details.",
    "config": {
      "dimension": [
        {
          "column": "AdmLName1"
        },
        {
          "column": "District"
        },
        {
          "column": "County"
        },
        {
          "column": "School"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "School",
          "match_type": "精确匹配",
          "condition": "Envision Academy for Arts & Technology"
        }
      ]
    },
    "table_name": "schools",
    "id": 730
  },
  {
    "question": "Which year, 1995 or 1996, had a higher average unemployment ratio for districts with an unemployment ratio greater than 3% in 1995?",
    "SQL": "SELECT DISTINCT IIF(AVG(CASE WHEN A12 > 3 THEN A13 END) > AVG(CASE WHEN A12 > 3 THEN A12 END), '1996', '1995') FROM district",
    "db_id": "financial",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "A13",
          "aggregate_function": "AVG"
        },
        {
          "column": "A12",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "A12",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "table_name": "district",
    "id": 731
  },
  {
    "question": "List out the accounts who have the earliest trading date in April 1995?",
    "SQL": "SELECT account_id FROM trans WHERE STRFTIME('%Y-%m', date) = '1995-04' ORDER BY date ASC LIMIT 1",
    "db_id": "financial",
    "config": {
      "dimension": [
        {
          "column": "account_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "1995-04-01",
            "1995-04-30"
          ]
        }
      ]
    },
    "table_name": "trans",
    "id": 732
  },
  {
    "question": "What is the percentage of loan amount that has been fully paid within the last year.",
    "SQL": "SELECT (CAST(SUM(CASE WHEN status = 'A' AND date >= '1997-01-01' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "(CASE WHEN status = 'A' AND date >= '1997-01-01' THEN amount ELSE 0 END)",
          "aggregate_function": "SUM"
        },
        {
          "column": "amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "1997-01-01",
            null
          ]
        },
        {
          "column": "status",
          "match_type": "等于",
          "condition": "A"
        }
      ]
    },
    "table_name": "loan",
    "id": 733
  },
  {
    "question": "For loan amounts less than or equal to USD30,000, what is the percentage of accounts that are still running with no issue.",
    "SQL": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount <= 30000",
    "db_id": "financial",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "status = 'C'",
          "aggregate_function": "SUM"
        },
        {
          "column": "account_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "amount",
          "match_type": "小于等于",
          "condition": "30000"
        }
      ]
    },
    "table_name": "loan",
    "id": 734
  },
  {
    "question": "List the account IDs with monthly issuance of statements before June 1, 1996.",
    "SQL": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE' AND date < '1996-06-01'",
    "db_id": "financial",
    "config": {
      "dimension": [
        {
          "column": "account_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Frequency",
          "match_type": "精确匹配",
          "condition": "POPLATEK MESICNE"
        },
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "",
            "1996-06-01"
          ]
        }
      ]
    },
    "table_name": "account",
    "id": 735
  },
  {
    "question": "Which districts in central Bohemia have the highest unemployment rate? List their branch location and district name.",
    "SQL": "SELECT district_id, A2 FROM district WHERE A3 = 'central Bohemia' ORDER BY A13 DESC LIMIT 1",
    "db_id": "financial",
    "table_description": "Table containing district information including branch location, district name, and unemployment rate.",
    "config": {
      "dimension": [
        {
          "column": "district_id"
        },
        {
          "column": "A2"
        }
      ],
      "measure": [
        {
          "column": "A13",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "A3",
          "match_type": "精确匹配",
          "condition": "central Bohemia"
        }
      ]
    },
    "table_name": "district",
    "id": 736
  },
  {
    "question": "How many percent of 'Gold' cards were issued in the last quarter of 1997?",
    "SQL": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y-%m', issued) BETWEEN '1997-10' AND '1997-12') AS REAL) * 100 / COUNT(card_id) FROM card",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type = 'gold' AND STRFTIME('%Y-%m', issued) BETWEEN '1997-10' AND '1997-12'",
          "aggregate_function": "SUM"
        },
        {
          "column": "card_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "gold"
        },
        {
          "column": "issued",
          "match_type": "绝对时间",
          "condition": [
            "1997-10-01",
            "1997-12-31"
          ]
        }
      ]
    },
    "table_name": "card",
    "id": 737
  },
  {
    "question": "How many credit card withdrawals were recorded for the account with ID 1?",
    "SQL": "SELECT COUNT(account_id) FROM trans WHERE account_id = 1 AND operation = 'VYBER KARTOU'",
    "db_id": "financial",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "account_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "account_id",
          "match_type": "等于",
          "condition": 1
        },
        {
          "column": "operation",
          "match_type": "精确匹配",
          "condition": "VYBER KARTOU"
        }
      ]
    },
    "table_name": "trans",
    "id": 738
  },
  {
    "question": "What was the difference in the number of crimes committed in Central and North Bohemia in 1996?",
    "SQL": "SELECT SUM(IIF(A3 = 'central Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district",
    "db_id": "financial",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "A16",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "A3",
          "match_type": "精确匹配",
          "condition": "central Bohemia"
        },
        {
          "column": "A3",
          "match_type": "精确匹配",
          "condition": "north Bohemia"
        },
        {
          "column": "year",
          "match_type": "等于",
          "condition": "1996"
        }
      ]
    },
    "table_name": "district",
    "id": 739
  },
  {
    "question": "How many owner and disponent dispositions are there for clients with IDs between 1 and 5?",
    "SQL": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE client_id BETWEEN 1 AND 5",
    "db_id": "financial",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type",
          "aggregate_function": "SUM"
        },
        {
          "column": "type",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "client_id",
          "match_type": "在区间",
          "condition": [
            1,
            5
          ]
        }
      ]
    },
    "table_name": "disp",
    "id": 740
  },
  {
    "question": "What is the most common bond type for molecules with an ID of TR001?",
    "SQL": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond WHERE molecule_id = 'TR001' GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "bond_type"
        }
      ],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        }
      ]
    },
    "table_name": "bond",
    "id": 741
  },
  {
    "question": "How many double type bonds are there?",
    "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '='",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 742
  },
  {
    "question": "How many distinct molecules have no chlorine atoms?",
    "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM atom AS T WHERE T.element <> 'cl'",
    "db_id": "toxicology",
    "table_description": "The atom table contains information about atoms in different molecules.",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "T.element",
          "match_type": "不等于",
          "condition": "cl"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 743
  },
  {
    "question": "Of the first 100 molecules in number order, how many have a label of '-'?",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '-'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR000",
            "TR099"
          ]
        },
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 744
  },
  {
    "question": "Identify by their ID the molecules that contain chlorine.",
    "SQL": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'cl'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "cl"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 745
  },
  {
    "question": "Please list top three elements of the toxicology of the molecule TR001 in alphabetical order.",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001' ORDER BY T.element LIMIT 3",
    "db_id": "toxicology",
    "table_description": "The table 'atom' contains information about atoms in different molecules, including their IDs, molecule IDs, and elements.",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 746
  },
  {
    "question": "What are the atoms that are bonded in the molecule TR001 with the bond type of '='?",
    "SQL": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_type = '='",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "SUBSTR(T.bond_id, 1, 7)"
        },
        {
          "column": "T.molecule_id || SUBSTR(T.bond_id, 8, 2)"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        },
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 747
  },
  {
    "question": "What is the difference between the number of toxic molecules and those that are non-toxic?",
    "SQL": "SELECT COUNT(CASE WHEN T.label = 'T' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = 'N' THEN T.molecule_id ELSE NULL END) AS diff_tox_nontox FROM molecule t",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.label",
          "match_type": "等于",
          "condition": "T"
        },
        {
          "column": "T.label",
          "match_type": "等于",
          "condition": "N"
        }
      ]
    },
    "table_name": "molecule AS t",
    "id": 748
  },
  {
    "question": "What are the atom IDs of the bond TR000_2_4?",
    "SQL": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_4'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.bond_id",
          "match_type": "精确匹配",
          "condition": "TR000_2_4"
        }
      ]
    },
    "table_name": "connected AS T",
    "id": 749
  },
  {
    "question": "What are the bond IDs that have the same atom ID 3 of TR000_2?",
    "SQL": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id = 'TR000_2' AND T.atom_id2 = 'TR000_3'",
    "db_id": "toxicology",
    "table_description": "Table 'connected' contains information about connections between atoms in molecules, including atom IDs and bond IDs.",
    "config": {
      "dimension": [
        {
          "column": "T.bond_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.atom_id",
          "match_type": "精确匹配",
          "condition": "TR000_2"
        },
        {
          "column": "T.atom_id2",
          "match_type": "精确匹配",
          "condition": "TR000_3"
        }
      ]
    },
    "table_name": "connected AS T",
    "id": 750
  },
  {
    "question": "Please list top five molecules that have single bonds in alphabetical order.",
    "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '-' ORDER BY T.molecule_id LIMIT 5",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 751
  },
  {
    "question": "What is the percentage of double bonds in the molecule TR001? Please provide your answer as a percentage with five decimal places.",
    "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR001'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5)"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        },
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 752
  },
  {
    "question": "What is the percentage of molecules labeled as non-carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ROUND(CAST(COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3)",
          "aggregate_function": "ROUND(CAST(COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3)"
        }
      ],
      "filter": []
    },
    "table_name": "molecule AS t",
    "id": 753
  },
  {
    "question": "What is the percentage of atoms that are hydrogen in molecule TR206?",
    "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'H' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ROUND(CAST(COUNT(CASE WHEN T.element = 'H' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4)",
          "aggregate_function": "ROUND"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "H"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 754
  },
  {
    "question": "What is the type of bond that molecule TR001 has when involved in any bonds?",
    "SQL": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR001'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.bond_type"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 755
  },
  {
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR000 and state whether or not this molecule is carcinogenic?",
    "SQL": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR000' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "bond_type"
        }
      ],
      "measure": [
        {
          "column": "molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "bond AS T1",
    "id": 756
  },
  {
    "question": "How many molecules have a double bond type?",
    "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '='",
    "db_id": "toxicology",
    "table_description": "The bond table contains information about the bonds between atoms in molecules.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 757
  },
  {
    "question": "How many connections does the atom TR000_2 have?",
    "SQL": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE T.atom_id = 'TR000_2'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.atom_id",
          "match_type": "精确匹配",
          "condition": "TR000_2"
        }
      ]
    },
    "table_name": "connected AS T",
    "id": 758
  },
  {
    "question": "List all the elements of the toxicology of the molecule containing 'TR'.",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id LIKE '%TR%'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "模糊匹配",
          "condition": "%TR%"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 759
  },
  {
    "question": "How many of the molecules have a label that is not '+'?",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label != '+'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "label",
          "match_type": "不等于",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 760
  },
  {
    "question": "Calculate the total atoms consisting of the element carbon or chlorine.",
    "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'cl'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "'c'"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "'cl'"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 761
  },
  {
    "question": "What are the labels for TR000, TR001 and TR004?",
    "SQL": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR004')",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "molecule_id"
        },
        {
          "column": "T.label"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "['TR000', 'TR001', 'TR004']"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 762
  },
  {
    "question": "List down the molecule id for molecules that are not labeled as positive.",
    "SQL": "SELECT T.molecule_id FROM molecule AS T WHERE T.label != '+'",
    "db_id": "toxicology",
    "table_description": "The 'molecule' table contains information about different molecules including their IDs and labels indicating whether they are carcinogenic or not.",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.label",
          "match_type": "不等于",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 763
  },
  {
    "question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR020.",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR020' AND T.label = '+'",
    "db_id": "toxicology",
    "table_description": "The molecule table contains information about different molecules, including their IDs and toxicity labels.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR000",
            "TR020"
          ]
        },
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 764
  },
  {
    "question": "List the toxicology elements associated with molecule TR000.",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 765
  },
  {
    "question": "Give me the molecule ID where the bond type is related to single bonds.",
    "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type LIKE '%-'%",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "模糊匹配",
          "condition": "%-%"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 766
  },
  {
    "question": "Among all chemical compounds identified in the database, what percent of compounds form a double-bond.",
    "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.bond_id",
          "aggregate_function": "CUSTOM"
        }
      ],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "等于",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 767
  },
  {
    "question": "Among all chemical compounds that contain molecule TR048, identify the percent that form a double-bond.",
    "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR048'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        },
        {
          "column": "CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR048"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 768
  },
  {
    "question": "Is molecule TR002 carcinogenic?",
    "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR002'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.label"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR002"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 769
  },
  {
    "question": "Which toxic element can be found in molecules with an element of 'cl'?",
    "SQL": "SELECT DISTINCT T.molecule_id FROM atom AS T WHERE T.element = 'cl'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "cl"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 770
  },
  {
    "question": "How many chemical compounds in the database have a negative label.",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
    "db_id": "toxicology",
    "table_description": "The 'molecule' table contains information about chemical compounds, including their IDs and labels indicating toxicity.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 771
  },
  {
    "question": "Identify the atoms belong to the molecule with ID between TR000 to TR030 that contain the element chlorine.",
    "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.element = 'cl'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR000",
            "TR030"
          ]
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "cl"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 772
  },
  {
    "question": "What is the label for molecule TR002?",
    "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR002'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "T.label"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR002"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 773
  },
  {
    "question": "What elements are present in the atoms of TR186?",
    "SQL": "SELECT T.element FROM atom AS T WHERE T.molecule_id = 'TR186'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR186"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 774
  },
  {
    "question": "What is the bond type for the molecule with ID TR000?",
    "SQL": "SELECT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "bond_type"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 775
  },
  {
    "question": "How many atoms of element cl belong to molecule id TR001?",
    "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001' AND T.element = 'cl'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "cl"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 776
  },
  {
    "question": "How many bonds of type double are there in the list?",
    "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '='",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 777
  },
  {
    "question": "What is the element of toxicology for the atom with the molecule ID of TR000?",
    "SQL": "SELECT T.element FROM atom AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "table_description": "The atom table contains information about atoms, including their IDs, molecule IDs, and elements.",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 778
  },
  {
    "question": "Is molecule TR001 carcinogenic or not?",
    "SQL": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR001'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "label",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 779
  },
  {
    "question": "Find the percentage of atoms with double bond.",
    "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        },
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS t",
    "id": 780
  },
  {
    "question": "How many molecules have the label '-'?",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 781
  },
  {
    "question": "Among the molecules between TR004 to TR010, how many of them have double bonds?",
    "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '='",
    "db_id": "toxicology",
    "table_description": "The bond table contains information about chemical bonds in molecules.",
    "config": {
      "dimension": [
        {
          "column": "molecule_id"
        }
      ],
      "measure": [
        {
          "column": "molecule_id",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR004",
            "TR010"
          ]
        },
        {
          "column": "bond_type",
          "match_type": "等于",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 782
  },
  {
    "question": "In the molecule TR000, how many carbons are present?",
    "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR000' AND T.element = 'c'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "c"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 783
  },
  {
    "question": "Which are the cards that have incredibly powerful foils and are printed in the 10E set?",
    "SQL": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND setCode = '10E'",
    "db_id": "card_games",
    "table_description": "Table containing information about various Magic: The Gathering cards.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "setCode",
          "match_type": "精确匹配",
          "condition": "10E"
        }
      ]
    },
    "table_name": "cards",
    "id": 784
  },
  {
    "question": "What are the borderless cards available without a specific artist?",
    "SQL": "SELECT id FROM cards WHERE borderColor = 'borderless' AND artist IS NULL",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "borderless"
        },
        {
          "column": "artist",
          "match_type": "不为空",
          "condition": "IS NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 785
  },
  {
    "question": "List the card names with the highest converted mana cost for the face, but only if they are uncommon rarity.",
    "SQL": "SELECT name FROM cards WHERE rarity = 'uncommon' ORDER BY faceConvertedManaCost DESC LIMIT 1",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their names, mana costs, and rarities.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "faceConvertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "rarity",
          "match_type": "精确匹配",
          "condition": "uncommon"
        }
      ]
    },
    "table_name": "cards",
    "id": 786
  },
  {
    "question": "Name all cards with 2015 frame style and a converted mana cost greater than 3 ranking below 100 on EDHRec.",
    "SQL": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015 AND convertedManaCost > 3",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "edhrecRank",
          "match_type": "小于",
          "condition": "100"
        },
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": "2015"
        },
        {
          "column": "convertedManaCost",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "table_name": "cards",
    "id": 787
  },
  {
    "question": "How many types of cards does the artist Rebecca Guay illustrated about card art?",
    "SQL": "SELECT COUNT(type) FROM cards WHERE artist = 'Rebecca Guay'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards including their artists, types, and other attributes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Rebecca Guay"
        }
      ]
    },
    "table_name": "cards",
    "id": 788
  },
  {
    "question": "What is the keyword found on card with the artist 'Volkan Baǵa'?",
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE artist = 'Volkan Baǵa'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [
        {
          "column": "keywords"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Volkan Baǵa"
        }
      ]
    },
    "table_name": "cards",
    "id": 789
  },
  {
    "question": "How many cards have a power greater than 3?",
    "SQL": "SELECT COUNT(*) FROM cards WHERE power > 3",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "power",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "table_name": "cards",
    "id": 790
  },
  {
    "question": "What type of promotion is of card 'Aven Cloudchaser'?",
    "SQL": "SELECT promoTypes FROM cards WHERE name = 'Aven Cloudchaser' AND promoTypes IS NOT NULL",
    "db_id": "card_games",
    "table_description": "Table containing card information including name, promoTypes, and other details.",
    "config": {
      "dimension": [
        {
          "column": "promoTypes"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Aven Cloudchaser"
        },
        {
          "column": "promoTypes",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "cards",
    "id": 791
  },
  {
    "question": "What is the border color of card with artist Pete Venters?",
    "SQL": "SELECT DISTINCT borderColor FROM cards WHERE artist = 'Pete Venters'",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards including their names, artists, and border colors.",
    "config": {
      "dimension": [
        {
          "column": "borderColor"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Pete Venters"
        }
      ]
    },
    "table_name": "cards",
    "id": 792
  },
  {
    "question": "What is the type of the card 'Angel of Mercy' as originally printed?",
    "SQL": "SELECT originalType FROM cards WHERE name = 'Angel of Mercy' AND originalType IS NOT NULL",
    "db_id": "card_games",
    "table_description": "Table containing card details such as name, original type, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "originalType"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Angel of Mercy"
        },
        {
          "column": "originalType",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 793
  },
  {
    "question": "What is the percentage of black bordered cards?",
    "SQL": "SELECT CAST(SUM(CASE WHEN borderColor = 'black' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards including their border color, artist, and other attributes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "borderColor",
          "aggregate_function": "SUM"
        },
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "等于",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 794
  },
  {
    "question": "How many cards have a convertedManaCost greater than 6?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE convertedManaCost > 6",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "convertedManaCost",
          "match_type": "大于",
          "condition": "6"
        }
      ]
    },
    "table_name": "cards",
    "id": 795
  },
  {
    "question": "Name the cards that were illustrated by Volkan Baǵa.",
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Volkan Baǵa'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards including their names, artists, and other details.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Volkan Baǵa"
        }
      ]
    },
    "table_name": "cards",
    "id": 796
  },
  {
    "question": "How many black border cards are only available on paper?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE availability = 'paper' AND borderColor = 'black'",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards including their availability and border color.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "paper"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 797
  },
  {
    "question": "List down all the card IDs with converted mana cost greater than 3.",
    "SQL": "SELECT id FROM cards WHERE convertedManaCost > 3",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their ID, artist, name, mana cost, and more.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "convertedManaCost",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "table_name": "cards",
    "id": 798
  },
  {
    "question": "What are the card layouts of cards with the color identity of white?",
    "SQL": "SELECT layout FROM cards WHERE colorIdentity = 'W'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "layout"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "colorIdentity",
          "match_type": "精确匹配",
          "condition": "W"
        }
      ]
    },
    "table_name": "cards",
    "id": 799
  },
  {
    "question": "How many cards with original type of \"Summon - Angel\" have a different subtype than 'Human'?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Human'",
    "db_id": "card_games",
    "table_description": "Table containing various details about cards including their original type and subtypes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "originalType",
          "match_type": "精确匹配",
          "condition": "Summon - Angel"
        },
        {
          "column": "subtypes",
          "match_type": "不等于",
          "condition": "Human"
        }
      ]
    },
    "table_name": "cards",
    "id": 800
  },
  {
    "question": "What are the foiled cards that have a non-empty artist field? List the IDs.",
    "SQL": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND artist IS NOT NULL",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their ID, artist, and whether they have a foil version.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "artist",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "cards",
    "id": 801
  },
  {
    "question": "What are the cards with a converted mana cost of 7 belonging to duel deck a? List the ID.",
    "SQL": "SELECT id FROM cards WHERE duelDeck = 'a' AND convertedManaCost = 7.0",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their ID, name, attributes, and more.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "duelDeck",
          "match_type": "精确匹配",
          "condition": "a"
        },
        {
          "column": "convertedManaCost",
          "match_type": "等于",
          "condition": "7.0"
        }
      ]
    },
    "table_name": "cards",
    "id": 802
  },
  {
    "question": "List the edhrecRank for cards with rarity 'uncommon'.",
    "SQL": "SELECT edhrecRank FROM cards WHERE rarity = 'uncommon'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "edhrecRank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rarity",
          "match_type": "等于",
          "condition": "uncommon"
        }
      ]
    },
    "table_name": "cards",
    "id": 803
  },
  {
    "question": "On how many cards designed by John Avon is the foil version available?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE artist = 'John Avon' AND hasFoil = 1",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "John Avon"
        },
        {
          "column": "hasFoil",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "cards",
    "id": 804
  },
  {
    "question": "How many black bordered cards are powerful?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their border color, card kingdom IDs, and other attributes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 805
  },
  {
    "question": "How many cards designed by Volkan Baǵa and available in mtgo print type have a starting maximum hand size of -1?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'Volkan Baǵa' AND Availability = 'mtgo'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hAND",
          "match_type": "等于",
          "condition": "-1"
        },
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Volkan Baǵa"
        },
        {
          "column": "Availability",
          "match_type": "精确匹配",
          "condition": "mtgo"
        }
      ]
    },
    "table_name": "cards",
    "id": 806
  },
  {
    "question": "How many cards with a 1993 frame version and available on paper have a specific artist named Pete Venters?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND artist = 'Pete Venters'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": "1993"
        },
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "paper"
        },
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Pete Venters"
        }
      ]
    },
    "table_name": "cards",
    "id": 807
  },
  {
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper?",
    "SQL": "SELECT manaCost FROM cards WHERE availability = 'paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
    "db_id": "card_games",
    "table_description": "cards table contains information about various Magic: The Gathering cards including their mana cost, availability, border color, frame version, and layout.",
    "config": {
      "dimension": [
        {
          "column": "layout"
        },
        {
          "column": "frameVersion"
        },
        {
          "column": "borderColor"
        },
        {
          "column": "availability"
        }
      ],
      "measure": [
        {
          "column": "manaCost",
          "aggregate_function": "NULL"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "等于",
          "condition": "paper"
        },
        {
          "column": "borderColor",
          "match_type": "等于",
          "condition": "black"
        },
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": 2003
        },
        {
          "column": "layout",
          "match_type": "等于",
          "condition": "normal"
        }
      ]
    },
    "table_name": "cards",
    "id": 808
  },
  {
    "question": "What is the unconverted mana cost of all the cards with a converted mana cost greater than 3 created by Rob Alexander?",
    "SQL": "SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander' AND convertedManaCost > 3",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Rob Alexander"
        },
        {
          "column": "convertedManaCost",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "table_name": "cards",
    "id": 809
  },
  {
    "question": "Lists all types of cards available in arena, but only for creatures with flying ability.",
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL AND text LIKE '%Flying%'",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards including their subtypes, supertypes, availability, and abilities.",
    "config": {
      "dimension": [
        {
          "column": "subtypes"
        },
        {
          "column": "supertypes"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "arena"
        },
        {
          "column": "subtypes",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "supertypes",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "text",
          "match_type": "模糊匹配",
          "condition": "%Flying%"
        }
      ]
    },
    "table_name": "cards",
    "id": 810
  },
  {
    "question": "Lists the set code of all cards translated into Italian.",
    "SQL": "SELECT setCode FROM set_translations WHERE language = 'Italian'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "setCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "language",
          "match_type": "精确匹配",
          "condition": "Italian"
        }
      ]
    },
    "table_name": "set_translations",
    "id": 811
  },
  {
    "question": "What percentage of legendary frame effect cards are available in paper format?",
    "SQL": "SELECT SUM(CASE WHEN availability LIKE '%paper%' THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN availability LIKE '%paper%' THEN 1.0 ELSE 0 END) / COUNT(id) * 100",
          "aggregate_function": "SUM(CASE WHEN availability LIKE '%paper%' THEN 1.0 ELSE 0 END) / COUNT(id) * 100"
        }
      ],
      "filter": [
        {
          "column": "frameEffects",
          "match_type": "精确匹配",
          "condition": "legendary"
        }
      ]
    },
    "table_name": "cards",
    "id": 812
  },
  {
    "question": "What is the percentage of Story Spotlight cards that are also full art? List them by their ID.",
    "SQL": "SELECT CAST(SUM(CASE WHEN isFullArt = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "isFullArt",
          "aggregate_function": "SUM"
        },
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "isStorySpotlight",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "cards",
    "id": 813
  },
  {
    "question": "Calculate the percentage of cards in French. List them by name.",
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'French'",
    "db_id": "card_games",
    "table_description": "This table contains foreign language versions of card data for a card game.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "language",
          "aggregate_function": "SUM(CASE WHEN language = 'French' THEN 1 ELSE 0 END) * 100 / COUNT(*)"
        }
      ],
      "filter": [
        {
          "column": "language",
          "match_type": "精确匹配",
          "condition": "French"
        }
      ]
    },
    "table_name": "foreign_data",
    "id": 814
  },
  {
    "question": "What kind of printing is available for the card with the flavor text mentioning 'life' that Daren Bader created?",
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader' AND flavorText LIKE '%life%'",
    "db_id": "card_games",
    "table_description": "<table_description_value>",
    "config": {
      "dimension": [
        {
          "column": "availability"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Daren Bader"
        },
        {
          "column": "flavorText",
          "match_type": "模糊匹配",
          "condition": "%life%"
        }
      ]
    },
    "table_name": "cards",
    "id": 815
  },
  {
    "question": "How many color cards with no borders and a mana cost greater than 3 have been ranked higher than 12000 on EDHRec?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless' AND convertedManaCost > 3",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in different card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "edhrecRank",
          "match_type": "大于",
          "condition": "12000"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "borderless"
        },
        {
          "column": "convertedManaCost",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "table_name": "cards",
    "id": 816
  },
  {
    "question": "How many cards are oversized, reprinted, and have a black border color?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND borderColor = 'black'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "isOversized",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "isReprint",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "borderColor",
          "match_type": "等于",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 817
  },
  {
    "question": "Please list top three unknown power cards that are common rarity and have promotional types for arena league in alphabetical order.",
    "SQL": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' AND rarity = 'common' ORDER BY name LIMIT 3",
    "db_id": "card_games",
    "table_description": "Table contains information about various cards in a card game including their name, power, promotional types, and rarity.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "power",
          "match_type": "精确匹配",
          "condition": "IS NULL OR LIKE '%*%'"
        },
        {
          "column": "promoTypes",
          "match_type": "精确匹配",
          "condition": "arenaleague"
        },
        {
          "column": "rarity",
          "match_type": "精确匹配",
          "condition": "common"
        }
      ]
    },
    "table_name": "cards",
    "id": 818
  },
  {
    "question": "What is the language of the card named 'Elegido de la Antepasada'?",
    "SQL": "SELECT language FROM foreign_data WHERE name = 'Elegido de la Antepasada'",
    "db_id": "card_games",
    "table_description": "This table contains foreign language data for Magic: The Gathering cards.",
    "config": {
      "dimension": [
        {
          "column": "language"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Elegido de la Antepasada"
        }
      ]
    },
    "table_name": "foreign_data",
    "id": 819
  },
  {
    "question": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards with a non-null artist, sorted by Kingdom Foil id in alphabetical order.",
    "SQL": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND artist IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "cardKingdomFoilId"
        },
        {
          "column": "cardKingdomId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "artist",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "cards",
    "id": 820
  },
  {
    "question": "What proportion of cards do not have a text box with a normal layout and are not full art?",
    "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' AND isFullArt = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "isTextless",
          "aggregate_function": "SUM"
        },
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "isTextless",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "layout",
          "match_type": "等于",
          "condition": "normal"
        },
        {
          "column": "isFullArt",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "cards",
    "id": 821
  },
  {
    "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard, and have a converted mana cost of 7?",
    "SQL": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL AND convertedManaCost = 7",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "subtypes",
          "match_type": "精确匹配",
          "condition": "Angel,Wizard"
        },
        {
          "column": "side",
          "match_type": "不为空",
          "condition": "IS NULL"
        },
        {
          "column": "convertedManaCost",
          "match_type": "等于",
          "condition": "7"
        }
      ]
    },
    "table_name": "cards",
    "id": 822
  },
  {
    "question": "Please provide the top three sets that are not available as foil cards, along with their names in alphabetical order.",
    "SQL": "SELECT name FROM sets WHERE isFoilOnly = 0 ORDER BY name LIMIT 3",
    "db_id": "card_games",
    "table_description": "This table contains information about different card sets in various card games, including Magic: The Gathering.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "isFoilOnly",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "sets",
    "id": 823
  },
  {
    "question": "How many card borders with black color and white color identity? List out the card id.",
    "SQL": "SELECT id FROM cards WHERE borderColor = 'black' AND colorIdentity = 'W' GROUP BY id",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards including their ID, artist, ASCII name, availability, border color, card kingdom foil ID, card kingdom ID, color identity, color indicator, colors, converted mana cost, duel deck, EDHREC rank, face converted mana cost, face name, flavor name, flavor text, frame effects, frame version, hand, has alternative deck limit, has content warning, has foil, has non-foil, is alternative, is full art, is online only, is oversized, is promo, is reprint, is reserved, is starter, is story spotlight, is textless, is timeshifted, keywords, layout, leadership skills, life, loyalty, mana cost, MCM ID, MCM meta ID, MTG Arena ID, MTGJSON V4 ID, MTGO foil ID, MTGO ID, multiverse ID, name, number, original release date, original text, original type, other face IDs, power, printings, promo types, purchase URLs, rarity, Scryfall ID, Scryfall illustration ID, Scryfall oracle ID, set code, side, subtypes, supertypes, TCGplayer product ID, text, toughness, type, types, UUID, variations, watermark.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        },
        {
          "column": "colorIdentity",
          "match_type": "精确匹配",
          "condition": "W"
        }
      ]
    },
    "table_name": "cards",
    "id": 824
  },
  {
    "question": "How many cards have frame effect as extendedart or have a color identity of W? List out the id of those cards.",
    "SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' OR colorIdentity = 'W' GROUP BY id",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "frameEffects",
          "match_type": "精确匹配",
          "condition": "extendedart"
        },
        {
          "column": "colorIdentity",
          "match_type": "精确匹配",
          "condition": "W"
        }
      ]
    },
    "table_name": "cards",
    "id": 825
  },
  {
    "question": "Among black card borders, which card has a converted mana cost of 7?",
    "SQL": "SELECT id FROM cards WHERE borderColor = 'black' AND convertedManaCost = 7",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        },
        {
          "column": "convertedManaCost",
          "match_type": "等于",
          "condition": 7
        }
      ]
    },
    "table_name": "cards",
    "id": 826
  },
  {
    "question": "What is the language for the set code '10E'?",
    "SQL": "SELECT language FROM set_translations WHERE setCode = '10E'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "language"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "id",
          "match_type": "等于",
          "condition": "174"
        },
        {
          "column": "setCode",
          "match_type": "等于",
          "condition": "10E"
        }
      ]
    },
    "table_name": "set_translations",
    "id": 827
  },
  {
    "question": "List out the set name of the set code that contains 'E'.",
    "SQL": "SELECT name FROM sets WHERE code LIKE '%E%'",
    "db_id": "card_games",
    "table_description": "Table containing information about card game sets including their codes and names.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "模糊匹配",
          "condition": "E"
        }
      ]
    },
    "table_name": "sets",
    "id": 828
  },
  {
    "question": "Which foreign language used for the card with flavor text 'すべての意思を、この手で成そう。'?",
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE flavorText = 'すべての意思を、この手で成そう。'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "language"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "flavorText",
          "match_type": "精确匹配",
          "condition": "すべての意思を、この手で成そう。"
        }
      ]
    },
    "table_name": "foreign_data",
    "id": 829
  },
  {
    "question": "How many incredibly powerful cards designed by Aaron Miller have a converted mana cost greater than 4?",
    "SQL": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND convertedManaCost > 4 THEN 1 ELSE 0 END) FROM cards",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards including their artists, mana costs, and other attributes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND convertedManaCost > 4 THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Aaron Miller"
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "convertedManaCost",
          "match_type": "大于",
          "condition": 4
        }
      ]
    },
    "table_name": "cards",
    "id": 830
  },
  {
    "question": "How many cards available in paper have a positive starting maximum hand size greater than 2?",
    "SQL": "SELECT SUM(CASE WHEN availability = 'paper' AND hand > '2' THEN 1 ELSE 0 END) FROM cards",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN availability = 'paper' AND hand > '2' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "paper"
        },
        {
          "column": "hand",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "table_name": "cards",
    "id": 831
  },
  {
    "question": "Please list the names of the cards that are uncommon.",
    "SQL": "SELECT DISTINCT name FROM cards WHERE rarity = 'uncommon'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their name, rarity, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rarity",
          "match_type": "等于",
          "condition": "uncommon"
        }
      ]
    },
    "table_name": "cards",
    "id": 832
  },
  {
    "question": "What's the unconverted mana cost of the card with the flavor text mentioning 'life' in it?",
    "SQL": "SELECT DISTINCT manaCost FROM cards WHERE flavorText LIKE '%life%'",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "manaCost",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "flavorText",
          "match_type": "模糊匹配",
          "condition": "life"
        }
      ]
    },
    "table_name": "cards",
    "id": 833
  },
  {
    "question": "Among the cards with a black border color, how many of them have unknown power?",
    "SQL": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'black'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "power",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        },
        {
          "column": "power",
          "match_type": "模糊匹配",
          "condition": "%*%"
        },
        {
          "column": "power",
          "match_type": "不为空",
          "condition": "NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 834
  },
  {
    "question": "Which of the cards that are a promotional painting and have a specific artist have multiple faces on the same card? Please list their names.",
    "SQL": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND artist = 'Pete Venters' AND side IS NOT NULL",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games, including their properties and details.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "isPromo",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Pete Venters"
        },
        {
          "column": "side",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 835
  },
  {
    "question": "What's the list of all types for the card with the name containing 'Chosen'?",
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name LIKE '%Chosen%'",
    "db_id": "card_games",
    "table_description": "Table contains information about various cards including their names, types, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "subtypes"
        },
        {
          "column": "supertypes"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "Chosen"
        }
      ]
    },
    "table_name": "cards",
    "id": 836
  },
  {
    "question": "Please list the websites where I can purchase the cards that have the rarity of 'uncommon'.",
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE rarity = 'uncommon'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [
        {
          "column": "purchaseUrls"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rarity",
          "match_type": "精确匹配",
          "condition": "uncommon"
        }
      ]
    },
    "table_name": "cards",
    "id": 837
  },
  {
    "question": "How many artists have designed a card with a black border color and is available in both 'mtgo' and 'paper' printing type?",
    "SQL": "SELECT COUNT(CASE WHEN availability LIKE '%mtgo,paper%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their artists, availability, and border color.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN availability LIKE '%mtgo,paper%' AND borderColor = 'black' THEN 1 ELSE NULL END",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "模糊匹配",
          "condition": "%mtgo,paper%"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 838
  },
  {
    "question": "Which card costs more converted mana, \"Serra Angel\" or a card with 'Angel' in its name?",
    "SQL": "SELECT name FROM cards WHERE (name = 'Serra Angel' OR name LIKE '%Angel%') ORDER BY convertedManaCost DESC LIMIT 1",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Serra Angel"
        },
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "Angel"
        }
      ]
    },
    "table_name": "cards",
    "id": 839
  },
  {
    "question": "Which artist designed the card with the name 'Aven Cloudchaser'?",
    "SQL": "SELECT artist FROM cards WHERE name = 'Aven Cloudchaser'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards including their names, artists, and other details.",
    "config": {
      "dimension": [
        {
          "column": "artist"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Aven Cloudchaser"
        }
      ]
    },
    "table_name": "cards",
    "id": 840
  },
  {
    "question": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style or a 2004 card frame style.",
    "SQL": "SELECT name FROM cards WHERE frameVersion IN (2003, 2004) ORDER BY convertedManaCost DESC LIMIT 3",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "frameVersion",
          "match_type": "在区间",
          "condition": "[2003, 2004]"
        }
      ]
    },
    "table_name": "cards",
    "id": 841
  },
  {
    "question": "What's the code for the set with the name 'Double Masters'?",
    "SQL": "SELECT code FROM sets WHERE name = 'Double Masters' GROUP BY name, code",
    "db_id": "card_games",
    "table_description": "Table 'sets' contains information about different card game sets including their codes, release dates, and other details.",
    "config": {
      "dimension": [
        {
          "column": "code"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Double Masters"
        }
      ]
    },
    "table_name": "sets",
    "id": 842
  },
  {
    "question": "List the keyrune code for the set whose name is 'Tenth Edition'.",
    "SQL": "SELECT keyruneCode FROM sets WHERE name = 'Tenth Edition'",
    "db_id": "card_games",
    "table_description": "Table containing information about card game sets.",
    "config": {
      "dimension": [
        {
          "column": "keyruneCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Tenth Edition"
        }
      ]
    },
    "table_name": "sets",
    "id": 843
  },
  {
    "question": "For the set which had '10E' as the code, what is its magic card market id?",
    "SQL": "SELECT mcmId FROM sets WHERE code = '10E'",
    "db_id": "card_games",
    "table_description": "This table contains information about various sets of cards in a card game, including their sizes, blocks, boosters, codes, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "mcmId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "10E"
        }
      ]
    },
    "table_name": "sets",
    "id": 844
  },
  {
    "question": "What's the magic card market name for the set which has a total size of 306 cards?",
    "SQL": "SELECT mcmName FROM sets WHERE totalSetSize = 306",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "mcmName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "totalSetSize",
          "match_type": "等于",
          "condition": "306"
        }
      ]
    },
    "table_name": "sets",
    "id": 845
  },
  {
    "question": "What is the expansion type for the set with the code 'V13'?",
    "SQL": "SELECT type FROM sets WHERE code LIKE 'V13'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "type"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "V13"
        }
      ]
    },
    "table_name": "sets",
    "id": 846
  },
  {
    "question": "For the set with code '2XM', give its parent code.",
    "SQL": "SELECT parentCode FROM sets WHERE code = '2XM'",
    "db_id": "card_games",
    "table_description": "Table 'sets' contains information about different card game sets including their codes, names, and parent codes.",
    "config": {
      "dimension": [
        {
          "column": "parentCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "2XM"
        }
      ]
    },
    "table_name": "sets",
    "id": 847
  },
  {
    "question": "What are the available printing types of the cards that don't have a text box and were created by Pete Venters?",
    "SQL": "SELECT DISTINCT printings FROM cards WHERE artist = 'Pete Venters' AND isTextless = 1",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [
        {
          "column": "printings"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Pete Venters"
        },
        {
          "column": "isTextless",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "cards",
    "id": 848
  },
  {
    "question": "What is the unique id of the set released on or after July 13, 2007 that has the highest number of cards?",
    "SQL": "SELECT id FROM sets WHERE releaseDate >= '2007-07-13' ORDER BY baseSetSize DESC LIMIT 1",
    "db_id": "card_games",
    "table_description": "This table contains information about different card sets, including their unique identifiers, sizes, release dates, and other details.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "baseSetSize",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "releaseDate",
          "match_type": "大于等于",
          "condition": "2007-07-13"
        }
      ]
    },
    "table_name": "sets",
    "id": 849
  },
  {
    "question": "Among the cards that are not oversized, who is the illustrator of the card art that has the highest cost of converted mana?",
    "SQL": "SELECT artist FROM cards WHERE isOversized = 0 ORDER BY convertedManaCost DESC LIMIT 1",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards in a card game, including their artist, mana cost, and whether they are oversized.",
    "config": {
      "dimension": [
        {
          "column": "artist"
        }
      ],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "isOversized",
          "match_type": "equals",
          "condition": 0
        }
      ]
    },
    "table_name": "cards",
    "id": 850
  },
  {
    "question": "What is the most common visual frame effects among the incredibly powerful foils that have a mana cost greater than 5?",
    "SQL": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND convertedManaCost > 5 GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their frame effects, foil IDs, and mana costs.",
    "config": {
      "dimension": [
        {
          "column": "frameEffects"
        }
      ],
      "measure": [
        {
          "column": "frameEffects",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "not null",
          "condition": ""
        },
        {
          "column": "cardKingdomId",
          "match_type": "not null",
          "condition": ""
        },
        {
          "column": "convertedManaCost",
          "match_type": "greater than",
          "condition": "5"
        }
      ]
    },
    "table_name": "cards",
    "id": 851
  },
  {
    "question": "How many cards with unknown power that can't be found in foil and have a converted mana cost of 4 or more is in duel deck A?",
    "SQL": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a' AND convertedManaCost >= 4",
    "db_id": "card_games",
    "table_description": "Table 'cards' contains information about various cards in a card game, including their attributes such as power, foil status, and duel deck.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "hasFoil",
          "match_type": "等于",
          "condition": "0"
        },
        {
          "column": "duelDeck",
          "match_type": "等于",
          "condition": "a"
        },
        {
          "column": "convertedManaCost",
          "match_type": "大于等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "cards",
    "id": 852
  },
  {
    "question": "Among the sets whose release date is after 2019, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "SQL": "SELECT id FROM sets WHERE releaseDate > '2019-01-01' ORDER BY totalSetSize DESC LIMIT 1",
    "db_id": "card_games",
    "table_description": "Table containing information about card game sets, including their ID, size, type, and release date.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "totalSetSize",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "releaseDate",
          "match_type": "大于",
          "condition": "2019-01-01"
        }
      ]
    },
    "table_name": "sets",
    "id": 853
  },
  {
    "question": "List the artists who illustrated cards with black borders which are available in both paper and mtgo.",
    "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'mtgo,paper' AND BorderColor = 'black'",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "artist"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "mtgo,paper"
        },
        {
          "column": "BorderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 854
  },
  {
    "question": "Find the uuid of cards in which the commander format is restricted or banned.",
    "SQL": "SELECT uuid FROM legalities WHERE format = 'commander' AND (status = 'Banned' OR status = 'Restricted')",
    "db_id": "card_games",
    "table_description": "The legalities table contains information about the legality status of cards in various formats.",
    "config": {
      "dimension": [
        {
          "column": "uuid"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "format",
          "match_type": "精确匹配",
          "condition": "commander"
        },
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "Banned"
        },
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "Restricted"
        }
      ]
    },
    "table_name": "legalities",
    "id": 855
  },
  {
    "question": "Among the card designed by Matthew D. Wilson, how many are available only in the digital format?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'mtgo'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their artist, availability, and other details.",
    "config": {
      "dimension": [
        {
          "column": "artist"
        },
        {
          "column": "availability"
        }
      ],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Matthew D. Wilson"
        },
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "mtgo"
        }
      ]
    },
    "table_name": "cards",
    "id": 856
  },
  {
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon, among those who have joined before 2011?",
    "SQL": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND CreationDate < '2011-01-01' AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND CreationDate < '2011-01-01' )",
    "db_id": "codebase_community",
    "table_description": "users table contains information about users including their display name, reputation, creation date, etc.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": "< '2011-01-01'"
        },
        {
          "column": "DisplayName",
          "match_type": "精确匹配",
          "condition": "IN ('Harlan', 'Jarrod Dixon')"
        }
      ]
    },
    "table_name": "users",
    "id": 857
  },
  {
    "question": "Please list the display names of all the users who have accessed the site since January 1, 2014.",
    "SQL": "SELECT DisplayName FROM users WHERE LastAccessDate >= '2014-01-01'",
    "db_id": "codebase_community",
    "table_description": "Table containing user information including display name, creation date, and last access date.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LastAccessDate",
          "match_type": "绝对时间",
          "condition": [
            "2014-01-01",
            null
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 858
  },
  {
    "question": "How many users last accessed the website in August 2014?",
    "SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) BETWEEN '2014-08-01' AND '2014-08-31'",
    "db_id": "codebase_community",
    "table_description": "Table containing user information including their last access date.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LastAccessDate",
          "match_type": "绝对时间",
          "condition": [
            "2014-08-01",
            "2014-08-31"
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 859
  },
  {
    "question": "What is the display name of the user who has more than 1000 views?",
    "SQL": "SELECT DisplayName FROM users WHERE Views > 1000",
    "db_id": "codebase_community",
    "table_description": "users table contains information about users including their display names and view counts.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "table_name": "users",
    "id": 860
  },
  {
    "question": "Among the users who have more than 100 upvotes, how many of them have a reputation higher than 100?",
    "SQL": "SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 100",
    "db_id": "codebase_community",
    "table_description": "Users table containing user information such as reputation, upvotes, and downvotes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UpVotes",
          "match_type": "大于",
          "condition": "100"
        },
        {
          "column": "Reputation",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "table_name": "users",
    "id": 861
  },
  {
    "question": "How many users with more than 10 views and an age greater than 30 created their account after the year 2013?",
    "SQL": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10 AND Age > 30",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "大于",
          "condition": "2013"
        },
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "10"
        },
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "table_name": "users",
    "id": 862
  },
  {
    "question": "How many votes did the user No.58 take on posts with a bounty amount of 500 on 2010/7/19?",
    "SQL": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19' AND BountyAmount = 500",
    "db_id": "codebase_community",
    "table_description": "Table containing vote information including post ID, vote type, creation date, user ID, and bounty amount.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": "58"
        },
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": [
            "2010-07-19",
            "2010-07-19"
          ]
        },
        {
          "column": "BountyAmount",
          "match_type": "等于",
          "condition": "500"
        }
      ]
    },
    "table_name": "votes",
    "id": 863
  },
  {
    "question": "Indicate the creation date of the maximum number of votes in 2010.",
    "SQL": "SELECT CreationDate FROM votes WHERE YEAR(CreationDate) = 2010 GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
    "db_id": "codebase_community",
    "table_description": "Table containing vote records for posts in the community.",
    "config": {
      "dimension": [
        {
          "column": "CreationDate"
        }
      ],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": [
            "2010-01-01",
            "2010-12-31"
          ]
        }
      ]
    },
    "table_name": "votes",
    "id": 864
  },
  {
    "question": "Give the number of \"Teacher\" badges.",
    "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Teacher'",
    "db_id": "codebase_community",
    "table_description": "The badges table contains information about user badges, including the badge ID, user ID, badge name, and the date the badge was awarded.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Teacher"
        }
      ]
    },
    "table_name": "badges",
    "id": 865
  },
  {
    "question": "How many views did the post with the tag '<bayesian>' get?",
    "SQL": "SELECT SUM(ViewCount) FROM posts WHERE Tags = '<bayesian>'",
    "db_id": "codebase_community",
    "table_description": "Table containing information about posts in a codebase community.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ViewCount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Tags",
          "match_type": "精确匹配",
          "condition": "<bayesian>"
        }
      ]
    },
    "table_name": "posts",
    "id": 866
  },
  {
    "question": "Write the contents of comments created by user with ID 13.",
    "SQL": "SELECT Text FROM comments WHERE UserId = 13",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Text"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": "13"
        }
      ]
    },
    "table_name": "comments",
    "id": 867
  },
  {
    "question": "Which user has the location listed as 'New York, NY'?",
    "SQL": "SELECT DisplayName FROM users WHERE Location = 'New York, NY'",
    "db_id": "codebase_community",
    "table_description": "Table containing user information for a codebase community.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "New York, NY"
        }
      ]
    },
    "table_name": "users",
    "id": 868
  },
  {
    "question": "Give the total number of comments posted by users with a score of 5 or higher.",
    "SQL": "SELECT COUNT(Id) FROM comments WHERE Score >= 5",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Score",
          "match_type": "大于等于",
          "condition": "5"
        }
      ]
    },
    "table_name": "comments",
    "id": 869
  },
  {
    "question": "Which user ID has the highest reputation among users who have been active within the last 30 days?",
    "SQL": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users WHERE DATEDIFF(CURDATE(), LastAccessDate) <= 30 )",
    "db_id": "codebase_community",
    "table_description": "Table containing user information including ID, reputation, creation date, display name, last access date, website URL, location, about me, views, upvotes, downvotes, account ID, age, and profile image URL.",
    "config": {
      "dimension": [
        {
          "column": "Id"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "LastAccessDate",
          "match_type": "近30天",
          "condition": "近30天"
        }
      ]
    },
    "table_name": "users",
    "id": 870
  },
  {
    "question": "Which user ID has the lowest view count and is located in New York, NY?",
    "SQL": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users ) AND Location = 'New York, NY'",
    "db_id": "codebase_community",
    "table_description": "Table containing user information for a codebase community.",
    "config": {
      "dimension": [
        {
          "column": "Id"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "New York, NY"
        }
      ]
    },
    "table_name": "users",
    "id": 871
  },
  {
    "question": "How many users are awarded with the badge related to 'Teacher' during the month of July 2011?",
    "SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y-%m', Date) = '2011-07' AND Name LIKE '%Teacher%'",
    "db_id": "codebase_community",
    "table_description": "This table contains information about badges awarded to users.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2011-07-01",
            "2011-07-31"
          ]
        },
        {
          "column": "Name",
          "match_type": "模糊匹配",
          "condition": "%Teacher%"
        }
      ]
    },
    "table_name": "badges",
    "id": 872
  },
  {
    "question": "How many users have been awarded the 'Teacher' badge more than 5 times?",
    "SQL": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges WHERE Name = 'Teacher' GROUP BY UserId ) T WHERE T.num > 5",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "UserId"
        }
      ],
      "measure": [
        {
          "column": "num",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Teacher"
        },
        {
          "column": "num",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "table_name": "badges",
    "id": 873
  },
  {
    "question": "What is the percentage difference of teacher badges given during 2010 and 2011?",
    "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Teacher'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Date",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Teacher"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2010-01-01",
            "2010-12-31"
          ]
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2011-01-01",
            "2011-12-31"
          ]
        }
      ]
    },
    "table_name": "badges",
    "id": 874
  },
  {
    "question": "How many users obtained the \"Teacher\" badge?",
    "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Teacher'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Teacher"
        }
      ]
    },
    "table_name": "badges",
    "id": 875
  },
  {
    "question": "List out the name of badges that users obtained before 7/19/2010 7:39:08 PM.",
    "SQL": "SELECT Name FROM badges WHERE Date < '2010-07-19 19:39:08.0'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            null,
            "2010-07-19 19:39:08.0"
          ]
        }
      ]
    },
    "table_name": "badges",
    "id": 876
  },
  {
    "question": "How many comments with a score greater than 10 are there on the list?",
    "SQL": "SELECT COUNT(id) FROM comments WHERE score > 10",
    "db_id": "codebase_community",
    "table_description": "Table containing user comments on various posts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "score",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "comments",
    "id": 877
  },
  {
    "question": "State the detailed content of the comment which was created on 7/19/2010 by user with ID 13.",
    "SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0' AND UserId = 13",
    "db_id": "codebase_community",
    "table_description": "Table containing comments made on posts, including the text, creation date, user ID, and more.",
    "config": {
      "dimension": [
        {
          "column": "Text"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "精确匹配",
          "condition": "2010-07-19 19:16:14.0"
        },
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": "13"
        }
      ]
    },
    "table_name": "comments",
    "id": 878
  },
  {
    "question": "How many posts have a score greater than 10 on the list?",
    "SQL": "SELECT COUNT(id) FROM posts WHERE Score > 10",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Score",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "posts",
    "id": 879
  },
  {
    "question": "What is the name of the user whose website URL is http://minesweeperonline.com?",
    "SQL": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://minesweeperonline.com'",
    "db_id": "codebase_community",
    "table_description": "Users table contains information about users including their display names and website URLs.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "WebsiteUrl",
          "match_type": "等于",
          "condition": "http://minesweeperonline.com"
        }
      ]
    },
    "table_name": "users",
    "id": 880
  },
  {
    "question": "How many users were from San Francisco, CA?",
    "SQL": "SELECT COUNT(Id) FROM users WHERE Location = 'San Francisco, CA'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "San Francisco, CA"
        }
      ]
    },
    "table_name": "users",
    "id": 881
  },
  {
    "question": "How many votes were made in the last 3 days?",
    "SQL": "SELECT COUNT(id) FROM votes WHERE CreationDate >= DATE('now', '-3 days')",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "近n天",
          "condition": "近3天"
        }
      ]
    },
    "table_name": "votes",
    "id": 882
  },
  {
    "question": "How many users have a reputation score between 100 and 1000?",
    "SQL": "SELECT COUNT(id) FROM users WHERE Reputation BETWEEN 100 AND 1000",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Reputation",
          "match_type": "在区间",
          "condition": [
            100,
            1000
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 883
  },
  {
    "question": "Which users have the highest number of views and are located in New York, NY?",
    "SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users ) AND Location = 'New York, NY'",
    "db_id": "codebase_community",
    "table_description": "Table containing user information for a codebase community platform.",
    "config": {
      "dimension": [
        {
          "column": "Id"
        },
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Views",
          "match_type": "等于",
          "condition": "( SELECT MAX(Views) FROM users )"
        },
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "New York, NY"
        }
      ]
    },
    "table_name": "users",
    "id": 884
  },
  {
    "question": "Calculate the ratio of votes in 2010 and 2011 for posts with a specific PostId.",
    "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010' AND PostId = 3, 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011' AND PostId = 3, 1, 0)) FROM votes",
    "db_id": "codebase_community",
    "table_description": "Table containing voting records for posts in the community.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CreationDate",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "等于",
          "condition": "2010"
        },
        {
          "column": "PostId",
          "match_type": "等于",
          "condition": "3"
        }
      ]
    },
    "table_name": "votes",
    "id": 885
  },
  {
    "question": "How many users received Teacher badges in 2013?",
    "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Teacher' AND STRFTIME('%Y', Date) = '2013'",
    "db_id": "codebase_community",
    "table_description": "Table containing badge information for users in the community.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Teacher"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2013-01-01",
            "2013-12-31"
          ]
        }
      ]
    },
    "table_name": "badges",
    "id": 886
  },
  {
    "question": "How many posts were created by user with ID 8 on 21st July, 2010?",
    "SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21' AND UserId = 8",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": [
            "2010-07-21",
            "2010-07-21"
          ]
        },
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": 8
        }
      ]
    },
    "table_name": "postHistory",
    "id": 887
  },
  {
    "question": "What are the display names and ages of users whose last access date was within the last week?",
    "SQL": "SELECT DisplayName, Age FROM users WHERE LastAccessDate >= DATE('now', '-7 days')",
    "db_id": "codebase_community",
    "table_description": "Table containing user information including display names, ages, and last access dates.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        },
        {
          "column": "Age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LastAccessDate",
          "match_type": "大于等于",
          "condition": "DATE('now', '-7 days')"
        }
      ]
    },
    "table_name": "users",
    "id": 888
  },
  {
    "question": "Provide the last edit date and last edit user ID for the post with a score of 23.",
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Score = 23",
    "db_id": "codebase_community",
    "table_description": "posts table contains information about various posts in the community, including their titles, scores, and last edit details.",
    "config": {
      "dimension": [
        {
          "column": "LastEditDate"
        },
        {
          "column": "LastEditorUserId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Score",
          "match_type": "等于",
          "condition": "23"
        }
      ]
    },
    "table_name": "posts",
    "id": 889
  },
  {
    "question": "How many negative comments with a score less than 10 were given by user ID 13?",
    "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 10",
    "db_id": "codebase_community",
    "table_description": "This table contains comments made by users on posts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": "13"
        },
        {
          "column": "Score",
          "match_type": "小于",
          "condition": "10"
        }
      ]
    },
    "table_name": "comments",
    "id": 890
  },
  {
    "question": "What are the titles of the top 5 posts with the highest popularity and at least 5 comments?",
    "SQL": "SELECT Title FROM posts WHERE CommentCount >= 5 ORDER BY ViewCount DESC LIMIT 5",
    "db_id": "codebase_community",
    "table_description": "Table containing posts with various attributes including title, view count, and comment count.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [
        {
          "column": "ViewCount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "CommentCount",
          "match_type": "大于等于",
          "condition": "5"
        }
      ]
    },
    "table_name": "posts",
    "id": 891
  },
  {
    "question": "How many tags have the tag name related to 'bayesian' and post count between 5,000 to 7,000?",
    "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName LIKE '%bayesian%' AND Count BETWEEN 5000 AND 7000",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "TagName",
          "match_type": "模糊匹配",
          "condition": "bayesian"
        },
        {
          "column": "Count",
          "match_type": "在区间",
          "condition": [
            5000,
            7000
          ]
        }
      ]
    },
    "table_name": "tags",
    "id": 892
  },
  {
    "question": "What is the owner user id of the most valuable post in the last month?",
    "SQL": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts WHERE CreationDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) ) AND CreationDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)",
    "db_id": "codebase_community",
    "table_description": "Table containing information about posts in a community platform.",
    "config": {
      "dimension": [
        {
          "column": "OwnerUserId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "FavoriteCount",
          "match_type": "等于",
          "condition": "( SELECT MAX(FavoriteCount) FROM posts WHERE CreationDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) )"
        },
        {
          "column": "CreationDate",
          "match_type": "相对时间",
          "condition": "近1个月"
        }
      ]
    },
    "table_name": "posts",
    "id": 893
  },
  {
    "question": "What is the age of the most influential user who has more than 500 views?",
    "SQL": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users ) AND Views > 500",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Reputation",
          "match_type": "等于",
          "condition": "( SELECT MAX(Reputation) FROM users )"
        },
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "table_name": "users",
    "id": 894
  },
  {
    "question": "What is the id of the user with the highest number of upvotes?",
    "SQL": "SELECT Id FROM users WHERE UpVotes = ( SELECT MAX(UpVotes) FROM users )",
    "db_id": "codebase_community",
    "table_description": "A table containing user information for a codebase community platform.",
    "config": {
      "dimension": [
        {
          "column": "Id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "UpVotes",
          "match_type": "等于",
          "condition": "( SELECT MAX(UpVotes) FROM users )"
        }
      ]
    },
    "table_name": "users",
    "id": 895
  },
  {
    "question": "What is the sum of score of the post created on 2010-07-19?",
    "SQL": "SELECT SUM(Score) FROM posts WHERE CreationDate LIKE '2010-07-19%'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Score",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": "2010-07-19"
        }
      ]
    },
    "table_name": "posts",
    "id": 896
  },
  {
    "question": "Who has the highest reputation among users who have accessed the site in the last month? Please give the display name.",
    "SQL": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users WHERE LastAccessDate >= DATE('now', '-1 month') ) AND LastAccessDate >= DATE('now', '-1 month')",
    "db_id": "codebase_community",
    "table_description": "This table contains user information for a codebase community website.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "LastAccessDate",
          "match_type": "absolute_time",
          "condition": [
            "2023-08-01",
            "2023-09-01"
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 897
  },
  {
    "question": "How many users whose reputations are higher than 2000 and the age is greater than 30?",
    "SQL": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Age > 30",
    "db_id": "codebase_community",
    "table_description": "users table contains information about users including their reputation, creation date, display name, last access date, website URL, location, about me, views, upvotes, downvotes, account ID, age, and profile image URL.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Reputation",
          "match_type": "大于",
          "condition": "2000"
        },
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "table_name": "users",
    "id": 898
  },
  {
    "question": "Please list all display names of users who have more than 100 upvotes.",
    "SQL": "SELECT DisplayName FROM users WHERE UpVotes > 100",
    "db_id": "codebase_community",
    "table_description": "A table containing user information including their display names, upvotes, and other details.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "UpVotes",
          "match_type": "大于",
          "condition": 100
        }
      ]
    },
    "table_name": "users",
    "id": 899
  },
  {
    "question": "Identify the percentage of users from New York, NY.",
    "SQL": "SELECT CAST(SUM(IIF(Location = 'New York, NY', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
    "db_id": "codebase_community",
    "table_description": "Users table containing user information such as reputation, creation date, display name, location, etc.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Location",
          "aggregate_function": "SUM"
        },
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "New York, NY"
        }
      ]
    },
    "table_name": "users",
    "id": 900
  },
  {
    "question": "Identify the total number of posts with a score above 20.",
    "SQL": "SELECT COUNT(Id) FROM posts WHERE Score > 20",
    "db_id": "codebase_community",
    "table_description": "Table 'posts' contains information about various posts including their ID, type, creation date, score, view count, etc.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Score",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "table_name": "posts",
    "id": 901
  },
  {
    "question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users, created after July 19, 2010.",
    "SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0 AND CreationDate > '2010-07-19'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ViewCount",
          "match_type": "大于",
          "condition": "35000"
        },
        {
          "column": "CommentCount",
          "match_type": "等于",
          "condition": "0"
        },
        {
          "column": "CreationDate",
          "match_type": "大于",
          "condition": "2010-07-19"
        }
      ]
    },
    "table_name": "posts",
    "id": 902
  },
  {
    "question": "Identify the number of adult users who have more than 100 views.",
    "SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND Views > 100",
    "db_id": "codebase_community",
    "table_description": "users table contains information about the users including their age, upvotes, downvotes, and views.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "在区间",
          "condition": [
            19,
            65
          ]
        },
        {
          "column": "Views",
          "match_type": "大于",
          "condition": 100
        }
      ]
    },
    "table_name": "users",
    "id": 903
  },
  {
    "question": "How many users were awarded the 'Teacher' badge?",
    "SQL": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Teacher'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Teacher"
        }
      ]
    },
    "table_name": "badges",
    "id": 904
  },
  {
    "question": "Count the number of posts with a tag specified as 'bayesian'.",
    "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'bayesian'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "TagName",
          "match_type": "精确匹配",
          "condition": "bayesian"
        }
      ]
    },
    "table_name": "tags",
    "id": 905
  },
  {
    "question": "What is the reputation and view count of the user, whose location is 'New York, NY'?",
    "SQL": "SELECT Reputation, Views FROM users WHERE Location = 'New York, NY'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Location"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "SUM"
        },
        {
          "column": "Views",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "New York, NY"
        }
      ]
    },
    "table_name": "users",
    "id": 906
  },
  {
    "question": "How many comments and answers were left by the users on the post with the tag '<clustering>'?",
    "SQL": "SELECT SUM(CommentCount), SUM(AnswerCount) FROM posts WHERE Tags LIKE '%<clustering>%'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CommentCount",
          "aggregate_function": "SUM"
        },
        {
          "column": "AnswerCount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Tags",
          "match_type": "模糊匹配",
          "condition": "%<clustering>%"
        }
      ]
    },
    "table_name": "posts",
    "id": 907
  },
  {
    "question": "What is the creation date of the user with an age of 37?",
    "SQL": "SELECT CreationDate FROM users WHERE Age = 37",
    "db_id": "codebase_community",
    "table_description": "Users table containing information about users including their creation date, display name, and age.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CreationDate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": 37
        }
      ]
    },
    "table_name": "users",
    "id": 908
  },
  {
    "question": "Identify the number of posts that have been voted on within the last week.",
    "SQL": "SELECT COUNT(id) FROM votes WHERE CreationDate >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "近7天",
          "condition": "近7天"
        }
      ]
    },
    "table_name": "votes",
    "id": 909
  },
  {
    "question": "How many posts have a score less than 10?",
    "SQL": "SELECT COUNT(id) FROM posts WHERE Score < 10",
    "db_id": "codebase_community",
    "table_description": "Table containing information about posts in a community forum.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Score",
          "match_type": "小于",
          "condition": "10"
        }
      ]
    },
    "table_name": "posts",
    "id": 910
  },
  {
    "question": "Among the tags with tag ID below 15, how many of them have a count of posts greater than 10?",
    "SQL": "SELECT COUNT(id) FROM tags WHERE Count > 10 AND Id < 15",
    "db_id": "codebase_community",
    "table_description": "Table containing information about tags in a codebase community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Count",
          "match_type": "大于",
          "condition": "10"
        },
        {
          "column": "Id",
          "match_type": "小于",
          "condition": "15"
        }
      ]
    },
    "table_name": "tags",
    "id": 911
  },
  {
    "question": "What is the excerpt post ID and wiki post ID of the tag named bayesian?",
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'bayesian'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "ExcerptPostId"
        },
        {
          "column": "WikiPostId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "TagName",
          "match_type": "精确匹配",
          "condition": "bayesian"
        }
      ]
    },
    "table_name": "tags",
    "id": 912
  },
  {
    "question": "Give the publisher ID of DC Comics.",
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'DC Comics'",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "publisher_name",
          "match_type": "精确匹配",
          "condition": "DC Comics"
        }
      ]
    },
    "table_name": "publisher",
    "id": 913
  },
  {
    "question": "Calculate the average attribute value of all superheroes with an attribute value greater than 80.",
    "SQL": "SELECT AVG(attribute_value) FROM hero_attribute WHERE attribute_value > 80",
    "db_id": "superhero",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "attribute_value",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "attribute_value",
          "match_type": "大于",
          "condition": "80"
        }
      ]
    },
    "table_name": "hero_attribute",
    "id": 914
  },
  {
    "question": "What is the total number of superheroes with the eye colour of blue?",
    "SQL": "SELECT COUNT(id) FROM superhero WHERE eye_colour_id = 7",
    "db_id": "superhero",
    "table_description": "A table containing information about various superheroes, including their names, physical attributes, and affiliations.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "eye_colour_id",
          "match_type": "等于",
          "condition": "7"
        }
      ]
    },
    "table_name": "superhero",
    "id": 915
  },
  {
    "question": "Calculate the difference between Abomination's weight and 3-D Man's weight.",
    "SQL": "SELECT ( SELECT weight_kg FROM superhero WHERE superhero_name LIKE 'Abomination' ) - ( SELECT weight_kg FROM superhero WHERE superhero_name LIKE '3-D Man' ) AS CALCULATE",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight_kg",
          "aggregate_function": "DIFFERENCE"
        }
      ],
      "filter": [
        {
          "column": "superhero_name",
          "match_type": "exact_match",
          "condition": "Abomination"
        },
        {
          "column": "superhero_name",
          "match_type": "exact_match",
          "condition": "3-D Man"
        }
      ]
    },
    "table_name": "superhero",
    "id": 916
  },
  {
    "question": "Calculate the average height for male superheroes.",
    "SQL": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero WHERE gender_id = 1",
    "db_id": "superhero",
    "table_description": "Table containing information about superheroes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "height_cm",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "gender_id",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "superhero",
    "id": 917
  },
  {
    "question": "Who is the tallest male superhero?",
    "SQL": "SELECT superhero_name FROM superhero WHERE gender_id = 1 ORDER BY height_cm DESC LIMIT 1",
    "db_id": "superhero",
    "table_description": "Table containing information about superheroes including their names, physical attributes, and affiliations.",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [
        {
          "column": "height_cm",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "gender_id",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "superhero",
    "id": 918
  },
  {
    "question": "What is the power ID of Cold Resistance?",
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Cold Resistance'",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "power_name",
          "match_type": "精确匹配",
          "condition": "Cold Resistance"
        }
      ]
    },
    "table_name": "superpower",
    "id": 919
  },
  {
    "question": "Provide the name of the superhero whose height is 188 cm.",
    "SQL": "SELECT superhero_name FROM superhero WHERE height_cm = 188",
    "db_id": "superhero",
    "table_description": "Table containing information about various superheroes.",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height_cm",
          "match_type": "等于",
          "condition": "188"
        }
      ]
    },
    "table_name": "superhero",
    "id": 920
  },
  {
    "question": "List the full names of superheroes with missing or zero weight.",
    "SQL": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)",
    "db_id": "superhero",
    "table_description": "Table containing information about superheroes including their full names and weights.",
    "config": {
      "dimension": [
        {
          "column": "full_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "full_name",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "weight_kg",
          "match_type": "等于",
          "condition": "0"
        },
        {
          "column": "weight_kg",
          "match_type": "为空",
          "condition": ""
        }
      ]
    },
    "table_name": "superhero",
    "id": 921
  },
  {
    "question": "Name the tallest superhero with a height greater than 200 cm.",
    "SQL": "SELECT superhero_name FROM superhero WHERE height_cm > 200 ORDER BY height_cm DESC LIMIT 1",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height_cm",
          "match_type": "greater than",
          "condition": "200"
        }
      ]
    },
    "table_name": "superhero",
    "id": 922
  },
  {
    "question": "Name the superhero with the eye colour code 9.",
    "SQL": "SELECT superhero_name FROM superhero WHERE eye_colour_id = 9",
    "db_id": "superhero",
    "table_description": "Table containing information about superheroes including their names, full names, and various attributes.",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "eye_colour_id",
          "match_type": "等于",
          "condition": "9"
        }
      ]
    },
    "table_name": "superhero",
    "id": 923
  },
  {
    "question": "What is the total number of superheroes that have Jones as their last name?",
    "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE '%Jones'",
    "db_id": "superhero",
    "table_description": "Table containing information about superheroes",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "full_name",
          "match_type": "模糊匹配",
          "condition": "%Jones"
        }
      ]
    },
    "table_name": "superhero",
    "id": 924
  },
  {
    "question": "Give the hero ID of the superhero with an attribute value greater than 80.",
    "SQL": "SELECT hero_id FROM hero_attribute WHERE attribute_value > 80",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "hero_id"
        }
      ],
      "measure": [
        {
          "column": "attribute_value",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "attribute_value",
          "match_type": "大于",
          "condition": "80"
        }
      ]
    },
    "table_name": "hero_attribute",
    "id": 925
  },
  {
    "question": "Provide the full name of the superhero with the eye colour ID 7.",
    "SQL": "SELECT full_name FROM superhero WHERE eye_colour_id = 7",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "full_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "eye_colour_id",
          "match_type": "等于",
          "condition": "7"
        }
      ]
    },
    "table_name": "superhero",
    "id": 926
  },
  {
    "question": "In which year did the Bahrain Grand Prix first take place?",
    "SQL": "SELECT year FROM races WHERE name = 'Bahrain Grand Prix' ORDER BY year ASC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Bahrain Grand Prix"
        }
      ]
    },
    "table_name": "races",
    "id": 927
  },
  {
    "question": "Name all the races in 2009 in descending order.",
    "SQL": "SELECT name FROM races WHERE year = 2009 ORDER BY name DESC",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2009"
        }
      ]
    },
    "table_name": "races",
    "id": 928
  },
  {
    "question": "List the names of all races that occurred in the first month of the earliest recorded year.",
    "SQL": "SELECT name FROM races WHERE STRFTIME('%Y-%m', date) = ( SELECT STRFTIME('%Y-%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
    "db_id": "formula_1",
    "table_description": "Contains information about Formula 1 races.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": "最早记录的年月的第一天"
        }
      ]
    },
    "table_name": "races",
    "id": 929
  },
  {
    "question": "State the name and date of the last round of race in the Chinese Grand Prix.",
    "SQL": "SELECT name, date FROM races WHERE name = 'Chinese Grand Prix' ORDER BY round DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "等于",
          "condition": "Chinese Grand Prix"
        }
      ]
    },
    "table_name": "races",
    "id": 930
  },
  {
    "question": "Which year after 2008 has the most number of races?",
    "SQL": "SELECT year FROM races WHERE year > 2008 GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [
        {
          "column": "round",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "大于",
          "condition": "2008"
        }
      ]
    },
    "table_name": "races",
    "id": 931
  },
  {
    "question": "Name the races in year 2017 that are not hosted in the Chinese Grand Prix.",
    "SQL": "SELECT name FROM races WHERE year = 2017 AND name != 'Chinese Grand Prix'",
    "db_id": "formula_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2017"
        },
        {
          "column": "name",
          "match_type": "不等于",
          "condition": "Chinese Grand Prix"
        }
      ]
    },
    "table_name": "races",
    "id": 932
  },
  {
    "question": "How old is the youngest Finnish driver? What is his name?",
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Finnish' ORDER BY dob DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "forename"
        },
        {
          "column": "surname"
        }
      ],
      "measure": [
        {
          "column": "STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob)",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "Finnish"
        }
      ]
    },
    "table_name": "drivers",
    "id": 933
  },
  {
    "question": "What's the location coordinates of Circuit de Barcelona-Catalunya?",
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'",
    "db_id": "formula_1",
    "table_description": "The circuits table contains information about Formula 1 circuits including their names, locations, and coordinates.",
    "config": {
      "dimension": [
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Circuit de Barcelona-Catalunya"
        }
      ]
    },
    "table_name": "circuits",
    "id": 934
  },
  {
    "question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Catalunya Circuit?",
    "SQL": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Circuit de Barcelona-Catalunya') ORDER BY lat DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "IN ('Silverstone Circuit', 'Hockenheimring', 'Circuit de Barcelona-Catalunya')"
        }
      ]
    },
    "table_name": "circuits",
    "id": 935
  },
  {
    "question": "What's the reference name of Circuit de Monaco?",
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Circuit de Monaco'",
    "db_id": "formula_1",
    "table_description": "circuits table contains information about different F1 circuits.",
    "config": {
      "dimension": [
        {
          "column": "circuitRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Circuit de Monaco"
        }
      ]
    },
    "table_name": "circuits",
    "id": 936
  },
  {
    "question": "In which country can I find the circuit named 'Circuit de Barcelona-Catalunya'?",
    "SQL": "SELECT country FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Circuit de Barcelona-Catalunya"
        }
      ]
    },
    "table_name": "circuits",
    "id": 937
  },
  {
    "question": "How many drivers have the number 44 or do not have a number?",
    "SQL": "SELECT COUNT(driverId) - COUNT(CASE WHEN number = 44 OR number IS NULL THEN number END) FROM drivers",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        },
        {
          "column": "number",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "number",
          "match_type": "IN",
          "condition": "44, NULL"
        }
      ]
    },
    "table_name": "drivers",
    "id": 938
  },
  {
    "question": "Which country is the oldest driver from, who has a driver reference?",
    "SQL": "SELECT nationality FROM drivers WHERE dob IS NOT NULL AND driverRef IS NOT NULL ORDER BY dob ASC LIMIT 1",
    "db_id": "formula_1",
    "table_description": "Table containing information about Formula 1 drivers.",
    "config": {
      "dimension": [
        {
          "column": "nationality"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "dob",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "driverRef",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "drivers",
    "id": 939
  },
  {
    "question": "Please list the surnames of all the German drivers.",
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'German'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "surname"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "German"
        }
      ]
    },
    "table_name": "drivers",
    "id": 940
  },
  {
    "question": "What is the nationality of the driver with the driver reference 'davidson'?",
    "SQL": "SELECT nationality FROM drivers WHERE driverRef = 'davidson' AND surname = 'Davidson'",
    "db_id": "formula_1",
    "table_description": "Table containing information about Formula 1 drivers.",
    "config": {
      "dimension": [
        {
          "column": "nationality"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "driverRef",
          "match_type": "精确匹配",
          "condition": "davidson"
        },
        {
          "column": "surname",
          "match_type": "精确匹配",
          "condition": "Davidson"
        }
      ]
    },
    "table_name": "drivers",
    "id": 941
  },
  {
    "question": "What's the reference name of the driver with the number 44?",
    "SQL": "SELECT driverRef FROM drivers WHERE number = 44",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "number",
          "match_type": "等于",
          "condition": "44"
        },
        {
          "column": "surname",
          "match_type": "精确匹配",
          "condition": "Hamilton"
        }
      ]
    },
    "table_name": "drivers",
    "id": 942
  },
  {
    "question": "How many circuits are there in Monte-Carlo, Monaco?",
    "SQL": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Monte-Carlo' AND country = 'Monaco'",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "circuitId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "Monte-Carlo"
        },
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Monaco"
        }
      ]
    },
    "table_name": "circuits",
    "id": 943
  },
  {
    "question": "Please list the location coordinates of the Spanish circuits.",
    "SQL": "SELECT lat, lng FROM circuits WHERE country = 'Spain'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Spain"
        }
      ]
    },
    "table_name": "circuits",
    "id": 944
  },
  {
    "question": "How many drivers were born after 1990 and are British?",
    "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1990'",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "British"
        },
        {
          "column": "dob",
          "match_type": "绝对时间",
          "condition": "1990-01-01"
        }
      ]
    },
    "table_name": "drivers",
    "id": 945
  },
  {
    "question": "List out the code for drivers who have the forename Lewis.",
    "SQL": "SELECT code FROM drivers WHERE forename = 'Lewis'",
    "db_id": "formula_1",
    "table_description": "drivers",
    "config": {
      "dimension": [
        {
          "column": "code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "forename",
          "match_type": "精确匹配",
          "condition": "Lewis"
        }
      ]
    },
    "table_name": "drivers",
    "id": 946
  },
  {
    "question": "List out the Id number of races which were held in Bahrain.",
    "SQL": "SELECT raceId FROM races WHERE circuitId = 3",
    "db_id": "formula_1",
    "table_description": "Contains information about Formula 1 races, including the race ID, year, round, circuit ID, name, date, time, and URL.",
    "config": {
      "dimension": [
        {
          "column": "raceId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "circuitId",
          "match_type": "等于",
          "condition": "3"
        }
      ]
    },
    "table_name": "races",
    "id": 947
  },
  {
    "question": "How many drivers won in race ID number 18?",
    "SQL": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18 AND wins = 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "raceId",
          "match_type": "等于",
          "condition": "18"
        },
        {
          "column": "wins",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "driverStandings",
    "id": 948
  },
  {
    "question": "What is the reference name of the driver with the nationality of British?",
    "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND nationality = 'British'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "forename",
          "match_type": "精确匹配",
          "condition": "Robert"
        },
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "British"
        }
      ]
    },
    "table_name": "drivers",
    "id": 949
  },
  {
    "question": "How many drivers who were born after 1980 and are British?",
    "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
    "db_id": "formula_1",
    "table_description": "This table contains information about Formula 1 drivers including their ID, reference name, number, code, forename, surname, date of birth, nationality, and URL.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "British"
        },
        {
          "column": "dob",
          "match_type": "大于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "drivers",
    "id": 950
  },
  {
    "question": "Please state the reference name of the oldest driver with the number 6.",
    "SQL": "SELECT driverRef FROM drivers WHERE number = 6 ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "number",
          "match_type": "等于",
          "condition": "6"
        }
      ]
    },
    "table_name": "drivers",
    "id": 951
  },
  {
    "question": "List the driver's ID of the top five drivers, by descending order, who completed the fastest time during the first two laps of the race.",
    "SQL": "SELECT driverId FROM lapTimes WHERE lap IN (1, 2) ORDER BY time LIMIT 5",
    "db_id": "formula_1",
    "table_description": "Lap times for each driver in each race.",
    "config": {
      "dimension": [
        {
          "column": "driverId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "lap",
          "match_type": "在区间",
          "condition": "[1, 2]"
        }
      ]
    },
    "table_name": "lapTimes",
    "id": 952
  },
  {
    "question": "From race no. 50 to 100, how many finishers have been disqualified with a grid position greater than 10?",
    "SQL": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID BETWEEN 50 AND 100 AND grid > 10",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "IIF(time IS NOT NULL, 1, 0)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "statusId",
          "match_type": "等于",
          "condition": "2"
        },
        {
          "column": "raceID",
          "match_type": "在区间",
          "condition": [
            50,
            100
          ]
        },
        {
          "column": "grid",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "results",
    "id": 953
  },
  {
    "question": "How many times the circuits were held in Spain? Please give their location and coordinates.",
    "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Spain'",
    "db_id": "formula_1",
    "table_description": "This table contains information about various circuits used in Formula 1 races, including their names, locations, countries, latitude, longitude, and URLs.",
    "config": {
      "dimension": [
        {
          "column": "location"
        },
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Spain"
        }
      ]
    },
    "table_name": "circuits",
    "id": 954
  },
  {
    "question": "What is the most common grid position for the race with the most finishers?",
    "SQL": "SELECT grid FROM results WHERE raceId = (SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1) GROUP BY grid ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "formula_1",
    "table_description": "The results table contains detailed information about each race result, including the race ID, driver ID, constructor ID, grid position, finishing position, and other performance metrics.",
    "config": {
      "dimension": [
        {
          "column": "grid"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "raceId",
          "match_type": "等于",
          "condition": "(SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1)"
        }
      ]
    },
    "table_name": "results",
    "id": 955
  },
  {
    "question": "What is the full name and date of birth of German drivers born between 1980 and 1990?",
    "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1980' AND '1990'",
    "db_id": "formula_1",
    "table_description": "Drivers table contains information about Formula 1 drivers.",
    "config": {
      "dimension": [
        {
          "column": "forename"
        },
        {
          "column": "surname"
        },
        {
          "column": "dob"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "German"
        },
        {
          "column": "dob",
          "match_type": "在区间",
          "condition": [
            "1980-01-01",
            "1990-12-31"
          ]
        }
      ]
    },
    "table_name": "drivers",
    "id": 956
  },
  {
    "question": "Find the full name, Wiki Pedia page link, and date of birth of drivers with the code 'ROS' born between 1971 and 1985. List it in descending order of date of birth.",
    "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE code = 'ROS' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "db_id": "formula_1",
    "table_description": "Drivers table contains information about Formula 1 drivers including their name, date of birth, nationality, and Wikipedia URL.",
    "config": {
      "dimension": [
        {
          "column": "forename"
        },
        {
          "column": "surname"
        },
        {
          "column": "url"
        },
        {
          "column": "dob"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "ROS"
        },
        {
          "column": "dob",
          "match_type": "在区间",
          "condition": [
            "1971-01-01",
            "1985-12-31"
          ]
        }
      ]
    },
    "table_name": "drivers",
    "id": 957
  },
  {
    "question": "In which location does the Sepang International Circuit located? Also, find the country and coordinates of this circuit?",
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Sepang International Circuit'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "country"
        },
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Sepang International Circuit"
        }
      ]
    },
    "table_name": "circuits",
    "id": 958
  },
  {
    "question": "What is the annual average number of races held in the first half of the 21st century (2000-2005)?",
    "SQL": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2005 THEN 1 ELSE 0 END) AS REAL) / 6 FROM races WHERE year BETWEEN 2000 AND 2005",
    "db_id": "formula_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN year BETWEEN 2000 AND 2005 THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "在区间",
          "condition": [
            "2000",
            "2005"
          ]
        }
      ]
    },
    "table_name": "races",
    "id": 959
  },
  {
    "question": "Which citizenship do the vast majority of the drivers who have a driver reference starting with 'h' hold?",
    "SQL": "SELECT nationality FROM drivers WHERE driverRef LIKE 'h%' GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
    "db_id": "formula_1",
    "table_description": "Drivers table contains information about Formula 1 drivers including their IDs, references, numbers, codes, names, dates of birth, nationalities, and URLs.",
    "config": {
      "dimension": [
        {
          "column": "nationality"
        }
      ],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "driverRef",
          "match_type": "模糊匹配",
          "condition": "h%"
        }
      ]
    },
    "table_name": "drivers",
    "id": 960
  },
  {
    "question": "How many victories did the driver who finished in 91st place acquire?",
    "SQL": "SELECT SUM(CASE WHEN position = 91 THEN wins ELSE 0 END) FROM driverStandings",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "wins",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "position",
          "match_type": "等于",
          "condition": "91"
        }
      ]
    },
    "table_name": "driverStandings",
    "id": 961
  },
  {
    "question": "What was the longest time a driver spent at a pit stop during the 16th lap?",
    "SQL": "SELECT duration FROM pitStops WHERE lap = 16 ORDER BY duration DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "duration",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "lap",
          "match_type": "等于",
          "condition": "16"
        }
      ]
    },
    "table_name": "pitStops",
    "id": 962
  },
  {
    "question": "Which player has the highest overall rating in the last year? Indicate the player's api id.",
    "SQL": "SELECT player_api_id FROM Player_Attributes WHERE date >= '2015-02-18' ORDER BY overall_rating DESC LIMIT 1",
    "db_id": "european_football_2",
    "table_description": "Player attributes including ratings and skills",
    "config": {
      "dimension": [
        {
          "column": "player_api_id"
        }
      ],
      "measure": [
        {
          "column": "overall_rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "2015-02-18",
            null
          ]
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 963
  },
  {
    "question": "What is the height of the tallest player with a weight greater than 160 pounds? Indicate his name.",
    "SQL": "SELECT player_name FROM Player WHERE weight > 160 ORDER BY height DESC LIMIT 1",
    "db_id": "european_football_2",
    "table_description": "Player table contains information about players including their names, heights, and weights.",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [
        {
          "column": "height",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "160"
        }
      ]
    },
    "table_name": "Player",
    "id": 964
  },
  {
    "question": "What is the preferred foot when attacking of the player with the lowest overall rating?",
    "SQL": "SELECT preferred_foot FROM Player_Attributes WHERE overall_rating IS NOT NULL ORDER BY overall_rating ASC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "preferred_foot"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "overall_rating",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 965
  },
  {
    "question": "Among the players with an overall rating between 60 to 65, how many players have a medium attacking work rate?",
    "SQL": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND attacking_work_rate = 'medium'",
    "db_id": "european_football_2",
    "table_description": "Player attributes including various ratings and skills.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "overall_rating",
          "match_type": "在区间",
          "condition": [
            60,
            65
          ]
        },
        {
          "column": "attacking_work_rate",
          "match_type": "精确匹配",
          "condition": "medium"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 966
  },
  {
    "question": "Who are the top 5 players who perform better in crossing actions within the last year? Indicate their player id.",
    "SQL": "SELECT id FROM Player_Attributes WHERE date >= DATE('now', '-1 year') ORDER BY crossing DESC LIMIT 5",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "crossing",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "absolute_time",
          "condition": [
            "2022-04-07",
            "2023-04-07"
          ]
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 967
  },
  {
    "question": "What is the average height of players who weigh more than 150 pounds?",
    "SQL": "SELECT AVG(height) FROM Player WHERE weight > 150",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "height",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": 150
        }
      ]
    },
    "table_name": "Player",
    "id": 968
  },
  {
    "question": "List the players' api id who had the highest above average overall ratings in the last quarter of 2010.",
    "SQL": "SELECT player_api_id FROM Player_Attributes WHERE `date` BETWEEN '2010-10-01' AND '2010-12-31' ORDER BY overall_rating DESC LIMIT 1",
    "db_id": "european_football_2",
    "table_description": "Player_Attributes",
    "config": {
      "dimension": [
        {
          "column": "player_api_id"
        }
      ],
      "measure": [
        {
          "column": "overall_rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "2010-10-01",
            "2010-12-31"
          ]
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 969
  },
  {
    "question": "Give the team_fifa_api_id of teams with build-up play dribbling between 45 and 55.",
    "SQL": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlayDribbling BETWEEN 45 AND 55",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "team_fifa_api_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "buildUpPlayDribbling",
          "match_type": "在区间",
          "condition": "(45, 55)"
        }
      ]
    },
    "table_name": "Team_Attributes",
    "id": 970
  },
  {
    "question": "What is the long name of the football team with the short name GEN?",
    "SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "team_short_name",
          "match_type": "精确匹配",
          "condition": "GEN"
        }
      ]
    },
    "table_name": "Team",
    "id": 971
  },
  {
    "question": "List the football players with a birthyear of 1970 and a birthdate of May 1st.",
    "SQL": "SELECT player_name FROM Player WHERE DATE_FORMAT(birthday, '%Y-%m-%d') = '1970-05-01'",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birthday",
          "match_type": "绝对时间",
          "condition": [
            "1970-05-01",
            "1970-05-01"
          ]
        }
      ]
    },
    "table_name": "Player",
    "id": 972
  },
  {
    "question": "Please list player names which have a weight of more than 150.",
    "SQL": "SELECT player_name FROM Player WHERE weight > 150",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "150"
        }
      ]
    },
    "table_name": "Player",
    "id": 973
  },
  {
    "question": "How many players have a height greater than 180 cm?",
    "SQL": "SELECT COUNT(id) FROM Player WHERE height > 180",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "height",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "table_name": "Player",
    "id": 974
  },
  {
    "question": "How many players whose last names are Hughes and weigh more than 150?",
    "SQL": "SELECT COUNT(id) FROM Player WHERE weight > 150 AND player_name LIKE '%Hughes'",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "150"
        },
        {
          "column": "player_name",
          "match_type": "模糊匹配",
          "condition": "%Hughes"
        }
      ]
    },
    "table_name": "Player",
    "id": 975
  },
  {
    "question": "Which football player is the lightest?",
    "SQL": "SELECT player_name FROM player ORDER BY weight ASC LIMIT 1",
    "db_id": "european_football_2",
    "table_description": "This table contains information about football players including their ID, name, FIFA API ID, birthday, height, and weight.",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "player",
    "id": 976
  },
  {
    "question": "What's the long name for the team with ID 9987?",
    "SQL": "SELECT team_long_name FROM Team WHERE team_api_id = 9987",
    "db_id": "european_football_2",
    "table_description": "Team table contains information about football teams including their API IDs, FIFA API IDs, long names, and short names.",
    "config": {
      "dimension": [
        {
          "column": "team_long_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "team_api_id",
          "match_type": "等于",
          "condition": "9987"
        }
      ]
    },
    "table_name": "Team",
    "id": 977
  },
  {
    "question": "Which player is taller, Aaron Lennon or Aaron Hughes?",
    "SQL": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Aaron Hughes') ORDER BY height DESC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "player_name",
          "match_type": "精确匹配",
          "condition": "Aaron Lennon"
        },
        {
          "column": "player_name",
          "match_type": "精确匹配",
          "condition": "Aaron Hughes"
        }
      ]
    },
    "table_name": "Player",
    "id": 978
  },
  {
    "question": "Which player is the tallest and weighs more than 150?",
    "SQL": "SELECT player_name FROM Player WHERE weight > 150 ORDER BY height DESC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [
        {
          "column": "height",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "150"
        }
      ]
    },
    "table_name": "Player",
    "id": 979
  },
  {
    "question": "Among the players with an overall rating of 67, how many of them would remain in his position when the team attacked and preferred their left foot?",
    "SQL": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE overall_rating = 67 AND attacking_work_rate = 'low' AND preferred_foot = 'left'",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "player_api_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "overall_rating",
          "match_type": "等于",
          "condition": 67
        },
        {
          "column": "attacking_work_rate",
          "match_type": "精确匹配",
          "condition": "low"
        },
        {
          "column": "preferred_foot",
          "match_type": "精确匹配",
          "condition": "left"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 980
  },
  {
    "question": "List down the names of the heaviest players.",
    "SQL": "SELECT player_name FROM (SELECT player_name, weight, DENSE_RANK() OVER (ORDER BY weight DESC) as rank FROM Player) WHERE rank = 1",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rank",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Player",
    "id": 981
  },
  {
    "question": "List down the name of players whose height is greater than 180 cm.",
    "SQL": "SELECT player_name FROM Player WHERE height > 180",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "table_name": "Player",
    "id": 982
  },
  {
    "question": "Please provide the names of top three football players who weigh more than 180 kg in alphabetical order.",
    "SQL": "SELECT player_name FROM Player WHERE weight > 180 ORDER BY player_name LIMIT 3",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "table_name": "Player",
    "id": 983
  },
  {
    "question": "How many football players born after 1992 have the first name 'Aaron'?",
    "SQL": "SELECT COUNT(id) FROM Player WHERE birthday > '1992' AND player_name LIKE 'Aaron%'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "birthday",
          "match_type": "大于",
          "condition": "1992"
        },
        {
          "column": "player_name",
          "match_type": "模糊匹配",
          "condition": "Aaron%"
        }
      ]
    },
    "table_name": "Player",
    "id": 984
  },
  {
    "question": "What is the difference between players 6 and 23's jumping scores on their most recent date entry?",
    "SQL": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1 WHERE t1.date = (SELECT MAX(date) FROM Player_Attributes)",
    "db_id": "european_football_2",
    "table_description": "Player_Attributes contains attributes for each player at different points in time.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "jumping",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "等于",
          "condition": "(SELECT MAX(date) FROM Player_Attributes)"
        },
        {
          "column": "id",
          "match_type": "等于",
          "condition": "23"
        }
      ]
    },
    "table_name": "Player_Attributes AS t1",
    "id": 985
  },
  {
    "question": "Please provide top five football players' IDs who are among the lowest potential players and have an overall rating of at least 60.",
    "SQL": "SELECT id FROM Player_Attributes WHERE overall_rating >= 60 ORDER BY potential ASC LIMIT 5",
    "db_id": "european_football_2",
    "table_description": "Player attributes including various skills and ratings.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "overall_rating",
          "match_type": "大于等于",
          "condition": "60"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 986
  },
  {
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while having an attacking work rate of medium?",
    "SQL": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.attacking_work_rate = 'medium' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
    "db_id": "european_football_2",
    "table_description": "Player attributes including skills, ratings, and other relevant information.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "t1.id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "t1.preferred_foot",
          "match_type": "精确匹配",
          "condition": "left"
        },
        {
          "column": "t1.attacking_work_rate",
          "match_type": "精确匹配",
          "condition": "medium"
        },
        {
          "column": "t1.crossing",
          "match_type": "等于",
          "condition": "( SELECT MAX(crossing) FROM Player_Attributes)"
        }
      ]
    },
    "table_name": "Player_Attributes AS t1",
    "id": 987
  },
  {
    "question": "Are there more in-patient or outpatient who were female? What is the deviation in percentage?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'F'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Admission"
        }
      ],
      "measure": [
        {
          "column": "CASE WHEN Admission = '+' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        },
        {
          "column": "CASE WHEN Admission = '-' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "等于",
          "condition": "F"
        }
      ]
    },
    "table_name": "Patient",
    "id": 988
  },
  {
    "question": "What is the percentage of female patients who were admitted?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
    "db_id": "thrombosis_prediction",
    "table_description": "Table containing patient information including sex, birthday, admission status, etc.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN Admission = '+' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        },
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "等于",
          "condition": "F"
        },
        {
          "column": "Admission",
          "match_type": "等于",
          "condition": "+"
        }
      ]
    },
    "table_name": "Patient",
    "id": 989
  },
  {
    "question": "For patients with the diagnosis of 'RA susp.', what is the percentage of inpatients among those born between Year 1930 to 1940?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940' AND Diagnosis LIKE '%RA susp.%'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Admission",
          "aggregate_function": "CUSTOM"
        }
      ],
      "filter": [
        {
          "column": "Birthday",
          "match_type": "在区间",
          "condition": [
            "1930-01-01",
            "1940-12-31"
          ]
        },
        {
          "column": "Diagnosis",
          "match_type": "模糊匹配",
          "condition": "RA susp."
        }
      ]
    },
    "table_name": "Patient",
    "id": 990
  },
  {
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'RA, SLE susp.' diagnosed patients?",
    "SQL": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'RA, SLE susp.'",
    "db_id": "thrombosis_prediction",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Admission",
          "aggregate_function": "SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END)"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "RA, SLE susp."
        }
      ]
    },
    "table_name": "Patient",
    "id": 991
  },
  {
    "question": "How many female patients who were born before 1950 and came to the hospital in 1997 was immediately followed at the outpatient clinic?",
    "SQL": "SELECT COUNT(*) FROM Patient WHERE Birthday < '1950-01-01' AND STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
    "db_id": "thrombosis_prediction",
    "table_description": "Patient table contains information about patients including their sex, birthday, description of visit, first date of visit, admission status, and diagnosis.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Birthday",
          "match_type": "小于",
          "condition": "1950-01-01"
        },
        {
          "column": "Description",
          "match_type": "绝对时间",
          "condition": "1997-01-01 至 1997-12-31"
        },
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        },
        {
          "column": "Admission",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "Patient",
    "id": 992
  },
  {
    "question": "What was the age of the youngest female patient when they initially arrived at the hospital?",
    "SQL": "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient WHERE SEX = 'F'",
    "db_id": "thrombosis_prediction",
    "table_description": "Table containing patient information including their sex, birthday, first date of admission, and diagnosis.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        }
      ]
    },
    "table_name": "Patient",
    "id": 993
  },
  {
    "question": "What was the anti-nucleus antibody concentration level for the patient with diagnosis MCTD, AMI on 1996/12/2?",
    "SQL": "SELECT ANA FROM Examination WHERE Diagnosis = 'MCTD, AMI' AND `Examination Date` = '1996-12-02'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ANA",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "等于",
          "condition": "MCTD, AMI"
        },
        {
          "column": "Examination Date",
          "match_type": "绝对时间",
          "condition": [
            "1996-12-02",
            "1996-12-02"
          ]
        }
      ]
    },
    "table_name": "Examination",
    "id": 994
  },
  {
    "question": "Was the total cholesterol status for the patient id 27654 on 1995-9-4 at the normal level?",
    "SQL": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 27654 AND Date = '1995-09-04'",
    "db_id": "thrombosis_prediction",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Date"
        }
      ],
      "measure": [
        {
          "column": "`T-CHO`",
          "aggregate_function": "CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END"
        }
      ],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "27654"
        },
        {
          "column": "Date",
          "match_type": "等于",
          "condition": "1995-09-04"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 995
  },
  {
    "question": "What was the gender of the first AORTITIS or RA susp. diagnosed patient?",
    "SQL": "SELECT SEX FROM Patient WHERE (Diagnosis = 'AORTITIS' OR Diagnosis = 'RA susp.') AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "db_id": "thrombosis_prediction",
    "table_description": "Patient information including ID, SEX, Birthday, Description, First Date, Admission, and Diagnosis.",
    "config": {
      "dimension": [
        {
          "column": "SEX"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "AORTITIS"
        },
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "RA susp."
        },
        {
          "column": "`First Date`",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "Patient",
    "id": 996
  },
  {
    "question": "Lists all patients by ID who were diagnosed with Behcet's or MCTD and had their exams between 01/01/1997 and 12/31/1997.",
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND (Diagnosis = 'Behcet' OR Diagnosis = 'MCTD, AMI')",
    "db_id": "thrombosis_prediction",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "`Examination Date`",
          "match_type": "绝对时间",
          "condition": [
            "1997-01-01",
            "1997-12-31"
          ]
        },
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "Behcet"
        },
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "MCTD, AMI"
        }
      ]
    },
    "table_name": "Examination",
    "id": 997
  },
  {
    "question": "How many patients who were examined between 1991/9/11 and 1991/9/21 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "SQL": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1991-09-11' AND '1991-09-21' AND GPT > 30 AND ALB < 4",
    "db_id": "thrombosis_prediction",
    "table_description": "Laboratory table contains various laboratory test results for patients.",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "1991-09-11",
            "1991-09-21"
          ]
        },
        {
          "column": "GPT",
          "match_type": "大于",
          "condition": "30"
        },
        {
          "column": "ALB",
          "match_type": "小于",
          "condition": "4"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 998
  },
  {
    "question": "How many female patients with a diagnosis of 'RA susp.' were admitted to the hospital? List them by ID.",
    "SQL": "SELECT ID FROM Patient WHERE SEX = 'F' AND Admission = '+' AND Diagnosis = 'RA susp.'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        },
        {
          "column": "Admission",
          "match_type": "精确匹配",
          "condition": "+"
        },
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "RA susp."
        }
      ]
    },
    "table_name": "Patient",
    "id": 999
  },
  {
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have an examination date before 1997-01-01 and a level of anti-Cardiolipin in antibody (IgM) 20% higher than average?",
    "SQL": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `Examination Date` < '1997-01-01' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `Examination Date` < '1997-01-01')",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Thrombosis",
          "match_type": "等于",
          "condition": "2"
        },
        {
          "column": "`ANA Pattern`",
          "match_type": "精确匹配",
          "condition": "S"
        },
        {
          "column": "`Examination Date`",
          "match_type": "小于",
          "condition": "1997-01-01"
        },
        {
          "column": "`aCL IgM`",
          "match_type": "大于",
          "condition": "(SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `Examination Date` < '1997-01-01')"
        }
      ]
    },
    "table_name": "Examination",
    "id": 1000
  },
  {
    "question": "What percentage of patients with a proteinuria level below 2.7 mg/dL have a uric acid level below the normal range?",
    "SQL": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE `U-PRO` < 2.7",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "UA",
          "aggregate_function": "SUM"
        },
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UA",
          "match_type": "小于等于",
          "condition": "6.5"
        },
        {
          "column": "U-PRO",
          "match_type": "小于",
          "condition": "2.7"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 1001
  },
  {
    "question": "What percentage of male patients who first presented to the hospital in 1991 were diagnosed with RA, SLE susp?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'RA, SLE susp' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1991' AND SEX = 'M'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Diagnosis",
          "aggregate_function": "SUM"
        },
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "RA, SLE susp"
        },
        {
          "column": "First Date",
          "match_type": "绝对时间",
          "condition": [
            "1991-01-01",
            "1991-12-31"
          ]
        },
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "M"
        }
      ]
    },
    "table_name": "Patient",
    "id": 1002
  },
  {
    "question": "What is the most common symptom for patients diagnosed with MCTD, AMI or SLE diseases?",
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis IN ('MCTD, AMI', 'SLE') GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "db_id": "thrombosis_prediction",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Symptoms"
        }
      ],
      "measure": [
        {
          "column": "Symptoms",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "MCTD, AMI"
        }
      ]
    },
    "table_name": "Examination",
    "id": 1003
  },
  {
    "question": "When was the medical information on female patients first documented, and what diseases did they have?",
    "SQL": "SELECT `First Date`, Diagnosis FROM Patient WHERE SEX = 'F'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Diagnosis"
        }
      ],
      "measure": [
        {
          "column": "First Date",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "等于",
          "condition": "F"
        }
      ]
    },
    "table_name": "Patient",
    "id": 1004
  },
  {
    "question": "How many female patients with a diagnosis related to 'RA' were admitted?",
    "SQL": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis LIKE '%RA%'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        },
        {
          "column": "Diagnosis",
          "match_type": "模糊匹配",
          "condition": "%RA%"
        }
      ]
    },
    "table_name": "Patient",
    "id": 1005
  },
  {
    "question": "How many patients who underwent testing in 1997 had ALP levels greater than 150?",
    "SQL": "SELECT COUNT(ID) FROM Laboratory WHERE ALP > 150 AND STRFTIME('%Y', Date) = '1997'",
    "db_id": "thrombosis_prediction",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ALP",
          "match_type": "大于",
          "condition": "150"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "1997-01-01",
            "1997-12-31"
          ]
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 1006
  },
  {
    "question": "What proportion of patients with a positive ANA test result had SLE diagnosed?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE ANA > 0",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Diagnosis",
          "aggregate_function": "SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) * 100 / COUNT(ID)"
        }
      ],
      "filter": [
        {
          "column": "ANA",
          "match_type": "大于",
          "condition": "0"
        }
      ]
    },
    "table_name": "Examination",
    "id": 1007
  },
  {
    "question": "What percentage of patients who were born before 1980 and were diagnosed with RA are women?",
    "SQL": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND Birthday < '1980-01-01'",
    "db_id": "thrombosis_prediction",
    "table_description": "Patient table contains information about patient's sex, birthday, diagnosis, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN SEX = 'F' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        },
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "RA"
        },
        {
          "column": "Birthday",
          "match_type": "小于",
          "condition": "1980-01-01"
        }
      ]
    },
    "table_name": "Patient",
    "id": 1008
  },
  {
    "question": "When is the laboratory examination of patient '27654' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.",
    "SQL": "SELECT Date FROM Laboratory WHERE ID = 27654 AND GOT >= 60",
    "db_id": "thrombosis_prediction",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "27654"
        },
        {
          "column": "GOT",
          "match_type": "大于等于",
          "condition": "60"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 1009
  },
  {
    "question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with ALP (Alkaline Phosphatase) within the normal range.",
    "SQL": "SELECT AVG(LDH) FROM Laboratory WHERE ALP < 150",
    "db_id": "thrombosis_prediction",
    "table_description": "Laboratory",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LDH",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "ALP",
          "match_type": "小于",
          "condition": "150"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 1010
  },
  {
    "question": "What is the examination date of the patient whose creatinine (CRE) level is above 1.0?",
    "SQL": "SELECT Date FROM Laboratory WHERE CRE > 1.0",
    "db_id": "thrombosis_prediction",
    "table_description": "This table contains laboratory test results for patients, including various biochemical markers such as ALB, CRE, etc.",
    "config": {
      "dimension": [
        {
          "column": "Date"
        }
      ],
      "measure": [
        {
          "column": "CRE",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "CRE",
          "match_type": "大于",
          "condition": 1.0
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 1011
  },
  {
    "question": "What is the most expensive item that was spent in support of club events during September 2019?",
    "SQL": "SELECT expense_description FROM expense WHERE expense_date BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY cost DESC LIMIT 1",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "expense_description"
        }
      ],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "expense_date",
          "match_type": "绝对时间",
          "condition": [
            "2019-09-01",
            "2019-09-30"
          ]
        }
      ]
    },
    "table_name": "expense",
    "id": 1012
  },
  {
    "question": "Give the location for events of type 'Election'.",
    "SQL": "SELECT location FROM event WHERE type = 'Election'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "location"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Election"
        }
      ]
    },
    "table_name": "event",
    "id": 1013
  },
  {
    "question": "What was the cost for items related to \"Post\" on 2019/9/4?",
    "SQL": "SELECT cost FROM expense WHERE expense_description LIKE '%Post%' AND expense_date = '2019-09-04'",
    "db_id": "student_club",
    "table_description": "expense",
    "config": {
      "dimension": [
        {
          "column": "expense_description"
        },
        {
          "column": "expense_date"
        }
      ],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "模糊匹配",
          "condition": "Post"
        },
        {
          "column": "expense_date",
          "match_type": "绝对时间",
          "condition": "2019-09-04"
        }
      ]
    },
    "table_name": "expense",
    "id": 1014
  },
  {
    "question": "With the biggest budget for the open events, what was the remaining of it?",
    "SQL": "SELECT remaining FROM budget WHERE event_status = 'Open' AND amount = ( SELECT MAX(amount) FROM budget WHERE event_status = 'Open' )",
    "db_id": "student_club",
    "table_description": "The budget table records the financial details of different categories and events, including the amount allocated, spent, and remaining.",
    "config": {
      "dimension": [
        {
          "column": "event_status"
        }
      ],
      "measure": [
        {
          "column": "amount",
          "aggregate_function": "MAX"
        },
        {
          "column": "remaining",
          "aggregate_function": "none"
        }
      ],
      "filter": [
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Open"
        }
      ]
    },
    "table_name": "budget",
    "id": 1015
  },
  {
    "question": "What was the notes of the fundraising on 2019/9/18?",
    "SQL": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-18'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "notes",
          "aggregate_function": "none"
        }
      ],
      "filter": [
        {
          "column": "source",
          "match_type": "精确匹配",
          "condition": "Fundraising"
        },
        {
          "column": "date_received",
          "match_type": "绝对时间",
          "condition": "2019-09-18"
        }
      ]
    },
    "table_name": "income",
    "id": 1016
  },
  {
    "question": "How many majors are there in the School of Business?",
    "SQL": "SELECT COUNT(major_name) FROM major WHERE college = 'School of Business'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "major_name",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "college",
          "match_type": "精确匹配",
          "condition": "School of Business"
        }
      ]
    },
    "table_name": "major",
    "id": 1017
  },
  {
    "question": "Tell the phone number of the member with the email 'luisa.guidi@lpu.edu'.",
    "SQL": "SELECT phone FROM member WHERE email = 'luisa.guidi@lpu.edu'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "phone"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "email",
          "match_type": "精确匹配",
          "condition": "luisa.guidi@lpu.edu"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Jacobs"
        }
      ]
    },
    "table_name": "member",
    "id": 1018
  },
  {
    "question": "What is the total cost of the expenses that are related to food for all the events?",
    "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description LIKE '%food%'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "模糊匹配",
          "condition": "food"
        }
      ]
    },
    "table_name": "expense",
    "id": 1019
  },
  {
    "question": "How many cities are there in Suffolk County, New York?",
    "SQL": "SELECT COUNT(city) FROM zip_code WHERE county = 'Suffolk County' AND state = 'New York'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "city",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "county",
          "match_type": "精确匹配",
          "condition": "Suffolk County"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "New York"
        }
      ]
    },
    "table_name": "zip_code",
    "id": 1020
  },
  {
    "question": "List all of the School of Business' departments.",
    "SQL": "SELECT department FROM major WHERE college = 'School of Business'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "department"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "college",
          "match_type": "精确匹配",
          "condition": "School of Business"
        }
      ]
    },
    "table_name": "major",
    "id": 1021
  },
  {
    "question": "How many students have a T-shirt size of X-Large?",
    "SQL": "SELECT COUNT(member_id) FROM member WHERE t_shirt_size = 'X-Large'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "member_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "t_shirt_size",
          "match_type": "精确匹配",
          "condition": "X-Large"
        }
      ]
    },
    "table_name": "member",
    "id": 1022
  },
  {
    "question": "What is the highest amount of budget spend for an open event?",
    "SQL": "SELECT MAX(spent) FROM budget WHERE event_status = 'Open'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "spent",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Open"
        }
      ]
    },
    "table_name": "budget",
    "id": 1023
  },
  {
    "question": "How many meeting events were held in MU 215 in 2020?",
    "SQL": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020' AND location = 'MU 215'",
    "db_id": "student_club",
    "table_description": "Event records of a student club, including event ID, name, date, type, notes, location, and status.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "event_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Meeting"
        },
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2020-01-01",
            "2020-12-31"
          ]
        },
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "MU 215"
        }
      ]
    },
    "table_name": "event",
    "id": 1024
  },
  {
    "question": "What is the total amount of money spent for food where the event status is closed?",
    "SQL": "SELECT SUM(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "spent",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        },
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Closed"
        }
      ]
    },
    "table_name": "budget",
    "id": 1025
  },
  {
    "question": "What is the ratio between students majored in finance and those in forestry management?",
    "SQL": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Forest Ecology and Management' THEN 1 ELSE 0 END) AS ratio FROM major",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "major_name",
          "aggregate_function": "SUM"
        },
        {
          "column": "major_name",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "major_name",
          "match_type": "精确匹配",
          "condition": "Finance"
        },
        {
          "column": "major_name",
          "match_type": "精确匹配",
          "condition": "Forest Ecology and Management"
        }
      ]
    },
    "table_name": "major",
    "id": 1026
  },
  {
    "question": "Provide the full name and email address of the Student_Club's Member with a Medium t-shirt size.",
    "SQL": "SELECT first_name, last_name, email FROM member WHERE t_shirt_size = 'Medium'",
    "db_id": "student_club",
    "table_description": "member table contains information about the members of the student club, including their names, positions, contact details, and more.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "t_shirt_size",
          "match_type": "精确匹配",
          "condition": "Medium"
        }
      ]
    },
    "table_name": "member",
    "id": 1027
  },
  {
    "question": "On average, how much did the Student_Club spend on food for the typical closed or open event in the past?",
    "SQL": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status IN ('Closed', 'Open')",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "spent",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        },
        {
          "column": "event_status",
          "match_type": "在区间",
          "condition": [
            "Closed",
            "Open"
          ]
        }
      ]
    },
    "table_name": "budget",
    "id": 1028
  },
  {
    "question": "Among all events held by the Student_Club in 2019, find the percentage share of events located at 'MU 215'.",
    "SQL": "SELECT CAST(SUM(CASE WHEN location = 'MU 215' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(location) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'",
    "db_id": "student_club",
    "table_description": "Table containing information about events organized by the Student Club.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "location",
          "aggregate_function": "SUM(CASE WHEN location = 'MU 215' THEN 1 ELSE 0 END) * 100 / COUNT(location)"
        }
      ],
      "filter": [
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2019-01-01",
            "2019-12-31"
          ]
        },
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "MU 215"
        }
      ]
    },
    "table_name": "event",
    "id": 1029
  },
  {
    "question": "What is the most popular size of t-shirt among active club members?",
    "SQL": "SELECT t_shirt_size FROM member WHERE position = 'Member' GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "t_shirt_size"
        }
      ],
      "measure": [
        {
          "column": "t_shirt_size",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "position",
          "match_type": "精确匹配",
          "condition": "Member"
        }
      ]
    },
    "table_name": "member",
    "id": 1030
  },
  {
    "question": "Among the budgets for Open events, which one has the highest budgeted amount?",
    "SQL": "SELECT budget_id FROM budget WHERE event_status = 'Open' AND amount = ( SELECT MAX(amount) FROM budget WHERE event_status = 'Open' )",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "budget_id"
        }
      ],
      "measure": [
        {
          "column": "amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Open"
        }
      ]
    },
    "table_name": "budget",
    "id": 1031
  },
  {
    "question": "Among the budgets for events that are Closed, list out top three which have the most budgeted amount?",
    "SQL": "SELECT budget_id FROM budget WHERE event_status = 'Closed' ORDER BY amount DESC LIMIT 3",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "budget_id"
        }
      ],
      "measure": [
        {
          "column": "amount",
          "aggregate_function": "DESC"
        }
      ],
      "filter": [
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Closed"
        }
      ]
    },
    "table_name": "budget",
    "id": 1032
  },
  {
    "question": "Calculate the total cost spent on items related to Posters in the list.",
    "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description LIKE '%Posters%'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "模糊匹配",
          "condition": "Posters"
        }
      ]
    },
    "table_name": "expense",
    "id": 1033
  },
  {
    "question": "Mention the total expense used for items related to posters on 8/20/2019.",
    "SQL": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20' AND expense_description LIKE '%Posters%'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_date",
          "match_type": "绝对时间",
          "condition": "2019-08-20"
        },
        {
          "column": "expense_description",
          "match_type": "模糊匹配",
          "condition": "Posters"
        }
      ]
    },
    "table_name": "expense",
    "id": 1034
  },
  {
    "question": "How many income are received from the source 'Dues'?",
    "SQL": "SELECT COUNT(income_id) FROM income WHERE source = 'Dues'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "income_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "source",
          "match_type": "等于",
          "condition": "Dues"
        }
      ]
    },
    "table_name": "income",
    "id": 1035
  },
  {
    "question": "Among the active members, how many of them have an extra large t-shirt size?",
    "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'Active' AND t_shirt_size = 'X-Large'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "member_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "position",
          "match_type": "精确匹配",
          "condition": "Active"
        },
        {
          "column": "t_shirt_size",
          "match_type": "精确匹配",
          "condition": "X-Large"
        }
      ]
    },
    "table_name": "member",
    "id": 1036
  },
  {
    "question": "In the College of Agriculture and Applied Sciences, how many majors are related to technology and education?",
    "SQL": "SELECT COUNT(major_id) FROM major WHERE department LIKE '%Technology and Education%' AND college = 'College of Agriculture and Applied Sciences'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "major_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "department",
          "match_type": "模糊匹配",
          "condition": "%Technology and Education%"
        },
        {
          "column": "college",
          "match_type": "精确匹配",
          "condition": "College of Agriculture and Applied Sciences"
        }
      ]
    },
    "table_name": "major",
    "id": 1037
  },
  {
    "question": "Which counties in New York have zip codes with post office boxes?",
    "SQL": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND state = 'New York'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "county"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "PO Box"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "New York"
        }
      ]
    },
    "table_name": "zip_code",
    "id": 1038
  },
  {
    "question": "What are the zip codes that have standard post office types in the county of Aguadilla Municipio whose state is Puerto Rico?",
    "SQL": "SELECT zip_code FROM zip_code WHERE type = 'Standard' AND county = 'Aguadilla Municipio' AND state = 'Puerto Rico'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "zip_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Standard"
        },
        {
          "column": "county",
          "match_type": "精确匹配",
          "condition": "Aguadilla Municipio"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Puerto Rico"
        }
      ]
    },
    "table_name": "zip_code",
    "id": 1039
  },
  {
    "question": "List the names of closed events that were held at the Campus Soccer/Lacrosse stadium from 3/15/2019 to 3/20/2020.",
    "SQL": "SELECT DISTINCT event_name FROM event WHERE location = 'Campus Soccer/Lacrosse stadium' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "event_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "Campus Soccer/Lacrosse stadium"
        },
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2019-03-15",
            "2020-03-20"
          ]
        },
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "Closed"
        }
      ]
    },
    "table_name": "event",
    "id": 1040
  },
  {
    "question": "What is the percentage of closed events that went over budget?",
    "SQL": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget WHERE event_status = 'Closed'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "remaining",
          "aggregate_function": "SUM"
        },
        {
          "column": "budget_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Closed"
        },
        {
          "column": "remaining",
          "match_type": "小于",
          "condition": "0"
        }
      ]
    },
    "table_name": "budget",
    "id": 1041
  },
  {
    "question": "Give the event ID, location, and status of events that are related to meetings conducted from November 2019 to March 2020.",
    "SQL": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31' AND type = 'Meeting'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "event_id"
        },
        {
          "column": "location"
        },
        {
          "column": "status"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2019-11-01",
            "2020-03-31"
          ]
        },
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Meeting"
        }
      ]
    },
    "table_name": "event",
    "id": 1042
  },
  {
    "question": "List the expenses that have an average cost greater than the cost of the 'Parking' expense.",
    "SQL": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > (SELECT cost FROM expense WHERE expense_description = 'Parking')",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "expense_description"
        }
      ],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "cost",
          "match_type": "大于",
          "condition": "(SELECT cost FROM expense WHERE expense_description = 'Parking')"
        }
      ]
    },
    "table_name": "expense",
    "id": 1043
  },
  {
    "question": "Find the full name of members whose t-shirt size is medium or larger.",
    "SQL": "SELECT first_name, last_name FROM member WHERE t_shirt_size IN ('Medium', 'X-Large')",
    "db_id": "student_club",
    "table_description": "Table containing information about club members including their names, contact details, and t-shirt sizes.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "t_shirt_size",
          "match_type": "在区间",
          "condition": "['Medium', 'X-Large']"
        }
      ]
    },
    "table_name": "member",
    "id": 1044
  },
  {
    "question": "Calculate the percentage of zip codes that are Standard.",
    "SQL": "SELECT CAST(SUM(CASE WHEN type = 'Standard' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "zip_code",
          "aggregate_function": "COUNT"
        },
        {
          "column": "type",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Standard"
        }
      ]
    },
    "table_name": "zip_code",
    "id": 1045
  },
  {
    "question": "How many gas stations in CZE have a Chain ID of 13?",
    "SQL": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND ChainID = 13",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GasStationID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "ChainID",
          "match_type": "等于",
          "condition": "13"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 1046
  },
  {
    "question": "What is the ratio of customers in the SME segment who pay in EUR against customers who pay in CZK?",
    "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR' AND Segment = 'SME', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Currency",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Currency",
          "match_type": "精确匹配",
          "condition": "EUR"
        },
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "SME"
        },
        {
          "column": "Currency",
          "match_type": "精确匹配",
          "condition": "CZK"
        }
      ]
    },
    "table_name": "customers",
    "id": 1047
  },
  {
    "question": "How much did customer 5 consume in total between January and March 2013?",
    "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 5 AND Date BETWEEN '201301' AND '201303'",
    "db_id": "debit_card_specializing",
    "table_description": "Table containing customer consumption data by month",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Consumption",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "CustomerID",
          "match_type": "等于",
          "condition": "5"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2013-01-01",
            "2013-03-31"
          ]
        }
      ]
    },
    "table_name": "yearmonth",
    "id": 1048
  },
  {
    "question": "How many more \"value for money\" gas stations does the Czech Republic have compared to Germany?",
    "SQL": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'DEU', 1, 0)) FROM gasstations WHERE Segment = 'Value for money'",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Country",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Value for money"
        },
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "DEU"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 1049
  },
  {
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more? And how many SMEs pay in Czech koruna?",
    "SQL": "SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END), SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS CZK_count FROM customers WHERE Segment = 'SME'",
    "db_id": "debit_card_specializing",
    "table_description": "Table containing customer information including segment and currency.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        },
        {
          "column": "SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "SME"
        }
      ]
    },
    "table_name": "customers",
    "id": 1050
  },
  {
    "question": "What percentage of SME customers pay in euros?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'SME'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CustomerID",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Currency",
          "aggregate_function": "SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)"
        }
      ],
      "filter": [
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "SME"
        }
      ]
    },
    "table_name": "customers",
    "id": 1051
  },
  {
    "question": "In March 2012, what percentage of customers consumed more than 51.06?",
    "SQL": "SELECT CAST(SUM(IIF(Consumption > 51.06, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201203'",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CustomerID",
          "aggregate_function": "COUNT"
        },
        {
          "column": "IIF(Consumption > 51.06, 1, 0)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "精确匹配",
          "condition": "201203"
        },
        {
          "column": "Consumption",
          "match_type": "大于",
          "condition": 51.06
        }
      ]
    },
    "table_name": "yearmonth",
    "id": 1052
  },
  {
    "question": "What percentage of Czech gas stations are other segments?",
    "SQL": "SELECT CAST(SUM(IIF(Segment = 'Other', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE'",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Segment",
          "aggregate_function": "SUM"
        },
        {
          "column": "GasStationID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Other"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 1053
  },
  {
    "question": "What is the highest monthly consumption for customer 5 in the year 2012?",
    "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 5 AND SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [
        {
          "column": "SUBSTR(Date, 5, 2)"
        }
      ],
      "measure": [
        {
          "column": "Consumption",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "CustomerID",
          "match_type": "等于",
          "condition": "5"
        },
        {
          "column": "Date",
          "match_type": "精确匹配",
          "condition": "2012"
        }
      ]
    },
    "table_name": "yearmonth",
    "id": 1054
  },
  {
    "question": "What is the average total price of the transactions that took place at Gas Station ID 3704?",
    "SQL": "SELECT AVG(Amount) FROM transactions_1k WHERE GasStationID = 3704",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Amount",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "GasStationID",
          "match_type": "等于",
          "condition": 3704
        }
      ]
    },
    "table_name": "transactions_1k",
    "id": 1055
  },
  {
    "question": "Which customer paid the most on 2012-08-24?",
    "SQL": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "CustomerID"
        }
      ],
      "measure": [
        {
          "column": "Price",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "精确匹配",
          "condition": "2012-08-24"
        }
      ]
    },
    "table_name": "transactions_1k",
    "id": 1056
  },
  {
    "question": "Which gas station has the highest amount of revenue for transactions involving ProductID 23?",
    "SQL": "SELECT GasStationID FROM transactions_1k WHERE ProductID = 23 GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
    "db_id": "debit_card_specializing",
    "table_description": "transactions_1k table contains transaction details including date, time, customer ID, card ID, gas station ID, product ID, amount, and price.",
    "config": {
      "dimension": [
        {
          "column": "GasStationID"
        }
      ],
      "measure": [
        {
          "column": "Price",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "ProductID",
          "match_type": "等于",
          "condition": "23"
        }
      ]
    },
    "table_name": "transactions_1k",
    "id": 1057
  },
  {
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"CZE\"?",
    "SQL": "SELECT CAST(SUM(IIF(Country = 'CZE' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'CZE', 1, 0)) FROM gasstations",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Country"
        },
        {
          "column": "Segment"
        }
      ],
      "measure": [
        {
          "column": "1",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Premium"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 1058
  }
]