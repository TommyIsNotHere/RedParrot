[
    {
        "question": "What is the maximum free meal eligibility rate for K-12 students in Alameda County schools?",
        "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "`Free Meal Count (K-12)` / `Enrollment (K-12)`",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "`County Name`",
                    "match_type": "精确匹配",
                    "condition": "Alameda"
                }
            ]
        },
        "table_name": "frpm",
        "id": "0"
    },
    {
        "question": "How many schools in Los Angeles have between 500 and 700 free or reduced price meals for K-12 students?",
        "SQL": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)` < 700",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CDSCode",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "`County Name`",
                    "match_type": "精确匹配",
                    "condition": "Los Angeles"
                },
                {
                    "column": "`Free Meal Count (K-12)`",
                    "match_type": "大于",
                    "condition": 500
                },
                {
                    "column": "`FRPM Count (K-12)`",
                    "match_type": "小于",
                    "condition": 700
                }
            ]
        },
        "table_name": "frpm",
        "id": "1"
    },
    {
        "question": "In Contra Costa, which school has the most students taking tests?",
        "SQL": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "sname"
                }
            ],
            "measure": [
                {
                    "column": "NumTstTakr",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "cname",
                    "match_type": "精确匹配",
                    "condition": "Contra Costa"
                },
                {
                    "column": "sname",
                    "match_type": "不为空",
                    "condition": null
                }
            ]
        },
        "table_name": "satscores",
        "id": "2"
    },
    {
        "question": "In 1980, what was the average number of schools that opened each month in Alameda County under the Elementary School District?",
        "SQL": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "School",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "DOC",
                    "match_type": "等于",
                    "condition": "52"
                },
                {
                    "column": "County",
                    "match_type": "精确匹配",
                    "condition": "Alameda"
                },
                {
                    "column": "OpenDate",
                    "match_type": "绝对时间",
                    "condition": [
                        "1980-01-01",
                        "1980-12-31"
                    ]
                }
            ]
        },
        "table_name": "schools",
        "id": "3"
    },
    {
        "question": "In Orange County, what is the ratio of merged Unified School Districts to merged Elementary School Districts?",
        "SQL": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END)",
                    "aggregate_function": "CAST"
                }
            ],
            "filter": [
                {
                    "column": "StatusType",
                    "match_type": "精确匹配",
                    "condition": "Merged"
                },
                {
                    "column": "County",
                    "match_type": "精确匹配",
                    "condition": "Orange"
                }
            ]
        },
        "table_name": "schools",
        "id": "4"
    },
    {
        "question": "What is the county with the highest number of closed schools? Please list the names of these schools along with their closure dates.",
        "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "County"
                },
                {
                    "column": "School"
                },
                {
                    "column": "ClosedDate"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "StatusType",
                    "match_type": "等于",
                    "condition": "Closed"
                },
                {
                    "column": "school",
                    "match_type": "不为空",
                    "condition": null
                },
                {
                    "column": "County",
                    "match_type": "等于",
                    "condition": "( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 )"
                }
            ]
        },
        "table_name": "schools",
        "id": "5"
    },
    {
        "question": "List all schools and their corresponding mailing zip codes that are administered by Avetik Atoian.",
        "SQL": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "School"
                },
                {
                    "column": "MailZip"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "AdmFName1",
                    "match_type": "精确匹配",
                    "condition": "Avetik"
                },
                {
                    "column": "AdmLName1",
                    "match_type": "精确匹配",
                    "condition": "Atoian"
                }
            ]
        },
        "table_name": "schools",
        "id": "6"
    },
    {
        "question": "What is the ratio of schools in Colusa County to those in Humboldt County among schools with a mailing address in California?",
        "SQL": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END)",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END)",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "MailState",
                    "match_type": "精确匹配",
                    "condition": "CA"
                }
            ]
        },
        "table_name": "schools",
        "id": "7"
    },
    {
        "question": "How many schools are currently active in San Joaquin city, given that their mailing addresses are in California?",
        "SQL": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active'",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CDSCode",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "San Joaquin"
                },
                {
                    "column": "MailState",
                    "match_type": "精确匹配",
                    "condition": "CA"
                },
                {
                    "column": "StatusType",
                    "match_type": "精确匹配",
                    "condition": "Active"
                }
            ]
        },
        "table_name": "schools",
        "id": "8"
    },
    {
        "question": "Can you provide the phone number and extension for the school located in the 95203-3704 zip code area, along with the school's name?",
        "SQL": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "School"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Zip",
                    "match_type": "精确匹配",
                    "condition": "95203-3704"
                }
            ]
        },
        "table_name": "schools",
        "id": "9"
    },
    {
        "question": "Can you provide the websites for the schools managed by Mike Larson and Dante Alvarez?",
        "SQL": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "Website"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "AdmFName1",
                    "match_type": "精确匹配",
                    "condition": "Mike"
                },
                {
                    "column": "AdmLName1",
                    "match_type": "精确匹配",
                    "condition": "Larson"
                },
                {
                    "column": "AdmFName1",
                    "match_type": "精确匹配",
                    "condition": "Dante"
                },
                {
                    "column": "AdmLName1",
                    "match_type": "精确匹配",
                    "condition": "Alvarez"
                }
            ]
        },
        "table_name": "schools",
        "id": "10"
    },
    {
        "question": "Can you provide the websites for all the partially virtual charter schools in San Joaquin County?",
        "SQL": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "Website"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "County",
                    "match_type": "精确匹配",
                    "condition": "San Joaquin"
                },
                {
                    "column": "Virtual",
                    "match_type": "精确匹配",
                    "condition": "P"
                },
                {
                    "column": "Charter",
                    "match_type": "等于",
                    "condition": 1
                }
            ]
        },
        "table_name": "schools",
        "id": "11"
    },
    {
        "question": "What is the number of charter schools in Hickman that belong to the Elementary School District?",
        "SQL": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "School",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "DOC",
                    "match_type": "等于",
                    "condition": "52"
                },
                {
                    "column": "Charter",
                    "match_type": "等于",
                    "condition": "1"
                },
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Hickman"
                }
            ]
        },
        "table_name": "schools",
        "id": "12"
    },
    {
        "question": "List the first and last names of all administrators in chartered schools that have the charter number 00D2, along with the school name and the city it is located in.",
        "SQL": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "School"
                },
                {
                    "column": "City"
                }
            ],
            "measure": [
                {
                    "column": "AdmFName1",
                    "aggregate_function": "None"
                },
                {
                    "column": "AdmLName1",
                    "aggregate_function": "None"
                }
            ],
            "filter": [
                {
                    "column": "Charter",
                    "match_type": "等于",
                    "condition": "1"
                },
                {
                    "column": "CharterNum",
                    "match_type": "精确匹配",
                    "condition": "00D2"
                }
            ]
        },
        "table_name": "schools",
        "id": "13"
    },
    {
        "question": "How many schools have a mailing city of Hickman and belong to charter number 00D4?",
        "SQL": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "CharterNum",
                    "match_type": "精确匹配",
                    "condition": "00D4"
                },
                {
                    "column": "MailCity",
                    "match_type": "精确匹配",
                    "condition": "Hickman"
                }
            ]
        },
        "table_name": "schools",
        "id": "14"
    },
    {
        "question": "What percentage of Santa Clara County's charter schools are locally funded compared to those with other funding types?",
        "SQL": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "FundingType",
                    "aggregate_function": "CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END)"
                }
            ],
            "filter": [
                {
                    "column": "County",
                    "match_type": "精确匹配",
                    "condition": "Santa Clara"
                },
                {
                    "column": "Charter",
                    "match_type": "等于",
                    "condition": 1
                }
            ]
        },
        "table_name": "schools",
        "id": "15"
    },
    {
        "question": "How many directly funded schools were established in Stanislaus County between January 1, 2000, and December 31, 2005?",
        "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "School",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "OpenDate",
                    "match_type": "绝对时间",
                    "condition": [
                        "2000-01-01",
                        "2005-12-31"
                    ]
                },
                {
                    "column": "County",
                    "match_type": "精确匹配",
                    "condition": "Stanislaus"
                },
                {
                    "column": "FundingType",
                    "match_type": "精确匹配",
                    "condition": "Directly funded"
                }
            ]
        },
        "table_name": "schools",
        "id": "16"
    },
    {
        "question": "How many Community College District schools were closed in San Francisco in 1989?",
        "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "School",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "ClosedDate",
                    "match_type": "绝对时间",
                    "condition": [
                        "1989-01-01",
                        "1989-12-31"
                    ]
                },
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "San Francisco"
                },
                {
                    "column": "DOCType",
                    "match_type": "精确匹配",
                    "condition": "Community College District"
                }
            ]
        },
        "table_name": "schools",
        "id": "17"
    },
    {
        "question": "In the 1980s, which county had the highest number of school closures for schools owned by Youth Authority Facilities (CEA)?",
        "SQL": "SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "County"
                }
            ],
            "measure": [
                {
                    "column": "School",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "ClosedDate",
                    "match_type": "绝对时间",
                    "condition": [
                        "1980-01-01",
                        "1989-12-31"
                    ]
                },
                {
                    "column": "StatusType",
                    "match_type": "精确匹配",
                    "condition": "Closed"
                },
                {
                    "column": "SOC",
                    "match_type": "等于",
                    "condition": 11
                }
            ]
        },
        "table_name": "schools",
        "id": "18"
    },
    {
        "question": "Can you give me the NCES school district ID for all schools that have a School Ownership Code and are included in the State Special Schools?",
        "SQL": "SELECT NCESDist FROM schools WHERE SOC = 31",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "NCESDist"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "SOC",
                    "match_type": "等于",
                    "condition": "31"
                }
            ]
        },
        "table_name": "schools",
        "id": "19"
    },
    {
        "question": "In Alpine County, what is the total number of District Community Day Schools that are either active or closed?",
        "SQL": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'",
        "db_id": "california_schools",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "School",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "StatusType",
                    "match_type": "等于",
                    "condition": "Closed"
                },
                {
                    "column": "StatusType",
                    "match_type": "等于",
                    "condition": "Active"
                },
                {
                    "column": "SOC",
                    "match_type": "等于",
                    "condition": 69
                },
                {
                    "column": "County",
                    "match_type": "精确匹配",
                    "condition": "Alpine"
                }
            ]
        },
        "table_name": "schools",
        "id": "20"
    },
    {
        "question": "What is the most frequently served grade span in the city of Adelanto?",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "GSserved"
                }
            ],
            "measure": [
                {
                    "column": "GSserved",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Adelanto"
                }
            ]
        },
        "table_name": "schools",
        "id": "21"
    },
    {
        "question": "Which county, between San Diego and Santa Barbara, has the highest number of schools without a physical building? Provide the count.",
        "SQL": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "County"
                }
            ],
            "measure": [
                {
                    "column": "Virtual",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "County",
                    "match_type": "精确匹配",
                    "condition": "San Diego"
                },
                {
                    "column": "County",
                    "match_type": "精确匹配",
                    "condition": "Santa Barbara"
                },
                {
                    "column": "Virtual",
                    "match_type": "精确匹配",
                    "condition": "F"
                }
            ]
        },
        "table_name": "schools",
        "id": "22"
    },
    {
        "question": "What grade levels are provided at the school located at the highest longitude?",
        "SQL": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "GSoffered"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "longitude",
                    "match_type": "最大值",
                    "condition": ""
                }
            ]
        },
        "table_name": "schools",
        "id": "23"
    },
    {
        "question": "Find the last name of the administrator responsible for the school with Charter number 40, along with the district, county, and school name.",
        "SQL": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
        "db_id": "california_schools",
        "config": {
            "dimension": [
                {
                    "column": "AdmLName1"
                },
                {
                    "column": "District"
                },
                {
                    "column": "County"
                },
                {
                    "column": "School"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "CharterNum",
                    "match_type": "精确匹配",
                    "condition": "0040"
                }
            ]
        },
        "table_name": "schools",
        "id": "24"
    },
    {
        "question": "Which year, 1995 or 1996, had a higher average unemployment rate?",
        "SQL": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
        "db_id": "financial",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "A13",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "A12",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "district",
        "id": "25"
    },
    {
        "question": "Identify the accounts with the earliest trading date in the year 1995.",
        "SQL": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "db_id": "financial",
        "config": {
            "dimension": [
                {
                    "column": "account_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date",
                    "match_type": "绝对时间",
                    "condition": [
                        "1995-01-01",
                        "1995-12-31"
                    ]
                }
            ]
        },
        "table_name": "trans",
        "id": "26"
    },
    {
        "question": "What percentage of the total loan amount has been fully paid without any issues?",
        "SQL": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
        "db_id": "financial",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "(CASE WHEN status = 'A' THEN amount ELSE 0 END)",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "amount",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "status",
                    "match_type": "等于",
                    "condition": "A"
                }
            ]
        },
        "table_name": "loan",
        "id": "27"
    },
    {
        "question": "What percentage of accounts with a loan amount less than USD100,000 are still running without any issues?",
        "SQL": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
        "db_id": "financial",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "status = 'C'",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "account_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "amount",
                    "match_type": "小于",
                    "condition": "100000"
                }
            ]
        },
        "table_name": "loan",
        "id": "28"
    },
    {
        "question": "Show the account IDs that have a monthly statement issuance.",
        "SQL": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'",
        "db_id": "financial",
        "config": {
            "dimension": [
                {
                    "column": "account_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Frequency",
                    "match_type": "精确匹配",
                    "condition": "POPLATEK MESICNE"
                }
            ]
        },
        "table_name": "account",
        "id": "29"
    },
    {
        "question": "What are the branch locations and district names with the highest unemployment rates in 1996?",
        "SQL": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
        "db_id": "financial",
        "config": {
            "dimension": [
                {
                    "column": "district_id"
                },
                {
                    "column": "A2"
                }
            ],
            "measure": [
                {
                    "column": "A13",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "district",
        "id": "30"
    },
    {
        "question": "What percentage of 'Gold' cards were issued before 1998?",
        "SQL": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card",
        "db_id": "financial",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "type = 'gold' AND STRFTIME('%Y', issued) < '1998'",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "card_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "type",
                    "match_type": "精确匹配",
                    "condition": "gold"
                },
                {
                    "column": "issued",
                    "match_type": "绝对时间",
                    "condition": [
                        "null",
                        "1998-01-01"
                    ]
                }
            ]
        },
        "table_name": "card",
        "id": "31"
    },
    {
        "question": "What is the total number of credit card withdrawals that occurred after 1995?",
        "SQL": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'",
        "db_id": "financial",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "account_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "date",
                    "match_type": "绝对时间",
                    "condition": [
                        "1996-01-01",
                        null
                    ]
                },
                {
                    "column": "operation",
                    "match_type": "精确匹配",
                    "condition": "VYBER KARTOU"
                }
            ]
        },
        "table_name": "trans",
        "id": "32"
    },
    {
        "question": "How many more crimes were reported in East Bohemia compared to North Bohemia in 1996?",
        "SQL": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district",
        "db_id": "financial",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "A16",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "A3",
                    "match_type": "精确匹配",
                    "condition": "east Bohemia"
                },
                {
                    "column": "A3",
                    "match_type": "精确匹配",
                    "condition": "north Bohemia"
                },
                {
                    "column": "year",
                    "match_type": "等于",
                    "condition": "1996"
                }
            ]
        },
        "table_name": "district",
        "id": "33"
    },
    {
        "question": "What is the count of owner and disponent dispositions for account numbers between 1 and 10?",
        "SQL": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
        "db_id": "financial",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "type",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "type",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "account_id",
                    "match_type": "在区间",
                    "condition": [
                        1,
                        10
                    ]
                }
            ]
        },
        "table_name": "disp",
        "id": "34"
    },
    {
        "question": "Which bond type occurs most frequently?",
        "SQL": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "bond_type"
                }
            ],
            "measure": [
                {
                    "column": "bond_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "bond",
        "id": "35"
    },
    {
        "question": "What is the total number of triple type bonds?",
        "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.bond_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.bond_type",
                    "match_type": "精确匹配",
                    "condition": "#"
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "36"
    },
    {
        "question": "How many unique atoms do not contain bromine?",
        "SQL": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.atom_id"
                }
            ],
            "measure": [
                {
                    "column": "T.atom_id",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": [
                {
                    "column": "T.element",
                    "match_type": "不等于",
                    "condition": "br"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "37"
    },
    {
        "question": "How many of the first 100 molecules, ordered by their number, are labeled as carcinogenic?",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.molecule_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "在区间",
                    "condition": [
                        "TR000",
                        "TR099"
                    ]
                },
                {
                    "column": "T.label",
                    "match_type": "精确匹配",
                    "condition": "+"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "38"
    },
    {
        "question": "Find the IDs of molecules that contain carbon atoms.",
        "SQL": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.molecule_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.element",
                    "match_type": "精确匹配",
                    "condition": "c"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "39"
    },
    {
        "question": "Can you provide the top three toxicological elements of the molecule TR000 in alphabetical order?",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.element"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR000"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "40"
    },
    {
        "question": "Which atoms are connected by the bond with ID TR001_2_6 in the molecule TR001?",
        "SQL": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "SUBSTR(T.bond_id, 1, 7)"
                },
                {
                    "column": "T.molecule_id || SUBSTR(T.bond_id, 8, 2)"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR001"
                },
                {
                    "column": "T.bond_id",
                    "match_type": "精确匹配",
                    "condition": "TR001_2_6"
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "41"
    },
    {
        "question": "How many more molecules are carcinogenic compared to non-carcinogenic ones?",
        "SQL": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.molecule_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.label",
                    "match_type": "等于",
                    "condition": "+"
                },
                {
                    "column": "T.label",
                    "match_type": "等于",
                    "condition": "-"
                }
            ]
        },
        "table_name": "molecule AS t",
        "id": "42"
    },
    {
        "question": "Which atom IDs are associated with the bond TR000_2_5?",
        "SQL": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.atom_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.bond_id",
                    "match_type": "精确匹配",
                    "condition": "TR000_2_5"
                }
            ]
        },
        "table_name": "connected AS T",
        "id": "43"
    },
    {
        "question": "Which bond IDs share the atom ID 2 of TR000_2?",
        "SQL": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.bond_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.atom_id2",
                    "match_type": "精确匹配",
                    "condition": "TR000_2"
                }
            ]
        },
        "table_name": "connected AS T",
        "id": "44"
    },
    {
        "question": "Can you provide the names of the top five molecules containing double bonds, sorted alphabetically?",
        "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.molecule_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.bond_type",
                    "match_type": "精确匹配",
                    "condition": "="
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "45"
    },
    {
        "question": "Calculate the percentage of double bonds in the molecule TR008, providing the result with five decimal places.",
        "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "bond_id",
                    "aggregate_function": "ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5)"
                }
            ],
            "filter": [
                {
                    "column": "molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR008"
                },
                {
                    "column": "bond_type",
                    "match_type": "精确匹配",
                    "condition": "="
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "46"
    },
    {
        "question": "Can you calculate the percentage of molecules that are labeled as carcinogenic, and present the result to three decimal places?",
        "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3)",
                    "aggregate_function": "ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3)"
                }
            ],
            "filter": []
        },
        "table_name": "molecule AS t",
        "id": "47"
    },
    {
        "question": "What percentage of atoms in molecule TR206 are hydrogen atoms, rounded to four decimal places?",
        "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4)",
                    "aggregate_function": "ROUND"
                }
            ],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR206"
                },
                {
                    "column": "T.element",
                    "match_type": "精确匹配",
                    "condition": "h"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "48"
    },
    {
        "question": "What are the distinct bond types associated with molecule TR000?",
        "SQL": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.bond_type"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR000"
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "49"
    },
    {
        "question": "What is the most common bond type in molecule TR010, and is this molecule known to be carcinogenic?",
        "SQL": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "bond_type"
                }
            ],
            "measure": [
                {
                    "column": "molecule_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR010"
                }
            ]
        },
        "table_name": "bond AS T1",
        "id": "50"
    },
    {
        "question": "How many distinct molecules contain a triple bond?",
        "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.molecule_id",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": [
                {
                    "column": "T.bond_type",
                    "match_type": "精确匹配",
                    "condition": "#"
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "51"
    },
    {
        "question": "What is the number of bonds associated with atom 19?",
        "SQL": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.bond_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.atom_id",
                    "match_type": "精确匹配",
                    "condition": "19"
                }
            ]
        },
        "table_name": "connected AS T",
        "id": "52"
    },
    {
        "question": "Display all the toxicological elements associated with the molecule 'TR004'.",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.element"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR004"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "53"
    },
    {
        "question": "How many molecules are labeled as non-carcinogenic?",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "molecule_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "label",
                    "match_type": "精确匹配",
                    "condition": "-"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "54"
    },
    {
        "question": "Count the total number of atoms that are either carbon or hydrogen.",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.atom_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.element",
                    "match_type": "精确匹配",
                    "condition": "'c'"
                },
                {
                    "column": "T.element",
                    "match_type": "精确匹配",
                    "condition": "'h'"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "55"
    },
    {
        "question": "Can you provide the labels associated with the molecule IDs TR000, TR001, and TR002?",
        "SQL": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "molecule_id"
                },
                {
                    "column": "T.label"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "molecule_id",
                    "match_type": "精确匹配",
                    "condition": "['TR000', 'TR001', 'TR002']"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "56"
    },
    {
        "question": "Provide the molecule IDs for molecules that are not carcinogenic.",
        "SQL": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.molecule_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.label",
                    "match_type": "精确匹配",
                    "condition": "-"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "57"
    },
    {
        "question": "Count the number of carcinogenic molecules with IDs ranging from TR000 to TR030.",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.molecule_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "在区间",
                    "condition": [
                        "TR000",
                        "TR030"
                    ]
                },
                {
                    "column": "T.label",
                    "match_type": "精确匹配",
                    "condition": "+"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "58"
    },
    {
        "question": "Show the unique toxicology components linked to the molecule TR001.",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.element"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR001"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "59"
    },
    {
        "question": "Provide the molecule IDs that have a double bond.",
        "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.molecule_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.bond_type",
                    "match_type": "精确匹配",
                    "condition": "="
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "60"
    },
    {
        "question": "What percentage of all chemical compounds in the database have a triple bond?",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.bond_id",
                    "aggregate_function": "CUSTOM"
                }
            ],
            "filter": [
                {
                    "column": "T.bond_type",
                    "match_type": "等于",
                    "condition": "#"
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "61"
    },
    {
        "question": "What percentage of chemical compounds containing the molecule TR047 have a double bond?",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "bond_id",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR047"
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "62"
    },
    {
        "question": "Does the molecule TR151 have carcinogenic properties?",
        "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.label"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR151"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "63"
    },
    {
        "question": "What toxic element is present in the molecule TR151?",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.element"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR151"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "64"
    },
    {
        "question": "How many chemical compounds in the database are marked as carcinogenic?",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.molecule_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.label",
                    "match_type": "精确匹配",
                    "condition": "+"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "65"
    },
    {
        "question": "Find the atoms that are part of molecules with IDs ranging from TR010 to TR050 and contain the element carbon.",
        "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.atom_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "在区间",
                    "condition": [
                        "TR010",
                        "TR050"
                    ]
                },
                {
                    "column": "T.element",
                    "match_type": "精确匹配",
                    "condition": "c"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "66"
    },
    {
        "question": "Does the molecule TR124 have carcinogenic properties?",
        "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.label"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR124"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "67"
    },
    {
        "question": "Which atoms are part of molecule TR186?",
        "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.atom_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR186"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "68"
    },
    {
        "question": "What bond type does TR007_4_19 have?",
        "SQL": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "bond_type"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "bond_id",
                    "match_type": "精确匹配",
                    "condition": "TR007_4_19"
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "69"
    },
    {
        "question": "What is the total number of atoms associated with molecule ID TR001?",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.atom_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR001"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "70"
    },
    {
        "question": "What is the total number of single bonds in the list?",
        "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "bond_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "bond_type",
                    "match_type": "精确匹配",
                    "condition": "-"
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "71"
    },
    {
        "question": "What is the toxicological element associated with the atom having the ID TR000_1?",
        "SQL": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "T.element"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "T.atom_id",
                    "match_type": "精确匹配",
                    "condition": "TR000_1"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "72"
    },
    {
        "question": "Is the molecule with ID TR000 carcinogenic?",
        "SQL": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "label",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR000"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "73"
    },
    {
        "question": "Calculate the percentage of atoms that have a single bond.",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "bond_id",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "bond_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "bond_type",
                    "match_type": "精确匹配",
                    "condition": "-"
                }
            ]
        },
        "table_name": "bond AS t",
        "id": "74"
    },
    {
        "question": "How many molecules are labeled as carcinogenic?",
        "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.molecule_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.label",
                    "match_type": "精确匹配",
                    "condition": "+"
                }
            ]
        },
        "table_name": "molecule AS T",
        "id": "75"
    },
    {
        "question": "How many molecules from TR004 to TR010 have single bonds?",
        "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'",
        "db_id": "toxicology",
        "config": {
            "dimension": [
                {
                    "column": "molecule_id"
                }
            ],
            "measure": [
                {
                    "column": "molecule_id",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": [
                {
                    "column": "molecule_id",
                    "match_type": "在区间",
                    "condition": [
                        "TR004",
                        "TR010"
                    ]
                },
                {
                    "column": "bond_type",
                    "match_type": "等于",
                    "condition": "-"
                }
            ]
        },
        "table_name": "bond AS T",
        "id": "76"
    },
    {
        "question": "How many carbon atoms are there in the molecule TR008?",
        "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'",
        "db_id": "toxicology",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T.atom_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "T.molecule_id",
                    "match_type": "精确匹配",
                    "condition": "TR008"
                },
                {
                    "column": "T.element",
                    "match_type": "精确匹配",
                    "condition": "c"
                }
            ]
        },
        "table_name": "atom AS T",
        "id": "77"
    },
    {
        "question": "What are the cards that have exceptionally strong foil versions?",
        "SQL": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "cardKingdomFoilId",
                    "match_type": "不为空",
                    "condition": null
                },
                {
                    "column": "cardKingdomId",
                    "match_type": "不为空",
                    "condition": null
                }
            ]
        },
        "table_name": "cards",
        "id": "78"
    },
    {
        "question": "Which borderless cards are available that do not have powerful foils?",
        "SQL": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "borderColor",
                    "match_type": "精确匹配",
                    "condition": "borderless"
                },
                {
                    "column": "cardKingdomId",
                    "match_type": "不为空",
                    "condition": "IS NULL"
                }
            ]
        },
        "table_name": "cards",
        "id": "79"
    },
    {
        "question": "Show the names of the cards that have the highest face converted mana cost.",
        "SQL": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "faceConvertedManaCost",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "cards",
        "id": "80"
    },
    {
        "question": "List all cards that have a 2015 frame style and an EDHRec rank lower than 100.",
        "SQL": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "edhrecRank",
                    "match_type": "小于",
                    "condition": "100"
                },
                {
                    "column": "frameVersion",
                    "match_type": "等于",
                    "condition": "2015"
                }
            ]
        },
        "table_name": "cards",
        "id": "81"
    },
    {
        "question": "What is the number of different card types that Aaron Boyd has illustrated for card art?",
        "SQL": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "type",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "artist",
                    "match_type": "精确匹配",
                    "condition": "Aaron Boyd"
                }
            ]
        },
        "table_name": "cards",
        "id": "82"
    },
    {
        "question": "What keyword is associated with the card named 'Angel of Mercy'?",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "keywords"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Angel of Mercy"
                }
            ]
        },
        "table_name": "cards",
        "id": "83"
    },
    {
        "question": "How many cards have unlimited power?",
        "SQL": "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "power",
                    "match_type": "精确匹配",
                    "condition": "*"
                }
            ]
        },
        "table_name": "cards",
        "id": "84"
    },
    {
        "question": "What are the promotional types associated with the card 'Duress'?",
        "SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "promoTypes"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Duress"
                },
                {
                    "column": "promoTypes",
                    "match_type": "不为空",
                    "condition": ""
                }
            ]
        },
        "table_name": "cards",
        "id": "85"
    },
    {
        "question": "What is the border color for the card named 'Ancestor's Chosen'? ",
        "SQL": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "borderColor"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Ancestor's Chosen"
                }
            ]
        },
        "table_name": "cards",
        "id": "86"
    },
    {
        "question": "What was the original type of the card named 'Ancestor's Chosen'? ",
        "SQL": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "originalType"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Ancestor's Chosen"
                },
                {
                    "column": "originalType",
                    "match_type": "不为空",
                    "condition": null
                }
            ]
        },
        "table_name": "cards",
        "id": "87"
    },
    {
        "question": "What percentage of cards are borderless?",
        "SQL": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "borderColor",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "borderColor",
                    "match_type": "等于",
                    "condition": "borderless"
                }
            ]
        },
        "table_name": "cards",
        "id": "88"
    },
    {
        "question": "What is the total number of cards that have a toughness of 99?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE toughness = 99",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "toughness",
                    "match_type": "等于",
                    "condition": "99"
                }
            ]
        },
        "table_name": "cards",
        "id": "89"
    },
    {
        "question": "List the names of the cards illustrated by Aaron Boyd.",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "artist",
                    "match_type": "精确匹配",
                    "condition": "Aaron Boyd"
                }
            ]
        },
        "table_name": "cards",
        "id": "90"
    },
    {
        "question": "What is the number of black border cards that are exclusively available on MTGO?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "availability",
                    "match_type": "精确匹配",
                    "condition": "mtgo"
                },
                {
                    "column": "borderColor",
                    "match_type": "精确匹配",
                    "condition": "black"
                }
            ]
        },
        "table_name": "cards",
        "id": "91"
    },
    {
        "question": "Show me all the card IDs that have a converted mana cost of 0.",
        "SQL": "SELECT id FROM cards WHERE convertedManaCost = 0",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "convertedManaCost",
                    "match_type": "等于",
                    "condition": "0"
                }
            ]
        },
        "table_name": "cards",
        "id": "92"
    },
    {
        "question": "What is the layout for cards that have the keyword 'Flying'?",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "layout"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "keywords",
                    "match_type": "精确匹配",
                    "condition": "Flying"
                }
            ]
        },
        "table_name": "cards",
        "id": "93"
    },
    {
        "question": "What is the number of cards that have an original type of 'Summon - Angel' and a subtype different from 'Angel'?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "originalType",
                    "match_type": "精确匹配",
                    "condition": "Summon - Angel"
                },
                {
                    "column": "subtypes",
                    "match_type": "不等于",
                    "condition": "Angel"
                }
            ]
        },
        "table_name": "cards",
        "id": "94"
    },
    {
        "question": "Which foiled cards have significant power when used with non-foiled cards? Provide their IDs.",
        "SQL": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "cardKingdomId",
                    "match_type": "不为空",
                    "condition": ""
                },
                {
                    "column": "cardKingdomFoilId",
                    "match_type": "不为空",
                    "condition": ""
                }
            ]
        },
        "table_name": "cards",
        "id": "95"
    },
    {
        "question": "List the IDs of the cards that belong to duel deck A.",
        "SQL": "SELECT id FROM cards WHERE duelDeck = 'a'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "duelDeck",
                    "match_type": "精确匹配",
                    "condition": "a"
                }
            ]
        },
        "table_name": "cards",
        "id": "96"
    },
    {
        "question": "Show the edhrecRank of cards that have a frame version from 2015.",
        "SQL": "SELECT edhrecRank FROM cards WHERE frameVersion = 2015",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "edhrecRank"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "frameVersion",
                    "match_type": "等于",
                    "condition": "2015"
                }
            ]
        },
        "table_name": "cards",
        "id": "97"
    },
    {
        "question": "How many cards designed by John Avon have a non-powerful foil?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "artist",
                    "match_type": "精确匹配",
                    "condition": "John Avon"
                },
                {
                    "column": "cardKingdomId",
                    "match_type": "不为空",
                    "condition": "IS NULL"
                },
                {
                    "column": "cardKingdomFoilId",
                    "match_type": "不为空",
                    "condition": "IS NULL"
                }
            ]
        },
        "table_name": "cards",
        "id": "98"
    },
    {
        "question": "How many cards with a white border are considered powerful?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "borderColor",
                    "match_type": "精确匹配",
                    "condition": "white"
                },
                {
                    "column": "cardKingdomId",
                    "match_type": "不为空",
                    "condition": null
                },
                {
                    "column": "cardKingdomFoilId",
                    "match_type": "不为空",
                    "condition": null
                }
            ]
        },
        "table_name": "cards",
        "id": "99"
    },
    {
        "question": "What is the number of cards with a starting maximum hand size of -1, designed by UDON, and available in the mtgo print type?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "hAND",
                    "match_type": "等于",
                    "condition": "-1"
                },
                {
                    "column": "artist",
                    "match_type": "精确匹配",
                    "condition": "UDON"
                },
                {
                    "column": "Availability",
                    "match_type": "精确匹配",
                    "condition": "mtgo"
                }
            ]
        },
        "table_name": "cards",
        "id": "100"
    },
    {
        "question": "How many cards that have a 1993 frame version, are available on paper, and have a sensitive content warning?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "frameVersion",
                    "match_type": "等于",
                    "condition": "1993"
                },
                {
                    "column": "availability",
                    "match_type": "精确匹配",
                    "condition": "paper"
                },
                {
                    "column": "hasContentWarning",
                    "match_type": "等于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "cards",
        "id": "101"
    },
    {
        "question": "What is the mana cost for cards that have a standard layout, a 2003 frame, a black border, and are available in both paper and MTGO formats?",
        "SQL": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "layout"
                },
                {
                    "column": "frameVersion"
                },
                {
                    "column": "borderColor"
                },
                {
                    "column": "availability"
                }
            ],
            "measure": [
                {
                    "column": "manaCost",
                    "aggregate_function": "NULL"
                }
            ],
            "filter": [
                {
                    "column": "availability",
                    "match_type": "等于",
                    "condition": "mtgo,paper"
                },
                {
                    "column": "borderColor",
                    "match_type": "等于",
                    "condition": "black"
                },
                {
                    "column": "frameVersion",
                    "match_type": "等于",
                    "condition": 2003
                },
                {
                    "column": "layout",
                    "match_type": "等于",
                    "condition": "normal"
                }
            ]
        },
        "table_name": "cards",
        "id": "102"
    },
    {
        "question": "What is the total unconverted mana cost of all cards created by Rob Alexander?",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "manaCost",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "artist",
                    "match_type": "精确匹配",
                    "condition": "Rob Alexander"
                }
            ]
        },
        "table_name": "cards",
        "id": "103"
    },
    {
        "question": "显示在竞技场中所有可用的卡片类型。",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "subtypes"
                },
                {
                    "column": "supertypes"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "availability",
                    "match_type": "精确匹配",
                    "condition": "arena"
                },
                {
                    "column": "subtypes",
                    "match_type": "不为空",
                    "condition": null
                },
                {
                    "column": "supertypes",
                    "match_type": "不为空",
                    "condition": null
                }
            ]
        },
        "table_name": "cards",
        "id": "104"
    },
    {
        "question": "Displays the set code for all cards that have been translated into Spanish.",
        "SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "setCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "language",
                    "match_type": "精确匹配",
                    "condition": "Spanish"
                }
            ]
        },
        "table_name": "set_translations",
        "id": "105"
    },
    {
        "question": "What is the percentage of legendary frame effect cards that are exclusively available in online game versions?",
        "SQL": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100",
                    "aggregate_function": "SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100"
                }
            ],
            "filter": [
                {
                    "column": "frameEffects",
                    "match_type": "精确匹配",
                    "condition": "legendary"
                }
            ]
        },
        "table_name": "cards",
        "id": "106"
    },
    {
        "question": "Calculate the percentage of Story Spotlight cards without a text box and list their IDs.",
        "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [
                {
                    "column": "isTextless",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "isStorySpotlight",
                    "match_type": "等于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "cards",
        "id": "107"
    },
    {
        "question": "Compute the percentage of cards that are in Spanish and list their names.",
        "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "language",
                    "aggregate_function": "SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) * 100 / COUNT(*)"
                }
            ],
            "filter": [
                {
                    "column": "language",
                    "match_type": "精确匹配",
                    "condition": "Spanish"
                }
            ]
        },
        "table_name": "foreign_data",
        "id": "108"
    },
    {
        "question": "What is the type of printing on the card made by Daren Bader?",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "availability"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "artist",
                    "match_type": "精确匹配",
                    "condition": "Daren Bader"
                }
            ]
        },
        "table_name": "cards",
        "id": "109"
    },
    {
        "question": "How many borderless color cards have an EDHRec rank greater than 12000?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "edhrecRank",
                    "match_type": "大于",
                    "condition": "12000"
                },
                {
                    "column": "borderColor",
                    "match_type": "精确匹配",
                    "condition": "borderless"
                }
            ]
        },
        "table_name": "cards",
        "id": "110"
    },
    {
        "question": "What is the number of cards that are oversized, reprinted, and used for promotions?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "isOversized",
                    "match_type": "等于",
                    "condition": "1"
                },
                {
                    "column": "isReprint",
                    "match_type": "等于",
                    "condition": "1"
                },
                {
                    "column": "isPromo",
                    "match_type": "等于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "cards",
        "id": "111"
    },
    {
        "question": "List the top three unknown power cards with promotional types for the arena league, sorted alphabetically.",
        "SQL": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "power",
                    "match_type": "精确匹配",
                    "condition": "IS NULL OR LIKE '%*%'"
                },
                {
                    "column": "promoTypes",
                    "match_type": "精确匹配",
                    "condition": "arenaleague"
                }
            ]
        },
        "table_name": "cards",
        "id": "112"
    },
    {
        "question": "Which language is associated with the card having the multiverse ID 149934?",
        "SQL": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "language"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "multiverseid",
                    "match_type": "等于",
                    "condition": "149934"
                }
            ]
        },
        "table_name": "foreign_data",
        "id": "113"
    },
    {
        "question": "Can you give me the IDs of the top three strongest combinations of Kingdom Foils and Kingdom Cards, ordered by the Kingdom Foil ID alphabetically?",
        "SQL": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "cardKingdomFoilId"
                },
                {
                    "column": "cardKingdomId"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "cardKingdomFoilId",
                    "match_type": "不为空",
                    "condition": ""
                },
                {
                    "column": "cardKingdomId",
                    "match_type": "不为空",
                    "condition": ""
                }
            ]
        },
        "table_name": "cards",
        "id": "114"
    },
    {
        "question": "What percentage of cards with a normal layout do not have a text box?",
        "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "isTextless",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "isTextless",
                    "match_type": "等于",
                    "condition": "1"
                },
                {
                    "column": "layout",
                    "match_type": "等于",
                    "condition": "normal"
                }
            ]
        },
        "table_name": "cards",
        "id": "115"
    },
    {
        "question": "Which card numbers are associated with cards that only have one face and possess both the Angel and Wizard subtypes?",
        "SQL": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "subtypes",
                    "match_type": "精确匹配",
                    "condition": "Angel,Wizard"
                },
                {
                    "column": "side",
                    "match_type": "不为空",
                    "condition": "IS NULL"
                }
            ]
        },
        "table_name": "cards",
        "id": "116"
    },
    {
        "question": "Can you list the top three set names, in alphabetical order, that are not available in Magic: The Gathering Online?",
        "SQL": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "mtgoCode",
                    "match_type": "不为空",
                    "condition": "IS NULL"
                }
            ]
        },
        "table_name": "sets",
        "id": "117"
    },
    {
        "question": "List the IDs of all cards that have a black border color.",
        "SQL": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "borderColor",
                    "match_type": "精确匹配",
                    "condition": "black"
                }
            ]
        },
        "table_name": "cards",
        "id": "118"
    },
    {
        "question": "List the IDs of all cards that have an extendedart frame effect.",
        "SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "frameEffects",
                    "match_type": "精确匹配",
                    "condition": "extendedart"
                }
            ]
        },
        "table_name": "cards",
        "id": "119"
    },
    {
        "question": "Which card has full artwork among those with a black border?",
        "SQL": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "borderColor",
                    "match_type": "精确匹配",
                    "condition": "black"
                },
                {
                    "column": "isFullArt",
                    "match_type": "等于",
                    "condition": 1
                }
            ]
        },
        "table_name": "cards",
        "id": "120"
    },
    {
        "question": "What is the language of the set with id '174'? ",
        "SQL": "SELECT language FROM set_translations WHERE id = 174",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "language"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "id",
                    "match_type": "等于",
                    "condition": "174"
                }
            ]
        },
        "table_name": "set_translations",
        "id": "121"
    },
    {
        "question": "Display the name of the set with the set code 'ALL'.",
        "SQL": "SELECT name FROM sets WHERE code = 'ALL'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "code",
                    "match_type": "精确匹配",
                    "condition": "ALL"
                }
            ]
        },
        "table_name": "sets",
        "id": "122"
    },
    {
        "question": "What foreign language is associated with 'A Pedra Fellwar'? ",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "language"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "A Pedra Fellwar"
                }
            ]
        },
        "table_name": "foreign_data",
        "id": "123"
    },
    {
        "question": "How many cards designed by Aaron Miller are considered to be incredibly powerful?",
        "SQL": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "artist",
                    "match_type": "精确匹配",
                    "condition": "Aaron Miller"
                },
                {
                    "column": "cardKingdomFoilId",
                    "match_type": "不为空",
                    "condition": null
                },
                {
                    "column": "cardKingdomId",
                    "match_type": "不为空",
                    "condition": null
                }
            ]
        },
        "table_name": "cards",
        "id": "124"
    },
    {
        "question": "How many cards in the paper format have a starting maximum hand size greater than zero?",
        "SQL": "SELECT SUM(CASE WHEN availability = 'paper' AND hand = '3' THEN 1 ELSE 0 END) FROM cards",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CASE WHEN availability = 'paper' AND hand = '3' THEN 1 ELSE 0 END",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "availability",
                    "match_type": "精确匹配",
                    "condition": "paper"
                },
                {
                    "column": "hand",
                    "match_type": "大于等于",
                    "condition": "3"
                }
            ]
        },
        "table_name": "cards",
        "id": "125"
    },
    {
        "question": "Can you provide a list of card names that include a text box?",
        "SQL": "SELECT DISTINCT name FROM cards WHERE isTextless = 0",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "isTextless",
                    "match_type": "等于",
                    "condition": "0"
                }
            ]
        },
        "table_name": "cards",
        "id": "126"
    },
    {
        "question": "What is the unconverted mana cost for the card named 'Ancestor's Chosen'? ",
        "SQL": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "manaCost",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Ancestor's Chosen"
                }
            ]
        },
        "table_name": "cards",
        "id": "127"
    },
    {
        "question": "How many cards with a white border color have an unknown power value?",
        "SQL": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "power",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "borderColor",
                    "match_type": "精确匹配",
                    "condition": "white"
                },
                {
                    "column": "power",
                    "match_type": "模糊匹配",
                    "condition": "%*%"
                },
                {
                    "column": "power",
                    "match_type": "不为空",
                    "condition": "NULL"
                }
            ]
        },
        "table_name": "cards",
        "id": "128"
    },
    {
        "question": "Can you list the names of promotional cards that feature multiple faces on the same card?",
        "SQL": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "isPromo",
                    "match_type": "等于",
                    "condition": "1"
                },
                {
                    "column": "side",
                    "match_type": "不为空",
                    "condition": null
                }
            ]
        },
        "table_name": "cards",
        "id": "129"
    },
    {
        "question": "Can you provide the complete list of types and subtypes for the card named 'Molimo, Maro-Sorcerer'?",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "subtypes"
                },
                {
                    "column": "supertypes"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Molimo, Maro-Sorcerer"
                }
            ]
        },
        "table_name": "cards",
        "id": "130"
    },
    {
        "question": "Can you provide a list of websites where I can buy cards with the promotional type 'bundle'?",
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "purchaseUrls"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "promoTypes",
                    "match_type": "精确匹配",
                    "condition": "bundle"
                }
            ]
        },
        "table_name": "cards",
        "id": "131"
    },
    {
        "question": "What is the number of artists who have created a card that has a black border and is available in both 'arena' and 'mtgo' formats?",
        "SQL": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "availability",
                    "match_type": "模糊匹配",
                    "condition": "%arena,mtgo%"
                },
                {
                    "column": "borderColor",
                    "match_type": "精确匹配",
                    "condition": "black"
                }
            ]
        },
        "table_name": "cards",
        "id": "132"
    },
    {
        "question": "Between 'Serra Angel' and 'Shrine Keeper', which one has a higher converted mana cost?",
        "SQL": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "convertedManaCost",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Serra Angel"
                },
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Shrine Keeper"
                }
            ]
        },
        "table_name": "cards",
        "id": "133"
    },
    {
        "question": "Who is the artist behind the card with the promotional name 'Battra, Dark Destroyer'? ",
        "SQL": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "artist"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "flavorName",
                    "match_type": "精确匹配",
                    "condition": "Battra, Dark Destroyer"
                }
            ]
        },
        "table_name": "cards",
        "id": "134"
    },
    {
        "question": "Can you provide the names of the top 3 cards that have the highest converted mana cost and are from the 2003 card frame version?",
        "SQL": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "convertedManaCost",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "frameVersion",
                    "match_type": "等于",
                    "condition": "2003"
                }
            ]
        },
        "table_name": "cards",
        "id": "135"
    },
    {
        "question": "Can you provide the code of the set that was released on July 14, 2017?",
        "SQL": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "code"
                },
                {
                    "column": "releaseDate"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "releaseDate",
                    "match_type": "精确匹配",
                    "condition": "2017-07-14"
                }
            ]
        },
        "table_name": "sets",
        "id": "136"
    },
    {
        "question": "Provide the keyrune code of the set with the code 'PKHC'.",
        "SQL": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "keyruneCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "code",
                    "match_type": "精确匹配",
                    "condition": "PKHC"
                }
            ]
        },
        "table_name": "sets",
        "id": "137"
    },
    {
        "question": "What is the magic card market ID for the set with the code 'SS2'?",
        "SQL": "SELECT mcmId FROM sets WHERE code = 'SS2'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "mcmId"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "code",
                    "match_type": "精确匹配",
                    "condition": "SS2"
                }
            ]
        },
        "table_name": "sets",
        "id": "138"
    },
    {
        "question": "What is the name of the Magic Card Market set that was released on June 9, 2017?",
        "SQL": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "mcmName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "releaseDate",
                    "match_type": "精确匹配",
                    "condition": "2017-06-09"
                }
            ]
        },
        "table_name": "sets",
        "id": "139"
    },
    {
        "question": "What is the expansion type of the set 'From the Vault: Lore'?",
        "SQL": "SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "type"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "模糊匹配",
                    "condition": "FROM the Vault: Lore"
                }
            ]
        },
        "table_name": "sets",
        "id": "140"
    },
    {
        "question": "What is the parent code for the set named 'Commander 2014 Oversized'? ",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "parentCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Commander 2014 Oversized"
                }
            ]
        },
        "table_name": "sets",
        "id": "141"
    },
    {
        "question": "What are the unique availability statuses for cards that are textless and created by Aleksi Briclot?",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "availability"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "artist",
                    "match_type": "精确匹配",
                    "condition": "Aleksi Briclot"
                },
                {
                    "column": "isTextless",
                    "match_type": "等于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "cards",
        "id": "142"
    },
    {
        "question": "Which set ID corresponds to the set with the largest number of cards?",
        "SQL": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [
                {
                    "column": "baseSetSize",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "sets",
        "id": "143"
    },
    {
        "question": "Who is the illustrator of the card with the highest converted mana cost among cards that do not have multiple faces?",
        "SQL": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "artist"
                }
            ],
            "measure": [
                {
                    "column": "convertedManaCost",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "side",
                    "match_type": "IS NULL",
                    "condition": null
                }
            ]
        },
        "table_name": "cards",
        "id": "144"
    },
    {
        "question": "Which visual frame effect is the most prevalent among the highly potent foils?",
        "SQL": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "frameEffects"
                }
            ],
            "measure": [
                {
                    "column": "frameEffects",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "cardKingdomFoilId",
                    "match_type": "not null",
                    "condition": ""
                },
                {
                    "column": "cardKingdomId",
                    "match_type": "not null",
                    "condition": ""
                }
            ]
        },
        "table_name": "cards",
        "id": "145"
    },
    {
        "question": "How many cards in duel deck A have an unknown power and are not available in foil?",
        "SQL": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'",
        "db_id": "card_games",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "hasFoil",
                    "match_type": "等于",
                    "condition": "0"
                },
                {
                    "column": "duelDeck",
                    "match_type": "等于",
                    "condition": "a"
                }
            ]
        },
        "table_name": "cards",
        "id": "146"
    },
    {
        "question": "Which Commander set has the largest total number of cards, including promotions and supplements but not Alchemy changes, and what is its ID?",
        "SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [
                {
                    "column": "totalSetSize",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "type",
                    "match_type": "精确匹配",
                    "condition": "commander"
                }
            ]
        },
        "table_name": "sets",
        "id": "147"
    },
    {
        "question": "Show the unique artists who have created black bordered cards that are exclusively available in arena.",
        "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "artist"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "availability",
                    "match_type": "精确匹配",
                    "condition": "arena"
                },
                {
                    "column": "BorderColor",
                    "match_type": "精确匹配",
                    "condition": "black"
                }
            ]
        },
        "table_name": "cards",
        "id": "148"
    },
    {
        "question": "Identify the uuids of cards that are either banned or restricted in the old school format.",
        "SQL": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "uuid"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "format",
                    "match_type": "精确匹配",
                    "condition": "oldschool"
                },
                {
                    "column": "status",
                    "match_type": "精确匹配",
                    "condition": "Banned"
                },
                {
                    "column": "status",
                    "match_type": "精确匹配",
                    "condition": "Restricted"
                }
            ]
        },
        "table_name": "legalities",
        "id": "149"
    },
    {
        "question": "How many cards designed by Matthew D. Wilson are exclusively available in paper form?",
        "SQL": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "db_id": "card_games",
        "config": {
            "dimension": [
                {
                    "column": "artist"
                },
                {
                    "column": "availability"
                }
            ],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "artist",
                    "match_type": "精确匹配",
                    "condition": "Matthew D. Wilson"
                },
                {
                    "column": "availability",
                    "match_type": "精确匹配",
                    "condition": "paper"
                }
            ]
        },
        "table_name": "cards",
        "id": "150"
    },
    {
        "question": "Between Harlan and Jarrod Dixon, who has the higher reputation?",
        "SQL": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "DisplayName"
                }
            ],
            "measure": [
                {
                    "column": "Reputation",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "DisplayName",
                    "match_type": "精确匹配",
                    "condition": "IN ('Harlan', 'Jarrod Dixon')"
                }
            ]
        },
        "table_name": "users",
        "id": "151"
    },
    {
        "question": "Can you provide a list of the display names for all users who registered their accounts in 2011?",
        "SQL": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "DisplayName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "CreationDate",
                    "match_type": "绝对时间",
                    "condition": [
                        "2011-01-01",
                        "2011-12-31"
                    ]
                }
            ]
        },
        "table_name": "users",
        "id": "152"
    },
    {
        "question": "What is the number of users who last accessed the website after September 1, 2014?",
        "SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "LastAccessDate",
                    "match_type": "绝对时间",
                    "condition": [
                        "2014-09-01",
                        null
                    ]
                }
            ]
        },
        "table_name": "users",
        "id": "153"
    },
    {
        "question": "Who is the user with the highest number of views, and what is their display name?",
        "SQL": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "DisplayName"
                }
            ],
            "measure": [
                {
                    "column": "Views",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Views",
                    "match_type": "等于",
                    "condition": "( SELECT MAX(Views) FROM users )"
                }
            ]
        },
        "table_name": "users",
        "id": "154"
    },
    {
        "question": "How many users with over 100 upvotes also have more than 1 downvote?",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Upvotes",
                    "match_type": "大于",
                    "condition": "100"
                },
                {
                    "column": "Downvotes",
                    "match_type": "大于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "users",
        "id": "155"
    },
    {
        "question": "What is the number of users who have more than 10 views and created their accounts after 2013?",
        "SQL": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "CreationDate",
                    "match_type": "大于",
                    "condition": "2013"
                },
                {
                    "column": "Views",
                    "match_type": "大于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "users",
        "id": "156"
    },
    {
        "question": "What is the total number of votes cast by user No.58 on July 19, 2010?",
        "SQL": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "UserId",
                    "match_type": "等于",
                    "condition": "58"
                },
                {
                    "column": "CreationDate",
                    "match_type": "绝对时间",
                    "condition": [
                        "2010-07-19",
                        "2010-07-19"
                    ]
                }
            ]
        },
        "table_name": "votes",
        "id": "157"
    },
    {
        "question": "Show the creation date that has the highest number of votes.",
        "SQL": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "CreationDate"
                }
            ],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "votes",
        "id": "158"
    },
    {
        "question": "Provide the count of 'Revival' badges.",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Revival"
                }
            ]
        },
        "table_name": "badges",
        "id": "159"
    },
    {
        "question": "What is the view count for the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'?",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "ViewCount",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Title",
                    "match_type": "精确匹配",
                    "condition": "Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer"
                }
            ]
        },
        "table_name": "posts",
        "id": "160"
    },
    {
        "question": "Retrieve the text of comments that have a score of 17.",
        "SQL": "SELECT Text FROM comments WHERE Score = 17",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Text"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Score",
                    "match_type": "等于",
                    "condition": "17"
                }
            ]
        },
        "table_name": "comments",
        "id": "161"
    },
    {
        "question": "What is the display name of the user whose website URL is 'http://stackoverflow.com'?",
        "SQL": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "DisplayName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "WebsiteUrl",
                    "match_type": "精确匹配",
                    "condition": "http://stackoverflow.com"
                }
            ]
        },
        "table_name": "users",
        "id": "162"
    },
    {
        "question": "What is the total count of comments made by the user with ID 13?",
        "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "UserId",
                    "match_type": "等于",
                    "condition": "13"
                }
            ]
        },
        "table_name": "comments",
        "id": "163"
    },
    {
        "question": "What is the user ID with the highest reputation?",
        "SQL": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Id"
                }
            ],
            "measure": [
                {
                    "column": "Reputation",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "users",
        "id": "164"
    },
    {
        "question": "What is the user ID with the minimum number of views?",
        "SQL": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Id"
                }
            ],
            "measure": [
                {
                    "column": "Views",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "users",
        "id": "165"
    },
    {
        "question": "What is the total number of users who received the supporter badge in 2011?",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2011-01-01",
                        "2011-12-31"
                    ]
                },
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Supporter"
                }
            ]
        },
        "table_name": "badges",
        "id": "166"
    },
    {
        "question": "What is the number of users who have received more than 5 badges?",
        "SQL": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "UserId"
                }
            ],
            "measure": [
                {
                    "column": "num",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "num",
                    "match_type": "大于",
                    "condition": "5"
                }
            ]
        },
        "table_name": "badges",
        "id": "167"
    },
    {
        "question": "What is the percentage change in the number of 'Student' badges awarded between 2010 and 2011?",
        "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "Date",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Student"
                },
                {
                    "column": "Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2010-01-01",
                        "2010-12-31"
                    ]
                },
                {
                    "column": "Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2011-01-01",
                        "2011-12-31"
                    ]
                }
            ]
        },
        "table_name": "badges",
        "id": "168"
    },
    {
        "question": "What is the total number of users who received the 'Announcer' badge?",
        "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Announcer"
                }
            ]
        },
        "table_name": "badges",
        "id": "169"
    },
    {
        "question": "Show the names of badges awarded to users on July 19, 2010 at 7:39:08 PM.",
        "SQL": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2010-07-19 19:39:08.0"
                    ]
                }
            ]
        },
        "table_name": "badges",
        "id": "170"
    },
    {
        "question": "What is the total number of positive reviews in the list?",
        "SQL": "SELECT COUNT(id) FROM comments WHERE score > 60",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "score",
                    "match_type": "大于",
                    "condition": "60"
                }
            ]
        },
        "table_name": "comments",
        "id": "171"
    },
    {
        "question": "What is the detailed content of the comment that was posted on July 19, 2010 at 7:25:47 PM?",
        "SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Text"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "CreationDate",
                    "match_type": "精确匹配",
                    "condition": "2010-07-19 19:16:14.0"
                }
            ]
        },
        "table_name": "comments",
        "id": "172"
    },
    {
        "question": "What is the total number of posts with a score of 10?",
        "SQL": "SELECT COUNT(id) FROM posts WHERE Score = 10",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Score",
                    "match_type": "等于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "posts",
        "id": "173"
    },
    {
        "question": "Can you provide the display name of the user whose ID is 30?",
        "SQL": "SELECT DisplayName FROM users WHERE Id = 30",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "DisplayName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Id",
                    "match_type": "等于",
                    "condition": "30"
                }
            ]
        },
        "table_name": "users",
        "id": "174"
    },
    {
        "question": "What is the number of users located in New York?",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Location",
                    "match_type": "精确匹配",
                    "condition": "New York"
                }
            ]
        },
        "table_name": "users",
        "id": "175"
    },
    {
        "question": "What is the total number of votes cast in the year 2010?",
        "SQL": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "CreationDate",
                    "match_type": "等于",
                    "condition": "2010"
                }
            ]
        },
        "table_name": "votes",
        "id": "176"
    },
    {
        "question": "How many users fall within the adult age range?",
        "SQL": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "在区间",
                    "condition": [
                        19,
                        65
                    ]
                }
            ]
        },
        "table_name": "users",
        "id": "177"
    },
    {
        "question": "Who are the users with the most views?",
        "SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Id"
                },
                {
                    "column": "DisplayName"
                }
            ],
            "measure": [
                {
                    "column": "Views",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Views",
                    "match_type": "等于",
                    "condition": "( SELECT MAX(Views) FROM users )"
                }
            ]
        },
        "table_name": "users",
        "id": "178"
    },
    {
        "question": "Compute the ratio of votes cast in 2010 to those cast in 2011.",
        "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CreationDate",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "CreationDate",
                    "match_type": "等于",
                    "condition": "2010"
                },
                {
                    "column": "CreationDate",
                    "match_type": "等于",
                    "condition": "2011"
                }
            ]
        },
        "table_name": "votes",
        "id": "179"
    },
    {
        "question": "What is the total number of users who were awarded the commentator badge in 2014?",
        "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Commentator"
                },
                {
                    "column": "Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2014-01-01",
                        "2014-12-31"
                    ]
                }
            ]
        },
        "table_name": "badges",
        "id": "180"
    },
    {
        "question": "What is the total number of posts created on July 21, 2010?",
        "SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "CreationDate",
                    "match_type": "绝对时间",
                    "condition": [
                        "2010-07-21",
                        "2010-07-21"
                    ]
                }
            ]
        },
        "table_name": "postHistory",
        "id": "181"
    },
    {
        "question": "Which users have the highest view count, and what are their display names and ages?",
        "SQL": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "DisplayName"
                },
                {
                    "column": "Age"
                }
            ],
            "measure": [
                {
                    "column": "Views",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Views",
                    "match_type": "等于",
                    "condition": "( SELECT MAX(Views) FROM users )"
                }
            ]
        },
        "table_name": "users",
        "id": "182"
    },
    {
        "question": "What is the last edit date and the ID of the last editor for the post titled 'Detecting a given face in a database of facial images'? ",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "LastEditDate"
                },
                {
                    "column": "LastEditorUserId"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Title",
                    "match_type": "精确匹配",
                    "condition": "Detecting a given face in a database of facial images"
                }
            ]
        },
        "table_name": "posts",
        "id": "183"
    },
    {
        "question": "How many comments with a score below 60 were made by user ID 13?",
        "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "UserId",
                    "match_type": "等于",
                    "condition": "13"
                },
                {
                    "column": "Score",
                    "match_type": "小于",
                    "condition": "60"
                }
            ]
        },
        "table_name": "comments",
        "id": "184"
    },
    {
        "question": "Can you provide the titles of the 5 most popular posts based on view count?",
        "SQL": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [
                {
                    "column": "ViewCount",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "posts",
        "id": "185"
    },
    {
        "question": "What is the number of tags that have a post count ranging from 5,000 to 7,000?",
        "SQL": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Count",
                    "match_type": "在区间",
                    "condition": [
                        5000,
                        7000
                    ]
                }
            ]
        },
        "table_name": "tags",
        "id": "186"
    },
    {
        "question": "What is the user ID of the owner of the post with the highest favorite count?",
        "SQL": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "OwnerUserId"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "FavoriteCount",
                    "match_type": "等于",
                    "condition": "( SELECT MAX(FavoriteCount) FROM posts )"
                }
            ]
        },
        "table_name": "posts",
        "id": "187"
    },
    {
        "question": "What is the age of the user with the highest reputation?",
        "SQL": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Age"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Reputation",
                    "match_type": "等于",
                    "condition": "( SELECT MAX(Reputation) FROM users )"
                }
            ]
        },
        "table_name": "users",
        "id": "188"
    },
    {
        "question": "What is the ID of the youngest user?",
        "SQL": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "Id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "等于",
                    "condition": "( SELECT MIN(Age) FROM users )"
                }
            ]
        },
        "table_name": "users",
        "id": "189"
    },
    {
        "question": "What is the total score of the posts on July 19, 2010?",
        "SQL": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Score",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "LasActivityDate",
                    "match_type": "绝对时间",
                    "condition": "2010-07-19"
                }
            ]
        },
        "table_name": "posts",
        "id": "190"
    },
    {
        "question": "What is the display name of the user with the highest reputation?",
        "SQL": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "DisplayName"
                }
            ],
            "measure": [
                {
                    "column": "Reputation",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "users",
        "id": "191"
    },
    {
        "question": "What is the count of users with a reputation over 2000 and more than 1000 views?",
        "SQL": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Reputation",
                    "match_type": "大于",
                    "condition": "2000"
                },
                {
                    "column": "Views",
                    "match_type": "大于",
                    "condition": "1000"
                }
            ]
        },
        "table_name": "users",
        "id": "192"
    },
    {
        "question": "Can you show me the display names of all adult users?",
        "SQL": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "DisplayName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "在区间",
                    "condition": [
                        19,
                        65
                    ]
                }
            ]
        },
        "table_name": "users",
        "id": "193"
    },
    {
        "question": "Determine the proportion of users who are teenagers.",
        "SQL": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Age",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "在区间",
                    "condition": "13,18"
                }
            ]
        },
        "table_name": "users",
        "id": "194"
    },
    {
        "question": "Find the total count of posts that have a view count higher than the average view count.",
        "SQL": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "ViewCount",
                    "match_type": "大于",
                    "condition": "( SELECT AVG(ViewCount) FROM posts )"
                }
            ]
        },
        "table_name": "posts",
        "id": "195"
    },
    {
        "question": "Find the count of posts that have more than 35,000 views but have not received any comments from other users.",
        "SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "ViewCount",
                    "match_type": "大于",
                    "condition": "35000"
                },
                {
                    "column": "CommentCount",
                    "match_type": "等于",
                    "condition": "0"
                }
            ]
        },
        "table_name": "posts",
        "id": "196"
    },
    {
        "question": "Find the count of adult users who have given more than 5000 upvotes.",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "在区间",
                    "condition": [
                        19,
                        65
                    ]
                },
                {
                    "column": "UpVotes",
                    "match_type": "大于",
                    "condition": 5000
                }
            ]
        },
        "table_name": "users",
        "id": "197"
    },
    {
        "question": "What is the total number of users who received the 'Citizen Patrol' badge?",
        "SQL": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Citizen Patrol"
                }
            ]
        },
        "table_name": "badges",
        "id": "198"
    },
    {
        "question": "Calculate the total number of posts that have the tag 'careers'.",
        "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "TagName",
                    "match_type": "精确匹配",
                    "condition": "careers"
                }
            ]
        },
        "table_name": "tags",
        "id": "199"
    },
    {
        "question": "Can you provide the reputation and view count for the user with the display name 'Jarrod Dixon'?",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "DisplayName"
                }
            ],
            "measure": [
                {
                    "column": "Reputation",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "Views",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "DisplayName",
                    "match_type": "精确匹配",
                    "condition": "Jarrod Dixon"
                }
            ]
        },
        "table_name": "users",
        "id": "200"
    },
    {
        "question": "What is the number of comments and answers made by users on the post titled 'Clustering 1D data'?",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CommentCount",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "AnswerCount",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Title",
                    "match_type": "精确匹配",
                    "condition": "Clustering 1D data"
                }
            ]
        },
        "table_name": "posts",
        "id": "201"
    },
    {
        "question": "What is the creation date of the account for the user named 'IrishStat'?",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CreationDate",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "DisplayName",
                    "match_type": "精确匹配",
                    "condition": "IrishStat"
                }
            ]
        },
        "table_name": "users",
        "id": "202"
    },
    {
        "question": "Find the count of posts with a bounty amount greater than or equal to 30.",
        "SQL": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "BountyAmount",
                    "match_type": "大于等于",
                    "condition": "30"
                }
            ]
        },
        "table_name": "votes",
        "id": "203"
    },
    {
        "question": "What is the number of posts with a score below 20?",
        "SQL": "SELECT COUNT(id) FROM posts WHERE Score < 20",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Score",
                    "match_type": "小于",
                    "condition": "20"
                }
            ]
        },
        "table_name": "posts",
        "id": "204"
    },
    {
        "question": "How many tags with an ID less than 15 have a post count of 20 or fewer?",
        "SQL": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15",
        "db_id": "codebase_community",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Count",
                    "match_type": "小于等于",
                    "condition": "20"
                },
                {
                    "column": "Id",
                    "match_type": "小于",
                    "condition": "15"
                }
            ]
        },
        "table_name": "tags",
        "id": "205"
    },
    {
        "question": "What are the Excerpt Post ID and Wiki Post ID for the tag with the name 'sample'?",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
        "db_id": "codebase_community",
        "config": {
            "dimension": [
                {
                    "column": "ExcerptPostId"
                },
                {
                    "column": "WikiPostId"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "TagName",
                    "match_type": "精确匹配",
                    "condition": "sample"
                }
            ]
        },
        "table_name": "tags",
        "id": "206"
    },
    {
        "question": "Provide the ID for the publisher named Star Trek.",
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "db_id": "superhero",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "publisher_name",
                    "match_type": "精确匹配",
                    "condition": "Star Trek"
                }
            ]
        },
        "table_name": "publisher",
        "id": "207"
    },
    {
        "question": "Compute the mean attribute score for all superheroes.",
        "SQL": "SELECT AVG(attribute_value) FROM hero_attribute",
        "db_id": "superhero",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "attribute_value",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "hero_attribute",
        "id": "208"
    },
    {
        "question": "How many superheroes do not have a full name recorded?",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
        "db_id": "superhero",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "full_name",
                    "match_type": "不为空",
                    "condition": "IS NULL"
                }
            ]
        },
        "table_name": "superhero",
        "id": "209"
    },
    {
        "question": "Find the weight difference between Emil Blonsky and Charles Chandler.",
        "SQL": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
        "db_id": "superhero",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "weight_kg",
                    "aggregate_function": "DIFFERENCE"
                }
            ],
            "filter": [
                {
                    "column": "full_name",
                    "match_type": "exact_match",
                    "condition": "Emil Blonsky"
                },
                {
                    "column": "full_name",
                    "match_type": "exact_match",
                    "condition": "Charles Chandler"
                }
            ]
        },
        "table_name": "superhero",
        "id": "210"
    },
    {
        "question": "Compute the mean height for every superhero.",
        "SQL": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
        "db_id": "superhero",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "height_cm",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "superhero",
        "id": "211"
    },
    {
        "question": "What is the name of the tallest superhero?",
        "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "db_id": "superhero",
        "config": {
            "dimension": [
                {
                    "column": "superhero_name"
                }
            ],
            "measure": [
                {
                    "column": "height_cm",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "superhero",
        "id": "212"
    },
    {
        "question": "Can you provide me with the ID for the superpower Cryokinesis?",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
        "db_id": "superhero",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "power_name",
                    "match_type": "精确匹配",
                    "condition": "Cryokinesis"
                }
            ]
        },
        "table_name": "superpower",
        "id": "213"
    },
    {
        "question": "What is the name of the superhero whose ID is 294?",
        "SQL": "SELECT superhero_name FROM superhero WHERE id = 294",
        "db_id": "superhero",
        "config": {
            "dimension": [
                {
                    "column": "superhero_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "id",
                    "match_type": "等于",
                    "condition": "294"
                }
            ]
        },
        "table_name": "superhero",
        "id": "214"
    },
    {
        "question": "Show the full names of superheroes whose weight is not recorded.",
        "SQL": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)",
        "db_id": "superhero",
        "config": {
            "dimension": [
                {
                    "column": "full_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "full_name",
                    "match_type": "不为空",
                    "condition": ""
                },
                {
                    "column": "weight_kg",
                    "match_type": "等于",
                    "condition": "0"
                },
                {
                    "column": "weight_kg",
                    "match_type": "为空",
                    "condition": ""
                }
            ]
        },
        "table_name": "superhero",
        "id": "215"
    },
    {
        "question": "What is the name of the tallest superhero?",
        "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "db_id": "superhero",
        "config": {
            "dimension": [
                {
                    "column": "superhero_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "height_cm",
                    "match_type": "DESC",
                    "condition": "LIMIT 1"
                }
            ]
        },
        "table_name": "superhero",
        "id": "216"
    },
    {
        "question": "What is the superhero name of Charles Chandler?",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
        "db_id": "superhero",
        "config": {
            "dimension": [
                {
                    "column": "superhero_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "full_name",
                    "match_type": "精确匹配",
                    "condition": "Charles Chandler"
                }
            ]
        },
        "table_name": "superhero",
        "id": "217"
    },
    {
        "question": "How many superheroes have the first name John?",
        "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'",
        "db_id": "superhero",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "full_name",
                    "match_type": "模糊匹配",
                    "condition": "John%"
                }
            ]
        },
        "table_name": "superhero",
        "id": "218"
    },
    {
        "question": "Provide the hero ID for the superhero that has the minimum attribute value.",
        "SQL": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )",
        "db_id": "superhero",
        "config": {
            "dimension": [
                {
                    "column": "hero_id"
                }
            ],
            "measure": [
                {
                    "column": "attribute_value",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "hero_attribute",
        "id": "219"
    },
    {
        "question": "What is the full name of the superhero whose name is Alien?",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
        "db_id": "superhero",
        "config": {
            "dimension": [
                {
                    "column": "full_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "superhero_name",
                    "match_type": "精确匹配",
                    "condition": "Alien"
                }
            ]
        },
        "table_name": "superhero",
        "id": "220"
    },
    {
        "question": "What is the year of the inaugural Singapore Grand Prix?",
        "SQL": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "year"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Singapore Grand Prix"
                }
            ]
        },
        "table_name": "races",
        "id": "221"
    },
    {
        "question": "List all the races that took place in 2005 in descending order and provide the total count.",
        "SQL": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "year",
                    "match_type": "等于",
                    "condition": "2005"
                }
            ]
        },
        "table_name": "races",
        "id": "222"
    },
    {
        "question": "Provide the names of all races that took place in the earliest recorded year and month.",
        "SQL": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date",
                    "match_type": "绝对时间",
                    "condition": "最早记录的年月"
                }
            ]
        },
        "table_name": "races",
        "id": "223"
    },
    {
        "question": "What is the name and date of the final race round in 1999?",
        "SQL": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "year",
                    "match_type": "等于",
                    "condition": "1999"
                }
            ]
        },
        "table_name": "races",
        "id": "224"
    },
    {
        "question": "What is the year with the highest number of races?",
        "SQL": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "year"
                }
            ],
            "measure": [
                {
                    "column": "round",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "races",
        "id": "225"
    },
    {
        "question": "List the races that took place in 2017 but were not held in 2000.",
        "SQL": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "year",
                    "match_type": "等于",
                    "condition": "2017"
                },
                {
                    "column": "name",
                    "match_type": "不等于",
                    "condition": "( SELECT name FROM races WHERE year = 2000 )"
                }
            ]
        },
        "table_name": "races",
        "id": "226"
    },
    {
        "question": "What is the age and name of the youngest Japanese driver?",
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "forename"
                },
                {
                    "column": "surname"
                }
            ],
            "measure": [
                {
                    "column": "STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob)",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "nationality",
                    "match_type": "精确匹配",
                    "condition": "Japanese"
                }
            ]
        },
        "table_name": "drivers",
        "id": "227"
    },
    {
        "question": "Can you provide the latitude and longitude for the Silverstone Circuit?",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "lat"
                },
                {
                    "column": "lng"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Silverstone Circuit"
                }
            ]
        },
        "table_name": "circuits",
        "id": "228"
    },
    {
        "question": "Among Silverstone Circuit, Hockenheimring, and Hungaroring, which circuit has the highest latitude?",
        "SQL": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring')"
                }
            ]
        },
        "table_name": "circuits",
        "id": "229"
    },
    {
        "question": "What is the circuit reference for Marina Bay Street Circuit?",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "circuitRef"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Marina Bay Street Circuit"
                }
            ]
        },
        "table_name": "circuits",
        "id": "230"
    },
    {
        "question": "Which country has the circuit located at the highest altitude?",
        "SQL": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [
                {
                    "column": "alt",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "circuits",
        "id": "231"
    },
    {
        "question": "How many drivers are there without a code?",
        "SQL": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers",
        "db_id": "formula_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "driverId",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "code",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "code",
                    "match_type": "IS NULL",
                    "condition": ""
                }
            ]
        },
        "table_name": "drivers",
        "id": "232"
    },
    {
        "question": "What is the nationality of the oldest driver?",
        "SQL": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "nationality"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "dob",
                    "match_type": "不为空",
                    "condition": ""
                }
            ]
        },
        "table_name": "drivers",
        "id": "233"
    },
    {
        "question": "Can you provide a list of the last names for all drivers who are Italian?",
        "SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "surname"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "nationality",
                    "match_type": "精确匹配",
                    "condition": "Italian"
                }
            ]
        },
        "table_name": "drivers",
        "id": "234"
    },
    {
        "question": "What is the website where I can find more information about Anthony Davidson?",
        "SQL": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "url"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "forename",
                    "match_type": "精确匹配",
                    "condition": "Anthony"
                },
                {
                    "column": "surname",
                    "match_type": "精确匹配",
                    "condition": "Davidson"
                }
            ]
        },
        "table_name": "drivers",
        "id": "235"
    },
    {
        "question": "What is the reference name for the driver with the first name Lewis and last name Hamilton?",
        "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "driverRef"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "forename",
                    "match_type": "精确匹配",
                    "condition": "Lewis"
                },
                {
                    "column": "surname",
                    "match_type": "精确匹配",
                    "condition": "Hamilton"
                }
            ]
        },
        "table_name": "drivers",
        "id": "236"
    },
    {
        "question": "What is the number of circuits located in Adelaide, Australia?",
        "SQL": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
        "db_id": "formula_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "circuitId",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "location",
                    "match_type": "精确匹配",
                    "condition": "Adelaide"
                },
                {
                    "column": "country",
                    "match_type": "精确匹配",
                    "condition": "Australia"
                }
            ]
        },
        "table_name": "circuits",
        "id": "237"
    },
    {
        "question": "Can you provide the latitude and longitude coordinates for the circuits located in the United States?",
        "SQL": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "lat"
                },
                {
                    "column": "lng"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "country",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "circuits",
        "id": "238"
    },
    {
        "question": "What is the number of British drivers born after 1980?",
        "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
        "db_id": "formula_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "driverId",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "nationality",
                    "match_type": "精确匹配",
                    "condition": "British"
                },
                {
                    "column": "dob",
                    "match_type": "绝对时间",
                    "condition": "1980-01-01"
                }
            ]
        },
        "table_name": "drivers",
        "id": "239"
    },
    {
        "question": "Show the codes of drivers with American nationality.",
        "SQL": "SELECT code FROM drivers WHERE Nationality = 'American'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "精确匹配",
                    "condition": "American"
                }
            ]
        },
        "table_name": "drivers",
        "id": "240"
    },
    {
        "question": "Provide the ID numbers of the races that took place in 2009.",
        "SQL": "SELECT raceId FROM races WHERE year = 2009",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "raceId"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "year",
                    "match_type": "等于",
                    "condition": "2009"
                }
            ]
        },
        "table_name": "races",
        "id": "241"
    },
    {
        "question": "What is the total number of drivers who took part in the race with ID 18?",
        "SQL": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
        "db_id": "formula_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "driverId",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "raceId",
                    "match_type": "等于",
                    "condition": "18"
                }
            ]
        },
        "table_name": "driverStandings",
        "id": "242"
    },
    {
        "question": "What is the driver reference name for Robert Kubica?",
        "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "driverRef"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "forename",
                    "match_type": "精确匹配",
                    "condition": "Robert"
                },
                {
                    "column": "surname",
                    "match_type": "精确匹配",
                    "condition": "Kubica"
                }
            ]
        },
        "table_name": "drivers",
        "id": "243"
    },
    {
        "question": "What is the number of British drivers born in 1980?",
        "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
        "db_id": "formula_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "driverId",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "nationality",
                    "match_type": "精确匹配",
                    "condition": "British"
                },
                {
                    "column": "dob",
                    "match_type": "精确匹配",
                    "condition": "1980"
                }
            ]
        },
        "table_name": "drivers",
        "id": "244"
    },
    {
        "question": "Can you provide the reference name of the oldest German driver?",
        "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "driverRef"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "nationality",
                    "match_type": "精确匹配",
                    "condition": "German"
                }
            ]
        },
        "table_name": "drivers",
        "id": "245"
    },
    {
        "question": "Identify the IDs of the top five drivers based on their fastest times during the first lap of the race, in descending order.",
        "SQL": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "driverId"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "lap",
                    "match_type": "等于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "lapTimes",
        "id": "246"
    },
    {
        "question": "How many racers were disqualified in races numbered between 50 and 100?",
        "SQL": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
        "db_id": "formula_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "IIF(time IS NOT NULL, 1, 0)",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "statusId",
                    "match_type": "等于",
                    "condition": "2"
                },
                {
                    "column": "raceID",
                    "match_type": "在区间",
                    "condition": [
                        50,
                        100
                    ]
                }
            ]
        },
        "table_name": "results",
        "id": "247"
    },
    {
        "question": "Can you provide the locations and coordinates of all circuits that have been hosted in Austria?",
        "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "location"
                },
                {
                    "column": "lat"
                },
                {
                    "column": "lng"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "country",
                    "match_type": "精确匹配",
                    "condition": "Austria"
                }
            ]
        },
        "table_name": "circuits",
        "id": "248"
    },
    {
        "question": "Which race has the highest number of finishers?",
        "SQL": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "raceId"
                }
            ],
            "measure": [
                {
                    "column": "time IS NOT NULL",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "results",
        "id": "249"
    },
    {
        "question": "Can you provide the full names and dates of birth for Austrian drivers who were born between 1981 and 1991?",
        "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "forename"
                },
                {
                    "column": "surname"
                },
                {
                    "column": "dob"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "nationality",
                    "match_type": "精确匹配",
                    "condition": "Austrian"
                },
                {
                    "column": "dob",
                    "match_type": "在区间",
                    "condition": [
                        "1981-01-01",
                        "1991-12-31"
                    ]
                }
            ]
        },
        "table_name": "drivers",
        "id": "250"
    },
    {
        "question": "List the full names, Wikipedia page links, and dates of birth for German drivers born between 1971 and 1985, sorted by date of birth in descending order.",
        "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "forename"
                },
                {
                    "column": "surname"
                },
                {
                    "column": "url"
                },
                {
                    "column": "dob"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "nationality",
                    "match_type": "精确匹配",
                    "condition": "German"
                },
                {
                    "column": "dob",
                    "match_type": "在区间",
                    "condition": [
                        "1971-01-01",
                        "1985-12-31"
                    ]
                }
            ]
        },
        "table_name": "drivers",
        "id": "251"
    },
    {
        "question": "Where is the Hungaroring circuit located? Please also provide the country and coordinates of this circuit.",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "country"
                },
                {
                    "column": "lat"
                },
                {
                    "column": "lng"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Hungaroring"
                }
            ]
        },
        "table_name": "circuits",
        "id": "252"
    },
    {
        "question": "What is the average number of races per year in the first decade of the 21st century?",
        "SQL": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
        "db_id": "formula_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2000-01-01",
                        "2010-12-31"
                    ]
                }
            ]
        },
        "table_name": "races",
        "id": "253"
    },
    {
        "question": "What is the most common nationality among the drivers?",
        "SQL": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [
                {
                    "column": "nationality"
                }
            ],
            "measure": [
                {
                    "column": "driverId",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "drivers",
        "id": "254"
    },
    {
        "question": "How many wins did the driver ranked 91st in terms of points have?",
        "SQL": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings",
        "db_id": "formula_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "wins",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "points",
                    "match_type": "等于",
                    "condition": "91"
                }
            ]
        },
        "table_name": "driverStandings",
        "id": "255"
    },
    {
        "question": "What is the record for the longest duration a driver has spent in a pit stop?",
        "SQL": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1",
        "db_id": "formula_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "duration",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "pitStops",
        "id": "256"
    },
    {
        "question": "What is the API ID of the player with the highest overall rating?",
        "SQL": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_api_id"
                }
            ],
            "measure": [
                {
                    "column": "overall_rating",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Player_Attributes",
        "id": "257"
    },
    {
        "question": "Who is the tallest player and what is their height?",
        "SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_name"
                }
            ],
            "measure": [
                {
                    "column": "height",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Player",
        "id": "258"
    },
    {
        "question": "Which preferred foot does the player with the lowest potential have?",
        "SQL": "SELECT preferred_foot FROM Player_Attributes WHERE potential IS NOT NULL ORDER BY potential ASC LIMIT 1",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "preferred_foot"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "potential",
                    "match_type": "不为空",
                    "condition": ""
                }
            ]
        },
        "table_name": "Player_Attributes",
        "id": "259"
    },
    {
        "question": "How many players have an overall rating between 60 and 65 and prefer attacking over defending?",
        "SQL": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
        "db_id": "european_football_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "overall_rating",
                    "match_type": "在区间",
                    "condition": [
                        60,
                        65
                    ]
                },
                {
                    "column": "defensive_work_rate",
                    "match_type": "精确匹配",
                    "condition": "low"
                }
            ]
        },
        "table_name": "Player_Attributes",
        "id": "260"
    },
    {
        "question": "Identify the top 5 players with the highest performance in crossing actions, and provide their player IDs.",
        "SQL": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [
                {
                    "column": "crossing",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Player_Attributes",
        "id": "261"
    },
    {
        "question": "What is the mean height of athletes who were born from 1990 to 1995?",
        "SQL": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
        "db_id": "european_football_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "height",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "birthday",
                    "match_type": "在区间",
                    "condition": [
                        "1990-01-01",
                        "1995-12-31"
                    ]
                }
            ]
        },
        "table_name": "Player",
        "id": "262"
    },
    {
        "question": "Identify the player API IDs with the top overall ratings that were above average in the year 2010.",
        "SQL": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_api_id"
                }
            ],
            "measure": [
                {
                    "column": "overall_rating",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "date",
                    "match_type": "精确匹配",
                    "condition": "2010"
                }
            ]
        },
        "table_name": "Player_Attributes",
        "id": "263"
    },
    {
        "question": "Provide the FIFA API IDs of teams whose build-up play speed is between 51 and 59.",
        "SQL": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "team_fifa_api_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "buildUpPlaySpeed",
                    "match_type": "在区间",
                    "condition": "(50, 60)"
                }
            ]
        },
        "table_name": "Team_Attributes",
        "id": "264"
    },
    {
        "question": "What's the abbreviated name for the football team Queens Park Rangers?",
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "db_id": "european_football_2",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "team_long_name",
                    "match_type": "精确匹配",
                    "condition": "Queens Park Rangers"
                }
            ]
        },
        "table_name": "Team",
        "id": "265"
    },
    {
        "question": "Show the names of soccer players born in October 1970.",
        "SQL": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "birthday",
                    "match_type": "绝对时间",
                    "condition": [
                        "1970-10-01",
                        "1970-10-31"
                    ]
                }
            ]
        },
        "table_name": "Player",
        "id": "266"
    },
    {
        "question": "Can you provide a list of players whose height exceeds 180?",
        "SQL": "SELECT player_name FROM Player WHERE height > 180",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "height",
                    "match_type": "大于",
                    "condition": "180"
                }
            ]
        },
        "table_name": "Player",
        "id": "267"
    },
    {
        "question": "What is the number of players born after 1990?",
        "SQL": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'",
        "db_id": "european_football_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "birthday",
                    "match_type": "大于",
                    "condition": "1990-01-01"
                }
            ]
        },
        "table_name": "Player",
        "id": "268"
    },
    {
        "question": "How many players named Adam weigh over 170 pounds?",
        "SQL": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'",
        "db_id": "european_football_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "大于",
                    "condition": "170"
                },
                {
                    "column": "player_name",
                    "match_type": "模糊匹配",
                    "condition": "Adam%"
                }
            ]
        },
        "table_name": "Player",
        "id": "269"
    },
    {
        "question": "What is the name of the football player with the shortest height?",
        "SQL": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "player",
        "id": "270"
    },
    {
        "question": "What is the full name of the team with the short name GEN?",
        "SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "team_long_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "team_short_name",
                    "match_type": "精确匹配",
                    "condition": "GEN"
                }
            ]
        },
        "table_name": "Team",
        "id": "271"
    },
    {
        "question": "Who is the older player between Aaron Lennon and Abdelaziz Barrada?",
        "SQL": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "player_name",
                    "match_type": "精确匹配",
                    "condition": "Aaron Lennon"
                },
                {
                    "column": "player_name",
                    "match_type": "精确匹配",
                    "condition": "Abdelaziz Barrada"
                }
            ]
        },
        "table_name": "Player",
        "id": "272"
    },
    {
        "question": "Who is the tallest player?",
        "SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_name"
                }
            ],
            "measure": [
                {
                    "column": "height",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Player",
        "id": "273"
    },
    {
        "question": "How many players who prefer using their left foot stay in their position during team attacks?",
        "SQL": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
        "db_id": "european_football_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "player_api_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "preferred_foot",
                    "match_type": "精确匹配",
                    "condition": "left"
                },
                {
                    "column": "attacking_work_rate",
                    "match_type": "精确匹配",
                    "condition": "low"
                }
            ]
        },
        "table_name": "Player_Attributes",
        "id": "274"
    },
    {
        "question": "Provide the names of the tallest players.",
        "SQL": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "rank",
                    "match_type": "等于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "Player",
        "id": "275"
    },
    {
        "question": "Provide the names of players aged 35 years or older.",
        "SQL": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "birthday",
                    "match_type": "大于等于",
                    "condition": "35"
                }
            ]
        },
        "table_name": "Player",
        "id": "276"
    },
    {
        "question": "Can you list the names of the top three football players taller than 180 cm, sorted alphabetically?",
        "SQL": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "player_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "height",
                    "match_type": "大于",
                    "condition": "180"
                }
            ]
        },
        "table_name": "Player",
        "id": "277"
    },
    {
        "question": "What is the number of football players with the first name 'Aaron' who were born after 1990?",
        "SQL": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
        "db_id": "european_football_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "birthday",
                    "match_type": "大于",
                    "condition": "1990"
                },
                {
                    "column": "player_name",
                    "match_type": "模糊匹配",
                    "condition": "Aaron%"
                }
            ]
        },
        "table_name": "Player",
        "id": "278"
    },
    {
        "question": "How does player 6's total jumping score compare to player 23's total jumping score?",
        "SQL": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
        "db_id": "european_football_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "jumping",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "id",
                    "match_type": "等于",
                    "condition": "6"
                },
                {
                    "column": "id",
                    "match_type": "等于",
                    "condition": "23"
                }
            ]
        },
        "table_name": "Player_Attributes AS t1",
        "id": "279"
    },
    {
        "question": "Can you give me the IDs of the top five football players with the least potential, who favor their right foot for attacking?",
        "SQL": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 5",
        "db_id": "european_football_2",
        "config": {
            "dimension": [
                {
                    "column": "id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "preferred_foot",
                    "match_type": "精确匹配",
                    "condition": "right"
                }
            ]
        },
        "table_name": "Player_Attributes",
        "id": "280"
    },
    {
        "question": "How many players who prefer using their left foot while attacking have the highest potential score for crossing?",
        "SQL": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
        "db_id": "european_football_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "t1.id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "t1.preferred_foot",
                    "match_type": "精确匹配",
                    "condition": "left"
                },
                {
                    "column": "t1.crossing",
                    "match_type": "等于",
                    "condition": "( SELECT MAX(crossing) FROM Player_Attributes)"
                }
            ]
        },
        "table_name": "Player_Attributes AS t1",
        "id": "281"
    },
    {
        "question": "What is the percentage difference between in-patient and outpatient males?",
        "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "Admission"
                }
            ],
            "measure": [
                {
                    "column": "CASE WHEN Admission = '+' THEN 1 ELSE 0 END",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "CASE WHEN Admission = '-' THEN 1 ELSE 0 END",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "SEX",
                    "match_type": "等于",
                    "condition": "M"
                }
            ]
        },
        "table_name": "Patient",
        "id": "282"
    },
    {
        "question": "What percentage of female patients were born after 1930?",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SEX",
                    "match_type": "等于",
                    "condition": "F"
                },
                {
                    "column": "Birthday",
                    "match_type": "大于",
                    "condition": "1930-01-01"
                }
            ]
        },
        "table_name": "Patient",
        "id": "283"
    },
    {
        "question": "What percentage of patients born between 1930 and 1940 were admitted as inpatients?",
        "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Admission",
                    "aggregate_function": "CUSTOM"
                }
            ],
            "filter": [
                {
                    "column": "Birthday",
                    "match_type": "在区间",
                    "condition": [
                        "1930-01-01",
                        "1940-12-31"
                    ]
                }
            ]
        },
        "table_name": "Patient",
        "id": "284"
    },
    {
        "question": "Among patients diagnosed with 'SLE', what is the ratio of inpatient to outpatient follow-up treatments?",
        "SQL": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Admission",
                    "aggregate_function": "SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END)"
                }
            ],
            "filter": [
                {
                    "column": "Diagnosis",
                    "match_type": "精确匹配",
                    "condition": "SLE"
                }
            ]
        },
        "table_name": "Patient",
        "id": "285"
    },
    {
        "question": "What is the number of female patients admitted to the hospital in 1997 who were subsequently followed up in the outpatient clinic?",
        "SQL": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Description",
                    "match_type": "绝对时间",
                    "condition": "1997-01-01 至 1997-12-31"
                },
                {
                    "column": "SEX",
                    "match_type": "精确匹配",
                    "condition": "F"
                },
                {
                    "column": "Admission",
                    "match_type": "精确匹配",
                    "condition": "-"
                }
            ]
        },
        "table_name": "Patient",
        "id": "286"
    },
    {
        "question": "What is the age of the youngest patient upon their first arrival at the hospital?",
        "SQL": "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "Patient",
        "id": "287"
    },
    {
        "question": "What is the ANA concentration level for patient 3605340 on December 2, 1996?",
        "SQL": "SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "ANA",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "ID",
                    "match_type": "等于",
                    "condition": "3605340"
                },
                {
                    "column": "Examination Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "1996-12-02",
                        "1996-12-02"
                    ]
                }
            ]
        },
        "table_name": "Examination",
        "id": "288"
    },
    {
        "question": "Was the total cholesterol level for patient 2927464 considered normal on September 4, 1995?",
        "SQL": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "Date"
                }
            ],
            "measure": [
                {
                    "column": "`T-CHO`",
                    "aggregate_function": "CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END"
                }
            ],
            "filter": [
                {
                    "column": "ID",
                    "match_type": "等于",
                    "condition": "2927464"
                },
                {
                    "column": "Date",
                    "match_type": "等于",
                    "condition": "1995-09-04"
                }
            ]
        },
        "table_name": "Laboratory",
        "id": "289"
    },
    {
        "question": "What is the gender of the first patient diagnosed with AORTITIS?",
        "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "SEX"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Diagnosis",
                    "match_type": "精确匹配",
                    "condition": "AORTITIS"
                },
                {
                    "column": "`First Date`",
                    "match_type": "不为空",
                    "condition": ""
                }
            ]
        },
        "table_name": "Patient",
        "id": "290"
    },
    {
        "question": "Shows the IDs of all patients diagnosed with Behcet's disease who had examinations between January 1, 1997, and December 31, 1997.",
        "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "ID"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "`Examination Date`",
                    "match_type": "绝对时间",
                    "condition": [
                        "1997-01-01",
                        "1997-12-31"
                    ]
                },
                {
                    "column": "Diagnosis",
                    "match_type": "精确匹配",
                    "condition": "Behcet"
                }
            ]
        },
        "table_name": "Examination",
        "id": "291"
    },
    {
        "question": "List the IDs of patients who were examined between July 6, 1987, and January 31, 1996, and had a GPT level exceeding 30 and an ALB level below 4.",
        "SQL": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "ID"
                }
            ],
            "measure": [
                {
                    "column": "ID",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "1987-07-06",
                        "1996-01-31"
                    ]
                },
                {
                    "column": "GPT",
                    "match_type": "大于",
                    "condition": "30"
                },
                {
                    "column": "ALB",
                    "match_type": "小于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "Laboratory",
        "id": "292"
    },
    {
        "question": "List the IDs of all female patients who were born in 1964 and admitted to the hospital.",
        "SQL": "SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "ID"
                }
            ],
            "measure": [
                {
                    "column": "ID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Birthday",
                    "match_type": "等于",
                    "condition": "1964"
                },
                {
                    "column": "SEX",
                    "match_type": "精确匹配",
                    "condition": "F"
                },
                {
                    "column": "Admission",
                    "match_type": "精确匹配",
                    "condition": "+"
                }
            ]
        },
        "table_name": "Patient",
        "id": "293"
    },
    {
        "question": "How many patients have a thrombosis level of 2, an ANA pattern of only S, and an anti-Cardiolipin (IgM) level that is 20% above the average for patients with the same thrombosis level and ANA pattern?",
        "SQL": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Thrombosis",
                    "match_type": "等于",
                    "condition": "2"
                },
                {
                    "column": "`ANA Pattern`",
                    "match_type": "精确匹配",
                    "condition": "S"
                },
                {
                    "column": "`aCL IgM`",
                    "match_type": "大于",
                    "condition": "(SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')"
                }
            ]
        },
        "table_name": "Examination",
        "id": "294"
    },
    {
        "question": "What is the percentage of patients who have a uric acid level below the normal range among those with a proteinuria level within the normal range?",
        "SQL": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "UA",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "ID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "UA",
                    "match_type": "小于等于",
                    "condition": "6.5"
                },
                {
                    "column": "U-PRO",
                    "match_type": "在区间",
                    "condition": [
                        "0",
                        "30"
                    ]
                }
            ]
        },
        "table_name": "Laboratory",
        "id": "295"
    },
    {
        "question": "In 1981, what percentage of male patients who first visited the hospital were diagnosed with BEHCET?",
        "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Diagnosis",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "ID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Diagnosis",
                    "match_type": "精确匹配",
                    "condition": "BEHCET"
                },
                {
                    "column": "First Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "1981-01-01",
                        "1981-12-31"
                    ]
                },
                {
                    "column": "SEX",
                    "match_type": "精确匹配",
                    "condition": "M"
                }
            ]
        },
        "table_name": "Patient",
        "id": "296"
    },
    {
        "question": "Which symptom is the most frequently observed in patients diagnosed with SLE?",
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "Symptoms"
                }
            ],
            "measure": [
                {
                    "column": "Symptoms",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Diagnosis",
                    "match_type": "精确匹配",
                    "condition": "SLE"
                }
            ]
        },
        "table_name": "Examination",
        "id": "297"
    },
    {
        "question": "What is the initial date of documentation for patient 48473's medical information, and what condition was diagnosed?",
        "SQL": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "Diagnosis"
                }
            ],
            "measure": [
                {
                    "column": "First Date",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "ID",
                    "match_type": "等于",
                    "condition": "48473"
                }
            ]
        },
        "table_name": "Patient",
        "id": "298"
    },
    {
        "question": "What is the number of female patients who received an APS diagnosis?",
        "SQL": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "ID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SEX",
                    "match_type": "精确匹配",
                    "condition": "F"
                },
                {
                    "column": "Diagnosis",
                    "match_type": "精确匹配",
                    "condition": "APS"
                }
            ]
        },
        "table_name": "Patient",
        "id": "299"
    },
    {
        "question": "In 1997, how many patients had protein levels that were not within the normal range during their tests?",
        "SQL": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "ID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "ALB",
                    "match_type": "在区间",
                    "condition": [
                        "6.0",
                        "8.5"
                    ]
                },
                {
                    "column": "Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "1997-01-01",
                        "1997-12-31"
                    ]
                }
            ]
        },
        "table_name": "Laboratory",
        "id": "300"
    },
    {
        "question": "What percentage of patients with thrombocytopenia symptoms were diagnosed with SLE?",
        "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Diagnosis",
                    "aggregate_function": "SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) * 100 / COUNT(ID)"
                }
            ],
            "filter": [
                {
                    "column": "Symptoms",
                    "match_type": "精确匹配",
                    "condition": "thrombocytopenia"
                }
            ]
        },
        "table_name": "Examination",
        "id": "301"
    },
    {
        "question": "What is the percentage of female patients born in 1980 who have been diagnosed with Rheumatoid Arthritis (RA)?",
        "SQL": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CASE WHEN SEX = 'F' THEN 1 ELSE 0 END",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "ID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Diagnosis",
                    "match_type": "精确匹配",
                    "condition": "RA"
                },
                {
                    "column": "Birthday",
                    "match_type": "精确匹配",
                    "condition": "1980"
                }
            ]
        },
        "table_name": "Patient",
        "id": "302"
    },
    {
        "question": "What are the dates when patient '48473' had a laboratory examination with an AST (GOT) level exceeding the normal range?",
        "SQL": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "Date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "ID",
                    "match_type": "等于",
                    "condition": "48473"
                },
                {
                    "column": "GOT",
                    "match_type": "大于等于",
                    "condition": "60"
                }
            ]
        },
        "table_name": "Laboratory",
        "id": "303"
    },
    {
        "question": "What is the mean value of lactate dehydrogenase (LDH) for patients whose LDH levels are within the normal range?",
        "SQL": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LDH",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "LDH",
                    "match_type": "小于",
                    "condition": "500"
                }
            ]
        },
        "table_name": "Laboratory",
        "id": "304"
    },
    {
        "question": "What is the examination date for the patient with the highest albumin level within the normal range?",
        "SQL": "SELECT Date FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1",
        "db_id": "thrombosis_prediction",
        "config": {
            "dimension": [
                {
                    "column": "Date"
                }
            ],
            "measure": [
                {
                    "column": "ALB",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "ALB",
                    "match_type": "在区间",
                    "condition": [
                        3.5,
                        5.5
                    ]
                }
            ]
        },
        "table_name": "Laboratory",
        "id": "305"
    },
    {
        "question": "What is the highest cost item associated with club event expenses?",
        "SQL": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "expense_description"
                }
            ],
            "measure": [
                {
                    "column": "cost",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "expense",
        "id": "306"
    },
    {
        "question": "What is the location of the 'Spring Budget Review' event?",
        "SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "location"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "event_name",
                    "match_type": "精确匹配",
                    "condition": "Spring Budget Review"
                }
            ]
        },
        "table_name": "event",
        "id": "307"
    },
    {
        "question": "What is the expense amount for 'Posters' on September 4, 2019?",
        "SQL": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "expense_description"
                },
                {
                    "column": "expense_date"
                }
            ],
            "measure": [
                {
                    "column": "cost",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "expense_description",
                    "match_type": "精确匹配",
                    "condition": "Posters"
                },
                {
                    "column": "expense_date",
                    "match_type": "绝对时间",
                    "condition": "2019-09-04"
                }
            ]
        },
        "table_name": "expense",
        "id": "308"
    },
    {
        "question": "What is the remaining amount of the largest budget allocated to 'Food'?",
        "SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "category"
                }
            ],
            "measure": [
                {
                    "column": "amount",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "remaining",
                    "aggregate_function": "none"
                }
            ],
            "filter": [
                {
                    "column": "category",
                    "match_type": "精确匹配",
                    "condition": "Food"
                }
            ]
        },
        "table_name": "budget",
        "id": "309"
    },
    {
        "question": "Can you provide the notes for the fundraising income received on September 14, 2019?",
        "SQL": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "notes",
                    "aggregate_function": "none"
                }
            ],
            "filter": [
                {
                    "column": "source",
                    "match_type": "精确匹配",
                    "condition": "Fundraising"
                },
                {
                    "column": "date_received",
                    "match_type": "绝对时间",
                    "condition": "2019-09-14"
                }
            ]
        },
        "table_name": "income",
        "id": "310"
    },
    {
        "question": "What is the number of majors in the College of Humanities and Social Sciences?",
        "SQL": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "major_name",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "college",
                    "match_type": "精确匹配",
                    "condition": "College of Humanities and Social Sciences"
                }
            ]
        },
        "table_name": "major",
        "id": "311"
    },
    {
        "question": "What is Carlo Jacobs' phone number?",
        "SQL": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "phone"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "first_name",
                    "match_type": "精确匹配",
                    "condition": "Carlo"
                },
                {
                    "column": "last_name",
                    "match_type": "精确匹配",
                    "condition": "Jacobs"
                }
            ]
        },
        "table_name": "member",
        "id": "312"
    },
    {
        "question": "What is the sum of the costs for all events where the expense was for pizzas?",
        "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "cost",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "expense_description",
                    "match_type": "精确匹配",
                    "condition": "Pizza"
                }
            ]
        },
        "table_name": "expense",
        "id": "313"
    },
    {
        "question": "What is the number of cities in Orange County, Virginia?",
        "SQL": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "city",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "county",
                    "match_type": "精确匹配",
                    "condition": "Orange County"
                },
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "Virginia"
                }
            ]
        },
        "table_name": "zip_code",
        "id": "314"
    },
    {
        "question": "Show me the departments that belong to the College of Humanities and Social Sciences.",
        "SQL": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "department"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "college",
                    "match_type": "精确匹配",
                    "condition": "College of Humanities and Social Sciences"
                }
            ]
        },
        "table_name": "major",
        "id": "315"
    },
    {
        "question": "What is the number of students who hold the position of President?",
        "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "member_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "position",
                    "match_type": "精确匹配",
                    "condition": "President"
                }
            ]
        },
        "table_name": "member",
        "id": "316"
    },
    {
        "question": "What is the maximum budget spent on an event?",
        "SQL": "SELECT MAX(spent) FROM budget",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "spent",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "budget",
        "id": "317"
    },
    {
        "question": "What is the total number of meeting events that took place in 2020?",
        "SQL": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "event_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "type",
                    "match_type": "精确匹配",
                    "condition": "Meeting"
                },
                {
                    "column": "event_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2020-01-01",
                        "2020-12-31"
                    ]
                }
            ]
        },
        "table_name": "event",
        "id": "318"
    },
    {
        "question": "How much money in total has been spent on food?",
        "SQL": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "spent",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "category",
                    "match_type": "精确匹配",
                    "condition": "Food"
                }
            ]
        },
        "table_name": "budget",
        "id": "319"
    },
    {
        "question": "What is the proportion of students who majored in Finance compared to those who majored in Physics?",
        "SQL": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "major_name",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "major_name",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "major_name",
                    "match_type": "精确匹配",
                    "condition": "Finance"
                },
                {
                    "column": "major_name",
                    "match_type": "精确匹配",
                    "condition": "Physics"
                }
            ]
        },
        "table_name": "major",
        "id": "320"
    },
    {
        "question": "What is the full name and email address of the Secretary in the Student_Club?",
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                },
                {
                    "column": "email"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "position",
                    "match_type": "精确匹配",
                    "condition": "Secretary"
                }
            ]
        },
        "table_name": "member",
        "id": "321"
    },
    {
        "question": "What was the average amount spent by the Student_Club on food for past events?",
        "SQL": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "spent",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "category",
                    "match_type": "精确匹配",
                    "condition": "Food"
                },
                {
                    "column": "event_status",
                    "match_type": "精确匹配",
                    "condition": "Closed"
                }
            ]
        },
        "table_name": "budget",
        "id": "322"
    },
    {
        "question": "Calculate the percentage of 'Community Service' events out of all events organized by the Student_Club in 2019.",
        "SQL": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "type",
                    "aggregate_function": "SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100 / COUNT(type)"
                }
            ],
            "filter": [
                {
                    "column": "event_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2019-01-01",
                        "2019-12-31"
                    ]
                },
                {
                    "column": "type",
                    "match_type": "模糊匹配",
                    "condition": "Community Service"
                }
            ]
        },
        "table_name": "event",
        "id": "323"
    },
    {
        "question": "Which t-shirt size is the most frequently ordered by the club members?",
        "SQL": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "t_shirt_size"
                }
            ],
            "measure": [
                {
                    "column": "t_shirt_size",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "member",
        "id": "324"
    },
    {
        "question": "Which budget for Food has the highest amount allocated?",
        "SQL": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "budget_id"
                }
            ],
            "measure": [
                {
                    "column": "amount",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "category",
                    "match_type": "精确匹配",
                    "condition": "Food"
                }
            ]
        },
        "table_name": "budget",
        "id": "325"
    },
    {
        "question": "List the top three budgets in the Advertising category with the highest allocated amounts.",
        "SQL": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "budget_id"
                }
            ],
            "measure": [
                {
                    "column": "amount",
                    "aggregate_function": "DESC"
                }
            ],
            "filter": [
                {
                    "column": "category",
                    "match_type": "精确匹配",
                    "condition": "Advertisement"
                }
            ]
        },
        "table_name": "budget",
        "id": "326"
    },
    {
        "question": "What is the total amount spent on Parking expenses?",
        "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "cost",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "expense_description",
                    "match_type": "精确匹配",
                    "condition": "Parking"
                }
            ]
        },
        "table_name": "expense",
        "id": "327"
    },
    {
        "question": "What was the total cost incurred on August 20, 2019?",
        "SQL": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "cost",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "expense_date",
                    "match_type": "绝对时间",
                    "condition": "2019-08-20"
                }
            ]
        },
        "table_name": "expense",
        "id": "328"
    },
    {
        "question": "How many incomes have an amount of 50?",
        "SQL": "SELECT COUNT(income_id) FROM income WHERE amount = 50",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "income_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "amount",
                    "match_type": "等于",
                    "condition": "50"
                }
            ]
        },
        "table_name": "income",
        "id": "329"
    },
    {
        "question": "How many members have an X-Large t-shirt size?",
        "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "member_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "position",
                    "match_type": "精确匹配",
                    "condition": "Member"
                },
                {
                    "column": "t_shirt_size",
                    "match_type": "精确匹配",
                    "condition": "X-Large"
                }
            ]
        },
        "table_name": "member",
        "id": "330"
    },
    {
        "question": "How many majors are there in the School of Applied Sciences, Technology and Education within the College of Agriculture and Applied Sciences?",
        "SQL": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "major_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "department",
                    "match_type": "精确匹配",
                    "condition": "School of Applied Sciences, Technology and Education"
                },
                {
                    "column": "college",
                    "match_type": "精确匹配",
                    "condition": "College of Agriculture and Applied Sciences"
                }
            ]
        },
        "table_name": "major",
        "id": "331"
    },
    {
        "question": "What are the countries that have zip codes including post office boxes?",
        "SQL": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "county"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "type",
                    "match_type": "精确匹配",
                    "condition": "PO Box"
                },
                {
                    "column": "county",
                    "match_type": "不为空",
                    "condition": null
                }
            ]
        },
        "table_name": "zip_code",
        "id": "332"
    },
    {
        "question": "Which zip codes in San Juan Municipio, Puerto Rico, have post office boxes?",
        "SQL": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "zip_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "type",
                    "match_type": "精确匹配",
                    "condition": "PO Box"
                },
                {
                    "column": "county",
                    "match_type": "精确匹配",
                    "condition": "San Juan Municipio"
                },
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "Puerto Rico"
                }
            ]
        },
        "table_name": "zip_code",
        "id": "333"
    },
    {
        "question": "Show the names of closed games that were closed between March 15, 2019 and March 20, 2020.",
        "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "event_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "type",
                    "match_type": "精确匹配",
                    "condition": "Game"
                },
                {
                    "column": "event_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2019-03-15",
                        "2020-03-20"
                    ]
                },
                {
                    "column": "status",
                    "match_type": "精确匹配",
                    "condition": "Closed"
                }
            ]
        },
        "table_name": "event",
        "id": "334"
    },
    {
        "question": "What percentage of events exceeded their budget?",
        "SQL": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "remaining",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "budget_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "remaining",
                    "match_type": "小于",
                    "condition": "0"
                }
            ]
        },
        "table_name": "budget",
        "id": "335"
    },
    {
        "question": "Provide the event ID, location, and status for events that took place between November 2019 and March 2020.",
        "SQL": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "event_id"
                },
                {
                    "column": "location"
                },
                {
                    "column": "status"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "event_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2019-11-01",
                        "2020-03-31"
                    ]
                }
            ]
        },
        "table_name": "event",
        "id": "336"
    },
    {
        "question": "Show the expenses with an average cost greater than fifty dollars.",
        "SQL": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "expense_description"
                }
            ],
            "measure": [
                {
                    "column": "cost",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "cost",
                    "match_type": "大于",
                    "condition": "50"
                }
            ]
        },
        "table_name": "expense",
        "id": "337"
    },
    {
        "question": "Retrieve the complete names of members who have an X-Large t-shirt size.",
        "SQL": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
        "db_id": "student_club",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "t_shirt_size",
                    "match_type": "精确匹配",
                    "condition": "X-Large"
                }
            ]
        },
        "table_name": "member",
        "id": "338"
    },
    {
        "question": "What is the percentage of zip codes that are classified as PO boxes?",
        "SQL": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
        "db_id": "student_club",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "zip_code",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "type",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "type",
                    "match_type": "精确匹配",
                    "condition": "PO Box"
                }
            ]
        },
        "table_name": "zip_code",
        "id": "339"
    },
    {
        "question": "What is the number of Premium gas stations in the Czech Republic?",
        "SQL": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "GasStationID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "CZE"
                },
                {
                    "column": "Segment",
                    "match_type": "精确匹配",
                    "condition": "Premium"
                }
            ]
        },
        "table_name": "gasstations",
        "id": "340"
    },
    {
        "question": "What is the proportion of customers paying in EUR compared to those paying in CZK?",
        "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Currency",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Currency",
                    "match_type": "精确匹配",
                    "condition": "EUR"
                },
                {
                    "column": "Currency",
                    "match_type": "精确匹配",
                    "condition": "CZK"
                }
            ]
        },
        "table_name": "customers",
        "id": "341"
    },
    {
        "question": "What was the total consumption by customer 6 from August to November 2013?",
        "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Consumption",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "CustomerID",
                    "match_type": "等于",
                    "condition": "6"
                },
                {
                    "column": "Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2013-08-01",
                        "2013-11-30"
                    ]
                }
            ]
        },
        "table_name": "yearmonth",
        "id": "342"
    },
    {
        "question": "What is the difference in the number of 'discount' gas stations between the Czech Republic and Slovakia?",
        "SQL": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Country",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Segment",
                    "match_type": "精确匹配",
                    "condition": "Discount"
                },
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "CZE"
                },
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "SVK"
                }
            ]
        },
        "table_name": "gasstations",
        "id": "343"
    },
    {
        "question": "Are there more SMEs paying in Czech koruna compared to euros? If yes, by how many?",
        "SQL": "SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) FROM customers WHERE Segment = 'SME'",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Segment",
                    "match_type": "精确匹配",
                    "condition": "SME"
                }
            ]
        },
        "table_name": "customers",
        "id": "344"
    },
    {
        "question": "What is the percentage of KAM segment customers who make payments in euros?",
        "SQL": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CustomerID",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "Currency",
                    "aggregate_function": "SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)"
                }
            ],
            "filter": [
                {
                    "column": "Segment",
                    "match_type": "精确匹配",
                    "condition": "KAM"
                }
            ]
        },
        "table_name": "customers",
        "id": "345"
    },
    {
        "question": "What percentage of customers had a consumption greater than 528.3 in February 2012?",
        "SQL": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "CustomerID",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "IIF(Consumption > 528.3, 1, 0)",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Date",
                    "match_type": "精确匹配",
                    "condition": "201202"
                },
                {
                    "column": "Consumption",
                    "match_type": "大于",
                    "condition": 528.3
                }
            ]
        },
        "table_name": "yearmonth",
        "id": "346"
    },
    {
        "question": "What is the percentage of premium gas stations in Slovakia?",
        "SQL": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Segment",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "GasStationID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "SVK"
                },
                {
                    "column": "Segment",
                    "match_type": "精确匹配",
                    "condition": "Premium"
                }
            ]
        },
        "table_name": "gasstations",
        "id": "347"
    },
    {
        "question": "What was the maximum monthly consumption in 2012?",
        "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [
                {
                    "column": "SUBSTR(Date, 5, 2)"
                }
            ],
            "measure": [
                {
                    "column": "Consumption",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Date",
                    "match_type": "精确匹配",
                    "condition": "2012"
                }
            ]
        },
        "table_name": "yearmonth",
        "id": "348"
    },
    {
        "question": "What is the mean transaction amount for all transactions that occurred in January 2012?",
        "SQL": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Amount",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2012-01-01",
                        "2012-01-31"
                    ]
                }
            ]
        },
        "table_name": "transactions_1k",
        "id": "349"
    },
    {
        "question": "Who was the highest paying customer on August 25, 2012?",
        "SQL": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [
                {
                    "column": "CustomerID"
                }
            ],
            "measure": [
                {
                    "column": "Price",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Date",
                    "match_type": "精确匹配",
                    "condition": "2012-08-25"
                }
            ]
        },
        "table_name": "transactions_1k",
        "id": "350"
    },
    {
        "question": "What is the gas station with the maximum revenue?",
        "SQL": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [
                {
                    "column": "GasStationID"
                }
            ],
            "measure": [
                {
                    "column": "Price",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "transactions_1k",
        "id": "351"
    },
    {
        "question": "What is the ratio of 'premium' segment to the total segments in the country 'SVK', expressed as a percentage?",
        "SQL": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
        "db_id": "debit_card_specializing",
        "config": {
            "dimension": [
                {
                    "column": "Country"
                },
                {
                    "column": "Segment"
                }
            ],
            "measure": [
                {
                    "column": "1",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "SVK"
                },
                {
                    "column": "Segment",
                    "match_type": "精确匹配",
                    "condition": "Premium"
                }
            ]
        },
        "table_name": "gasstations",
        "id": "352"
    }
]