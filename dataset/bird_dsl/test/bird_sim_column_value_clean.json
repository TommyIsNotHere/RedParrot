[
  {
    "question": "What is the highest eligible free rate for K-12 students in the schools in Contra Costa County?",
    "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Contra Costa' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "`Free Meal Count (K-12)` / `Enrollment (K-12)`",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "`County Name`",
          "match_type": "精确匹配",
          "condition": "Contra Costa"
        }
      ]
    },
    "table_name": "frpm",
    "id": 353
  },
  {
    "question": "In Alameda how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
    "SQL": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Alameda' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)` < 700",
    "db_id": "california_schools",
    "table_description": "This table contains data on the number of free and reduced-price meals (FRPM) provided to students in K-12 schools in California.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CDSCode",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "`County Name`",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "`Free Meal Count (K-12)`",
          "match_type": "大于",
          "condition": 500
        },
        {
          "column": "`FRPM Count (K-12)`",
          "match_type": "小于",
          "condition": 700
        }
      ]
    },
    "table_name": "frpm",
    "id": 354
  },
  {
    "question": "Which school in Contra Costa has the highest number of test takers?",
    "SQL": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "db_id": "california_schools",
    "config": {
      "dimension": [
        {
          "column": "sname"
        }
      ],
      "measure": [
        {
          "column": "NumTstTakr",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cname",
          "match_type": "精确匹配",
          "condition": "Contra Costa"
        },
        {
          "column": "sname",
          "match_type": "不为空",
          "condition": "FAME Public Charter"
        }
      ]
    },
    "table_name": "satscores",
    "id": 355
  },
  {
    "question": "What is the monthly average number of elementary schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "SQL": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 60 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DOC",
          "match_type": "等于",
          "condition": "60"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "OpenDate",
          "match_type": "绝对时间",
          "condition": [
            "1980-01-01",
            "1980-12-31"
          ]
        }
      ]
    },
    "table_name": "schools",
    "id": 356
  },
  {
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "SQL": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
    "db_id": "california_schools",
    "table_description": "Schools data in California, including school status, county, district, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END)",
          "aggregate_function": "CAST"
        }
      ],
      "filter": [
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Merged"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        }
      ]
    },
    "table_name": "schools",
    "id": 357
  },
  {
    "question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County IN ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND School IS NOT NULL",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their status, county, district, and other details.",
    "config": {
      "dimension": [
        {
          "column": "County"
        },
        {
          "column": "School"
        },
        {
          "column": "ClosedDate"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "StatusType",
          "match_type": "等于",
          "condition": "Closed"
        },
        {
          "column": "School",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "County",
          "match_type": "等于",
          "condition": "Alameda"
        }
      ]
    },
    "table_name": "schools",
    "id": 358
  },
  {
    "question": "Please specify all of the schools and their related mailing zip codes that are under Laura Robell's administration.",
    "SQL": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Laura' AND AdmLName1 = 'Robell'",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including school names, addresses, administrators, and other details.",
    "config": {
      "dimension": [
        {
          "column": "School"
        },
        {
          "column": "MailZip"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AdmFName1",
          "match_type": "精确匹配",
          "condition": "Laura"
        },
        {
          "column": "AdmLName1",
          "match_type": "精确匹配",
          "condition": "Robell"
        }
      ]
    },
    "table_name": "schools",
    "id": 359
  },
  {
    "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Yolo?",
    "SQL": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Yolo' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        },
        {
          "column": "SUM(CASE WHEN County = 'Yolo' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "MailState",
          "match_type": "精确匹配",
          "condition": "CA"
        }
      ]
    },
    "table_name": "schools",
    "id": 360
  },
  {
    "question": "Of all the schools with a mailing state address in California, how many are active in Hayward city?",
    "SQL": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'Hayward' AND MailState = 'CA' AND StatusType = 'Active'",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CDSCode",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Hayward"
        },
        {
          "column": "MailState",
          "match_type": "精确匹配",
          "condition": "CA"
        },
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Active"
        }
      ]
    },
    "table_name": "schools",
    "id": 361
  },
  {
    "question": "What is the phone number and extension number for the school with the zip code 94544-1136? Indicate the school's name.",
    "SQL": "SELECT Phone, Ext, School FROM schools WHERE Zip = '94544-1136'",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their contact details, location, and status.",
    "config": {
      "dimension": [
        {
          "column": "School"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Zip",
          "match_type": "精确匹配",
          "condition": "94544-1136"
        }
      ]
    },
    "table_name": "schools",
    "id": 362
  },
  {
    "question": "What is the website for the schools under the administrations of Mike Larson or Laura Robell?",
    "SQL": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Laura' AND AdmLName1 = 'Robell')",
    "db_id": "california_schools",
    "table_description": "School information including administrative details, location, and contact information.",
    "config": {
      "dimension": [
        {
          "column": "Website"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AdmFName1",
          "match_type": "精确匹配",
          "condition": "Mike"
        },
        {
          "column": "AdmLName1",
          "match_type": "精确匹配",
          "condition": "Larson"
        },
        {
          "column": "AdmFName1",
          "match_type": "精确匹配",
          "condition": "Laura"
        },
        {
          "column": "AdmLName1",
          "match_type": "精确匹配",
          "condition": "Robell"
        }
      ]
    },
    "table_name": "schools",
    "id": 363
  },
  {
    "question": "What are the websites for all the partially virtual chartered schools located in Alameda?",
    "SQL": "SELECT Website FROM schools WHERE County = 'Alameda' AND Virtual = 'P' AND Charter = 1",
    "db_id": "california_schools",
    "table_description": "schools",
    "config": {
      "dimension": [
        {
          "column": "Website"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "Virtual",
          "match_type": "精确匹配",
          "condition": "P"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": 1
        }
      ]
    },
    "table_name": "schools",
    "id": 364
  },
  {
    "question": "How many chartered schools located in the city of Oakland are owned by the Elementary School District?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Oakland'",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their status, location, and type.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DOC",
          "match_type": "等于",
          "condition": "52"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Oakland"
        }
      ]
    },
    "table_name": "schools",
    "id": 365
  },
  {
    "question": "In chartered schools with charter number 00D2 or 0728, what are the names of all the administrators? Include the name of the school and the city to which it belongs",
    "SQL": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND (CharterNum = '00D2' OR CharterNum = '0728')",
    "db_id": "california_schools",
    "table_description": "The table contains information about schools in California, including their status, location, and administrative details.",
    "config": {
      "dimension": [
        {
          "column": "School"
        },
        {
          "column": "City"
        }
      ],
      "measure": [
        {
          "column": "AdmFName1",
          "aggregate_function": "None"
        },
        {
          "column": "AdmLName1",
          "aggregate_function": "None"
        }
      ],
      "filter": [
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "CharterNum",
          "match_type": "精确匹配",
          "condition": "00D2 OR 0728"
        }
      ]
    },
    "table_name": "schools",
    "id": 366
  },
  {
    "question": "What is the total number of schools with a mailing city in Oakland belonging to the charter number 00D4?",
    "SQL": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Oakland'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CharterNum",
          "match_type": "精确匹配",
          "condition": "00D4"
        },
        {
          "column": "MailCity",
          "match_type": "精确匹配",
          "condition": "Oakland"
        }
      ]
    },
    "table_name": "schools",
    "id": 367
  },
  {
    "question": "What is the ratio in percentage of Santa Clara County schools that are directly funded compared to all other types of charter school funding?",
    "SQL": "SELECT CAST(SUM(CASE WHEN FundingType = 'Directly funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Directly funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California, including their funding type, county, and charter status.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "FundingType",
          "aggregate_function": "CASE WHEN FundingType = 'Directly funded' THEN 1 ELSE 0 END * 100 / SUM(CASE WHEN FundingType != 'Directly funded' THEN 1 ELSE 0 END)"
        }
      ],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Santa Clara"
        },
        {
          "column": "Charter",
          "match_type": "等于",
          "condition": 1
        }
      ]
    },
    "table_name": "schools",
    "id": 368
  },
  {
    "question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Alameda?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Alameda' AND FundingType = 'Directly funded'",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their CDS codes, NCES district and school codes, status types, locations, contact information, opening and closing dates, charter details, funding types, and educational operations.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "OpenDate",
          "match_type": "绝对时间",
          "condition": [
            "2000-01-01",
            "2005-12-31"
          ]
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        },
        {
          "column": "FundingType",
          "match_type": "精确匹配",
          "condition": "Directly funded"
        }
      ]
    },
    "table_name": "schools",
    "id": 369
  },
  {
    "question": "What is the total amount of Community College District closure in 1990 in the city of San Francisco?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1990' AND City = 'San Francisco' AND DOCType = 'Community College District'",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ClosedDate",
          "match_type": "绝对时间",
          "condition": [
            "1990-01-01",
            "1990-12-31"
          ]
        },
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "San Francisco"
        },
        {
          "column": "DOCType",
          "match_type": "精确匹配",
          "condition": "Community College District"
        }
      ]
    },
    "table_name": "schools",
    "id": 370
  },
  {
    "question": "Which county reported the most number of school closures in the 1980s with school ownership code belonging to Youth Authority Facilities (CEA)?",
    "SQL": "SELECT County FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their status, ownership, and closure dates.",
    "config": {
      "dimension": [
        {
          "column": "County"
        }
      ],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ClosedDate",
          "match_type": "绝对时间",
          "condition": [
            "1980-01-01",
            "1989-12-31"
          ]
        },
        {
          "column": "StatusType",
          "match_type": "精确匹配",
          "condition": "Closed"
        },
        {
          "column": "SOC",
          "match_type": "等于",
          "condition": 65
        }
      ]
    },
    "table_name": "schools",
    "id": 371
  },
  {
    "question": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools or have a Funding Type of Directly Funded.",
    "SQL": "SELECT NCESDist FROM schools WHERE SOC = 31 OR FundingType = 'Directly funded'",
    "db_id": "california_schools",
    "table_description": "Table containing information about schools in California, including their NCES district identification numbers, ownership codes, and funding types.",
    "config": {
      "dimension": [
        {
          "column": "NCESDist"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SOC",
          "match_type": "等于",
          "condition": "31"
        },
        {
          "column": "FundingType",
          "match_type": "等于",
          "condition": "Directly funded"
        }
      ]
    },
    "table_name": "schools",
    "id": 372
  },
  {
    "question": "How many active and closed District Community Day Schools are there in the county of Alameda?",
    "SQL": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alameda'",
    "db_id": "california_schools",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "School",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "StatusType",
          "match_type": "等于",
          "condition": "Closed"
        },
        {
          "column": "StatusType",
          "match_type": "等于",
          "condition": "Active"
        },
        {
          "column": "SOC",
          "match_type": "等于",
          "condition": 69
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Alameda"
        }
      ]
    },
    "table_name": "schools",
    "id": 373
  },
  {
    "question": "What is the most common type of grade span served in the city of San Francisco?",
    "SQL": "SELECT GSserved FROM schools WHERE City = 'San Francisco' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their locations, grade spans, and other details.",
    "config": {
      "dimension": [
        {
          "column": "GSserved"
        }
      ],
      "measure": [
        {
          "column": "GSserved",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "San Francisco"
        }
      ]
    },
    "table_name": "schools",
    "id": 374
  },
  {
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that do not have a physical building? Indicate the amount.",
    "SQL": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'T' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their status, location, and whether they are virtual or not.",
    "config": {
      "dimension": [
        {
          "column": "County"
        }
      ],
      "measure": [
        {
          "column": "Virtual",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "San Diego"
        },
        {
          "column": "County",
          "match_type": "精确匹配",
          "condition": "Santa Barbara"
        },
        {
          "column": "Virtual",
          "match_type": "精确匹配",
          "condition": "T"
        }
      ]
    },
    "table_name": "schools",
    "id": 375
  },
  {
    "question": "What is the grade span offered in the school with the longitude less than -122.0?",
    "SQL": "SELECT GSoffered FROM schools WHERE longitude < -122.0 ORDER BY ABS(longitude) DESC LIMIT 1",
    "db_id": "california_schools",
    "table_description": "This table contains information about schools in California, including their location, status, and grade spans.",
    "config": {
      "dimension": [
        {
          "column": "GSoffered"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "longitude",
          "match_type": "小于",
          "condition": "-122.0"
        }
      ]
    },
    "table_name": "schools",
    "id": 376
  },
  {
    "question": "What is the administrator's last name that oversees the school with Charter number 728? Indicate the district, the county where the school is situated, and the name of the school.",
    "SQL": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0728'",
    "db_id": "california_schools",
    "table_description": "The 'schools' table contains information about various schools in California, including their administrative details, location, and charter information.",
    "config": {
      "dimension": [
        {
          "column": "AdmLName1"
        },
        {
          "column": "District"
        },
        {
          "column": "County"
        },
        {
          "column": "School"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "CharterNum",
          "match_type": "精确匹配",
          "condition": "0728"
        }
      ]
    },
    "table_name": "schools",
    "id": 377
  },
  {
    "question": "The average unemployment ratio of 1995 and 1996 for the district with an unemployment ratio greater than 3%, which one has higher percentage?",
    "SQL": "SELECT DISTINCT IIF(AVG(CASE WHEN A12 > 3 THEN A13 ELSE NULL END) > AVG(CASE WHEN A12 > 3 THEN A12 ELSE NULL END), '1996', '1995') FROM district",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "A13",
          "aggregate_function": "AVG"
        },
        {
          "column": "A12",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "A12",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "table_name": "district",
    "id": 378
  },
  {
    "question": "List out the accounts who have the earliest trading date in 1995?",
    "SQL": "SELECT account_id FROM trans WHERE date >= '1995-01-01' AND date <= '1995-12-31' ORDER BY date ASC LIMIT 1",
    "db_id": "financial",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "account_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "1995-01-01",
            "1995-12-31"
          ]
        }
      ]
    },
    "table_name": "trans",
    "id": 379
  },
  {
    "question": "What is the percentage of loan amount that has been fully paid or is current with no issue.",
    "SQL": "SELECT (CAST(SUM(CASE WHEN status IN ('A', 'B') THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "(CASE WHEN status IN ('A', 'B') THEN amount ELSE 0 END)",
          "aggregate_function": "SUM"
        },
        {
          "column": "amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "status",
          "match_type": "等于",
          "condition": "A,B"
        }
      ]
    },
    "table_name": "loan",
    "id": 380
  },
  {
    "question": "For loan amount less than or equal to USD100,000, what is the percentage of accounts that is still running with no issue.",
    "SQL": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount <= 100000",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "status = 'C'",
          "aggregate_function": "SUM"
        },
        {
          "column": "account_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "amount",
          "match_type": "小于等于",
          "condition": "100000"
        }
      ]
    },
    "table_name": "loan",
    "id": 381
  },
  {
    "question": "List the account IDs with a statement issuance frequency of 'POPLATEK TYDNE'.",
    "SQL": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK TYDNE'",
    "db_id": "financial",
    "config": {
      "dimension": [
        {
          "column": "account_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Frequency",
          "match_type": "精确匹配",
          "condition": "POPLATEK TYDNE"
        }
      ]
    },
    "table_name": "account",
    "id": 382
  },
  {
    "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
    "SQL": "SELECT district_id, A2 FROM district WHERE A13 = (SELECT MAX(A13) FROM district)",
    "db_id": "financial",
    "table_description": "The district table contains information about various districts in a region, including their ID, name, and various statistics such as unemployment rate.",
    "config": {
      "dimension": [
        {
          "column": "district_id"
        },
        {
          "column": "A2"
        }
      ],
      "measure": [
        {
          "column": "A13",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "A13",
          "match_type": "等于",
          "condition": "(SELECT MAX(A13) FROM district)"
        }
      ]
    },
    "table_name": "district",
    "id": 383
  },
  {
    "question": "How many percent of 'Junior' cards were issued prior to 1998?",
    "SQL": "SELECT CAST(SUM(type = 'junior' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card",
    "db_id": "financial",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type = 'junior' AND STRFTIME('%Y', issued) < '1998'",
          "aggregate_function": "SUM"
        },
        {
          "column": "card_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "junior"
        },
        {
          "column": "issued",
          "match_type": "绝对时间",
          "condition": [
            "null",
            "1998-01-01"
          ]
        }
      ]
    },
    "table_name": "card",
    "id": 384
  },
  {
    "question": "How many credit card withdrawals were recorded after 1995?",
    "SQL": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) >= '1996' AND operation = 'VYBER KARTOU'",
    "db_id": "financial",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "account_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "1996-01-01",
            null
          ]
        },
        {
          "column": "operation",
          "match_type": "精确匹配",
          "condition": "VYBER KARTOU"
        }
      ]
    },
    "table_name": "trans",
    "id": 385
  },
  {
    "question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
    "SQL": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district WHERE year = 1996",
    "db_id": "financial",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "A16",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "A3",
          "match_type": "精确匹配",
          "condition": "east Bohemia"
        },
        {
          "column": "A3",
          "match_type": "精确匹配",
          "condition": "north Bohemia"
        },
        {
          "column": "year",
          "match_type": "等于",
          "condition": "1996"
        }
      ]
    },
    "table_name": "district",
    "id": 386
  },
  {
    "question": "How many owner and disponent dispositions are there from account number 1 to account number 5?",
    "SQL": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 5",
    "db_id": "financial",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type",
          "aggregate_function": "SUM"
        },
        {
          "column": "type",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "account_id",
          "match_type": "在区间",
          "condition": [
            1,
            5
          ]
        }
      ]
    },
    "table_name": "disp",
    "id": 387
  },
  {
    "question": "What is the most common bond type among bonds with a bond type of '-' or '='?",
    "SQL": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond WHERE bond_type IN ('-', '=') GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
    "db_id": "toxicology",
    "table_description": "The bond table contains information about chemical bonds in molecules.",
    "config": {
      "dimension": [
        {
          "column": "bond_type"
        }
      ],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "IN ('-', '='))"
        }
      ]
    },
    "table_name": "bond",
    "id": 388
  },
  {
    "question": "How many single type bonds are there?",
    "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 389
  },
  {
    "question": "In how many atoms is there no chlorine?",
    "SQL": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'cl'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "T.element",
          "match_type": "不等于",
          "condition": "cl"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 390
  },
  {
    "question": "Of the first 100 molecules in number order, how many are non-carcinogenic?",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR000",
            "TR099"
          ]
        },
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 391
  },
  {
    "question": "Identify by their ID the molecules in which there is chlorine.",
    "SQL": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'cl'",
    "db_id": "toxicology",
    "table_description": "The atom table contains information about atoms in different molecules, including the atom's unique identifier (atom_id), the molecule it belongs to (molecule_id), and the element of the atom (element).",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "cl"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 392
  },
  {
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
    "db_id": "toxicology",
    "table_description": "The table contains information about atoms in different molecules, including their molecule ID and element.",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 393
  },
  {
    "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_10_11?",
    "SQL": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_10_11'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "SUBSTR(T.bond_id, 1, 7)"
        },
        {
          "column": "T.molecule_id || SUBSTR(T.bond_id, 8, 2)"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        },
        {
          "column": "T.bond_id",
          "match_type": "精确匹配",
          "condition": "TR001_10_11"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 394
  },
  {
    "question": "What is the difference between the number of molecules that are carcinogenic and those that are not?",
    "SQL": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t",
    "db_id": "toxicology",
    "table_description": "The 'molecule' table contains information about different molecules and their labels indicating whether they are carcinogenic ('+') or not ('-').",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.label",
          "match_type": "等于",
          "condition": "+"
        },
        {
          "column": "T.label",
          "match_type": "等于",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS t",
    "id": 395
  },
  {
    "question": "What are the atom IDs of the bond TR000_2_4?",
    "SQL": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_4'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.bond_id",
          "match_type": "精确匹配",
          "condition": "TR000_2_4"
        }
      ]
    },
    "table_name": "connected AS T",
    "id": 396
  },
  {
    "question": "What are the bond IDs that have the atom ID 2 as TR000_3?",
    "SQL": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_3'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.bond_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.atom_id2",
          "match_type": "精确匹配",
          "condition": "TR000_3"
        }
      ]
    },
    "table_name": "connected AS T",
    "id": 397
  },
  {
    "question": "Please list the top five molecules that contain at least one single bond in alphabetical order.",
    "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '-' ORDER BY T.molecule_id LIMIT 5",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 398
  },
  {
    "question": "What is the percentage of double bonds in the molecule TR001? Please provide your answer as a percentage with five decimal places.",
    "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR001'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5)"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        },
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 399
  },
  {
    "question": "What is the percentage of molecules that are not carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ROUND(CAST(COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3)",
          "aggregate_function": "ROUND(CAST(COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3)"
        }
      ],
      "filter": []
    },
    "table_name": "molecule AS t",
    "id": 400
  },
  {
    "question": "What is the percentage of hydrogen atoms in molecule TR205? Provide the answer to four decimal places.",
    "SQL": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR205'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4)",
          "aggregate_function": "ROUND"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR205"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "h"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 401
  },
  {
    "question": "What is the type of bond that molecule TR000 has when involved in any bonds?",
    "SQL": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.bond_type"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 402
  },
  {
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "SQL": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR000' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "bond_type"
        }
      ],
      "measure": [
        {
          "column": "molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "bond AS T1",
    "id": 403
  },
  {
    "question": "How many molecules have a single bond type?",
    "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '-'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 404
  },
  {
    "question": "How many connections does the atom TR000_2 have?",
    "SQL": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE T.atom_id = 'TR000_2'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.atom_id",
          "match_type": "精确匹配",
          "condition": "TR000_2"
        }
      ]
    },
    "table_name": "connected AS T",
    "id": 405
  },
  {
    "question": "List all the elements of the toxicology of the molecule \"TR000\".",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 406
  },
  {
    "question": "How many of the molecules are carcinogenic?",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "label",
          "match_type": "精确匹配",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 407
  },
  {
    "question": "Calculate the total atoms consisting of the element carbon or hydrogen, excluding chlorine.",
    "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE (T.element = 'c' OR T.element = 'h') AND T.element != 'cl'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "'c'"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "'h'"
        },
        {
          "column": "T.element",
          "match_type": "不等于",
          "condition": "'cl'"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 408
  },
  {
    "question": "What are the labels for TR000, TR001 and TR004?",
    "SQL": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR004')",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "molecule_id"
        },
        {
          "column": "T.label"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "['TR000', 'TR001', 'TR004']"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 409
  },
  {
    "question": "List down the molecule id for non carcinogenic molecules.",
    "SQL": "SELECT T.molecule_id FROM molecule AS T WHERE T.label LIKE '%-%'",
    "db_id": "toxicology",
    "table_description": "molecule AS T",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.label",
          "match_type": "模糊匹配",
          "condition": "%-%"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 410
  },
  {
    "question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR020.",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR020' AND T.label = '+'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR000",
            "TR020"
          ]
        },
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "+"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 411
  },
  {
    "question": "List the toxicology elements associated with molecule TR000.",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 412
  },
  {
    "question": "Give me the molecule ID of the single bond type.",
    "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.molecule_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 413
  },
  {
    "question": "Among all chemical compounds identified in the database, what percent of compounds form a double-bond.",
    "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.bond_id",
          "aggregate_function": "CUSTOM"
        }
      ],
      "filter": [
        {
          "column": "T.bond_type",
          "match_type": "等于",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 414
  },
  {
    "question": "Among all chemical compounds that contain molecule TR000, identify the percent that form a double-bond.",
    "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        },
        {
          "column": "CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 415
  },
  {
    "question": "Is molecule TR001 carcinogenic?",
    "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR001'",
    "db_id": "toxicology",
    "table_description": "The molecule table contains information about molecules, including their IDs and labels indicating whether they are carcinogenic (+) or not (-).",
    "config": {
      "dimension": [
        {
          "column": "T.label"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 416
  },
  {
    "question": "Which toxic element can be found in the molecule TR000?",
    "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 417
  },
  {
    "question": "How many chemical compounds in the database are not identified as carcinogenic.",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 418
  },
  {
    "question": "Identify the atoms belong to the molecule with ID between TR020 to TR060 that contain the element carbon.",
    "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR020' AND 'TR060' AND T.element = 'c'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR020",
            "TR060"
          ]
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "c"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 419
  },
  {
    "question": "Is molecule TR001 carcinogenic?",
    "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR001'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.label"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 420
  },
  {
    "question": "What atoms comprise TR000?",
    "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.atom_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 421
  },
  {
    "question": "What is the bond type of TR001_10_11?",
    "SQL": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR001_10_11'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "bond_type"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bond_id",
          "match_type": "精确匹配",
          "condition": "TR001_10_11"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 422
  },
  {
    "question": "How many atoms belong to molecule id TR000?",
    "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR000'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR000"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 423
  },
  {
    "question": "How many double bonds are there in the list?",
    "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '='",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 424
  },
  {
    "question": "What is the element of toxicology for the atom with the ID of TR000_2?",
    "SQL": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_2'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "T.element"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "T.atom_id",
          "match_type": "精确匹配",
          "condition": "TR000_2"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 425
  },
  {
    "question": "Is molecule TR001 carcinogenic or not?",
    "SQL": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR001'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "label",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "精确匹配",
          "condition": "TR001"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 426
  },
  {
    "question": "Find the percentage of atoms with double bond.",
    "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        },
        {
          "column": "bond_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "bond_type",
          "match_type": "精确匹配",
          "condition": "="
        }
      ]
    },
    "table_name": "bond AS t",
    "id": 427
  },
  {
    "question": "How many of the molecules are non-carcinogenic?",
    "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.molecule_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.label",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "molecule AS T",
    "id": 428
  },
  {
    "question": "Among the molecules between TR004 to TR008, how many of them have single bonds?",
    "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR008' AND T.bond_type = '-'",
    "db_id": "toxicology",
    "config": {
      "dimension": [
        {
          "column": "molecule_id"
        }
      ],
      "measure": [
        {
          "column": "molecule_id",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "molecule_id",
          "match_type": "在区间",
          "condition": [
            "TR004",
            "TR008"
          ]
        },
        {
          "column": "bond_type",
          "match_type": "等于",
          "condition": "-"
        }
      ]
    },
    "table_name": "bond AS T",
    "id": 429
  },
  {
    "question": "In the molecule TR008, how many carbons are present?",
    "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'cl'",
    "db_id": "toxicology",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T.atom_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "T.molecule_id",
          "match_type": "精确匹配",
          "condition": "TR008"
        },
        {
          "column": "T.element",
          "match_type": "精确匹配",
          "condition": "cl"
        }
      ]
    },
    "table_name": "atom AS T",
    "id": 430
  },
  {
    "question": "Which are the cards that have incredibly powerful foils and are also common?",
    "SQL": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND rarity = 'common'",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards including their foil IDs and rarity.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "rarity",
          "match_type": "精确匹配",
          "condition": "common"
        }
      ]
    },
    "table_name": "cards",
    "id": 431
  },
  {
    "question": "What are the borderless cards available without powerful foils?",
    "SQL": "SELECT id FROM cards WHERE borderColor = 'borderless' AND cardKingdomId IS NOT NULL",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards including their border color, foil status, and other details.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "borderless"
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": "IS NOT NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 432
  },
  {
    "question": "List the card names with the highest face converted mana cost.",
    "SQL": "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "faceConvertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "faceConvertedManaCost",
          "match_type": "等于",
          "condition": "(SELECT MAX(faceConvertedManaCost) FROM cards)"
        }
      ]
    },
    "table_name": "cards",
    "id": 433
  },
  {
    "question": "Name all cards with 2015 frame style and a rank between 50 and 100 on EDHRec.",
    "SQL": "SELECT id FROM cards WHERE edhrecRank BETWEEN 50 AND 100 AND frameVersion = 2015",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards including their ID, artist, name, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "edhrecRank",
          "match_type": "在区间",
          "condition": "50,100"
        },
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "table_name": "cards",
    "id": 434
  },
  {
    "question": "How many types of cards does the artist Volkan Baǵa illustrated about card art?",
    "SQL": "SELECT COUNT(type) FROM cards WHERE artist = 'Volkan Baǵa'",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Volkan Baǵa"
        }
      ]
    },
    "table_name": "cards",
    "id": 435
  },
  {
    "question": "What are the keywords associated with the card 'Aven Cloudchaser'?",
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Aven Cloudchaser'",
    "db_id": "card_games",
    "table_description": "This table contains information about various cards in different card games.",
    "config": {
      "dimension": [
        {
          "column": "keywords"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Aven Cloudchaser"
        }
      ]
    },
    "table_name": "cards",
    "id": 436
  },
  {
    "question": "How many cards have a power of 4?",
    "SQL": "SELECT COUNT(*) FROM cards WHERE power = '4'",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "power",
          "match_type": "精确匹配",
          "condition": "4"
        }
      ]
    },
    "table_name": "cards",
    "id": 437
  },
  {
    "question": "What type of promotion is associated with the card named 'Ballista Squad'?",
    "SQL": "SELECT promoTypes FROM cards WHERE name = 'Ballista Squad' AND promoTypes IS NOT NULL",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [
        {
          "column": "promoTypes"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Ballista Squad"
        },
        {
          "column": "promoTypes",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "cards",
    "id": 438
  },
  {
    "question": "What is the border color of card 'Angel of Mercy'?",
    "SQL": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Angel of Mercy'",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "borderColor"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Angel of Mercy"
        }
      ]
    },
    "table_name": "cards",
    "id": 439
  },
  {
    "question": "What is the type of the card 'Angel of Mercy' as originally printed?",
    "SQL": "SELECT originalType FROM cards WHERE name = 'Angel of Mercy' AND originalType IS NOT NULL",
    "db_id": "card_games",
    "table_description": "Contains information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "originalType"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Angel of Mercy"
        },
        {
          "column": "originalType",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 440
  },
  {
    "question": "What is the percentage of black bordered cards?",
    "SQL": "SELECT CAST(SUM(CASE WHEN borderColor = 'black' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "borderColor",
          "aggregate_function": "SUM"
        },
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "等于",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 441
  },
  {
    "question": "How many cards are there with toughness greater than 1?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE toughness > 1",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "toughness",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "cards",
    "id": 442
  },
  {
    "question": "Name the cards that were illustrated by Pete Venters.",
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Pete Venters'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in different card games.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Pete Venters"
        }
      ]
    },
    "table_name": "cards",
    "id": 443
  },
  {
    "question": "How many black border cards are available both on mtgo and paper?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black'",
    "db_id": "card_games",
    "table_description": "Table containing card details including their availability and border color.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "mtgo,paper"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 444
  },
  {
    "question": "List down all the card IDs with converted mana cost greater than 0.",
    "SQL": "SELECT id FROM cards WHERE convertedManaCost > 0",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards in a card game, including their ID, name, converted mana cost, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "convertedManaCost",
          "match_type": "大于",
          "condition": "0"
        }
      ]
    },
    "table_name": "cards",
    "id": 445
  },
  {
    "question": "What are the card layouts of cards with the keyword 'Flying'?",
    "SQL": "SELECT layout FROM cards WHERE keywords LIKE '%Flying%'",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "layout"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "keywords",
          "match_type": "模糊匹配",
          "condition": "Flying"
        }
      ]
    },
    "table_name": "cards",
    "id": 446
  },
  {
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Human Cleric\"?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Human Cleric'",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards in a card game.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "originalType",
          "match_type": "精确匹配",
          "condition": "Summon - Angel"
        },
        {
          "column": "subtypes",
          "match_type": "不等于",
          "condition": "Human Cleric"
        }
      ]
    },
    "table_name": "cards",
    "id": 447
  },
  {
    "question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs of foiled cards with a CardKingdomFoilId.",
    "SQL": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId = '123094'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games, including their ID, artist, name, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "等于",
          "condition": "123094"
        }
      ]
    },
    "table_name": "cards",
    "id": 448
  },
  {
    "question": "What are the cards belong to duel deck b? List the ID.",
    "SQL": "SELECT id FROM cards WHERE duelDeck = 'b'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "duelDeck",
          "match_type": "精确匹配",
          "condition": "b"
        }
      ]
    },
    "table_name": "cards",
    "id": 449
  },
  {
    "question": "List the edhrecRank for cards with frame version 2015 or 2003.",
    "SQL": "SELECT edhrecRank FROM cards WHERE frameVersion IN (2015, 2003)",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "edhrecRank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "frameVersion",
          "match_type": "在区间",
          "condition": "2015, 2003"
        }
      ]
    },
    "table_name": "cards",
    "id": 450
  },
  {
    "question": "On how many cards designed by Volkan Baǵa is its foil non-powerful?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'Volkan Baǵa'",
    "db_id": "card_games",
    "table_description": "cards table contains information about various Magic: The Gathering cards including their artists, foil status, and other attributes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Volkan Baǵa"
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": "IS NULL"
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": "IS NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 451
  },
  {
    "question": "How many black bordered cards are powerful?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their ID, artist, name, border color, and various identifiers.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 452
  },
  {
    "question": "How many cards designed by UDON and available in paper print type have a starting maximum hand size of -1?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'paper'",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards including their artists, availability, and hand size.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hAND",
          "match_type": "等于",
          "condition": "-1"
        },
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "UDON"
        },
        {
          "column": "Availability",
          "match_type": "精确匹配",
          "condition": "paper"
        }
      ]
    },
    "table_name": "cards",
    "id": 453
  },
  {
    "question": "How many cards with a 1993 frame version and available on paper do not have a sensitive content warning?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 0",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": "1993"
        },
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "paper"
        },
        {
          "column": "hasContentWarning",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "cards",
    "id": 454
  },
  {
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available only in paper?",
    "SQL": "SELECT manaCost FROM cards WHERE availability = 'paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "layout"
        },
        {
          "column": "frameVersion"
        },
        {
          "column": "borderColor"
        },
        {
          "column": "availability"
        }
      ],
      "measure": [
        {
          "column": "manaCost",
          "aggregate_function": "NULL"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "等于",
          "condition": "paper"
        },
        {
          "column": "borderColor",
          "match_type": "等于",
          "condition": "black"
        },
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": 2003
        },
        {
          "column": "layout",
          "match_type": "等于",
          "condition": "normal"
        }
      ]
    },
    "table_name": "cards",
    "id": 455
  },
  {
    "question": "What is the total unconverted mana cost of all the cards created by Matthew D. Wilson?",
    "SQL": "SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Matthew D. Wilson'",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Matthew D. Wilson"
        }
      ]
    },
    "table_name": "cards",
    "id": 456
  },
  {
    "question": "Lists all types of cards available in paper.",
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'paper' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "db_id": "card_games",
    "table_description": "This table contains information about various cards in a card game, including their subtypes, supertypes, and availability.",
    "config": {
      "dimension": [
        {
          "column": "subtypes"
        },
        {
          "column": "supertypes"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "paper"
        },
        {
          "column": "subtypes",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "supertypes",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 457
  },
  {
    "question": "Lists the set code of all cards translated into Italian.",
    "SQL": "SELECT setCode FROM set_translations WHERE language = 'Italian'",
    "db_id": "card_games",
    "table_description": "Table containing translations of card sets into different languages.",
    "config": {
      "dimension": [
        {
          "column": "setCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "language",
          "match_type": "精确匹配",
          "condition": "Italian"
        }
      ]
    },
    "table_name": "set_translations",
    "id": 458
  },
  {
    "question": "What percentage of legendary frame effect cards that are only available in online game variations and have a converted mana cost greater than 3?",
    "SQL": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary' AND convertedManaCost > 3",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100",
          "aggregate_function": "SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100"
        }
      ],
      "filter": [
        {
          "column": "frameEffects",
          "match_type": "精确匹配",
          "condition": "legendary"
        },
        {
          "column": "convertedManaCost",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "table_name": "cards",
    "id": 459
  },
  {
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "SQL": "SELECT id, CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) AS percentage FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0 GROUP BY id",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their IDs, attributes, and properties.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "isTextless",
          "aggregate_function": "SUM"
        },
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "isStorySpotlight",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "isTextless",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "cards",
    "id": 460
  },
  {
    "question": "Calculate the percentage of cards in French. List them by name.",
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'French'",
    "db_id": "card_games",
    "table_description": "Table containing foreign language card data for a card game.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "language",
          "aggregate_function": "SUM(CASE WHEN language = 'French' THEN 1 ELSE 0 END) * 100 / COUNT(*)"
        }
      ],
      "filter": [
        {
          "column": "language",
          "match_type": "精确匹配",
          "condition": "French"
        }
      ]
    },
    "table_name": "foreign_data",
    "id": 461
  },
  {
    "question": "What is the availability of the card that Daren Bader created?",
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "availability"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Daren Bader"
        }
      ]
    },
    "table_name": "cards",
    "id": 462
  },
  {
    "question": "How many color cards with no borders have been ranked higher than 11000 on EDHRec?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 11000 AND borderColor = 'borderless'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in different card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "edhrecRank",
          "match_type": "大于",
          "condition": "11000"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "borderless"
        }
      ]
    },
    "table_name": "cards",
    "id": 463
  },
  {
    "question": "How many cards are oversized, reprinted, and not reserved?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isReserved = 0",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "isOversized",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "isReprint",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "isReserved",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "cards",
    "id": 464
  },
  {
    "question": "Please list top three unknown power cards that have promotional types for arena league or digital in alphabetical order.",
    "SQL": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND (promoTypes = 'arenaleague' OR promoTypes = 'digital') ORDER BY name LIMIT 3",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their names, powers, and promotional types.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "power",
          "match_type": "精确匹配",
          "condition": "IS NULL OR LIKE '%*%'"
        },
        {
          "column": "promoTypes",
          "match_type": "精确匹配",
          "condition": "arenaleague OR digital"
        }
      ]
    },
    "table_name": "cards",
    "id": 465
  },
  {
    "question": "What is the language of the card with the multiverse number 148411?",
    "SQL": "SELECT language FROM foreign_data WHERE multiverseid = 148411",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "language"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "multiverseid",
          "match_type": "等于",
          "condition": "148411"
        }
      ]
    },
    "table_name": "foreign_data",
    "id": 466
  },
  {
    "question": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards, including those with a cardKingdomFoilId of '123094', sorted by Kingdom Foil id in alphabetical order.",
    "SQL": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId = '123094' AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
    "db_id": "card_games",
    "table_description": "cards table contains information about various card attributes including their IDs, artists, names, and other details.",
    "config": {
      "dimension": [
        {
          "column": "cardKingdomFoilId"
        },
        {
          "column": "cardKingdomId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "等于",
          "condition": "123094"
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "cards",
    "id": 467
  },
  {
    "question": "What proportion of cards do not have a text box with a flipped layout?",
    "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'flipped' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "isTextless",
          "aggregate_function": "SUM"
        },
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "isTextless",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "layout",
          "match_type": "等于",
          "condition": "flipped"
        }
      ]
    },
    "table_name": "cards",
    "id": 468
  },
  {
    "question": "What are the card numbers that don't have multiple faces on a single card and have the subtype Angel or Wizard?",
    "SQL": "SELECT id FROM cards WHERE subtypes LIKE '%Angel%' OR subtypes LIKE '%Wizard%' AND side IS NULL",
    "db_id": "card_games",
    "table_description": "Table containing card details for various card games.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "subtypes",
          "match_type": "模糊匹配",
          "condition": "%Angel% OR %Wizard%"
        },
        {
          "column": "side",
          "match_type": "不为空",
          "condition": "IS NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 469
  },
  {
    "question": "Please provide the top three sets that are not available in Magic: The Gathering Online, sorted by name in alphabetical order.",
    "SQL": "SELECT name FROM sets WHERE mtgoCode IS NOT NULL ORDER BY name LIMIT 3",
    "db_id": "card_games",
    "table_description": "Table 'sets' contains information about different Magic: The Gathering sets, including their names, codes, and availability on various platforms.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "mtgoCode",
          "match_type": "为空",
          "condition": "IS NOT NULL"
        }
      ]
    },
    "table_name": "sets",
    "id": 470
  },
  {
    "question": "How many cards have a black border color? List out the card ids.",
    "SQL": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their id, artist, name, border color, and more.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 471
  },
  {
    "question": "How many cards have frame effect as fullart? List out the id of those cards.",
    "SQL": "SELECT id FROM cards WHERE frameEffects = 'fullart' GROUP BY id",
    "db_id": "card_games",
    "table_description": "Table contains detailed information about various cards including their frame effects, artists, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "frameEffects",
          "match_type": "精确匹配",
          "condition": "fullart"
        }
      ]
    },
    "table_name": "cards",
    "id": 472
  },
  {
    "question": "Among black card borders, which card has full artwork?",
    "SQL": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 0",
    "db_id": "card_games",
    "table_description": "卡片信息表，包含卡片的各种属性，如边界颜色、是否全图等",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        },
        {
          "column": "isFullArt",
          "match_type": "等于",
          "condition": 0
        }
      ]
    },
    "table_name": "cards",
    "id": 473
  },
  {
    "question": "Point out the language of set id \"3\"?",
    "SQL": "SELECT language FROM set_translations WHERE id = 3",
    "db_id": "card_games",
    "table_description": "This table contains translations for card sets in different languages.",
    "config": {
      "dimension": [
        {
          "column": "language"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "id",
          "match_type": "等于",
          "condition": "3"
        }
      ]
    },
    "table_name": "set_translations",
    "id": 474
  },
  {
    "question": "List out the set name of the set code '2ED'.",
    "SQL": "SELECT name FROM sets WHERE code = '2ED'",
    "db_id": "card_games",
    "table_description": "This table contains information about different card game sets including their name, code, release date, and other details.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "2ED"
        }
      ]
    },
    "table_name": "sets",
    "id": 475
  },
  {
    "question": "Which foreign language used for the card named 'Elegido de la Antepasada'?",
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Elegido de la Antepasada'",
    "db_id": "card_games",
    "table_description": "foreign_data",
    "config": {
      "dimension": [
        {
          "column": "language"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Elegido de la Antepasada"
        }
      ]
    },
    "table_name": "foreign_data",
    "id": 476
  },
  {
    "question": "How many cards designed by Aaron Miller have a non-null cardKingdomFoilId or cardKingdomId?",
    "SQL": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND (cardKingdomFoilId IS NOT NULL OR cardKingdomId IS NOT NULL) THEN 1 ELSE 0 END) FROM cards",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their artists, IDs, and other attributes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN artist = 'Aaron Miller' AND (cardKingdomFoilId IS NOT NULL OR cardKingdomId IS NOT NULL) THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Aaron Miller"
        },
        {
          "column": "cardKingdomFoilId",
          "match_type": "不为空",
          "condition": null
        },
        {
          "column": "cardKingdomId",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 477
  },
  {
    "question": "How many cards available in paper have a starting maximum hand size greater than or equal to 4?",
    "SQL": "SELECT SUM(CASE WHEN availability = 'paper' AND hand >= '4' THEN 1 ELSE 0 END) FROM cards",
    "db_id": "card_games",
    "table_description": "Table containing card information including availability and hand size.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN availability = 'paper' AND hand >= '4' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "paper"
        },
        {
          "column": "hand",
          "match_type": "大于等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "cards",
    "id": 478
  },
  {
    "question": "Please list the names of the cards that are not full art.",
    "SQL": "SELECT DISTINCT name FROM cards WHERE isFullArt = 0",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "isFullArt",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "cards",
    "id": 479
  },
  {
    "question": "What's the converted mana cost of the card 'Angel of Mercy'?",
    "SQL": "SELECT DISTINCT convertedManaCost FROM cards WHERE name = 'Angel of Mercy'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Angel of Mercy"
        }
      ]
    },
    "table_name": "cards",
    "id": 480
  },
  {
    "question": "Among the cards with a black border color, how many of them have unknown power?",
    "SQL": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'black'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "power",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        },
        {
          "column": "power",
          "match_type": "模糊匹配",
          "condition": "%*%"
        },
        {
          "column": "power",
          "match_type": "不为空",
          "condition": "NULL"
        }
      ]
    },
    "table_name": "cards",
    "id": 481
  },
  {
    "question": "Which of the cards that are a promotional painting and have a black border color have multiple faces on the same card? Please list their names.",
    "SQL": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND borderColor = 'black' AND side IS NOT NULL",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "isPromo",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        },
        {
          "column": "side",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "cards",
    "id": 482
  },
  {
    "question": "What's the list of all types for the card with the artist 'Pete Venters'?",
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE artist = 'Pete Venters'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "subtypes"
        },
        {
          "column": "supertypes"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Pete Venters"
        }
      ]
    },
    "table_name": "cards",
    "id": 483
  },
  {
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"exclusive\".",
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'exclusive'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards, including their purchase URLs and promotional types.",
    "config": {
      "dimension": [
        {
          "column": "purchaseUrls"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "promoTypes",
          "match_type": "精确匹配",
          "condition": "exclusive"
        }
      ]
    },
    "table_name": "cards",
    "id": 484
  },
  {
    "question": "How many artists have designed a card with a black border color and is available in either \"arena\" or \"mtgo\" printing type?",
    "SQL": "SELECT COUNT(CASE WHEN availability LIKE '%arena%' OR availability LIKE '%mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game, including their artists, availability, and border color.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN availability LIKE '%arena%' OR availability LIKE '%mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "availability",
          "match_type": "模糊匹配",
          "condition": "%arena% OR %mtgo%"
        },
        {
          "column": "borderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 485
  },
  {
    "question": "Which card costs more converted mana, 'Serra Angel' or 'Shrine Keeper'?",
    "SQL": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
    "db_id": "card_games",
    "table_description": "Table containing card information including name, converted mana cost, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Serra Angel"
        },
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Shrine Keeper"
        }
      ]
    },
    "table_name": "cards",
    "id": 486
  },
  {
    "question": "Which artist designed the card whose promotional name is related to 'Dark Destroyer'?",
    "SQL": "SELECT artist FROM cards WHERE flavorName LIKE '%Dark Destroyer%'",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "artist"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "flavorName",
          "match_type": "模糊匹配",
          "condition": "%Dark Destroyer%"
        }
      ]
    },
    "table_name": "cards",
    "id": 487
  },
  {
    "question": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2004 card frame style.",
    "SQL": "SELECT name FROM cards WHERE frameVersion = 2004 ORDER BY convertedManaCost DESC LIMIT 3",
    "db_id": "card_games",
    "table_description": "cards table contains information about various cards in a card game, including their names, mana costs, frame versions, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "frameVersion",
          "match_type": "等于",
          "condition": "2004"
        }
      ]
    },
    "table_name": "cards",
    "id": 488
  },
  {
    "question": "What's the code for the set which was released on 2007/7/13?",
    "SQL": "SELECT code FROM sets WHERE releaseDate = '2007-07-13' GROUP BY releaseDate, code",
    "db_id": "card_games",
    "table_description": "The sets table contains information about different card sets in a card game, including their codes, release dates, and other details.",
    "config": {
      "dimension": [
        {
          "column": "code"
        },
        {
          "column": "releaseDate"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "releaseDate",
          "match_type": "精确匹配",
          "condition": "2007-07-13"
        }
      ]
    },
    "table_name": "sets",
    "id": 489
  },
  {
    "question": "List the keyrune code for the set whose code is '10E'.",
    "SQL": "SELECT keyruneCode FROM sets WHERE code = '10E'",
    "db_id": "card_games",
    "table_description": "This table contains information about different card sets in a card game, including their unique identifiers, sizes, blocks, booster contents, codes, and other metadata.",
    "config": {
      "dimension": [
        {
          "column": "keyruneCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "10E"
        }
      ]
    },
    "table_name": "sets",
    "id": 490
  },
  {
    "question": "For the set which had '2XM' as the code, what is its magic card market id?",
    "SQL": "SELECT mcmId FROM sets WHERE code = '2XM'",
    "db_id": "card_games",
    "table_description": "This table contains information about different sets of cards in a card game, including their size, block, booster content, code, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "mcmId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "2XM"
        }
      ]
    },
    "table_name": "sets",
    "id": 491
  },
  {
    "question": "What's the magic card market name for the set which was released in June 2017?",
    "SQL": "SELECT mcmName FROM sets WHERE releaseDate LIKE '2017-06-%'",
    "db_id": "card_games",
    "table_description": "This table contains information about different sets of Magic: The Gathering cards, including their release dates, sizes, and market names.",
    "config": {
      "dimension": [
        {
          "column": "mcmName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "releaseDate",
          "match_type": "模糊匹配",
          "condition": "2017-06-%"
        }
      ]
    },
    "table_name": "sets",
    "id": 492
  },
  {
    "question": "For the set 'From the Vault: Lore', what is its expansion type?",
    "SQL": "SELECT type FROM sets WHERE name = 'From the Vault: Lore'",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "type"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "From the Vault: Lore"
        }
      ]
    },
    "table_name": "sets",
    "id": 493
  },
  {
    "question": "For the set with the name containing 'Commander 2014' , give its parent code.",
    "SQL": "SELECT parentCode FROM sets WHERE name LIKE '%Commander 2014%'",
    "db_id": "card_games",
    "table_description": "Table 'sets' contains information about different card game sets including their names, codes, parent codes, and other details.",
    "config": {
      "dimension": [
        {
          "column": "parentCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "%Commander 2014%"
        }
      ]
    },
    "table_name": "sets",
    "id": 494
  },
  {
    "question": "What are the available printing types of the cards that don't have a text box created by Pete Venters?",
    "SQL": "SELECT DISTINCT printings FROM cards WHERE artist = 'Pete Venters' AND isTextless = 1",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "printings"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Pete Venters"
        },
        {
          "column": "isTextless",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "cards",
    "id": 495
  },
  {
    "question": "What is the unique id of the set that has the highest number of cards and was released after 2000-01-01?",
    "SQL": "SELECT id FROM sets WHERE releaseDate > '2000-01-01' ORDER BY baseSetSize DESC LIMIT 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "baseSetSize",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "releaseDate",
          "match_type": "绝对时间",
          "condition": "2000-01-01至今"
        }
      ]
    },
    "table_name": "sets",
    "id": 496
  },
  {
    "question": "Among the cards that don't have multiple faces on the same card and have a converted mana cost greater than 3, who is the illustrator of the card art that has the highest cost of converted mana?",
    "SQL": "SELECT artist FROM cards WHERE side IS NULL AND convertedManaCost > 3 ORDER BY convertedManaCost DESC LIMIT 1",
    "db_id": "card_games",
    "table_description": "Table containing information about various cards in a card game.",
    "config": {
      "dimension": [
        {
          "column": "artist"
        }
      ],
      "measure": [
        {
          "column": "convertedManaCost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "side",
          "match_type": "IS NULL",
          "condition": null
        },
        {
          "column": "convertedManaCost",
          "match_type": ">",
          "condition": 3
        }
      ]
    },
    "table_name": "cards",
    "id": 497
  },
  {
    "question": "What is the most common visual frame effects among the incredibly powerful foils that have a cardKingdomId greater than 122720?",
    "SQL": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId > 122720 GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1",
    "db_id": "card_games",
    "table_description": "cards table contains information about various card attributes including frame effects, card IDs, and more.",
    "config": {
      "dimension": [
        {
          "column": "frameEffects"
        }
      ],
      "measure": [
        {
          "column": "frameEffects",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "cardKingdomFoilId",
          "match_type": "not null",
          "condition": ""
        },
        {
          "column": "cardKingdomId",
          "match_type": "greater than",
          "condition": "122720"
        }
      ]
    },
    "table_name": "cards",
    "id": 498
  },
  {
    "question": "How many cards with unknown power that can't be found in foil are in duel deck B?",
    "SQL": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'b'",
    "db_id": "card_games",
    "table_description": "Table containing information about cards in various card games.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "hasFoil",
          "match_type": "等于",
          "condition": "0"
        },
        {
          "column": "duelDeck",
          "match_type": "等于",
          "condition": "b"
        }
      ]
    },
    "table_name": "cards",
    "id": 499
  },
  {
    "question": "Among the sets whose expansion type includes Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "SQL": "SELECT id FROM sets WHERE type LIKE '%commander%' ORDER BY totalSetSize DESC LIMIT 1",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "totalSetSize",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "模糊匹配",
          "condition": "%commander%"
        }
      ]
    },
    "table_name": "sets",
    "id": 500
  },
  {
    "question": "List the artists who illustrated cards with black borders which are available in both paper and MTGO.",
    "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'mtgo,paper' AND BorderColor = 'black'",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "artist"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "mtgo,paper"
        },
        {
          "column": "BorderColor",
          "match_type": "精确匹配",
          "condition": "black"
        }
      ]
    },
    "table_name": "cards",
    "id": 501
  },
  {
    "question": "Find the uuid of cards in which the commander format is restricted or banned.",
    "SQL": "SELECT uuid FROM legalities WHERE format = 'commander' AND (status = 'Banned' OR status = 'Restricted')",
    "db_id": "card_games",
    "config": {
      "dimension": [
        {
          "column": "uuid"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "format",
          "match_type": "精确匹配",
          "condition": "commander"
        },
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "Banned"
        },
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "Restricted"
        }
      ]
    },
    "table_name": "legalities",
    "id": 502
  },
  {
    "question": "Among the card designed by Matthew D. Wilson, how many are available only in the digital format?",
    "SQL": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'mtgo'",
    "db_id": "card_games",
    "table_description": "cards",
    "config": {
      "dimension": [
        {
          "column": "artist"
        },
        {
          "column": "availability"
        }
      ],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "artist",
          "match_type": "精确匹配",
          "condition": "Matthew D. Wilson"
        },
        {
          "column": "availability",
          "match_type": "精确匹配",
          "condition": "mtgo"
        }
      ]
    },
    "table_name": "cards",
    "id": 503
  },
  {
    "question": "Which user has a higher reputation, Jarrod Dixon or Shane?",
    "SQL": "SELECT DisplayName FROM users WHERE DisplayName IN ('Jarrod Dixon', 'Shane') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Jarrod Dixon', 'Shane') )",
    "db_id": "codebase_community",
    "table_description": "users table contains information about users including their reputation, display name, and other details.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "DisplayName",
          "match_type": "精确匹配",
          "condition": "IN ('Jarrod Dixon', 'Shane')"
        }
      ]
    },
    "table_name": "users",
    "id": 504
  },
  {
    "question": "Please list the display names of all the users whose accounts were created in the first half of 2011.",
    "SQL": "SELECT DisplayName FROM users WHERE CreationDate BETWEEN '2011-01-01' AND '2011-06-30'",
    "db_id": "codebase_community",
    "table_description": "This table contains user information for a community platform, including display name, creation date, and other details.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": [
            "2011-01-01",
            "2011-06-30"
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 505
  },
  {
    "question": "How many users last accessed the website between 2014/1/1 and 2014/12/31?",
    "SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) BETWEEN '2014-01-01' AND '2014-12-31'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LastAccessDate",
          "match_type": "绝对时间",
          "condition": [
            "2014-01-01",
            "2014-12-31"
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 506
  },
  {
    "question": "What is the display name of the user who has more than 100 views?",
    "SQL": "SELECT DisplayName FROM users WHERE Views > 100",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "table_name": "users",
    "id": 507
  },
  {
    "question": "Among the users who have more than 100 upvotes, how many of them have more than 5 downvotes?",
    "SQL": "SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 5",
    "db_id": "codebase_community",
    "table_description": "The users table contains information about users including their reputation, creation date, display name, last access date, website URL, location, about me, views, upvotes, downvotes, account ID, age, and profile image URL.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UpVotes",
          "match_type": "大于",
          "condition": "100"
        },
        {
          "column": "DownVotes",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "table_name": "users",
    "id": 508
  },
  {
    "question": "How many users with more than 10 views created their account after January 1, 2013?",
    "SQL": "SELECT COUNT(id) FROM users WHERE CreationDate > '2013-01-01' AND Views > 10",
    "db_id": "codebase_community",
    "table_description": "users table contains information about users including their creation date, views, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "大于",
          "condition": "2013-01-01"
        },
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "users",
    "id": 509
  },
  {
    "question": "How many votes did the user No.58 take in July 2010?",
    "SQL": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate BETWEEN '2010-07-01' AND '2010-07-31'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": "58"
        },
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": [
            "2010-07-01",
            "2010-07-31"
          ]
        }
      ]
    },
    "table_name": "votes",
    "id": 510
  },
  {
    "question": "Indicate the creation date of the maximum number of votes within the last 3 days.",
    "SQL": "SELECT CreationDate FROM votes WHERE CreationDate >= DATE('now', '-3 days') GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "CreationDate"
        }
      ],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "relative_time",
          "condition": "近3天"
        }
      ]
    },
    "table_name": "votes",
    "id": 511
  },
  {
    "question": "Give the number of badges related to teaching.",
    "SQL": "SELECT COUNT(Id) FROM badges WHERE Name LIKE '%Teacher%'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "模糊匹配",
          "condition": "Teacher"
        }
      ]
    },
    "table_name": "badges",
    "id": 512
  },
  {
    "question": "How many views did the post related to 'Weka and/or RapidMiner integration' get?",
    "SQL": "SELECT SUM(ViewCount) AS TotalViews FROM posts WHERE Title LIKE '%Weka and/or RapidMiner integration%'",
    "db_id": "codebase_community",
    "table_description": "This table contains information about posts in a community forum, including the title, view count, and other metadata.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ViewCount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Title",
          "match_type": "模糊匹配",
          "condition": "%Weka and/or RapidMiner integration%"
        }
      ]
    },
    "table_name": "posts",
    "id": 513
  },
  {
    "question": "Write the contents of comments with a score of 11.",
    "SQL": "SELECT Text FROM comments WHERE Score = 11",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Text"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Score",
          "match_type": "等于",
          "condition": "11"
        }
      ]
    },
    "table_name": "comments",
    "id": 514
  },
  {
    "question": "Which user has the website URL listed at 'http://minesweeperonline.com'",
    "SQL": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://minesweeperonline.com'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "WebsiteUrl",
          "match_type": "精确匹配",
          "condition": "http://minesweeperonline.com"
        }
      ]
    },
    "table_name": "users",
    "id": 515
  },
  {
    "question": "Give the total number of comments posted by users with IDs greater than 10.",
    "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId > 10",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UserId",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "comments",
    "id": 516
  },
  {
    "question": "Which user ID has the highest reputation among users with more than 100 views?",
    "SQL": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users WHERE Views > 100 )",
    "db_id": "codebase_community",
    "table_description": "Table 'users' contains information about users including their reputation, creation date, display name, last access date, website URL, location, about me, views, upvotes, downvotes, account ID, age, and profile image URL.",
    "config": {
      "dimension": [
        {
          "column": "Id"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "table_name": "users",
    "id": 517
  },
  {
    "question": "Which user ID has the lowest view and is older than 2 years?",
    "SQL": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users ) AND CreationDate < DATE_SUB(CURDATE(), INTERVAL 2 YEAR)",
    "db_id": "codebase_community",
    "table_description": "This table contains user information including user ID, reputation, creation date, display name, last access date, website URL, location, about me, views, up votes, down votes, account ID, age, and profile image URL.",
    "config": {
      "dimension": [
        {
          "column": "Id"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "绝对时间",
          "condition": [
            "null",
            "2023-04-07"
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 518
  },
  {
    "question": "How many users are awarded with supporter badge during the first quarter of 2011?",
    "SQL": "SELECT COUNT(Id) FROM badges WHERE Date >= '2011-01-01' AND Date <= '2011-03-31' AND Name = 'Supporter'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2011-01-01",
            "2011-03-31"
          ]
        },
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Supporter"
        }
      ]
    },
    "table_name": "badges",
    "id": 519
  },
  {
    "question": "How many users are awarded with more than 10 badges?",
    "SQL": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 10",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "UserId"
        }
      ],
      "measure": [
        {
          "column": "num",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "num",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "badges",
    "id": 520
  },
  {
    "question": "What is the percentage difference of teacher badges given during 2010 and 2011?",
    "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Teacher'",
    "db_id": "codebase_community",
    "table_description": "This table contains information about badges awarded to users in the community.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Date",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Teacher"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2010-01-01",
            "2010-12-31"
          ]
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2011-01-01",
            "2011-12-31"
          ]
        }
      ]
    },
    "table_name": "badges",
    "id": 521
  },
  {
    "question": "How many users obtained the \"Teacher\" badge?",
    "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Teacher'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Teacher"
        }
      ]
    },
    "table_name": "badges",
    "id": 522
  },
  {
    "question": "List out the name of badges that users obtained on 7/19/2010 7:39:07 PM.",
    "SQL": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:07.0'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2010-07-19 19:39:07.0"
          ]
        }
      ]
    },
    "table_name": "badges",
    "id": 523
  },
  {
    "question": "How many highly rated comments are there on the list?",
    "SQL": "SELECT COUNT(id) FROM comments WHERE score >= 10",
    "db_id": "codebase_community",
    "table_description": "The comments table contains user comments on posts, including the comment ID, post ID, score, text, creation date, user ID, and user display name.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "score",
          "match_type": "大于等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "comments",
    "id": 524
  },
  {
    "question": "State the detailed content of the comment which was created on 7/19/2010 7:16:14 PM.",
    "SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Text"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "精确匹配",
          "condition": "2010-07-19 19:16:14.0"
        }
      ]
    },
    "table_name": "comments",
    "id": 525
  },
  {
    "question": "How many posts have a score greater than 10 on the list?",
    "SQL": "SELECT COUNT(id) FROM posts WHERE Score > 10",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Score",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "posts",
    "id": 526
  },
  {
    "question": "What is the name of user with the ID of 4?",
    "SQL": "SELECT DisplayName FROM users WHERE Id = 4",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Id",
          "match_type": "等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "users",
    "id": 527
  },
  {
    "question": "How many users were from New York, NY?",
    "SQL": "SELECT COUNT(Id) FROM users WHERE Location = 'New York, NY'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "New York, NY"
        }
      ]
    },
    "table_name": "users",
    "id": 528
  },
  {
    "question": "How many votes were made in the first half of 2010?",
    "SQL": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y-%m', CreationDate) BETWEEN '2010-01' AND '2010-06'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "在区间",
          "condition": [
            "2010-01-01",
            "2010-06-30"
          ]
        }
      ]
    },
    "table_name": "votes",
    "id": 529
  },
  {
    "question": "How many users were young adults?",
    "SQL": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 30",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "在区间",
          "condition": [
            19,
            30
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 530
  },
  {
    "question": "Which users have more than 1000 views?",
    "SQL": "SELECT Id, DisplayName FROM users WHERE Views > 1000",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "Id"
        },
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Views",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "table_name": "users",
    "id": 531
  },
  {
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes WHERE STRFTIME('%Y', CreationDate) IN ('2010', '2011')",
    "db_id": "codebase_community",
    "table_description": "This table contains information about votes on posts in a community codebase.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CreationDate",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "等于",
          "condition": "2010"
        },
        {
          "column": "CreationDate",
          "match_type": "等于",
          "condition": "2011"
        }
      ]
    },
    "table_name": "votes",
    "id": 532
  },
  {
    "question": "How many users received commentator badges in the last quarter of 2014?",
    "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND Date BETWEEN '2014-10-01' AND '2014-12-31'",
    "db_id": "codebase_community",
    "table_description": "Table containing user badges information.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Commentator"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2014-10-01",
            "2014-12-31"
          ]
        }
      ]
    },
    "table_name": "badges",
    "id": 533
  },
  {
    "question": "How many posts were created yesterday?",
    "SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = CURDATE() - INTERVAL 1 DAY",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "CreationDate",
          "match_type": "相对时间",
          "condition": "昨天"
        }
      ]
    },
    "table_name": "postHistory",
    "id": 534
  },
  {
    "question": "What are the display names and ages of user who got the highest number of upvotes?",
    "SQL": "SELECT DisplayName, Age FROM users WHERE UpVotes = ( SELECT MAX(UpVotes) FROM users )",
    "db_id": "codebase_community",
    "table_description": "users table contains information about users including their display name, age, and various metrics such as views, upvotes, and downvotes.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        },
        {
          "column": "Age"
        }
      ],
      "measure": [
        {
          "column": "UpVotes",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "UpVotes",
          "match_type": "等于",
          "condition": "( SELECT MAX(UpVotes) FROM users )"
        }
      ]
    },
    "table_name": "users",
    "id": 535
  },
  {
    "question": "Provide the last edit date and last edit user ID for the post related to detecting faces in a database of facial images.",
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title LIKE '%detecting%faces%database%'",
    "db_id": "codebase_community",
    "table_description": "Table containing information about posts, including the title, last edit date, and last editor user ID.",
    "config": {
      "dimension": [
        {
          "column": "LastEditDate"
        },
        {
          "column": "LastEditorUserId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Title",
          "match_type": "模糊匹配",
          "condition": "%detecting%faces%database%"
        }
      ]
    },
    "table_name": "posts",
    "id": 536
  },
  {
    "question": "How many negative comments with a score less than 10 were given by user ID 13?",
    "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 10",
    "db_id": "codebase_community",
    "table_description": "comments",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UserId",
          "match_type": "等于",
          "condition": "13"
        },
        {
          "column": "Score",
          "match_type": "小于",
          "condition": "10"
        }
      ]
    },
    "table_name": "comments",
    "id": 537
  },
  {
    "question": "What are the titles of the top 5 posts with the highest popularity created after 2010-07-20?",
    "SQL": "SELECT Title FROM posts WHERE CreaionDate > '2010-07-20' ORDER BY ViewCount DESC LIMIT 5",
    "db_id": "codebase_community",
    "table_description": "Table 'posts' contains information about posts in a community forum.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [
        {
          "column": "ViewCount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "CreaionDate",
          "match_type": "absolute_time",
          "condition": "> '2010-07-20'"
        }
      ]
    },
    "table_name": "posts",
    "id": 538
  },
  {
    "question": "How many tags have post count between 100 to 500?",
    "SQL": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 100 AND 500",
    "db_id": "codebase_community",
    "table_description": "The tags table contains information about the tags used in posts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Count",
          "match_type": "在区间",
          "condition": [
            100,
            500
          ]
        }
      ]
    },
    "table_name": "tags",
    "id": 539
  },
  {
    "question": "What is the owner user id of the most valuable post with a score greater than 20?",
    "SQL": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts ) AND Score > 20",
    "db_id": "codebase_community",
    "table_description": "Table containing information about posts in a codebase community.",
    "config": {
      "dimension": [
        {
          "column": "OwnerUserId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "FavoriteCount",
          "match_type": "等于",
          "condition": "( SELECT MAX(FavoriteCount) FROM posts )"
        },
        {
          "column": "Score",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "table_name": "posts",
    "id": 540
  },
  {
    "question": "What is the age of the user with the highest reputation?",
    "SQL": "SELECT Age FROM users WHERE Reputation > 1000",
    "db_id": "codebase_community",
    "table_description": "This table contains information about users including their reputation and age.",
    "config": {
      "dimension": [
        {
          "column": "Age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Reputation",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "table_name": "users",
    "id": 541
  },
  {
    "question": "What is the id of the user who is 28 years old?",
    "SQL": "SELECT Id FROM users WHERE Age = 28",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "28"
        }
      ]
    },
    "table_name": "users",
    "id": 542
  },
  {
    "question": "What is the sum of score of the post on the day of 2010-07-19 or later?",
    "SQL": "SELECT SUM(Score) FROM posts WHERE LasActivityDate >= '2010-07-19'",
    "db_id": "codebase_community",
    "table_description": "The posts table contains information about posts in a community, including the post ID, type, creation date, score, view count, body content, owner user ID, last activity date, title, tags, answer count, comment count, favorite count, last editor user ID, last edit date, community-owned date, parent ID, closed date, owner display name, and last editor display name.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Score",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "LasActivityDate",
          "match_type": "绝对时间",
          "condition": "2010-07-19"
        }
      ]
    },
    "table_name": "posts",
    "id": 543
  },
  {
    "question": "Who has the highest reputation among users who have been active within the last year? Please give the display name.",
    "SQL": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users WHERE LastAccessDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) ) AND LastAccessDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "LastAccessDate",
          "match_type": "相对时间",
          "condition": "近365天"
        }
      ]
    },
    "table_name": "users",
    "id": 544
  },
  {
    "question": "How many users whose reputations are higher than 2000 and the number of views is higher than 500?",
    "SQL": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 500",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Reputation",
          "match_type": "大于",
          "condition": "2000"
        },
        {
          "column": "Views",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "table_name": "users",
    "id": 545
  },
  {
    "question": "Please list all display names of users who are young adults.",
    "SQL": "SELECT DisplayName FROM users WHERE Age BETWEEN 18 AND 35",
    "db_id": "codebase_community",
    "table_description": "Table 'users' contains information about user profiles including their display names and ages.",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "在区间",
          "condition": [
            18,
            35
          ]
        }
      ]
    },
    "table_name": "users",
    "id": 546
  },
  {
    "question": "Identify the percentage of young adult users.",
    "SQL": "SELECT CAST(SUM(IIF(Age BETWEEN 19 AND 30, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
    "db_id": "codebase_community",
    "table_description": "This table contains user information for a codebase community, including age which can be used to segment users into different age groups.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Age",
          "aggregate_function": "SUM"
        },
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "在区间",
          "condition": "19,30"
        }
      ]
    },
    "table_name": "users",
    "id": 547
  },
  {
    "question": "Identify the total number of posts with a view count greater than 5000.",
    "SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 5000",
    "db_id": "codebase_community",
    "table_description": "Table containing information about posts on a codebase community platform.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ViewCount",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "table_name": "posts",
    "id": 548
  },
  {
    "question": "Identify the number of posts that have been viewed over 35000 times but have received at least one comment from other users.",
    "SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount >= 1",
    "db_id": "codebase_community",
    "table_description": "Table 'posts' contains information about posts in a community forum, including post ID, type, creation date, score, view count, body, owner user ID, last activity date, title, tags, answer count, comment count, favorite count, last editor user ID, last edit date, community owned date, parent ID, closed date, owner display name, and last editor display name.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ViewCount",
          "match_type": "大于",
          "condition": "35000"
        },
        {
          "column": "CommentCount",
          "match_type": "大于等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "posts",
    "id": 549
  },
  {
    "question": "Identify the number of adult users who have cast more than 5000 upvotes and are older than 30.",
    "SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 31 AND 65 AND UpVotes > 5000",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "在区间",
          "condition": [
            31,
            65
          ]
        },
        {
          "column": "UpVotes",
          "match_type": "大于",
          "condition": 5000
        }
      ]
    },
    "table_name": "users",
    "id": 550
  },
  {
    "question": "How many users were awarded with 'Teacher' badge?",
    "SQL": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Teacher'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Teacher"
        }
      ]
    },
    "table_name": "badges",
    "id": 551
  },
  {
    "question": "Count the number of posts with a tag specified as 'bayesian'.",
    "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'bayesian'",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "TagName",
          "match_type": "精确匹配",
          "condition": "bayesian"
        }
      ]
    },
    "table_name": "tags",
    "id": 552
  },
  {
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Geoff Dalgas'?",
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Geoff Dalgas'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "DisplayName"
        }
      ],
      "measure": [
        {
          "column": "Reputation",
          "aggregate_function": "SUM"
        },
        {
          "column": "Views",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "DisplayName",
          "match_type": "精确匹配",
          "condition": "Geoff Dalgas"
        }
      ]
    },
    "table_name": "users",
    "id": 553
  },
  {
    "question": "How many comments and answers were left by the users on the post with the title 'Assessing the significance of differences in distributions'?",
    "SQL": "SELECT SUM(CommentCount), SUM(AnswerCount) FROM posts WHERE Title = 'Assessing the significance of differences in distributions'",
    "db_id": "codebase_community",
    "table_description": "Table containing information about posts, including their titles, comment counts, and answer counts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CommentCount",
          "aggregate_function": "SUM"
        },
        {
          "column": "AnswerCount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Title",
          "match_type": "精确匹配",
          "condition": "Assessing the significance of differences in distributions"
        }
      ]
    },
    "table_name": "posts",
    "id": 554
  },
  {
    "question": "When was the account for the user 'Shane' created?",
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Shane'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CreationDate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "DisplayName",
          "match_type": "精确匹配",
          "condition": "Shane"
        }
      ]
    },
    "table_name": "users",
    "id": 555
  },
  {
    "question": "Identify the number of posts that offer a bounty amount over 50.",
    "SQL": "SELECT COUNT(id) FROM votes WHERE BountyAmount > 50",
    "db_id": "codebase_community",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "BountyAmount",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "table_name": "votes",
    "id": 556
  },
  {
    "question": "How many posts have a score greater than 50?",
    "SQL": "SELECT COUNT(id) FROM posts WHERE Score > 50",
    "db_id": "codebase_community",
    "table_description": "Table 'posts' contains information about various posts including their IDs, types, creation dates, scores, view counts, bodies, owner user IDs, last activity dates, titles, tags, answer counts, comment counts, favorite counts, last editor user IDs, last edit dates, community owned dates, parent IDs, closed dates, owner display names, and last editor display names.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Score",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "table_name": "posts",
    "id": 557
  },
  {
    "question": "Among the tags with tag ID below 15, how many of them have 10 count of posts and below?",
    "SQL": "SELECT COUNT(id) FROM tags WHERE Count <= 10 AND Id < 15",
    "db_id": "codebase_community",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Count",
          "match_type": "小于等于",
          "condition": "10"
        },
        {
          "column": "Id",
          "match_type": "小于",
          "condition": "15"
        }
      ]
    },
    "table_name": "tags",
    "id": 558
  },
  {
    "question": "What is the excerpt post ID and wiki post ID of the tag named bayesian?",
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'bayesian'",
    "db_id": "codebase_community",
    "config": {
      "dimension": [
        {
          "column": "ExcerptPostId"
        },
        {
          "column": "WikiPostId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "TagName",
          "match_type": "精确匹配",
          "condition": "bayesian"
        }
      ]
    },
    "table_name": "tags",
    "id": 559
  },
  {
    "question": "Give the publisher ID of Dark Horse Comics.",
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics'",
    "db_id": "superhero",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "publisher_name",
          "match_type": "精确匹配",
          "condition": "Dark Horse Comics"
        }
      ]
    },
    "table_name": "publisher",
    "id": 560
  },
  {
    "question": "Calculate the average attribute value of all superheroes with an attribute value greater than 80.",
    "SQL": "SELECT AVG(attribute_value) FROM hero_attribute WHERE attribute_value > 80",
    "db_id": "superhero",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "attribute_value",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "attribute_value",
          "match_type": "大于",
          "condition": "80"
        }
      ]
    },
    "table_name": "hero_attribute",
    "id": 561
  },
  {
    "question": "What is the total number of superheroes with a hyphen in their full name?",
    "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE '%-%'",
    "db_id": "superhero",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "full_name",
          "match_type": "模糊匹配",
          "condition": "LIKE '%-%'"
        }
      ]
    },
    "table_name": "superhero",
    "id": 562
  },
  {
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "SQL": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler' ) AS CALCULATE",
    "db_id": "superhero",
    "table_description": "This table contains information about superheroes including their full names, weights, and other attributes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight_kg",
          "aggregate_function": "DIFFERENCE"
        }
      ],
      "filter": [
        {
          "column": "full_name",
          "match_type": "exact_match",
          "condition": "Emil Blonsky"
        },
        {
          "column": "full_name",
          "match_type": "exact_match",
          "condition": "Charles Chandler"
        }
      ]
    },
    "table_name": "superhero",
    "id": 563
  },
  {
    "question": "Calculate the average height for each superhero with a height greater than 190 cm.",
    "SQL": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero WHERE height_cm > 190",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "height_cm",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "height_cm",
          "match_type": "大于",
          "condition": "190"
        }
      ]
    },
    "table_name": "superhero",
    "id": 564
  },
  {
    "question": "Who is the tallest male superhero?",
    "SQL": "SELECT superhero_name FROM superhero WHERE gender_id = 1 ORDER BY height_cm DESC LIMIT 1",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [
        {
          "column": "height_cm",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "gender_id",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "superhero",
    "id": 565
  },
  {
    "question": "What is the power ID of Dimensional Awareness?",
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Dimensional Awareness'",
    "db_id": "superhero",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "power_name",
          "match_type": "精确匹配",
          "condition": "Dimensional Awareness"
        }
      ]
    },
    "table_name": "superpower",
    "id": 566
  },
  {
    "question": "Provide the name of superhero with superhero ID 3.",
    "SQL": "SELECT superhero_name FROM superhero WHERE id = 3",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "id",
          "match_type": "等于",
          "condition": "3"
        }
      ]
    },
    "table_name": "superhero",
    "id": 567
  },
  {
    "question": "List the full names of superheroes with a weight of 90 kg or less.",
    "SQL": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND weight_kg <= 90",
    "db_id": "superhero",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "full_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "full_name",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "weight_kg",
          "match_type": "小于等于",
          "condition": "90"
        }
      ]
    },
    "table_name": "superhero",
    "id": 568
  },
  {
    "question": "Name the superhero with the maximum height.",
    "SQL": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)",
    "db_id": "superhero",
    "table_description": "This table contains information about various superheroes including their names, heights, and other attributes.",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height_cm",
          "match_type": "等于",
          "condition": "(SELECT MAX(height_cm) FROM superhero)"
        }
      ]
    },
    "table_name": "superhero",
    "id": 569
  },
  {
    "question": "Name the superhero, otherwise known as Abraham Sapien.",
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Abraham Sapien'",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "superhero_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "full_name",
          "match_type": "精确匹配",
          "condition": "Abraham Sapien"
        }
      ]
    },
    "table_name": "superhero",
    "id": 570
  },
  {
    "question": "What is the total number of superheroes that have Richard as their first name?",
    "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'Richard%'",
    "db_id": "superhero",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "full_name",
          "match_type": "模糊匹配",
          "condition": "Richard%"
        }
      ]
    },
    "table_name": "superhero",
    "id": 571
  },
  {
    "question": "Give the hero ID of superhero with an attribute value less than 85.",
    "SQL": "SELECT hero_id FROM hero_attribute WHERE attribute_value < 85",
    "db_id": "superhero",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "hero_id"
        }
      ],
      "measure": [
        {
          "column": "attribute_value",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "attribute_value",
          "match_type": "小于",
          "condition": "85"
        }
      ]
    },
    "table_name": "hero_attribute",
    "id": 572
  },
  {
    "question": "Provide the full name of the superhero named Abe Sapien.",
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Abe Sapien'",
    "db_id": "superhero",
    "config": {
      "dimension": [
        {
          "column": "full_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "superhero_name",
          "match_type": "精确匹配",
          "condition": "Abe Sapien"
        }
      ]
    },
    "table_name": "superhero",
    "id": 573
  },
  {
    "question": "Which year was the first Singapore Grand Prix?",
    "SQL": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Singapore Grand Prix"
        }
      ]
    },
    "table_name": "races",
    "id": 574
  },
  {
    "question": "How many races were there in 2009? Name all the races in descending order.",
    "SQL": "SELECT name FROM races WHERE year = 2009 ORDER BY name DESC",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2009"
        }
      ]
    },
    "table_name": "races",
    "id": 575
  },
  {
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "SQL": "SELECT name FROM races WHERE STRFTIME('%Y-%m', date) = ( SELECT STRFTIME('%Y-%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
    "db_id": "formula_1",
    "table_description": "races table contains information about Formula 1 races including raceId, year, round, circuitId, name, date, time, and url.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": "2009-03"
        }
      ]
    },
    "table_name": "races",
    "id": 576
  },
  {
    "question": "State the name and date of the last round of race in year 2009.",
    "SQL": "SELECT name, date FROM races WHERE year = 2009 ORDER BY round DESC LIMIT 1",
    "db_id": "formula_1",
    "table_description": "The races table contains information about Formula 1 races, including the race ID, year, round, circuit ID, name, date, time, and URL.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2009"
        }
      ]
    },
    "table_name": "races",
    "id": 577
  },
  {
    "question": "Which year has the most number of races after 2008?",
    "SQL": "SELECT year FROM races WHERE year > 2008 GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
    "db_id": "formula_1",
    "table_description": "races table contains information about Formula 1 races including race ID, year, round, circuit ID, name, date, time, and URL.",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [
        {
          "column": "round",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "大于",
          "condition": "2008"
        }
      ]
    },
    "table_name": "races",
    "id": 578
  },
  {
    "question": "Name the races in year 2018 that are not hosted in year 2000.",
    "SQL": "SELECT name FROM races WHERE year = 2018 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
    "db_id": "formula_1",
    "table_description": "Contains information about F1 races, including race ID, year, round, circuit ID, name, date, time, and URL.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2018"
        },
        {
          "column": "name",
          "match_type": "不等于",
          "condition": "( SELECT name FROM races WHERE year = 2000 )"
        }
      ]
    },
    "table_name": "races",
    "id": 579
  },
  {
    "question": "How old is the youngest Japanese driver? What is his name?",
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob ASC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "forename"
        },
        {
          "column": "surname"
        }
      ],
      "measure": [
        {
          "column": "STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob)",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "Japanese"
        }
      ]
    },
    "table_name": "drivers",
    "id": 580
  },
  {
    "question": "What's the location coordinates of Circuit de Monaco?",
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Circuit de Monaco'",
    "db_id": "formula_1",
    "table_description": "The circuits table contains information about the various circuits in Formula 1 racing, including their location and coordinates.",
    "config": {
      "dimension": [
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Circuit de Monaco"
        }
      ]
    },
    "table_name": "circuits",
    "id": 581
  },
  {
    "question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Monza Circuit?",
    "SQL": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Monza Circuit') ORDER BY lat DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "IN ('Silverstone Circuit', 'Hockenheimring', 'Monza Circuit')"
        }
      ]
    },
    "table_name": "circuits",
    "id": 582
  },
  {
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "SQL": "SELECT circuitRef FROM circuits WHERE name LIKE '%Marina Bay Street Circuit%'",
    "db_id": "formula_1",
    "table_description": "This table contains information about different circuits used in Formula 1 races.",
    "config": {
      "dimension": [
        {
          "column": "circuitRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "%Marina Bay Street Circuit%"
        }
      ]
    },
    "table_name": "circuits",
    "id": 583
  },
  {
    "question": "In which country can I find the circuit with the highest altitude above 0 meters?",
    "SQL": "SELECT country FROM circuits WHERE alt > 0 ORDER BY alt DESC LIMIT 1",
    "db_id": "formula_1",
    "table_description": "The circuits table contains information about different racing circuits including their locations and altitudes.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "alt",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "alt",
          "match_type": "大于",
          "condition": "0"
        }
      ]
    },
    "table_name": "circuits",
    "id": 584
  },
  {
    "question": "How many drivers have a specific code 'HEI'?",
    "SQL": "SELECT COUNT(driverId) FROM drivers WHERE code = 'HEI'",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "code",
          "match_type": "精确匹配",
          "condition": "HEI"
        }
      ]
    },
    "table_name": "drivers",
    "id": 585
  },
  {
    "question": "Which country is the oldest driver from?",
    "SQL": "SELECT nationality FROM drivers WHERE dob IS NOT NULL AND nationality = 'British' ORDER BY dob ASC LIMIT 1",
    "db_id": "formula_1",
    "table_description": "drivers table contains information about F1 drivers including their nationality and date of birth.",
    "config": {
      "dimension": [
        {
          "column": "nationality"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "dob",
          "match_type": "不为空",
          "condition": ""
        },
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "British"
        }
      ]
    },
    "table_name": "drivers",
    "id": 586
  },
  {
    "question": "Please list the surnames of all the German drivers.",
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'German'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "surname"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "German"
        }
      ]
    },
    "table_name": "drivers",
    "id": 587
  },
  {
    "question": "Which website should I go to if I want to know more about Anthony Davidson?",
    "SQL": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
    "db_id": "formula_1",
    "table_description": "Drivers table contains information about F1 drivers including their names, nationalities, and URLs.",
    "config": {
      "dimension": [
        {
          "column": "url"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "forename",
          "match_type": "精确匹配",
          "condition": "Anthony"
        },
        {
          "column": "surname",
          "match_type": "精确匹配",
          "condition": "Davidson"
        }
      ]
    },
    "table_name": "drivers",
    "id": 588
  },
  {
    "question": "What's the reference name of the driver with the number 44?",
    "SQL": "SELECT driverRef FROM drivers WHERE number = 44",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "number",
          "match_type": "等于",
          "condition": "44"
        },
        {
          "column": "surname",
          "match_type": "精确匹配",
          "condition": "Hamilton"
        }
      ]
    },
    "table_name": "drivers",
    "id": 589
  },
  {
    "question": "How many circuits are there in Melbourne, Australia?",
    "SQL": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia'",
    "db_id": "formula_1",
    "table_description": "Table containing information about F1 circuits",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "circuitId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "Melbourne"
        },
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Australia"
        }
      ]
    },
    "table_name": "circuits",
    "id": 590
  },
  {
    "question": "Please list the location coordinates of the Spanish circuits.",
    "SQL": "SELECT lat, lng FROM circuits WHERE country = 'Spain'",
    "db_id": "formula_1",
    "table_description": "The circuits table contains information about different racing circuits including their locations and coordinates.",
    "config": {
      "dimension": [
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Spain"
        }
      ]
    },
    "table_name": "circuits",
    "id": 591
  },
  {
    "question": "How many British drivers were born in or after 1985?",
    "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) >= '1985'",
    "db_id": "formula_1",
    "table_description": "This table contains information about Formula 1 drivers.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "British"
        },
        {
          "column": "dob",
          "match_type": "绝对时间",
          "condition": "1985-01-01"
        }
      ]
    },
    "table_name": "drivers",
    "id": 592
  },
  {
    "question": "List out the code for drivers who have nationality related to Europe.",
    "SQL": "SELECT code FROM drivers WHERE Nationality LIKE '%European%' OR Nationality IN ('British', 'German', 'Spanish', 'Finnish')",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "模糊匹配",
          "condition": "%European%"
        }
      ]
    },
    "table_name": "drivers",
    "id": 593
  },
  {
    "question": "List out the Id number of races which were held in the first half of 2009.",
    "SQL": "SELECT raceId FROM races WHERE year = 2009 AND date <= '2009-06-30'",
    "db_id": "formula_1",
    "table_description": "The races table contains information about Formula 1 races, including the race ID, year, round, circuit ID, name, date, time, and URL.",
    "config": {
      "dimension": [
        {
          "column": "raceId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2009"
        },
        {
          "column": "date",
          "match_type": "小于等于",
          "condition": "2009-06-30"
        }
      ]
    },
    "table_name": "races",
    "id": 594
  },
  {
    "question": "How many drivers participated in the race with race ID number 20?",
    "SQL": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 20",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "raceId",
          "match_type": "等于",
          "condition": "20"
        }
      ]
    },
    "table_name": "driverStandings",
    "id": 595
  },
  {
    "question": "What is the reference name of Robert Kubica?",
    "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname LIKE '%Kubica%'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "forename",
          "match_type": "精确匹配",
          "condition": "Robert"
        },
        {
          "column": "surname",
          "match_type": "模糊匹配",
          "condition": "%Kubica%"
        }
      ]
    },
    "table_name": "drivers",
    "id": 596
  },
  {
    "question": "How many British drivers who were born in 1985?",
    "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1985'",
    "db_id": "formula_1",
    "table_description": "Drivers information including their ID, reference name, number, code, forename, surname, date of birth, nationality, and URL.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "British"
        },
        {
          "column": "dob",
          "match_type": "精确匹配",
          "condition": "1985"
        }
      ]
    },
    "table_name": "drivers",
    "id": 597
  },
  {
    "question": "Please state the reference name of the oldest German driver.",
    "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' AND driverRef = 'heidfeld' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "driverRef"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "German"
        },
        {
          "column": "driverRef",
          "match_type": "精确匹配",
          "condition": "heidfeld"
        }
      ]
    },
    "table_name": "drivers",
    "id": 598
  },
  {
    "question": "List the driver's ID of the top five drivers, by descending order, the fastest time during the second lap of the race.",
    "SQL": "SELECT driverId FROM lapTimes WHERE lap = 2 ORDER BY time LIMIT 5",
    "db_id": "formula_1",
    "table_description": "Lap times for each driver in each race, including race ID, driver ID, lap number, position, time, and milliseconds.",
    "config": {
      "dimension": [
        {
          "column": "driverId"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "lap",
          "match_type": "等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "lapTimes",
    "id": 599
  },
  {
    "question": "From race no. 60 to 110, how many finishers have been disqualified?",
    "SQL": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 110 AND raceId > 60",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "IIF(time IS NOT NULL, 1, 0)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "statusId",
          "match_type": "等于",
          "condition": "2"
        },
        {
          "column": "raceID",
          "match_type": "在区间",
          "condition": [
            60,
            110
          ]
        }
      ]
    },
    "table_name": "results",
    "id": 600
  },
  {
    "question": "How many times the circuits were held in Spain? Please give their location and coordinates.",
    "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Spain'",
    "db_id": "formula_1",
    "table_description": "The circuits table contains information about different racing circuits including their locations and coordinates.",
    "config": {
      "dimension": [
        {
          "column": "location"
        },
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Spain"
        }
      ]
    },
    "table_name": "circuits",
    "id": 601
  },
  {
    "question": "What race number has the most finishers in race 18?",
    "SQL": "SELECT raceId FROM results WHERE raceId = 18 GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
    "db_id": "formula_1",
    "table_description": "The results table contains detailed information about the results of each race, including the race ID, driver ID, constructor ID, starting grid position, finishing position, and time taken.",
    "config": {
      "dimension": [
        {
          "column": "raceId"
        }
      ],
      "measure": [
        {
          "column": "time IS NOT NULL",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "raceId",
          "match_type": "等于",
          "condition": "18"
        }
      ]
    },
    "table_name": "results",
    "id": 602
  },
  {
    "question": "What is the full name and date of birth of German drivers born between 1981 and 1991?",
    "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "forename"
        },
        {
          "column": "surname"
        },
        {
          "column": "dob"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "German"
        },
        {
          "column": "dob",
          "match_type": "在区间",
          "condition": [
            "1981-01-01",
            "1991-12-31"
          ]
        }
      ]
    },
    "table_name": "drivers",
    "id": 603
  },
  {
    "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1977 and 1985. List it in descending order of date of birth.",
    "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1977' AND '1985' ORDER BY dob DESC",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "forename"
        },
        {
          "column": "surname"
        },
        {
          "column": "url"
        },
        {
          "column": "dob"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "German"
        },
        {
          "column": "dob",
          "match_type": "在区间",
          "condition": [
            "1977-01-01",
            "1985-12-31"
          ]
        }
      ]
    },
    "table_name": "drivers",
    "id": 604
  },
  {
    "question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "SQL": "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "db_id": "formula_1",
    "table_description": "The circuits table contains information about different racing circuits including their names, locations, countries, and coordinates.",
    "config": {
      "dimension": [
        {
          "column": "location"
        },
        {
          "column": "country"
        },
        {
          "column": "lat"
        },
        {
          "column": "lng"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Hungaroring"
        }
      ]
    },
    "table_name": "circuits",
    "id": 605
  },
  {
    "question": "What is the annual average number of races held during the last 10 years of the 20th century?",
    "SQL": "SELECT CAST(SUM(CASE WHEN year BETWEEN 1991 AND 2000 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '1991-01-01' AND '2000-12-31'",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN year BETWEEN 1991 AND 2000 THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": [
            "1991-01-01",
            "2000-12-31"
          ]
        }
      ]
    },
    "table_name": "races",
    "id": 606
  },
  {
    "question": "Which citizenship do the vast majority of the drivers hold, excluding German drivers?",
    "SQL": "SELECT nationality FROM drivers WHERE nationality != 'German' GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [
        {
          "column": "nationality"
        }
      ],
      "measure": [
        {
          "column": "driverId",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "不等于",
          "condition": "German"
        }
      ]
    },
    "table_name": "drivers",
    "id": 607
  },
  {
    "question": "In terms of number of points acquired, how many victories did the driver who ranked 5th acquire?",
    "SQL": "SELECT SUM(CASE WHEN position = 5 THEN wins ELSE 0 END) FROM driverStandings",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "wins",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "position",
          "match_type": "等于",
          "condition": "5"
        }
      ]
    },
    "table_name": "driverStandings",
    "id": 608
  },
  {
    "question": "What was the longest time a driver had ever spent at a pit stop in race 841?",
    "SQL": "SELECT duration FROM pitStops WHERE raceId = 841 ORDER BY duration DESC LIMIT 1",
    "db_id": "formula_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "duration",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "raceId",
          "match_type": "等于",
          "condition": "841"
        }
      ]
    },
    "table_name": "pitStops",
    "id": 609
  },
  {
    "question": "Which player has the highest overall rating in the last year? Indicate the player's api id.",
    "SQL": "SELECT player_api_id FROM Player_Attributes WHERE date >= '2015-02-18' ORDER BY overall_rating DESC LIMIT 1",
    "db_id": "european_football_2",
    "table_description": "Player attributes including various performance metrics over time.",
    "config": {
      "dimension": [
        {
          "column": "player_api_id"
        }
      ],
      "measure": [
        {
          "column": "overall_rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": "['2015-02-18', null]"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 610
  },
  {
    "question": "What is the height of the tallest player with a height greater than 180 cm? Indicate his name.",
    "SQL": "SELECT player_name FROM Player WHERE height > 180 ORDER BY height DESC LIMIT 1",
    "db_id": "european_football_2",
    "table_description": "Player table contains information about players including their names and heights.",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [
        {
          "column": "height",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "height",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "table_name": "Player",
    "id": 611
  },
  {
    "question": "What is the preferred foot when attacking of the player with the lowest potential greater than 60?",
    "SQL": "SELECT preferred_foot FROM Player_Attributes WHERE potential > 60 ORDER BY potential ASC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "preferred_foot"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "potential",
          "match_type": "大于",
          "condition": "60"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 612
  },
  {
    "question": "Among the players with an overall rating between 60 to 65, how many players have a high attacking work rate instead of focusing on defense?",
    "SQL": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND attacking_work_rate = 'high'",
    "db_id": "european_football_2",
    "table_description": "Player attributes including ratings, work rates, and skills.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "overall_rating",
          "match_type": "在区间",
          "condition": [
            60,
            65
          ]
        },
        {
          "column": "attacking_work_rate",
          "match_type": "精确匹配",
          "condition": "high"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 613
  },
  {
    "question": "Who are the top 5 players who perform better in crossing actions with an overall rating greater than 65? Indicate their player id.",
    "SQL": "SELECT id FROM Player_Attributes WHERE overall_rating > 65 ORDER BY crossing DESC LIMIT 5",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [
        {
          "column": "crossing",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "overall_rating",
          "match_type": "大于",
          "condition": "65"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 614
  },
  {
    "question": "What is the average height of players born between 1991 and 1993?",
    "SQL": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1991' AND '1993'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "height",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "birthday",
          "match_type": "在区间",
          "condition": [
            "1991-01-01",
            "1993-12-31"
          ]
        }
      ]
    },
    "table_name": "Player",
    "id": 615
  },
  {
    "question": "List the players' api id who had the highest above average overall ratings in 2015.",
    "SQL": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2015' ORDER BY overall_rating DESC LIMIT 1",
    "db_id": "european_football_2",
    "table_description": "Player attributes data including player API ID, date, overall rating, and various skills.",
    "config": {
      "dimension": [
        {
          "column": "player_api_id"
        }
      ],
      "measure": [
        {
          "column": "overall_rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "date",
          "match_type": "精确匹配",
          "condition": "2015"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 616
  },
  {
    "question": "Give the team_fifa_api_id of teams with build-up play speed between 45 and 55.",
    "SQL": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 45 AND 55",
    "db_id": "european_football_2",
    "table_description": "Table containing attributes for each team in European football, including build-up play speed.",
    "config": {
      "dimension": [
        {
          "column": "team_fifa_api_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "buildUpPlaySpeed",
          "match_type": "在区间",
          "condition": "(45, 55)"
        }
      ]
    },
    "table_name": "Team_Attributes",
    "id": 617
  },
  {
    "question": "What is the short name of the football team Queens Park Rangers?",
    "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "team_long_name",
          "match_type": "精确匹配",
          "condition": "Queens Park Rangers"
        }
      ]
    },
    "table_name": "Team",
    "id": 618
  },
  {
    "question": "List the football players with a birthyear of 1989 and a birthmonth of December.",
    "SQL": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1989-12'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birthday",
          "match_type": "绝对时间",
          "condition": [
            "1989-12-01",
            "1989-12-31"
          ]
        }
      ]
    },
    "table_name": "Player",
    "id": 619
  },
  {
    "question": "Please list player names which are higher than 170.",
    "SQL": "SELECT player_name FROM Player WHERE height > 170",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height",
          "match_type": "大于",
          "condition": "170"
        }
      ]
    },
    "table_name": "Player",
    "id": 620
  },
  {
    "question": "How many players were born in the year 1991 or later?",
    "SQL": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) >= '1991'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "birthday",
          "match_type": "大于等于",
          "condition": "1991-01-01"
        }
      ]
    },
    "table_name": "Player",
    "id": 621
  },
  {
    "question": "How many players whose first names are Aaron and weigh more than 150?",
    "SQL": "SELECT COUNT(id) FROM Player WHERE weight > 150 AND player_name LIKE 'Aaron%'",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "150"
        },
        {
          "column": "player_name",
          "match_type": "模糊匹配",
          "condition": "Aaron%"
        }
      ]
    },
    "table_name": "Player",
    "id": 622
  },
  {
    "question": "Which football player is the shortest among those with a height of 170.18 cm?",
    "SQL": "SELECT player_name FROM player WHERE height = 170.18 ORDER BY height ASC LIMIT 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height",
          "match_type": "等于",
          "condition": "170.18"
        }
      ]
    },
    "table_name": "player",
    "id": 623
  },
  {
    "question": "What's the long name for the team KSV Cercle Brugge?",
    "SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'CEB'",
    "db_id": "european_football_2",
    "table_description": "Table containing team information including long and short names.",
    "config": {
      "dimension": [
        {
          "column": "team_long_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "team_short_name",
          "match_type": "精确匹配",
          "condition": "CEB"
        }
      ]
    },
    "table_name": "Team",
    "id": 624
  },
  {
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "SQL": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "player_name",
          "match_type": "精确匹配",
          "condition": "Aaron Lennon"
        },
        {
          "column": "player_name",
          "match_type": "精确匹配",
          "condition": "Aaron Hughes"
        }
      ]
    },
    "table_name": "Player",
    "id": 625
  },
  {
    "question": "Which player is taller than 180 cm?",
    "SQL": "SELECT player_name FROM Player WHERE height > 180",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "table_name": "Player",
    "id": 626
  },
  {
    "question": "Among the players whose preferred foot was the right foot when attacking, how many of them would remain in his position when the team attacked?",
    "SQL": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'right' AND attacking_work_rate = 'low'",
    "db_id": "european_football_2",
    "table_description": "Player attributes including their preferred foot and attacking work rate.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "player_api_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "preferred_foot",
          "match_type": "精确匹配",
          "condition": "right"
        },
        {
          "column": "attacking_work_rate",
          "match_type": "精确匹配",
          "condition": "low"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 627
  },
  {
    "question": "List down the names of players who are not the tallest.",
    "SQL": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank > 1",
    "db_id": "european_football_2",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rank",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Player",
    "id": 628
  },
  {
    "question": "List down the name of players who are 30 years old and above.",
    "SQL": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 30",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birthday",
          "match_type": "大于等于",
          "condition": "30"
        }
      ]
    },
    "table_name": "Player",
    "id": 629
  },
  {
    "question": "Please provide the names of top three football players who are exactly 182.88 cm tall in alphabetical order.",
    "SQL": "SELECT player_name FROM Player WHERE height = 182.88 ORDER BY player_name LIMIT 3",
    "db_id": "european_football_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "player_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "height",
          "match_type": "等于",
          "condition": "182.88"
        }
      ]
    },
    "table_name": "Player",
    "id": 630
  },
  {
    "question": "How many football players with the first name 'Aaron' were born in the 1990s?",
    "SQL": "SELECT COUNT(id) FROM Player WHERE birthday >= '1990-01-01' AND birthday < '2000-01-01' AND player_name LIKE 'Aaron%'",
    "db_id": "european_football_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "birthday",
          "match_type": "在区间",
          "condition": [
            "1990-01-01",
            "2000-01-01"
          ]
        },
        {
          "column": "player_name",
          "match_type": "模糊匹配",
          "condition": "Aaron%"
        }
      ]
    },
    "table_name": "Player",
    "id": 631
  },
  {
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "SQL": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
    "db_id": "european_football_2",
    "table_description": "Player_Attributes AS t1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "jumping",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "id",
          "match_type": "等于",
          "condition": "6"
        },
        {
          "column": "id",
          "match_type": "等于",
          "condition": "5"
        }
      ]
    },
    "table_name": "Player_Attributes AS t1",
    "id": 632
  },
  {
    "question": "Please provide the top five football players' IDs who are among the lowest potential players and have an overall rating of 61 or less, preferring to use the right foot when attacking.",
    "SQL": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' AND overall_rating <= 61 ORDER BY potential ASC LIMIT 5",
    "db_id": "european_football_2",
    "table_description": "Player_Attributes",
    "config": {
      "dimension": [
        {
          "column": "id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "preferred_foot",
          "match_type": "精确匹配",
          "condition": "right"
        },
        {
          "column": "overall_rating",
          "match_type": "小于等于",
          "condition": "61"
        }
      ]
    },
    "table_name": "Player_Attributes",
    "id": 633
  },
  {
    "question": "How many players had the highest potential score for crossing that preferred to use their right foots while attacking?",
    "SQL": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'right' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
    "db_id": "european_football_2",
    "table_description": "Player_Attributes AS t1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "t1.id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "t1.preferred_foot",
          "match_type": "精确匹配",
          "condition": "right"
        },
        {
          "column": "t1.crossing",
          "match_type": "等于",
          "condition": "( SELECT MAX(crossing) FROM Player_Attributes)"
        }
      ]
    },
    "table_name": "Player_Attributes AS t1",
    "id": 634
  },
  {
    "question": "Are there more in-patient or outpatient who were female? What is the deviation in percentage?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'F'",
    "db_id": "thrombosis_prediction",
    "table_description": "Patient table contains information about patients including their sex, birthday, first visit date, admission status, and diagnosis.",
    "config": {
      "dimension": [
        {
          "column": "Admission"
        }
      ],
      "measure": [
        {
          "column": "CASE WHEN Admission = '+' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        },
        {
          "column": "CASE WHEN Admission = '-' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "等于",
          "condition": "F"
        }
      ]
    },
    "table_name": "Patient",
    "id": 635
  },
  {
    "question": "What is the percentage of female patients who were born in the last 80 years?",
    "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1943' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
    "db_id": "thrombosis_prediction",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN STRFTIME('%Y', Birthday) > '1943' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        },
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "等于",
          "condition": "F"
        },
        {
          "column": "Birthday",
          "match_type": "大于",
          "condition": "1943-01-01"
        }
      ]
    },
    "table_name": "Patient",
    "id": 636
  },
  {
    "question": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'",
    "db_id": "thrombosis_prediction",
    "table_description": "Table containing patient information including ID, sex, birthday, description, first date, admission status, and diagnosis.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Admission",
          "aggregate_function": "CUSTOM"
        }
      ],
      "filter": [
        {
          "column": "Birthday",
          "match_type": "在区间",
          "condition": [
            "1930-01-01",
            "1940-12-31"
          ]
        }
      ]
    },
    "table_name": "Patient",
    "id": 637
  },
  {
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'RA, SLE susp' diagnosed patients?",
    "SQL": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'RA, SLE susp'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Admission",
          "aggregate_function": "SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END)"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "RA, SLE susp"
        }
      ]
    },
    "table_name": "Patient",
    "id": 638
  },
  {
    "question": "How many female patients who came at the hospital in 1996 was immediately followed at the outpatient clinic?",
    "SQL": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1996' AND SEX = 'F' AND Admission = '-'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Description",
          "match_type": "绝对时间",
          "condition": "1996-01-01 至 1996-12-31"
        },
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        },
        {
          "column": "Admission",
          "match_type": "精确匹配",
          "condition": "-"
        }
      ]
    },
    "table_name": "Patient",
    "id": 639
  },
  {
    "question": "What was the age of the youngest patient when they initially arrived at the hospital during 1993?",
    "SQL": "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient WHERE `First Date` BETWEEN '1993-01-01' AND '1993-12-31'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "First Date",
          "match_type": "绝对时间",
          "condition": [
            "1993-01-01",
            "1993-12-31"
          ]
        }
      ]
    },
    "table_name": "Patient",
    "id": 640
  },
  {
    "question": "What was the anti-nucleus antibody concentration level for the patient id 48473 on 1992/12/21?",
    "SQL": "SELECT ANA FROM Examination WHERE ID = 48473 AND `Examination Date` = '1992-12-21'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ANA",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "48473"
        },
        {
          "column": "Examination Date",
          "match_type": "绝对时间",
          "condition": [
            "1992-12-21",
            "1992-12-21"
          ]
        }
      ]
    },
    "table_name": "Examination",
    "id": 641
  },
  {
    "question": "Was the total cholesterol status for the patient id 27654 on 1991-9-11 at the normal level?",
    "SQL": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 27654 AND Date = '1991-09-11'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Date"
        }
      ],
      "measure": [
        {
          "column": "`T-CHO`",
          "aggregate_function": "CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END"
        }
      ],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "27654"
        },
        {
          "column": "Date",
          "match_type": "等于",
          "condition": "1991-09-11"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 642
  },
  {
    "question": "What was the gender of the first AORTITIS diagnosed patient after 1990?",
    "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` > '1990-01-01' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "db_id": "thrombosis_prediction",
    "table_description": "Patient table contains patient information including their sex, birthday, first diagnosis date, admission status, and diagnosis.",
    "config": {
      "dimension": [
        {
          "column": "SEX"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "AORTITIS"
        },
        {
          "column": "`First Date`",
          "match_type": "大于",
          "condition": "1990-01-01"
        },
        {
          "column": "`First Date`",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "Patient",
    "id": 643
  },
  {
    "question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams in the year 1998.",
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1998-01-01' AND '1998-12-31' AND Diagnosis = 'Behcet'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "`Examination Date`",
          "match_type": "绝对时间",
          "condition": [
            "1998-01-01",
            "1998-12-31"
          ]
        },
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "Behcet"
        }
      ]
    },
    "table_name": "Examination",
    "id": 644
  },
  {
    "question": "How many patients who were examined between 1991/9/10 and 1991/9/25 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "SQL": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1991-09-10' AND '1991-09-25' AND GPT > 30 AND ALB < 4",
    "db_id": "thrombosis_prediction",
    "table_description": "Laboratory table contains various laboratory test results for patients.",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "1991-09-10",
            "1991-09-25"
          ]
        },
        {
          "column": "GPT",
          "match_type": "大于",
          "condition": "30"
        },
        {
          "column": "ALB",
          "match_type": "小于",
          "condition": "4"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 645
  },
  {
    "question": "How many female patients born after 1960 were admitted to the hospital? List them by ID.",
    "SQL": "SELECT ID FROM Patient WHERE Birthday > '1960-01-01' AND SEX = 'F' AND Admission = '+'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Birthday",
          "match_type": "大于",
          "condition": "1960-01-01"
        },
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        },
        {
          "column": "Admission",
          "match_type": "精确匹配",
          "condition": "+"
        }
      ]
    },
    "table_name": "Patient",
    "id": 646
  },
  {
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolipin in antibody (IgM) 25% higher than average?",
    "SQL": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.25 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Thrombosis",
          "match_type": "等于",
          "condition": "2"
        },
        {
          "column": "`ANA Pattern`",
          "match_type": "精确匹配",
          "condition": "S"
        },
        {
          "column": "`aCL IgM`",
          "match_type": "大于",
          "condition": "(SELECT AVG(`aCL IgM`) * 1.25 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')"
        }
      ]
    },
    "table_name": "Examination",
    "id": 647
  },
  {
    "question": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below 4.5 mg/dL?",
    "SQL": "SELECT CAST(SUM(CASE WHEN UA < 4.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30",
    "db_id": "thrombosis_prediction",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "UA",
          "aggregate_function": "SUM"
        },
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "UA",
          "match_type": "小于",
          "condition": "4.5"
        },
        {
          "column": "U-PRO",
          "match_type": "在区间",
          "condition": [
            "0",
            "30"
          ]
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 648
  },
  {
    "question": "What percentage of male patients who first presented to the hospital between 1980 and 1982 were diagnosed with BEHCET?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE `First Date` BETWEEN '1980-01-01' AND '1982-12-31' AND SEX = 'M'",
    "db_id": "thrombosis_prediction",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Diagnosis",
          "aggregate_function": "SUM"
        },
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "BEHCET"
        },
        {
          "column": "First Date",
          "match_type": "绝对时间",
          "condition": [
            "1980-01-01",
            "1982-12-31"
          ]
        },
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "M"
        }
      ]
    },
    "table_name": "Patient",
    "id": 649
  },
  {
    "question": "What is the most common sign of patients with SLE or SLE-related diseases?",
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis LIKE '%SLE%' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "db_id": "thrombosis_prediction",
    "table_description": "The Examination table contains patient examination records including various test results and diagnoses.",
    "config": {
      "dimension": [
        {
          "column": "Symptoms"
        }
      ],
      "measure": [
        {
          "column": "Symptoms",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "模糊匹配",
          "condition": "%SLE%"
        }
      ]
    },
    "table_name": "Examination",
    "id": 650
  },
  {
    "question": "When was the medical information on patient number 11408 first documented, and what disease did she have?",
    "SQL": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 11408",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Diagnosis"
        }
      ],
      "measure": [
        {
          "column": "First Date",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "11408"
        }
      ]
    },
    "table_name": "Patient",
    "id": 651
  },
  {
    "question": "How many female patients were given a diagnosis involving the term 'SLE'?",
    "SQL": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis LIKE '%SLE%'",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SEX",
          "match_type": "精确匹配",
          "condition": "F"
        },
        {
          "column": "Diagnosis",
          "match_type": "模糊匹配",
          "condition": "SLE"
        }
      ]
    },
    "table_name": "Patient",
    "id": 652
  },
  {
    "question": "How many patients who underwent testing in 1997 had albumin (ALB) levels outside the normal range of 3.0 to 5.5?",
    "SQL": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB < 3.0 OR ALB > 5.5) AND STRFTIME('%Y', Date) = '1997'",
    "db_id": "thrombosis_prediction",
    "table_description": "Laboratory data for patient tests including various biochemical markers.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ALB",
          "match_type": "在区间",
          "condition": [
            "3.0",
            "5.5"
          ]
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "1997-01-01",
            "1997-12-31"
          ]
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 653
  },
  {
    "question": "What proportion of patients who had signs of AMI had SLE diagnosed?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'AMI'",
    "db_id": "thrombosis_prediction",
    "table_description": "Examination table contains patient examination details including symptoms and diagnosis.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Diagnosis",
          "aggregate_function": "SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) * 100 / COUNT(ID)"
        }
      ],
      "filter": [
        {
          "column": "Symptoms",
          "match_type": "精确匹配",
          "condition": "AMI"
        }
      ]
    },
    "table_name": "Examination",
    "id": 654
  },
  {
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "SQL": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1956'",
    "db_id": "thrombosis_prediction",
    "table_description": "Patient table contains information about patients including their sex, birthday, diagnosis, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CASE WHEN SEX = 'F' THEN 1 ELSE 0 END",
          "aggregate_function": "SUM"
        },
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Diagnosis",
          "match_type": "精确匹配",
          "condition": "RA"
        },
        {
          "column": "Birthday",
          "match_type": "精确匹配",
          "condition": "1956"
        }
      ]
    },
    "table_name": "Patient",
    "id": 655
  },
  {
    "question": "When is the laboratory examination of patient '27654' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.",
    "SQL": "SELECT Date FROM Laboratory WHERE ID = 27654 AND GOT >= 60",
    "db_id": "thrombosis_prediction",
    "table_description": "The Laboratory table contains various laboratory test results for patients including GOT (AST) levels.",
    "config": {
      "dimension": [
        {
          "column": "Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "ID",
          "match_type": "等于",
          "condition": "27654"
        },
        {
          "column": "GOT",
          "match_type": "大于等于",
          "condition": "60"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 656
  },
  {
    "question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) greater than 500.",
    "SQL": "SELECT AVG(LDH) FROM Laboratory WHERE LDH > 500",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LDH",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LDH",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 657
  },
  {
    "question": "What is the examination date of the patient whose albumin is the highest within the normal range of 3.4 to 5.5?",
    "SQL": "SELECT Date FROM Laboratory WHERE ALB >= 3.4 AND ALB <= 5.5 ORDER BY ALB DESC LIMIT 1",
    "db_id": "thrombosis_prediction",
    "config": {
      "dimension": [
        {
          "column": "Date"
        }
      ],
      "measure": [
        {
          "column": "ALB",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "ALB",
          "match_type": "在区间",
          "condition": [
            3.4,
            5.5
          ]
        }
      ]
    },
    "table_name": "Laboratory",
    "id": 658
  },
  {
    "question": "What is the most expensive item that was spent on posters for club events?",
    "SQL": "SELECT expense_description FROM expense WHERE expense_description LIKE '%Posters%' ORDER BY cost DESC LIMIT 1",
    "db_id": "student_club",
    "table_description": "expense table records the details of expenses incurred by the student club.",
    "config": {
      "dimension": [
        {
          "column": "expense_description"
        }
      ],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "模糊匹配",
          "condition": "Posters"
        }
      ]
    },
    "table_name": "expense",
    "id": 659
  },
  {
    "question": "Give the location for events related to elections.",
    "SQL": "SELECT location FROM event WHERE event_name LIKE '%Elections%'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "location"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "event_name",
          "match_type": "模糊匹配",
          "condition": "%Elections%"
        }
      ]
    },
    "table_name": "event",
    "id": 660
  },
  {
    "question": "What was the cost for the expenses related to 'Posters' on 2019/10/10?",
    "SQL": "SELECT cost FROM expense WHERE expense_description LIKE '%Posters%' AND expense_date = '2019-10-10'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "expense_description"
        },
        {
          "column": "expense_date"
        }
      ],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "模糊匹配",
          "condition": "Posters"
        },
        {
          "column": "expense_date",
          "match_type": "绝对时间",
          "condition": "2019-10-10"
        }
      ]
    },
    "table_name": "expense",
    "id": 661
  },
  {
    "question": "With the biggest budget for the \"Food\" where the event is 'Open', what was the remaining of it?",
    "SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND event_status = 'Open' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' AND event_status = 'Open' )",
    "db_id": "student_club",
    "table_description": "This table contains the budget details for various categories in a student club.",
    "config": {
      "dimension": [
        {
          "column": "category"
        }
      ],
      "measure": [
        {
          "column": "amount",
          "aggregate_function": "MAX"
        },
        {
          "column": "remaining",
          "aggregate_function": "none"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        },
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Open"
        }
      ]
    },
    "table_name": "budget",
    "id": 662
  },
  {
    "question": "What was the notes of the fundraising on 2019/10/17?",
    "SQL": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-10-17'",
    "db_id": "student_club",
    "table_description": "Table containing financial records of a student club, including date received, amount, source, notes, and link to member.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "notes",
          "aggregate_function": "none"
        }
      ],
      "filter": [
        {
          "column": "source",
          "match_type": "精确匹配",
          "condition": "Fundraising"
        },
        {
          "column": "date_received",
          "match_type": "绝对时间",
          "condition": "2019-10-17"
        }
      ]
    },
    "table_name": "income",
    "id": 663
  },
  {
    "question": "How many majors are there in the 'School of Business'?",
    "SQL": "SELECT COUNT(major_name) FROM major WHERE college = 'School of Business'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "major_name",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "college",
          "match_type": "精确匹配",
          "condition": "School of Business"
        }
      ]
    },
    "table_name": "major",
    "id": 664
  },
  {
    "question": "Tell the phone number of 'Luisa Guidi'.",
    "SQL": "SELECT phone FROM member WHERE first_name = 'Luisa' AND last_name = 'Guidi'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "phone"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Luisa"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Guidi"
        }
      ]
    },
    "table_name": "member",
    "id": 665
  },
  {
    "question": "What is the total cost of the pizzas for all the events?",
    "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description LIKE '%Pizza%'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "模糊匹配",
          "condition": "%Pizza%"
        }
      ]
    },
    "table_name": "expense",
    "id": 666
  },
  {
    "question": "List all of the School of Business' departments.",
    "SQL": "SELECT department FROM major WHERE college = 'School of Business'",
    "db_id": "student_club",
    "table_name": "major",
    "id": 668,
    "config": {
      "dimension": [
        {
          "column": "department"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "college",
          "match_type": "精确匹配",
          "condition": "School of Business"
        }
      ]
    },
    "table_description": "This table contains information about majors, including their departments and colleges."
  },
  {
    "question": "How many students have the position of Member?",
    "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'Member'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "member_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "position",
          "match_type": "精确匹配",
          "condition": "Member"
        }
      ]
    },
    "table_name": "member",
    "id": 669
  },
  {
    "question": "What is the highest amount of budget spend for an event that has been closed?",
    "SQL": "SELECT MAX(spent) FROM budget WHERE event_status = 'Closed'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "spent",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Closed"
        }
      ]
    },
    "table_name": "budget",
    "id": 670
  },
  {
    "question": "How many meeting events were held in the first quarter of 2020?",
    "SQL": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND event_date BETWEEN '2020-01-01' AND '2020-03-31'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "event_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Meeting"
        },
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2020-01-01",
            "2020-03-31"
          ]
        }
      ]
    },
    "table_name": "event",
    "id": 671
  },
  {
    "question": "What is the total amount of money spent for food, including events that are closed?",
    "SQL": "SELECT SUM(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "spent",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        },
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Closed"
        }
      ]
    },
    "table_name": "budget",
    "id": 672
  },
  {
    "question": "What is the ratio between students majored in finance and students majored in fisheries and aquatic sciences?",
    "SQL": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Fisheries and Aquatic Sciences' THEN 1 ELSE 0 END) AS ratio FROM major",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "major_name",
          "aggregate_function": "SUM"
        },
        {
          "column": "major_name",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "major_name",
          "match_type": "精确匹配",
          "condition": "Finance"
        },
        {
          "column": "major_name",
          "match_type": "精确匹配",
          "condition": "Fisheries and Aquatic Sciences"
        }
      ]
    },
    "table_name": "major",
    "id": 673
  },
  {
    "question": "Provide the full name and email address of the Student_Club's Treasurer.",
    "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Treasurer'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "position",
          "match_type": "精确匹配",
          "condition": "Treasurer"
        }
      ]
    },
    "table_name": "member",
    "id": 674
  },
  {
    "question": "On average, how much did the Student_Club spend on food for the typical event that has been completed in the past?",
    "SQL": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Completed'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "spent",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        },
        {
          "column": "event_status",
          "match_type": "精确匹配",
          "condition": "Completed"
        }
      ]
    },
    "table_name": "budget",
    "id": 675
  },
  {
    "question": "Among all events held by the Student_Club in 2019, find the percentage share of events related to 'Community Service'",
    "SQL": "SELECT CAST(SUM(CASE WHEN type LIKE '%Community Service%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "type",
          "aggregate_function": "SUM(CASE WHEN type LIKE '%Community Service%' THEN 1 ELSE 0 END) * 100 / COUNT(type)"
        }
      ],
      "filter": [
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2019-01-01",
            "2019-12-31"
          ]
        },
        {
          "column": "type",
          "match_type": "模糊匹配",
          "condition": "%Community Service%"
        }
      ]
    },
    "table_name": "event",
    "id": 676
  },
  {
    "question": "What is the most popular size of t-shirt ordered by active club members?",
    "SQL": "SELECT t_shirt_size FROM member WHERE position = 'Member' GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "t_shirt_size"
        }
      ],
      "measure": [
        {
          "column": "t_shirt_size",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "position",
          "match_type": "精确匹配",
          "condition": "Member"
        }
      ]
    },
    "table_name": "member",
    "id": 677
  },
  {
    "question": "Among the budgets for Food, which one has the highest budgeted amount?",
    "SQL": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "budget_id"
        }
      ],
      "measure": [
        {
          "column": "amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Food"
        }
      ]
    },
    "table_name": "budget",
    "id": 678
  },
  {
    "question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?",
    "SQL": "SELECT budget_id FROM budget WHERE category = 'Advertisement' AND amount > 0 ORDER BY amount DESC LIMIT 3",
    "db_id": "student_club",
    "table_description": "预算表，记录了俱乐部各项活动的预算信息",
    "config": {
      "dimension": [
        {
          "column": "budget_id"
        }
      ],
      "measure": [
        {
          "column": "amount",
          "aggregate_function": "DESC"
        }
      ],
      "filter": [
        {
          "column": "category",
          "match_type": "精确匹配",
          "condition": "Advertisement"
        },
        {
          "column": "amount",
          "match_type": "大于",
          "condition": "0"
        }
      ]
    },
    "table_name": "budget",
    "id": 679
  },
  {
    "question": "Calculate the total cost spent for Parking or Posters in the list.",
    "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description IN ('Parking', 'Posters')",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_description",
          "match_type": "模糊匹配",
          "condition": "Parking, Posters"
        }
      ]
    },
    "table_name": "expense",
    "id": 680
  },
  {
    "question": "Mention the total expense used on 10/08/2019.",
    "SQL": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-10-08'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "expense_date",
          "match_type": "绝对时间",
          "condition": "2019-10-08"
        }
      ]
    },
    "table_name": "expense",
    "id": 681
  },
  {
    "question": "How many income are received with an amount greater than 50?",
    "SQL": "SELECT COUNT(income_id) FROM income WHERE amount > 50",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "income_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "amount",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "table_name": "income",
    "id": 682
  },
  {
    "question": "Among the members, how many of them have a medium t-shirt size?",
    "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'Medium'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "member_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "position",
          "match_type": "精确匹配",
          "condition": "Member"
        },
        {
          "column": "t_shirt_size",
          "match_type": "精确匹配",
          "condition": "Medium"
        }
      ]
    },
    "table_name": "member",
    "id": 683
  },
  {
    "question": "In the College of Agriculture and Applied Sciences, how many majors are related to the department of School of Applied Sciences, Technology and Education?",
    "SQL": "SELECT COUNT(major_id) FROM major WHERE department LIKE '%School of Applied Sciences, Technology and Education%' AND college = 'College of Agriculture and Applied Sciences'",
    "db_id": "student_club",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "major_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "department",
          "match_type": "模糊匹配",
          "condition": "%School of Applied Sciences, Technology and Education%"
        },
        {
          "column": "college",
          "match_type": "精确匹配",
          "condition": "College of Agriculture and Applied Sciences"
        }
      ]
    },
    "table_name": "major",
    "id": 684
  },
  {
    "question": "Which counties have zip codes with standard type?",
    "SQL": "SELECT DISTINCT county FROM zip_code WHERE type = 'Standard' AND county IS NOT NULL",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "county"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Standard"
        },
        {
          "column": "county",
          "match_type": "不为空",
          "condition": null
        }
      ]
    },
    "table_name": "zip_code",
    "id": 685
  },
  {
    "question": "What are the zip codes that have standard post office addresses in the country of San Juan Municipio whose state is Puerto Rico?",
    "SQL": "SELECT zip_code FROM zip_code WHERE type = 'Standard' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "zip_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Standard"
        },
        {
          "column": "county",
          "match_type": "精确匹配",
          "condition": "San Juan Municipio"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Puerto Rico"
        }
      ]
    },
    "table_name": "zip_code",
    "id": 686
  },
  {
    "question": "List the names of closed events as 'game' that were held in the Campus Soccer/Lacrosse stadium.",
    "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND location = 'Campus Soccer/Lacrosse stadium' AND status = 'Closed'",
    "db_id": "student_club",
    "table_description": "Table containing information about student club events.",
    "config": {
      "dimension": [
        {
          "column": "event_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "type",
          "match_type": "精确匹配",
          "condition": "Game"
        },
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "Campus Soccer/Lacrosse stadium"
        },
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "Closed"
        }
      ]
    },
    "table_name": "event",
    "id": 687
  },
  {
    "question": "What is the percentage of the events that have not yet been closed?",
    "SQL": "SELECT CAST(SUM(CASE WHEN event_status = 'Open' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "event_status",
          "aggregate_function": "SUM"
        },
        {
          "column": "budget_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "event_status",
          "match_type": "等于",
          "condition": "Open"
        }
      ]
    },
    "table_name": "budget",
    "id": 688
  },
  {
    "question": "Give the event ID, location, and status of events conducted from February 2019 to May 2019.",
    "SQL": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-02-01' AND '2019-05-31'",
    "db_id": "student_club",
    "config": {
      "dimension": [
        {
          "column": "event_id"
        },
        {
          "column": "location"
        },
        {
          "column": "status"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "event_date",
          "match_type": "绝对时间",
          "condition": [
            "2019-02-01",
            "2019-05-31"
          ]
        }
      ]
    },
    "table_name": "event",
    "id": 689
  },
  {
    "question": "List the expenses that spend more than sixty dollars on average.",
    "SQL": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 60",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "expense_description"
        }
      ],
      "measure": [
        {
          "column": "cost",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "cost",
          "match_type": "大于",
          "condition": "60"
        }
      ]
    },
    "table_name": "expense",
    "id": 690
  },
  {
    "question": "Find the full name of members whose t-shirt size is medium.",
    "SQL": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'Medium'",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "t_shirt_size",
          "match_type": "精确匹配",
          "condition": "Medium"
        }
      ]
    },
    "table_name": "member",
    "id": 691
  },
  {
    "question": "Calculate the percentage of zip codes that are not PO boxes.",
    "SQL": "SELECT CAST(SUM(CASE WHEN type != 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
    "db_id": "student_club",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "zip_code",
          "aggregate_function": "COUNT"
        },
        {
          "column": "type",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "type",
          "match_type": "不等于",
          "condition": "PO Box"
        }
      ]
    },
    "table_name": "zip_code",
    "id": 692
  },
  {
    "question": "How many gas stations in CZE have segments other than Value for money?",
    "SQL": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment != 'Value for money'",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GasStationID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "Segment",
          "match_type": "不等于",
          "condition": "Value for money"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 693
  },
  {
    "question": "What is the ratio of customers who pay in EUR against customers who pay in USD?",
    "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'USD', 1, 0)) AS ratio FROM customers",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Currency",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Currency",
          "match_type": "精确匹配",
          "condition": "EUR"
        },
        {
          "column": "Currency",
          "match_type": "精确匹配",
          "condition": "USD"
        }
      ]
    },
    "table_name": "customers",
    "id": 694
  },
  {
    "question": "How much did customer 6 consume in total during the period of September to December 2012?",
    "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201209' AND '201212'",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Consumption",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "CustomerID",
          "match_type": "等于",
          "condition": "6"
        },
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2012-09-01",
            "2012-12-31"
          ]
        }
      ]
    },
    "table_name": "yearmonth",
    "id": 695
  },
  {
    "question": "How many more \"value for money\" gas stations does the Czech Republic have compared to Slovakia?",
    "SQL": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Value for money'",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Country",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Value for money"
        },
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "SVK"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 696
  },
  {
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "SQL": "SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) FROM customers WHERE Segment = 'SME'",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "SME"
        }
      ]
    },
    "table_name": "customers",
    "id": 697
  },
  {
    "question": "What percentage of LAM customers pay in euros?",
    "SQL": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'LAM'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CustomerID",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Currency",
          "aggregate_function": "SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END)"
        }
      ],
      "filter": [
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "LAM"
        }
      ]
    },
    "table_name": "customers",
    "id": 698
  },
  {
    "question": "In February 2012, what percentage of customers consumed more than 1000?",
    "SQL": "SELECT CAST(SUM(IIF(Consumption > 1000, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "CustomerID",
          "aggregate_function": "COUNT"
        },
        {
          "column": "IIF(Consumption > 1000, 1, 0)",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "精确匹配",
          "condition": "201202"
        },
        {
          "column": "Consumption",
          "match_type": "大于",
          "condition": 1000
        }
      ]
    },
    "table_name": "yearmonth",
    "id": 699
  },
  {
    "question": "What percentage of Czech gas stations are premium?",
    "SQL": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE'",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Segment",
          "aggregate_function": "SUM"
        },
        {
          "column": "GasStationID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Premium"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 700
  },
  {
    "question": "What is the highest monthly consumption in the first half of the year 2012?",
    "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' AND SUBSTR(Date, 5, 2) <= '06' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
    "db_id": "debit_card_specializing",
    "table_description": "This table contains monthly consumption data for customers.",
    "config": {
      "dimension": [
        {
          "column": "SUBSTR(Date, 5, 2)"
        }
      ],
      "measure": [
        {
          "column": "Consumption",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "精确匹配",
          "condition": "2012"
        },
        {
          "column": "SUBSTR(Date, 5, 2)",
          "match_type": "小于等于",
          "condition": "06"
        }
      ]
    },
    "table_name": "yearmonth",
    "id": 701
  },
  {
    "question": "What is the average total price of the transactions taken place in February, 2012?",
    "SQL": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-02%'",
    "db_id": "debit_card_specializing",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Amount",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2012-02-01",
            "2012-02-29"
          ]
        }
      ]
    },
    "table_name": "transactions_1k",
    "id": 702
  },
  {
    "question": "Which customer paid the most on 2012-08-24?",
    "SQL": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
    "db_id": "debit_card_specializing",
    "config": {
      "dimension": [
        {
          "column": "CustomerID"
        }
      ],
      "measure": [
        {
          "column": "Price",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "精确匹配",
          "condition": "2012-08-24"
        }
      ]
    },
    "table_name": "transactions_1k",
    "id": 703
  },
  {
    "question": "Which gas station has the highest amount of revenue in August 2012?",
    "SQL": "SELECT GasStationID FROM transactions_1k WHERE Date >= '2012-08-01' AND Date <= '2012-08-31' GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
    "db_id": "debit_card_specializing",
    "table_description": "transactions_1k",
    "config": {
      "dimension": [
        {
          "column": "GasStationID"
        }
      ],
      "measure": [
        {
          "column": "Price",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": [
            "2012-08-01",
            "2012-08-31"
          ]
        }
      ]
    },
    "table_name": "transactions_1k",
    "id": 704
  },
  {
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"CZE\"?",
    "SQL": "SELECT CAST(SUM(IIF(Country = 'CZE' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'CZE', 1, 0)) FROM gasstations",
    "db_id": "debit_card_specializing",
    "table_description": "Table contains information about gas stations including their country and segment.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        },
        {
          "column": "Segment"
        }
      ],
      "measure": [
        {
          "column": "1",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "CZE"
        },
        {
          "column": "Segment",
          "match_type": "精确匹配",
          "condition": "Premium"
        }
      ]
    },
    "table_name": "gasstations",
    "id": 705
  }
]