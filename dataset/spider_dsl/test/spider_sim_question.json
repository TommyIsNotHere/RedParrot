[
    {
        "question": "What is the total number of singers?",
        "SQL": "SELECT count(*) FROM singer",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "0"
    },
    {
        "question": "How many singers are there in total?",
        "SQL": "SELECT count(*) FROM singer",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "1"
    },
    {
        "question": "Display the name, country, and age of all singers, sorted by age from oldest to youngest.",
        "SQL": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "country"
                },
                {
                    "column": "age"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "singer",
        "id": "2"
    },
    {
        "question": "List the names, countries, and ages of all singers, sorted by age in descending order.",
        "SQL": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "country"
                },
                {
                    "column": "age"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "singer",
        "id": "3"
    },
    {
        "question": "What are the average, minimum, and maximum ages of singers from France?",
        "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "age",
                    "aggregate_function": "MIN"
                },
                {
                    "column": "age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "country",
                    "match_type": "精确匹配",
                    "condition": "France"
                }
            ]
        },
        "table_name": "singer",
        "id": "4"
    },
    {
        "question": "What are the average, minimum, and maximum ages of singers from France?",
        "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "age",
                    "aggregate_function": "MIN"
                },
                {
                    "column": "age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "country",
                    "match_type": "精确匹配",
                    "condition": "France"
                }
            ]
        },
        "table_name": "singer",
        "id": "5"
    },
    {
        "question": "Display the name and release year of the song performed by the youngest singer.",
        "SQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "song_name"
                },
                {
                    "column": "song_release_year"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "singer",
        "id": "6"
    },
    {
        "question": "What are the names and release years of the songs by the youngest singer?",
        "SQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "song_name"
                },
                {
                    "column": "song_release_year"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "最小值",
                    "condition": ""
                }
            ]
        },
        "table_name": "singer",
        "id": "7"
    },
    {
        "question": "Which unique countries do singers older than 20 come from?",
        "SQL": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "20"
                }
            ]
        },
        "table_name": "singer",
        "id": "8"
    },
    {
        "question": "Which countries have singers who are older than 20?",
        "SQL": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "20"
                }
            ]
        },
        "table_name": "singer",
        "id": "9"
    },
    {
        "question": "List all countries along with the total number of singers in each.",
        "SQL": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "10"
    },
    {
        "question": "What is the number of singers originating from each country?",
        "SQL": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "11"
    },
    {
        "question": "Show all the song titles performed by artists older than the average age.",
        "SQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "song_name"
                }
            ],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "(SELECT avg(age) FROM singer)"
                }
            ]
        },
        "table_name": "singer",
        "id": "12"
    },
    {
        "question": "List all the song titles performed by artists who are older than the average age of all artists.",
        "SQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "song_name"
                }
            ],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "(SELECT avg(age) FROM singer)"
                }
            ]
        },
        "table_name": "singer",
        "id": "13"
    },
    {
        "question": "List the location and name of all stadiums that have a capacity ranging from 5000 to 10000.",
        "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "LOCATION"
                },
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "capacity",
                    "match_type": "在区间",
                    "condition": [
                        5000,
                        10000
                    ]
                }
            ]
        },
        "table_name": "stadium",
        "id": "14"
    },
    {
        "question": "Can you provide the locations and names of all stadiums that have a capacity ranging from 5000 to 10000?",
        "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "LOCATION"
                },
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "capacity",
                    "match_type": "在区间",
                    "condition": [
                        5000,
                        10000
                    ]
                }
            ]
        },
        "table_name": "stadium",
        "id": "15"
    },
    {
        "question": "What are the highest capacity and the average capacity of all stadiums?",
        "SQL": "select max(capacity), average from stadium",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "capacity",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "average",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "stadium",
        "id": "16"
    },
    {
        "question": "What are the average and maximum capacities across all stadiums?",
        "SQL": "select avg(capacity) ,  max(capacity) from stadium",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "capacity",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "capacity",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "stadium",
        "id": "17"
    },
    {
        "question": "What are the name and capacity of the stadium that has the highest average attendance?",
        "SQL": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "capacity"
                }
            ],
            "measure": [
                {
                    "column": "average",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "stadium",
        "id": "18"
    },
    {
        "question": "Which stadium has the highest average attendance, and what is its name and capacity?",
        "SQL": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "capacity"
                }
            ],
            "measure": [
                {
                    "column": "average",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "stadium",
        "id": "19"
    },
    {
        "question": "What is the total number of concerts held in 2014 and 2015?",
        "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2014"
                },
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2015"
                }
            ]
        },
        "table_name": "concert",
        "id": "20"
    },
    {
        "question": "What is the total number of concerts that took place in 2014 and 2015?",
        "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2014"
                },
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2015"
                }
            ]
        },
        "table_name": "concert",
        "id": "21"
    },
    {
        "question": "What is the year with the highest number of concerts?",
        "SQL": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": []
        },
        "table_name": "concert",
        "id": "22"
    },
    {
        "question": "Which year saw the highest number of concerts?",
        "SQL": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "concert",
        "id": "23"
    },
    {
        "question": "List the countries that have both singers older than 40 and singers younger than 30.",
        "SQL": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "40"
                },
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "30"
                }
            ]
        },
        "table_name": "singer",
        "id": "24"
    },
    {
        "question": "What are the name and nationality of the singers who have songs with 'Hey' in the title?",
        "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "song_name",
                    "match_type": "模糊匹配",
                    "condition": "Hey"
                }
            ]
        },
        "table_name": "singer",
        "id": "25"
    },
    {
        "question": "Can you provide the names and countries of origin for all singers who have a song titled with the word 'Hey'?",
        "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "song_name",
                    "match_type": "模糊匹配",
                    "condition": "Hey"
                }
            ]
        },
        "table_name": "singer",
        "id": "26"
    },
    {
        "question": "Count the pets that weigh more than 10.",
        "SQL": "SELECT count(*) FROM pets WHERE weight  >  10",
        "db_id": "pets_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "大于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "pets",
        "id": "27"
    },
    {
        "question": "What is the number of pets that weigh more than 10?",
        "SQL": "SELECT count(*) FROM pets WHERE weight  >  10",
        "db_id": "pets_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "大于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "pets",
        "id": "28"
    },
    {
        "question": "What is the weight of the youngest dog in the database?",
        "SQL": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "等于",
                    "condition": "MIN(pet_age)"
                }
            ]
        },
        "table_name": "pets",
        "id": "29"
    },
    {
        "question": "What is the weight of the youngest pet that is a dog?",
        "SQL": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "等于",
                    "condition": "MIN(pet_age)"
                }
            ]
        },
        "table_name": "pets",
        "id": "30"
    },
    {
        "question": "List the highest weight along with the pet type for each category of pets.",
        "SQL": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "petType"
                }
            ],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "pets",
        "id": "31"
    },
    {
        "question": "For each type of pet, show the maximum weight and the pet type.",
        "SQL": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "petType"
                }
            ],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "max"
                }
            ],
            "filter": []
        },
        "table_name": "pets",
        "id": "32"
    },
    {
        "question": "Count the unique types of pets.",
        "SQL": "SELECT count(DISTINCT pettype) FROM pets",
        "db_id": "pets_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "pettype",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "pets",
        "id": "33"
    },
    {
        "question": "What is the number of unique pet types?",
        "SQL": "SELECT count(DISTINCT pettype) FROM pets",
        "db_id": "pets_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "pettype",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "pets",
        "id": "34"
    },
    {
        "question": "Identify the type and weight of the youngest pet in the database.",
        "SQL": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "pets",
        "id": "35"
    },
    {
        "question": "What is the species of the youngest pet, and what is its weight?",
        "SQL": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "pets",
        "id": "36"
    },
    {
        "question": "Retrieve the ID and weight of all pets that are older than 1 year.",
        "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "petid"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "大于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "pets",
        "id": "37"
    },
    {
        "question": "Can you provide the ID and weight of all pets that are more than 1 year old?",
        "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "petid"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "大于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "pets",
        "id": "38"
    },
    {
        "question": "Calculate the average and maximum age for every category of pet.",
        "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                }
            ],
            "measure": [
                {
                    "column": "pet_age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "pet_age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "pets",
        "id": "39"
    },
    {
        "question": "For each pet type, what are the average and maximum ages?",
        "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                }
            ],
            "measure": [
                {
                    "column": "pet_age",
                    "aggregate_function": "avg"
                },
                {
                    "column": "pet_age",
                    "aggregate_function": "max"
                }
            ],
            "filter": []
        },
        "table_name": "pets",
        "id": "40"
    },
    {
        "question": "Calculate the average weight of pets for each type.",
        "SQL": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                }
            ],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "pets",
        "id": "41"
    },
    {
        "question": "What's the mean weight for every category of pet?",
        "SQL": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                }
            ],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "pets",
        "id": "42"
    },
    {
        "question": "What is the total number of continents?",
        "SQL": "SELECT count(*) FROM CONTINENTS;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "CONTINENTS",
        "id": "43"
    },
    {
        "question": "How many continents are there?",
        "SQL": "SELECT count(*) FROM CONTINENTS;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "CONTINENTS",
        "id": "44"
    },
    {
        "question": "What is the total number of countries in the list?",
        "SQL": "SELECT count(*) FROM COUNTRIES;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "COUNTRIES",
        "id": "45"
    },
    {
        "question": "What is the total number of countries?",
        "SQL": "SELECT count(*) FROM COUNTRIES;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "COUNTRIES",
        "id": "46"
    },
    {
        "question": "What is the mean miles per gallon (mpg) for cars that have 4 cylinders?",
        "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "mpg",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "等于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "47"
    },
    {
        "question": "What is the mean miles per gallon for cars that have 4 cylinders?",
        "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "mpg",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "等于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "48"
    },
    {
        "question": "What is the minimum weight of a car with 8 cylinders manufactured in 1974?",
        "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "year",
                    "match_type": "等于",
                    "condition": "1974"
                }
            ]
        },
        "table_name": "cars_data",
        "id": "49"
    },
    {
        "question": "What is the lowest weight for a car with 8 cylinders that was manufactured in 1974?",
        "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "year",
                    "match_type": "等于",
                    "condition": "1974"
                }
            ]
        },
        "table_name": "cars_data",
        "id": "50"
    },
    {
        "question": "List all the makers and their corresponding models.",
        "SQL": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "Maker"
                },
                {
                    "column": "Model"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "MODEL_LIST",
        "id": "51"
    },
    {
        "question": "List all the makers and their corresponding models.",
        "SQL": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "Maker"
                },
                {
                    "column": "Model"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "MODEL_LIST",
        "id": "52"
    },
    {
        "question": "How many cars have a horsepower greater than 150?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "horsepower",
                    "match_type": "大于",
                    "condition": "150"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "53"
    },
    {
        "question": "How many cars have a horsepower exceeding 150?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "horsepower",
                    "match_type": "大于",
                    "condition": "150"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "54"
    },
    {
        "question": "What is the yearly average weight of cars?",
        "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "Weight",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "CARS_DATA",
        "id": "55"
    },
    {
        "question": "For each year, what is the average weight?",
        "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "Weight",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "CARS_DATA",
        "id": "56"
    },
    {
        "question": "What is the mean horsepower for cars manufactured prior to 1980?",
        "SQL": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "horsepower",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "小于",
                    "condition": "1980"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "57"
    },
    {
        "question": "What is the mean horsepower of cars manufactured prior to 1980?",
        "SQL": "select avg(horsepower) from cars_data where year < 1980;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "horsepower",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "year",
                    "match_type": "小于",
                    "condition": "1980"
                }
            ]
        },
        "table_name": "cars_data",
        "id": "58"
    },
    {
        "question": "What is the highest acceleration for each number of cylinders in the cars data?",
        "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "Cylinders"
                }
            ],
            "measure": [
                {
                    "column": "Accelerate",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "CARS_DATA",
        "id": "59"
    },
    {
        "question": "What is the highest acceleration for each number of cylinders in the cars data?",
        "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "Cylinders"
                }
            ],
            "measure": [
                {
                    "column": "Accelerate",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "CARS_DATA",
        "id": "60"
    },
    {
        "question": "What car model has the highest number of different versions (makes)?",
        "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "Model"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "CAR_NAMES",
        "id": "61"
    },
    {
        "question": "Which car model has the highest number of distinct versions?",
        "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "Model"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "CAR_NAMES",
        "id": "62"
    },
    {
        "question": "What is the number of cars with over 4 cylinders?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "大于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "63"
    },
    {
        "question": "How many cars have more than 4 cylinders?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "大于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "64"
    },
    {
        "question": "What is the total number of cars manufactured in 1980?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "1980"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "65"
    },
    {
        "question": "How many cars were manufactured in 1980?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "1980"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "66"
    },
    {
        "question": "Which years had cars produced with a weight ranging from 3000 to 4000?",
        "SQL": "select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "year"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "在区间",
                    "condition": [
                        3000,
                        4000
                    ]
                }
            ]
        },
        "table_name": "cars_data",
        "id": "67"
    },
    {
        "question": "Which years had cars produced with weights ranging from over 3000 to under 4000?",
        "SQL": "select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "year"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "在区间",
                    "condition": [
                        3000,
                        4000
                    ]
                }
            ]
        },
        "table_name": "cars_data",
        "id": "68"
    },
    {
        "question": "What is the horsepower of the car that accelerates the fastest?",
        "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "horsepower",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "accelerate",
                    "match_type": "ORDER_BY_DESC_LIMIT_1",
                    "condition": ""
                }
            ]
        },
        "table_name": "CARS_DATA AS T1",
        "id": "69"
    },
    {
        "question": "What is the horsepower of the car that accelerates the fastest?",
        "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T1.horsepower",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "CARS_DATA AS T1",
        "id": "70"
    },
    {
        "question": "How many vehicles have a higher acceleration rate compared to the one with the maximum horsepower?",
        "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Accelerate",
                    "match_type": "大于",
                    "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "71"
    },
    {
        "question": "How many cars have an acceleration rate higher than the car with the highest horsepower?",
        "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Accelerate",
                    "match_type": "大于",
                    "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "72"
    },
    {
        "question": "What is the number of cars with more than 6 cylinders?",
        "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "大于",
                    "condition": "6"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "73"
    },
    {
        "question": "How many cars have more than 6 cylinders?",
        "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "大于",
                    "condition": "6"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "74"
    },
    {
        "question": "What is the highest miles per gallon for a car that has 8 cylinders or was manufactured before 1980?",
        "SQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "mpg",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "year",
                    "match_type": "小于",
                    "condition": "1980"
                }
            ]
        },
        "table_name": "cars_data",
        "id": "75"
    },
    {
        "question": "What is the highest miles per gallon (mpg) for cars with 8 cylinders or manufactured before 1980?",
        "SQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "mpg",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "year",
                    "match_type": "小于",
                    "condition": "1980"
                }
            ]
        },
        "table_name": "cars_data",
        "id": "76"
    },
    {
        "question": "What is the country of origin for the airline JetBlue Airways?",
        "SQL": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "Country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Airline",
                    "match_type": "精确匹配",
                    "condition": "JetBlue Airways"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "77"
    },
    {
        "question": "Which country is JetBlue Airways associated with?",
        "SQL": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "Country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Airline",
                    "match_type": "精确匹配",
                    "condition": "JetBlue Airways"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "78"
    },
    {
        "question": "Can you provide the abbreviation for the airline JetBlue Airways?",
        "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "Abbreviation"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Airline",
                    "match_type": "精确匹配",
                    "condition": "JetBlue Airways"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "79"
    },
    {
        "question": "What is the abbreviation for JetBlue Airways?",
        "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "Abbreviation"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Airline",
                    "match_type": "精确匹配",
                    "condition": "JetBlue Airways"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "80"
    },
    {
        "question": "Display the names and abbreviations of all airlines located in the USA.",
        "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "Airline"
                },
                {
                    "column": "Abbreviation"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "81"
    },
    {
        "question": "List the names and abbreviations of airlines located in the United States.",
        "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "Airline"
                },
                {
                    "column": "Abbreviation"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "82"
    },
    {
        "question": "Show the airport code and name for airports located in Anthony.",
        "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "AirportCode"
                },
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "city",
                    "match_type": "精确匹配",
                    "condition": "Anthony"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "83"
    },
    {
        "question": "Provide the airport code and name for the city of Anthony.",
        "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "AirportCode"
                },
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "city",
                    "match_type": "精确匹配",
                    "condition": "Anthony"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "84"
    },
    {
        "question": "What is the total number of airlines?",
        "SQL": "SELECT count(*) FROM AIRLINES",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "AIRLINES",
        "id": "85"
    },
    {
        "question": "How many airlines are there in total?",
        "SQL": "SELECT count(*) FROM AIRLINES",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "AIRLINES",
        "id": "86"
    },
    {
        "question": "What is the total number of airports?",
        "SQL": "SELECT count(*) FROM AIRPORTS",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "AIRPORTS",
        "id": "87"
    },
    {
        "question": "Provide the total count of airports.",
        "SQL": "SELECT count(*) FROM AIRPORTS",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "AIRPORTS",
        "id": "88"
    },
    {
        "question": "What is the total number of flights?",
        "SQL": "SELECT count(*) FROM FLIGHTS",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "FLIGHTS",
        "id": "89"
    },
    {
        "question": "Provide the total count of flights.",
        "SQL": "SELECT count(*) FROM FLIGHTS",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "FLIGHTS",
        "id": "90"
    },
    {
        "question": "What is the name of the airline with the abbreviation 'UAL'? ",
        "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "Airline"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Abbreviation",
                    "match_type": "精确匹配",
                    "condition": "UAL"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "91"
    },
    {
        "question": "Provide the name of the airline whose abbreviation is 'UAL'.",
        "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "Airline"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Abbreviation",
                    "match_type": "精确匹配",
                    "condition": "UAL"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "92"
    },
    {
        "question": "What is the number of airlines based in the USA?",
        "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "93"
    },
    {
        "question": "How many airlines are there in the USA?",
        "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "AIRLINES",
        "id": "94"
    },
    {
        "question": "What is the city and country where Alton airport is located?",
        "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "City"
                },
                {
                    "column": "Country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "AirportName",
                    "match_type": "精确匹配",
                    "condition": "Alton"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "95"
    },
    {
        "question": "What are the city and country of the Alton airport?",
        "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "City"
                },
                {
                    "column": "Country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "AirportName",
                    "match_type": "精确匹配",
                    "condition": "Alton"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "96"
    },
    {
        "question": "Can you provide the name of the airport with the code 'AKO'?",
        "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "AirportCode",
                    "match_type": "精确匹配",
                    "condition": "AKO"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "97"
    },
    {
        "question": "Provide the name of the airport that has the code 'AKO'.",
        "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "AirportCode",
                    "match_type": "精确匹配",
                    "condition": "AKO"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "98"
    },
    {
        "question": "List the names of airports located in the city of Aberdeen.",
        "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Aberdeen"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "99"
    },
    {
        "question": "Can you provide me with the names of the airports located in Aberdeen?",
        "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Aberdeen"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "100"
    },
    {
        "question": "What is the total number of flights that depart from the airport 'APG'?",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "APG"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "101"
    },
    {
        "question": "How many flights depart from the airport 'APG'?",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "APG"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "102"
    },
    {
        "question": "What is the total number of flights with ATO as the destination airport?",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "DestAirport",
                    "match_type": "精确匹配",
                    "condition": "ATO"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "103"
    },
    {
        "question": "How many flights are there with ATO as the destination airport?",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ATO'",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "DestAirport",
                    "match_type": "精确匹配",
                    "condition": "ATO"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "104"
    },
    {
        "question": "Which flight numbers depart from Airport 'APG'? ",
        "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "FlightNo"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "APG"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "105"
    },
    {
        "question": "List the flight numbers for flights that depart from APG.",
        "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "FlightNo"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "APG"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "106"
    },
    {
        "question": "Which flight numbers are for flights that have 'APG' as their destination airport?",
        "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "FlightNo"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "DestAirport",
                    "match_type": "精确匹配",
                    "condition": "APG"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "107"
    },
    {
        "question": "List the flight numbers for flights that land at APG.",
        "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "FlightNo"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "DestAirport",
                    "match_type": "精确匹配",
                    "condition": "APG"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "108"
    },
    {
        "question": "What is the total number of employees?",
        "SQL": "SELECT count(*) FROM employee",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "employee",
        "id": "109"
    },
    {
        "question": "Calculate the total number of employees",
        "SQL": "SELECT count(*) FROM employee",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "employee",
        "id": "110"
    },
    {
        "question": "List employee names in the order of their age from youngest to oldest.",
        "SQL": "SELECT name FROM employee ORDER BY age",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "employee",
        "id": "111"
    },
    {
        "question": "Display the names of employees, ordered by their age in ascending order.",
        "SQL": "SELECT name FROM employee ORDER BY age",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "employee",
        "id": "112"
    },
    {
        "question": "How many employees are there in each city?",
        "SQL": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "city"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "employee",
        "id": "113"
    },
    {
        "question": "Calculate the total number of employees in each city.",
        "SQL": "SELECT count(*), city FROM employee GROUP BY city",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "city"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "employee",
        "id": "114"
    },
    {
        "question": "From which cities do multiple employees under the age of 30 originate?",
        "SQL": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "city"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "30"
                },
                {
                    "column": "count(*)",
                    "match_type": "大于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "employee",
        "id": "115"
    },
    {
        "question": "Identify the cities with more than one employee who is under 30 years old.",
        "SQL": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "city"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "30"
                },
                {
                    "column": "*",
                    "match_type": "大于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "employee",
        "id": "116"
    },
    {
        "question": "Determine the total number of shops located in each area.",
        "SQL": "SELECT count(*), LOCATION FROM shop GROUP BY LOCATION",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "LOCATION"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "117"
    },
    {
        "question": "What is the number of shops in each location?",
        "SQL": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "LOCATION"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "118"
    },
    {
        "question": "Identify the manager's name and the district of the shop that has the highest number of products.",
        "SQL": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "manager_name"
                },
                {
                    "column": "district"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "119"
    },
    {
        "question": "Which manager and district belong to the shop that has the highest number of products sold?",
        "SQL": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "manager_name"
                },
                {
                    "column": "district"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "120"
    },
    {
        "question": "What are the lowest and highest number of products across all stores?",
        "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Number_products",
                    "aggregate_function": "min"
                },
                {
                    "column": "Number_products",
                    "aggregate_function": "max"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "121"
    },
    {
        "question": "What is the range of the number of products in all shops, specifically the lowest and highest counts?",
        "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Number_products",
                    "aggregate_function": "min"
                },
                {
                    "column": "Number_products",
                    "aggregate_function": "max"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "122"
    },
    {
        "question": "List the name, location, and district of all shops sorted by the number of products in descending order.",
        "SQL": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "LOCATION"
                },
                {
                    "column": "district"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "123"
    },
    {
        "question": "Return the name, location, and district of each shop, sorted by the number of products in descending order.",
        "SQL": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "LOCATION"
                },
                {
                    "column": "district"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "124"
    },
    {
        "question": "Identify the names of shops that have a higher number of products than the average number of products across all shops.",
        "SQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "number_products",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "number_products",
                    "match_type": "大于",
                    "condition": "(SELECT avg(number_products) FROM shop)"
                }
            ]
        },
        "table_name": "shop",
        "id": "125"
    },
    {
        "question": "Can you provide the names of the shops that have more products than the average number of products across all shops?",
        "SQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "number_products",
                    "aggregate_function": "NONE"
                }
            ],
            "filter": [
                {
                    "column": "number_products",
                    "match_type": "大于",
                    "condition": "(SELECT avg(number_products) FROM shop)"
                }
            ]
        },
        "table_name": "shop",
        "id": "126"
    },
    {
        "question": "What is the total amount of bonus distributed across all evaluations?",
        "SQL": "SELECT sum(bonus) FROM evaluation",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "bonus",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "evaluation",
        "id": "127"
    },
    {
        "question": "Calculate the total bonus amount distributed across all evaluations.",
        "SQL": "SELECT sum(bonus) FROM evaluation",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "bonus",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "evaluation",
        "id": "128"
    },
    {
        "question": "Provide all details related to hiring.",
        "SQL": "SELECT * FROM hiring",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": []
        },
        "table_name": "hiring",
        "id": "129"
    },
    {
        "question": "Can you provide all the details related to hiring?",
        "SQL": "SELECT * FROM hiring",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": []
        },
        "table_name": "hiring",
        "id": "130"
    },
    {
        "question": "What is the district that contains stores with fewer than 3000 products as well as stores with more than 10000 products?",
        "SQL": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "district"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Number_products",
                    "match_type": "小于",
                    "condition": "3000"
                },
                {
                    "column": "Number_products",
                    "match_type": "大于",
                    "condition": "10000"
                }
            ]
        },
        "table_name": "shop",
        "id": "131"
    },
    {
        "question": "Identify the districts that have shops with fewer than 3000 products and also shops with more than 10000 products.",
        "SQL": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "district"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Number_products",
                    "match_type": "小于",
                    "condition": "3000"
                },
                {
                    "column": "Number_products",
                    "match_type": "大于",
                    "condition": "10000"
                }
            ]
        },
        "table_name": "shop",
        "id": "132"
    },
    {
        "question": "What is the number of unique store locations?",
        "SQL": "SELECT count(DISTINCT LOCATION) FROM shop",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LOCATION",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "133"
    },
    {
        "question": "Calculate the total number of unique store locations.",
        "SQL": "SELECT count(DISTINCT LOCATION) FROM shop",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LOCATION",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "shop",
        "id": "134"
    },
    {
        "question": "What is the total number of documents we have?",
        "SQL": "SELECT count(*) FROM Documents",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Documents",
        "id": "135"
    },
    {
        "question": "Calculate the total number of documents.",
        "SQL": "SELECT count(*) FROM Documents",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Documents",
        "id": "136"
    },
    {
        "question": "Can you provide me with the IDs, names, and descriptions of all the documents?",
        "SQL": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                },
                {
                    "column": "document_name"
                },
                {
                    "column": "document_description"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Documents",
        "id": "137"
    },
    {
        "question": "Which documents contain the letter 'w' in their description, and what are their names and template IDs?",
        "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_name"
                },
                {
                    "column": "template_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Document_Description",
                    "match_type": "模糊匹配",
                    "condition": "%w%"
                }
            ]
        },
        "table_name": "Documents",
        "id": "138"
    },
    {
        "question": "Retrieve the names and template IDs of documents where the description includes the letter 'w'.",
        "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_name"
                },
                {
                    "column": "template_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Document_Description",
                    "match_type": "模糊匹配",
                    "condition": "w"
                }
            ]
        },
        "table_name": "Documents",
        "id": "139"
    },
    {
        "question": "Can you provide me with the document ID, template ID, and description for the document titled 'Robbin CV'?",
        "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                },
                {
                    "column": "template_id"
                },
                {
                    "column": "Document_Description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "document_name",
                    "match_type": "精确匹配",
                    "condition": "Robbin CV"
                }
            ]
        },
        "table_name": "Documents",
        "id": "140"
    },
    {
        "question": "Fetch the document ID, template ID, and description for the document named Robbin CV.",
        "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                },
                {
                    "column": "template_id"
                },
                {
                    "column": "Document_Description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "document_name",
                    "match_type": "精确匹配",
                    "condition": "Robbin CV"
                }
            ]
        },
        "table_name": "Documents",
        "id": "141"
    },
    {
        "question": "What is the total number of unique templates used across all documents?",
        "SQL": "SELECT count(DISTINCT template_id) FROM Documents",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "template_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Documents",
        "id": "142"
    },
    {
        "question": "Calculate the total number of unique templates utilized for documents.",
        "SQL": "SELECT count(DISTINCT template_id) FROM Documents",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "template_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Documents",
        "id": "143"
    },
    {
        "question": "Display all template IDs along with the number of documents that use each template.",
        "SQL": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Documents",
        "id": "144"
    },
    {
        "question": "Can you list all unique template IDs used in documents along with the frequency of their usage?",
        "SQL": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": []
        },
        "table_name": "Documents",
        "id": "145"
    },
    {
        "question": "List the IDs of all templates that have been utilized by more than a single document.",
        "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "COUNT(*)",
                    "match_type": "大于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "Documents",
        "id": "146"
    },
    {
        "question": "Which template IDs are associated with more than one document?",
        "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "Documents",
        "id": "147"
    },
    {
        "question": "What is the total number of templates we have?",
        "SQL": "SELECT count(*) FROM Templates",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Templates",
        "id": "148"
    },
    {
        "question": "Calculate the total number of templates.",
        "SQL": "SELECT count(*) FROM Templates",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Templates",
        "id": "149"
    },
    {
        "question": "List the template IDs, version numbers, and template type codes for all templates.",
        "SQL": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                },
                {
                    "column": "version_number"
                },
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Templates",
        "id": "150"
    },
    {
        "question": "Display unique template type codes from the Templates table.",
        "SQL": "SELECT DISTINCT template_type_code FROM Templates",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Templates",
        "id": "151"
    },
    {
        "question": "Can you provide a list of all unique template type codes?",
        "SQL": "SELECT DISTINCT template_type_code FROM Templates",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": []
        },
        "table_name": "Templates",
        "id": "152"
    },
    {
        "question": "Provide the IDs of templates with the type code PP or PPT.",
        "SQL": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_code",
                    "match_type": "精确匹配",
                    "condition": "PP"
                },
                {
                    "column": "template_type_code",
                    "match_type": "精确匹配",
                    "condition": "PPT"
                }
            ]
        },
        "table_name": "Templates",
        "id": "153"
    },
    {
        "question": "What is the total number of templates with the template type code 'CV'?",
        "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "template_type_code",
                    "match_type": "等于",
                    "condition": "CV"
                }
            ]
        },
        "table_name": "Templates",
        "id": "154"
    },
    {
        "question": "How many templates are there of the CV type?",
        "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "template_type_code",
                    "match_type": "精确匹配",
                    "condition": "CV"
                }
            ]
        },
        "table_name": "Templates",
        "id": "155"
    },
    {
        "question": "Retrieve the version number and template type code for templates where the version number is greater than 5.",
        "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "version_number",
                    "aggregate_function": "None"
                }
            ],
            "filter": [
                {
                    "column": "version_number",
                    "match_type": "大于",
                    "condition": "5"
                }
            ]
        },
        "table_name": "Templates",
        "id": "156"
    },
    {
        "question": "List the version numbers and template type codes for templates that have a version number exceeding 5.",
        "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "version_number",
                    "aggregate_function": "NONE"
                }
            ],
            "filter": [
                {
                    "column": "version_number",
                    "match_type": "大于",
                    "condition": "5"
                }
            ]
        },
        "table_name": "Templates",
        "id": "157"
    },
    {
        "question": "Display the template type codes along with the count of templates for each type.",
        "SQL": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Templates",
        "id": "158"
    },
    {
        "question": "Can you provide a list of unique template type codes along with the number of templates for each type?",
        "SQL": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Templates",
        "id": "159"
    },
    {
        "question": "What is the template type code with the highest number of templates?",
        "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Templates",
        "id": "160"
    },
    {
        "question": "Find the type code of the template type with the highest number of templates.",
        "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": []
        },
        "table_name": "Templates",
        "id": "161"
    },
    {
        "question": "Display all template type codes that have fewer than three templates.",
        "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "*",
                    "match_type": "小于",
                    "condition": "3"
                }
            ]
        },
        "table_name": "Templates",
        "id": "162"
    },
    {
        "question": "Which template type codes have less than 3 templates associated with them?",
        "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "COUNT(*)",
                    "match_type": "小于",
                    "condition": "3"
                }
            ]
        },
        "table_name": "Templates",
        "id": "163"
    },
    {
        "question": "What is the smallest version number along with its template type code?",
        "SQL": "SELECT min(Version_Number), template_type_code FROM Templates",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "Version_Number",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "Templates",
        "id": "164"
    },
    {
        "question": "Find the minimum version number and its associated template type code.",
        "SQL": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "Version_Number",
                    "aggregate_function": "min"
                }
            ],
            "filter": []
        },
        "table_name": "Templates",
        "id": "165"
    },
    {
        "question": "Display all the template type codes along with their descriptions.",
        "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                },
                {
                    "column": "template_type_description"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Ref_template_types",
        "id": "166"
    },
    {
        "question": "Can you provide me with the codes and descriptions for all template types?",
        "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                },
                {
                    "column": "template_type_description"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Ref_template_types",
        "id": "167"
    },
    {
        "question": "Can you provide the description of the template type with the code 'AD'?",
        "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_code",
                    "match_type": "精确匹配",
                    "condition": "AD"
                }
            ]
        },
        "table_name": "Ref_template_types",
        "id": "168"
    },
    {
        "question": "Provide the description for the template type that has the code AD.",
        "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_code",
                    "match_type": "精确匹配",
                    "condition": "AD"
                }
            ]
        },
        "table_name": "Ref_template_types",
        "id": "169"
    },
    {
        "question": "What is the template type code associated with the template type description 'Book'?",
        "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_description",
                    "match_type": "精确匹配",
                    "condition": "Book"
                }
            ]
        },
        "table_name": "Ref_template_types",
        "id": "170"
    },
    {
        "question": "Get the type code for the template type that is described as 'Book'.",
        "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_description",
                    "match_type": "精确匹配",
                    "condition": "Book"
                }
            ]
        },
        "table_name": "Ref_template_types",
        "id": "171"
    },
    {
        "question": "What is the total number of paragraphs?",
        "SQL": "SELECT count(*) FROM Paragraphs",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Paragraphs",
        "id": "172"
    },
    {
        "question": "Calculate the total number of paragraphs.",
        "SQL": "SELECT count(*) FROM Paragraphs",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Paragraphs",
        "id": "173"
    },
    {
        "question": "Can you provide the details for the paragraph that contains the word 'Korea'? ",
        "SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "other_details"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "paragraph_text",
                    "match_type": "模糊匹配",
                    "condition": "korea"
                }
            ]
        },
        "table_name": "paragraphs",
        "id": "174"
    },
    {
        "question": "列出所有文档ID及其段落数量，并按文档ID排序。",
        "SQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": []
        },
        "table_name": "Paragraphs",
        "id": "175"
    },
    {
        "question": "提供每个不同文档ID及其对应的段落数量，并按文档ID排序。",
        "SQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": []
        },
        "table_name": "Paragraphs",
        "id": "176"
    },
    {
        "question": "Show document IDs that have a minimum of two paragraphs.",
        "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ]
        },
        "table_name": "Paragraphs",
        "id": "177"
    },
    {
        "question": "Which document IDs have at least two paragraphs?",
        "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "COUNT(*)",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ]
        },
        "table_name": "Paragraphs",
        "id": "178"
    },
    {
        "question": "Which document ID has the fewest paragraphs?",
        "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": []
        },
        "table_name": "Paragraphs",
        "id": "179"
    },
    {
        "question": "Find the ID of the document that has the least number of paragraphs.",
        "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": []
        },
        "table_name": "Paragraphs",
        "id": "180"
    },
    {
        "question": "Which document IDs have between 1 and 2 paragraphs?",
        "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "在区间",
                    "condition": [
                        1,
                        2
                    ]
                }
            ]
        },
        "table_name": "Paragraphs",
        "id": "181"
    },
    {
        "question": "Provide the IDs of documents containing one or two paragraphs.",
        "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "在区间",
                    "condition": [
                        1,
                        2
                    ]
                }
            ]
        },
        "table_name": "Paragraphs",
        "id": "182"
    },
    {
        "question": "Find the document ID that contains paragraphs with both 'Brazil' and 'Ireland'.",
        "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "paragraph_text",
                    "match_type": "精确匹配",
                    "condition": "Brazil"
                },
                {
                    "column": "paragraph_text",
                    "match_type": "精确匹配",
                    "condition": "Ireland"
                }
            ]
        },
        "table_name": "Paragraphs",
        "id": "183"
    },
    {
        "question": "Which document IDs include paragraphs containing both 'Brazil' and 'Ireland'?",
        "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "paragraph_text",
                    "match_type": "精确匹配",
                    "condition": "Brazil"
                },
                {
                    "column": "paragraph_text",
                    "match_type": "精确匹配",
                    "condition": "Ireland"
                }
            ]
        },
        "table_name": "Paragraphs",
        "id": "184"
    },
    {
        "question": "What is the total number of teachers?",
        "SQL": "SELECT count(*) FROM teacher",
        "db_id": "course_teach",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "teacher",
        "id": "185"
    },
    {
        "question": "How many teachers are there in total?",
        "SQL": "SELECT count(*) FROM teacher",
        "db_id": "course_teach",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "teacher",
        "id": "186"
    },
    {
        "question": "Display the names of teachers sorted by their age in ascending order.",
        "SQL": "SELECT Name FROM teacher ORDER BY Age ASC",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "teacher",
        "id": "187"
    },
    {
        "question": "List the names of the teachers in ascending order of their age.",
        "SQL": "SELECT Name FROM teacher ORDER BY Age ASC",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "teacher",
        "id": "188"
    },
    {
        "question": "Can you provide the age and hometown information for the teachers?",
        "SQL": "SELECT Age ,  Hometown FROM teacher",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Age"
                },
                {
                    "column": "Hometown"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "teacher",
        "id": "189"
    },
    {
        "question": "Can you provide the age and hometown for each teacher?",
        "SQL": "SELECT Age ,  Hometown FROM teacher",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Age"
                },
                {
                    "column": "Hometown"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "teacher",
        "id": "190"
    },
    {
        "question": "Show the names of teachers who are not from 'Little Lever Urban District'.",
        "SQL": "select name from teacher where hometown != \"little lever urban district\"",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "hometown",
                    "match_type": "不等于",
                    "condition": "Little Lever Urban District"
                }
            ]
        },
        "table_name": "teacher",
        "id": "191"
    },
    {
        "question": "Which teachers do not come from Little Lever Urban District?",
        "SQL": "select name from teacher where hometown != \"little lever urban district\"",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "hometown",
                    "match_type": "不等于",
                    "condition": "Little Lever Urban District"
                }
            ]
        },
        "table_name": "teacher",
        "id": "192"
    },
    {
        "question": "Display the names of teachers who are 32 or 33 years old?",
        "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "等于",
                    "condition": "32"
                },
                {
                    "column": "Age",
                    "match_type": "等于",
                    "condition": "33"
                }
            ]
        },
        "table_name": "teacher",
        "id": "193"
    },
    {
        "question": "List the names of the teachers whose ages are 32 or 33.",
        "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "等于",
                    "condition": "32"
                },
                {
                    "column": "Age",
                    "match_type": "等于",
                    "condition": "33"
                }
            ]
        },
        "table_name": "teacher",
        "id": "194"
    },
    {
        "question": "Where is the hometown of the youngest teacher?",
        "SQL": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "最小值",
                    "condition": ""
                }
            ]
        },
        "table_name": "teacher",
        "id": "195"
    },
    {
        "question": "What is the hometown of the youngest teacher?",
        "SQL": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "最小值",
                    "condition": ""
                }
            ]
        },
        "table_name": "teacher",
        "id": "196"
    },
    {
        "question": "List the distinct hometowns of teachers along with the count of teachers from each hometown.",
        "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "teacher",
        "id": "197"
    },
    {
        "question": "How many teachers are there in each hometown?",
        "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "teacher",
        "id": "198"
    },
    {
        "question": "Identify the hometown that the majority of teachers come from.",
        "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "teacher",
        "id": "199"
    },
    {
        "question": "Which hometown is the most common among teachers?",
        "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "teacher",
        "id": "200"
    },
    {
        "question": "Display the hometowns that are common to a minimum of two teachers.",
        "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "COUNT(*)",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ]
        },
        "table_name": "teacher",
        "id": "201"
    },
    {
        "question": "Which towns have at least two teachers originating from them?",
        "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "*",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ]
        },
        "table_name": "teacher",
        "id": "202"
    },
    {
        "question": "What is the number of visitors under the age of 30?",
        "SQL": "SELECT count(*) FROM visitor WHERE age < 30",
        "db_id": "museum_visit",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "30"
                }
            ]
        },
        "table_name": "visitor",
        "id": "203"
    },
    {
        "question": "List the names of visitors with a membership level greater than 4, sorted by their level in descending order.",
        "SQL": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "db_id": "museum_visit",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Level_of_membership",
                    "match_type": "大于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "visitor",
        "id": "204"
    },
    {
        "question": "What is the mean age of visitors with a membership level of 4 or lower?",
        "SQL": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "db_id": "museum_visit",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Level_of_membership",
                    "match_type": "小于等于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "visitor",
        "id": "205"
    },
    {
        "question": "Retrieve the names and membership levels of visitors with a membership level greater than 4, ordered by their age in descending order.",
        "SQL": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "db_id": "museum_visit",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "Level_of_membership"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Level_of_membership",
                    "match_type": "大于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "visitor",
        "id": "206"
    },
    {
        "question": "Identify the museum's ID and name with the highest number of staff members?",
        "SQL": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "db_id": "museum_visit",
        "config": {
            "dimension": [
                {
                    "column": "museum_id"
                },
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "num_of_staff",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "museum",
        "id": "207"
    },
    {
        "question": "Calculate the average number of employees in museums that opened prior to 2009.",
        "SQL": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "db_id": "museum_visit",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "num_of_staff",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "open_year",
                    "match_type": "小于",
                    "condition": "2009"
                }
            ]
        },
        "table_name": "museum",
        "id": "208"
    },
    {
        "question": "What is the opening year and number of staff for the Plaza Museum?",
        "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "db_id": "museum_visit",
        "config": {
            "dimension": [
                {
                    "column": "Open_Year"
                },
                {
                    "column": "Num_of_Staff"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Plaza Museum"
                }
            ]
        },
        "table_name": "museum",
        "id": "209"
    },
    {
        "question": "列出那些员工数量多于2010年后开放的所有博物馆中最小员工数量的博物馆名称。",
        "SQL": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "db_id": "museum_visit",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "num_of_staff",
                    "aggregate_function": "NONE"
                },
                {
                    "column": "num_of_staff",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "open_year",
                    "match_type": "大于",
                    "condition": "2010"
                },
                {
                    "column": "num_of_staff",
                    "match_type": "大于",
                    "condition": "(SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
                }
            ]
        },
        "table_name": "museum",
        "id": "210"
    },
    {
        "question": "What is the average and highest number of tickets purchased across all visits?",
        "SQL": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "db_id": "museum_visit",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "num_of_ticket",
                    "aggregate_function": "avg"
                },
                {
                    "column": "num_of_ticket",
                    "aggregate_function": "max"
                }
            ],
            "filter": []
        },
        "table_name": "visit",
        "id": "211"
    },
    {
        "question": "What is the total number of museums that opened either after 2013 or before 2008?",
        "SQL": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "db_id": "museum_visit",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "open_year",
                    "match_type": "大于",
                    "condition": "2013"
                },
                {
                    "column": "open_year",
                    "match_type": "小于",
                    "condition": "2008"
                }
            ]
        },
        "table_name": "museum",
        "id": "212"
    },
    {
        "question": "Calculate the total number of players.",
        "SQL": "SELECT count(*) FROM players",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "213"
    },
    {
        "question": "What is the total number of players?",
        "SQL": "SELECT count(*) FROM players",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "214"
    },
    {
        "question": "Calculate the total number of matches.",
        "SQL": "SELECT count(*) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "215"
    },
    {
        "question": "Calculate the total number of matches.",
        "SQL": "SELECT count(*) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "216"
    },
    {
        "question": "Show the first name and birth date of all players who are from the USA.",
        "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "birth_date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "country_code",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "players",
        "id": "217"
    },
    {
        "question": "Can you provide me with the first names and birth dates of players who are from the United States?",
        "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "birth_date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "country_code",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "players",
        "id": "218"
    },
    {
        "question": "Calculate the average age of both the losers and winners across all matches.",
        "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "winner_age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "219"
    },
    {
        "question": "What is the average age of the losers and winners in the matches?",
        "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "winner_age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "220"
    },
    {
        "question": "Calculate the average ranking of winners across all matches.",
        "SQL": "SELECT avg(winner_rank) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "winner_rank",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "221"
    },
    {
        "question": "What is the mean rank of winners across all matches?",
        "SQL": "SELECT avg(winner_rank) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "winner_rank",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "222"
    },
    {
        "question": "Determine the best ranking among all the losing players in the matches.",
        "SQL": "SELECT min(loser_rank) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_rank",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "223"
    },
    {
        "question": "What is the lowest rank among all the losers in the matches?",
        "SQL": "SELECT min(loser_rank) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_rank",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "224"
    },
    {
        "question": "What is the total number of unique country codes among all players?",
        "SQL": "SELECT count(DISTINCT country_code) FROM players",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "country_code",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "225"
    },
    {
        "question": "From how many different countries are the players?",
        "SQL": "SELECT count(DISTINCT country_code) FROM players",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "country_code",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "226"
    },
    {
        "question": "Count the unique names of the losers in the matches.",
        "SQL": "SELECT count(DISTINCT loser_name) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_name",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "227"
    },
    {
        "question": "What is the total number of unique loser names in the matches table?",
        "SQL": "SELECT count(DISTINCT loser_name) FROM matches",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_name",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "228"
    },
    {
        "question": "Identify the tournament names which have over 10 matches.",
        "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "tourney_name"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "COUNT(*)",
                    "match_type": "大于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "matches",
        "id": "229"
    },
    {
        "question": "Which tournaments have over 10 matches?",
        "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "tourney_name"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "COUNT(*)",
                    "match_type": "大于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "matches",
        "id": "230"
    },
    {
        "question": "Show the names of all winners who participated in both 2013 and 2016.",
        "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2013"
                },
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2016"
                }
            ]
        },
        "table_name": "matches",
        "id": "231"
    },
    {
        "question": "Which players were victorious in both 2013 and 2016?",
        "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2013"
                },
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2016"
                }
            ]
        },
        "table_name": "matches",
        "id": "232"
    },
    {
        "question": "Count the total number of matches that took place in the years 2013 or 2016.",
        "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2013"
                },
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2016"
                }
            ]
        },
        "table_name": "matches",
        "id": "233"
    },
    {
        "question": "What is the total number of matches that took place in 2013 or 2016?",
        "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2013"
                },
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2016"
                }
            ]
        },
        "table_name": "matches",
        "id": "234"
    },
    {
        "question": "Identify the first name and country code of the player with the earliest birth date.",
        "SQL": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "country_code"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "players",
        "id": "235"
    },
    {
        "question": "What are the first name and country code of the oldest player?",
        "SQL": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "country_code"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "players",
        "id": "236"
    },
    {
        "question": "Display the full names of all players sorted by their birth dates.",
        "SQL": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "players",
        "id": "237"
    },
    {
        "question": "List the complete names of all players, ordered by their birth dates.",
        "SQL": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "players",
        "id": "238"
    },
    {
        "question": "Display the first and last names of all players who are left-handed, sorted by their birth dates.",
        "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                },
                {
                    "column": "birth_date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "L"
                }
            ]
        },
        "table_name": "players",
        "id": "239"
    },
    {
        "question": "List the complete names of all players who are left-handed, sorted by their date of birth.",
        "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "L"
                }
            ]
        },
        "table_name": "players",
        "id": "240"
    },
    {
        "question": "Identify the year with the highest number of matches.",
        "SQL": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "241"
    },
    {
        "question": "What is the year with the highest number of matches?",
        "SQL": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "242"
    },
    {
        "question": "Identify the name and rank points of the competitor who has the highest number of wins.",
        "SQL": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                },
                {
                    "column": "winner_rank_points"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "243"
    },
    {
        "question": "Who is the most successful player in terms of match wins, and what are their rank points?",
        "SQL": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "winner_rank_points",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "244"
    },
    {
        "question": "Identify the winner with the highest rank points from the Australian Open tournament.",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [
                {
                    "column": "winner_rank_points",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "Australian Open"
                }
            ]
        },
        "table_name": "matches",
        "id": "245"
    },
    {
        "question": "Who is the winner with the highest rank points from the Australian Open tournament?",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [
                {
                    "column": "winner_rank_points",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "Australian Open"
                }
            ]
        },
        "table_name": "matches",
        "id": "246"
    },
    {
        "question": "找出比赛时间最长的比赛中获胜者和失败者的名字。",
        "SQL": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                },
                {
                    "column": "loser_name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "matches",
        "id": "247"
    },
    {
        "question": "Who were the winner and loser in the match that lasted the longest?",
        "SQL": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                },
                {
                    "column": "loser_name"
                }
            ],
            "measure": [
                {
                    "column": "minutes",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "248"
    },
    {
        "question": "count the number of players in each country.",
        "SQL": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "249"
    },
    {
        "question": "What is the number of players from each country?",
        "SQL": "SELECT count(*), country_code FROM players GROUP BY country_code",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "250"
    },
    {
        "question": "Identify the country code with the highest number of players.",
        "SQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "251"
    },
    {
        "question": "Which country has the highest number of players, and what is its code?",
        "SQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "252"
    },
    {
        "question": "Identify the country codes where the number of players exceeds 50.",
        "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "*",
                    "match_type": "大于",
                    "condition": "50"
                }
            ]
        },
        "table_name": "players",
        "id": "253"
    },
    {
        "question": "Which country codes have over 50 players?",
        "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于",
                    "condition": "50"
                }
            ]
        },
        "table_name": "players",
        "id": "254"
    },
    {
        "question": "Calculate the total number of tours for every ranking date.",
        "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "ranking_date"
                }
            ],
            "measure": [
                {
                    "column": "tours",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "rankings",
        "id": "255"
    },
    {
        "question": "What is the total number of tours for each ranking date?",
        "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "ranking_date"
                }
            ],
            "measure": [
                {
                    "column": "tours",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "rankings",
        "id": "256"
    },
    {
        "question": "Calculate the total number of matches that occurred each year.",
        "SQL": "SELECT count(*), YEAR FROM matches GROUP BY YEAR",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "257"
    },
    {
        "question": "What is the number of matches played per year?",
        "SQL": "SELECT count(*), YEAR FROM matches GROUP BY YEAR",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "matches",
        "id": "258"
    },
    {
        "question": "Identify the names and ranks of the three youngest winners from all the matches.",
        "SQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                },
                {
                    "column": "winner_rank"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "matches",
        "id": "259"
    },
    {
        "question": "Who are the three youngest winners and what are their ranks from all the matches?",
        "SQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                },
                {
                    "column": "winner_rank"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "matches",
        "id": "260"
    },
    {
        "question": "How many unique winners, who were left-handed, played in the WTA Championships?",
        "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "winner_name",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "WTA Championships"
                },
                {
                    "column": "winner_hand",
                    "match_type": "精确匹配",
                    "condition": "L"
                }
            ]
        },
        "table_name": "matches",
        "id": "261"
    },
    {
        "question": "Count the distinct left-handed winners in the WTA Championships.",
        "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [
                {
                    "column": "winner_name",
                    "aggregate_function": "COUNT DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "WTA Championships"
                },
                {
                    "column": "winner_hand",
                    "match_type": "精确匹配",
                    "condition": "L"
                }
            ]
        },
        "table_name": "matches",
        "id": "262"
    },
    {
        "question": "Count the players for every type of hand.",
        "SQL": "SELECT count(*), hand FROM players GROUP BY hand",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "hand"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "263"
    },
    {
        "question": "What is the number of players for each type of hand?",
        "SQL": "SELECT count(*), hand FROM players GROUP BY hand",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "hand"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "players",
        "id": "264"
    },
    {
        "question": "What is the total number of ships that were captured?",
        "SQL": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "db_id": "battle_death",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "disposition_of_ship",
                    "match_type": "精确匹配",
                    "condition": "Captured"
                }
            ]
        },
        "table_name": "ship",
        "id": "265"
    },
    {
        "question": "What are the highest and lowest number of deaths recorded in each incident?",
        "SQL": "SELECT max(killed) ,  min(killed) FROM death",
        "db_id": "battle_death",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "killed",
                    "aggregate_function": "max"
                },
                {
                    "column": "killed",
                    "aggregate_function": "min"
                }
            ],
            "filter": []
        },
        "table_name": "death",
        "id": "267"
    },
    {
        "question": "What is the average number of people injured per incident?",
        "SQL": "SELECT avg(injured) FROM death",
        "db_id": "battle_death",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "injured",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "death",
        "id": "268"
    },
    {
        "question": "Which battles and their outcomes involved a Bulgarian commander who was not Boril?",
        "SQL": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "db_id": "battle_death",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "RESULT"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "bulgarian_commander",
                    "match_type": "不等于",
                    "condition": "Boril"
                }
            ]
        },
        "table_name": "battle",
        "id": "269"
    },
    {
        "question": "What are the unique battle names where Bulgarian commander Kaloyan faced Latin commander Baldwin I?",
        "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "db_id": "battle_death",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "bulgarian_commander",
                    "match_type": "精确匹配",
                    "condition": "Kaloyan"
                },
                {
                    "column": "latin_commander",
                    "match_type": "精确匹配",
                    "condition": "Baldwin I"
                }
            ]
        },
        "table_name": "battle",
        "id": "270"
    },
    {
        "question": "What is the number of unique outcomes in the battles?",
        "SQL": "SELECT count(DISTINCT RESULT) FROM battle",
        "db_id": "battle_death",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "RESULT",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "battle",
        "id": "271"
    },
    {
        "question": "Which death event notes contain the substring 'East'?",
        "SQL": "SELECT note FROM death WHERE note LIKE '%East%'",
        "db_id": "battle_death",
        "config": {
            "dimension": [
                {
                    "column": "note"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "note",
                    "match_type": "模糊匹配",
                    "condition": "East"
                }
            ]
        },
        "table_name": "death",
        "id": "272"
    },
    {
        "question": "Can you provide all the addresses with line 1 and line 2 included?",
        "SQL": "SELECT line_1 ,  line_2 FROM addresses",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "line_1"
                },
                {
                    "column": "line_2"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "addresses",
        "id": "273"
    },
    {
        "question": "Can you provide me with the first and second lines of all addresses?",
        "SQL": "SELECT line_1 ,  line_2 FROM addresses",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "line_1"
                },
                {
                    "column": "line_2"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "addresses",
        "id": "274"
    },
    {
        "question": "What is the total number of courses listed?",
        "SQL": "SELECT count(*) FROM Courses",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Courses",
        "id": "275"
    },
    {
        "question": "What is the total number of courses?",
        "SQL": "SELECT count(*) FROM Courses",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Courses",
        "id": "276"
    },
    {
        "question": "What is the description of the math course?",
        "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "course_name",
                    "match_type": "精确匹配",
                    "condition": "math"
                }
            ]
        },
        "table_name": "Courses",
        "id": "277"
    },
    {
        "question": "Can you provide the descriptions of all math courses?",
        "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "course_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "course_name",
                    "match_type": "精确匹配",
                    "condition": "math"
                }
            ]
        },
        "table_name": "Courses",
        "id": "278"
    },
    {
        "question": "What is the postal code for the address located in Port Chelsea?",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "zip_postcode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "city",
                    "match_type": "精确匹配",
                    "condition": "Port Chelsea"
                }
            ]
        },
        "table_name": "Addresses",
        "id": "279"
    },
    {
        "question": "Can you provide me with the zip code of Port Chelsea?",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "zip_postcode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "city",
                    "match_type": "精确匹配",
                    "condition": "Port Chelsea"
                }
            ]
        },
        "table_name": "Addresses",
        "id": "280"
    },
    {
        "question": "How many unique departments provide at least one degree program?",
        "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "department_id",
                    "aggregate_function": "COUNT_DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Degree_Programs",
        "id": "281"
    },
    {
        "question": "What is the number of unique departments that provide degree programs?",
        "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "department_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Degree_Programs",
        "id": "282"
    },
    {
        "question": "What is the number of unique degree names available?",
        "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "degree_summary_name",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Degree_Programs",
        "id": "283"
    },
    {
        "question": "What is the total number of unique degrees available?",
        "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "degree_summary_name",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Degree_Programs",
        "id": "284"
    },
    {
        "question": "Can you provide me with the names and descriptions of all the sections?",
        "SQL": "SELECT section_name ,  section_description FROM Sections",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "section_name"
                },
                {
                    "column": "section_description"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Sections",
        "id": "285"
    },
    {
        "question": "Can you provide the names and descriptions of all the sections?",
        "SQL": "SELECT section_name ,  section_description FROM Sections",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "section_name"
                },
                {
                    "column": "section_description"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Sections",
        "id": "286"
    },
    {
        "question": "Display the section names in reverse alphabetical order.",
        "SQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "section_name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Sections",
        "id": "287"
    },
    {
        "question": "List the names of the sections in descending alphabetical order.",
        "SQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "section_name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Sections",
        "id": "288"
    },
    {
        "question": "Can you provide the description for the department that includes 'computer' in its name?",
        "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "department_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "department_name",
                    "match_type": "模糊匹配",
                    "condition": "computer"
                }
            ]
        },
        "table_name": "Departments",
        "id": "289"
    },
    {
        "question": "Can you provide the department description for the department with 'computer' in its name?",
        "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "department_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "department_name",
                    "match_type": "模糊匹配",
                    "condition": "computer"
                }
            ]
        },
        "table_name": "Departments",
        "id": "290"
    },
    {
        "question": "Can you provide the mobile phone number for the person named Timmothy Ward?",
        "SQL": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "cell_mobile_number",
                    "aggregate_function": "NONE"
                }
            ],
            "filter": [
                {
                    "column": "first_name",
                    "match_type": "精确匹配",
                    "condition": "Timmothy"
                },
                {
                    "column": "last_name",
                    "match_type": "精确匹配",
                    "condition": "Ward"
                }
            ]
        },
        "table_name": "Students",
        "id": "291"
    },
    {
        "question": "Can you provide me with the mobile phone number for the student named Timmothy Ward?",
        "SQL": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "cell_mobile_number"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "first_name",
                    "match_type": "精确匹配",
                    "condition": "timmothy"
                },
                {
                    "column": "last_name",
                    "match_type": "精确匹配",
                    "condition": "ward"
                }
            ]
        },
        "table_name": "students",
        "id": "292"
    },
    {
        "question": "What is the name of the first student who registered? Include their first, middle, and last names.",
        "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "middle_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_first_registered",
                    "match_type": "absolute_time",
                    "condition": [
                        "1970-01-01",
                        null
                    ]
                }
            ]
        },
        "table_name": "Students",
        "id": "293"
    },
    {
        "question": "Who is the first student that registered, by their full name?",
        "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "middle_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Students",
        "id": "294"
    },
    {
        "question": "What is the name of the earliest graduate from the school? Provide the first name, middle name, and last name.",
        "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "middle_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_left",
                    "match_type": "最早",
                    "condition": "ASC LIMIT 1"
                }
            ]
        },
        "table_name": "Students",
        "id": "295"
    },
    {
        "question": "Who is the earliest school graduate, by their full name?",
        "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "middle_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Students",
        "id": "296"
    },
    {
        "question": "List the first names of students whose current address differs from their permanent address.",
        "SQL": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "current_address_id",
                    "match_type": "不等于",
                    "condition": "permanent_address_id"
                }
            ]
        },
        "table_name": "Students",
        "id": "297"
    },
    {
        "question": "Can you provide the first name of the student whose current address does not match their permanent address?",
        "SQL": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "current_address_id",
                    "match_type": "不等于",
                    "condition": "permanent_address_id"
                }
            ]
        },
        "table_name": "Students",
        "id": "298"
    },
    {
        "question": "What is the average date when the transcripts were printed?",
        "SQL": "SELECT avg(transcript_date) FROM Transcripts",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "Transcripts",
        "id": "299"
    },
    {
        "question": "What is the mean date of the transcripts?",
        "SQL": "SELECT avg(transcript_date) FROM Transcripts",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "Transcripts",
        "id": "300"
    },
    {
        "question": "What is the date of the earliest transcript release along with its details?",
        "SQL": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "other_details"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Transcripts",
        "id": "301"
    },
    {
        "question": "Can you provide the earliest date a transcript was released along with any additional information?",
        "SQL": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "other_details"
                }
            ],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "Transcripts",
        "id": "302"
    },
    {
        "question": "What is the total number of transcripts that have been released?",
        "SQL": "SELECT count(*) FROM Transcripts",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Transcripts",
        "id": "303"
    },
    {
        "question": "What is the total number of transcripts listed?",
        "SQL": "SELECT count(*) FROM Transcripts",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Transcripts",
        "id": "304"
    },
    {
        "question": "When was the most recent transcript released?",
        "SQL": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Transcripts",
        "id": "305"
    },
    {
        "question": "What is the date of the most recent transcript release?",
        "SQL": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Transcripts",
        "id": "306"
    },
    {
        "question": "What is the maximum number of times a course enrollment appears across different transcripts, and provide the course enrollment ID?",
        "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "student_course_id"
                }
            ],
            "measure": [
                {
                    "column": "student_course_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Transcript_Contents",
        "id": "307"
    },
    {
        "question": "What is the highest frequency of a course appearing across various transcripts, and which course ID has this frequency?",
        "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "student_course_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Transcript_Contents",
        "id": "308"
    },
    {
        "question": "What is the number of unique current addresses where students reside?",
        "SQL": "SELECT count(DISTINCT current_address_id) FROM Students",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "current_address_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Students",
        "id": "309"
    },
    {
        "question": "Display all student information in reverse alphabetical order.",
        "SQL": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "other_student_details"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Students",
        "id": "311"
    },
    {
        "question": "Can you provide other details about students sorted in descending alphabetical order?",
        "SQL": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": []
        },
        "table_name": "Students",
        "id": "312"
    },
    {
        "question": "What is the description of section h?",
        "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "section_name",
                    "match_type": "精确匹配",
                    "condition": "h"
                }
            ]
        },
        "table_name": "Sections",
        "id": "313"
    },
    {
        "question": "Can you provide the description of the section with the name 'h'?",
        "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "section_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "section_name",
                    "match_type": "精确匹配",
                    "condition": "h"
                }
            ]
        },
        "table_name": "Sections",
        "id": "314"
    },
    {
        "question": "Provide the titles of all cartoons sorted alphabetically.",
        "SQL": "SELECT Title FROM Cartoon ORDER BY title",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Cartoon",
        "id": "315"
    },
    {
        "question": "List the titles of the cartoons in alphabetical order.",
        "SQL": "SELECT Title FROM Cartoon ORDER BY title",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Cartoon",
        "id": "316"
    },
    {
        "question": "Show me the titles of all cartoons directed by Ben Jones.",
        "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "317"
    },
    {
        "question": "List all cartoon titles directed by Ben Jones.",
        "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "318"
    },
    {
        "question": "What is the total number of cartoons authored by Joseph Kuhr?",
        "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Written_by",
                    "match_type": "精确匹配",
                    "condition": "Joseph Kuhr"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "319"
    },
    {
        "question": "How many cartoons has Joseph Kuhr written?",
        "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Written_by",
                    "match_type": "精确匹配",
                    "condition": "Joseph Kuhr"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "320"
    },
    {
        "question": "display the names of all cartoons along with their directors, sorted by their original airing date",
        "SQL": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "title"
                },
                {
                    "column": "Directed_by"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Cartoon",
        "id": "321"
    },
    {
        "question": "Can you provide the names and directors of all cartoons, sorted by their original air date?",
        "SQL": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "title"
                },
                {
                    "column": "Directed_by"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Cartoon",
        "id": "322"
    },
    {
        "question": "Show the titles of all cartoons that were directed by either 'Ben Jones' or 'Brandon Vietti'.",
        "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                },
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Brandon Vietti"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "323"
    },
    {
        "question": "What are the titles of all cartoons that were directed by Ben Jones or Brandon Vietti?",
        "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                },
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Brandon Vietti"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "324"
    },
    {
        "question": "What is the country with the highest number of TV channels, and how many TV channels does it have?",
        "SQL": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Country"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "TV_Channel",
        "id": "325"
    },
    {
        "question": "Which country has the highest number of TV channels, and how many are there?",
        "SQL": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Country"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "TV_Channel",
        "id": "326"
    },
    {
        "question": "Show the count of unique series names and contents from the TV Channel table.",
        "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "series_name",
                    "aggregate_function": "DISTINCT"
                },
                {
                    "column": "content",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "TV_Channel",
        "id": "327"
    },
    {
        "question": "What is the number of unique series and contents in the TV Channel table?",
        "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "series_name",
                    "aggregate_function": "DISTINCT"
                },
                {
                    "column": "content",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "TV_Channel",
        "id": "328"
    },
    {
        "question": "What content does the TV Channel with the series name 'Sky Radio' have?",
        "SQL": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "series_name",
                    "match_type": "精确匹配",
                    "condition": "Sky Radio"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "329"
    },
    {
        "question": "What does the series Sky Radio include in its content?",
        "SQL": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Content"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "series_name",
                    "match_type": "精确匹配",
                    "condition": "Sky Radio"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "330"
    },
    {
        "question": "What is the Package Option for the TV Channel with the series name 'Sky Radio'? ",
        "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Package_Option"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "series_name",
                    "match_type": "精确匹配",
                    "condition": "Sky Radio"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "331"
    },
    {
        "question": "What Package Options are available for TV Channels with the series name 'Sky Radio'?",
        "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Package_Option"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "series_name",
                    "match_type": "精确匹配",
                    "condition": "Sky Radio"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "332"
    },
    {
        "question": "What is the number of TV Channels that use English as their language?",
        "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "精确匹配",
                    "condition": "English"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "333"
    },
    {
        "question": "What is the number of TV Channels that use English?",
        "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "精确匹配",
                    "condition": "English"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "334"
    },
    {
        "question": "Identify the language with the fewest TV channels, and list the language along with the number of TV channels.",
        "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "TV_Channel",
        "id": "335"
    },
    {
        "question": "Which language is used by the fewest TV channels, and how many channels use this language?",
        "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "TV_Channel",
        "id": "336"
    },
    {
        "question": "列出每种语言及其使用的电视频道数量。",
        "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": []
        },
        "table_name": "TV_Channel",
        "id": "337"
    },
    {
        "question": "List the number of TV Channels for each language.",
        "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "TV_Channel",
        "id": "338"
    },
    {
        "question": "Display the episodes of all TV series, ordered by their ratings.",
        "SQL": "SELECT Episode FROM TV_series ORDER BY rating",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Episode"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "TV_series",
        "id": "339"
    },
    {
        "question": "List all episodes in descending order of their ratings.",
        "SQL": "SELECT Episode FROM TV_series ORDER BY rating",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Episode"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "TV_series",
        "id": "340"
    },
    {
        "question": "Show the top 3 TV series with the highest ratings, including their episodes and ratings.",
        "SQL": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Episode"
                }
            ],
            "measure": [
                {
                    "column": "Rating",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "TV_series",
        "id": "341"
    },
    {
        "question": "Can you list the top 3 highest-rated episodes from the TV series table along with their ratings?",
        "SQL": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Episode"
                }
            ],
            "measure": [
                {
                    "column": "Rating",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "TV_series",
        "id": "342"
    },
    {
        "question": "What are the highest and lowest shares for TV series?",
        "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SHARE",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "SHARE",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "TV_series",
        "id": "343"
    },
    {
        "question": "What are the highest and lowest shares recorded for the TV series?",
        "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SHARE",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "SHARE",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "TV_series",
        "id": "344"
    },
    {
        "question": "When was the air date for the episode titled 'A Love of a Lifetime' in the TV series?",
        "SQL": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Air_Date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Episode",
                    "match_type": "精确匹配",
                    "condition": "A Love of a Lifetime"
                }
            ]
        },
        "table_name": "TV_series",
        "id": "345"
    },
    {
        "question": "What is the air date for the episode titled 'A Love of a Lifetime'?",
        "SQL": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Air_Date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Episode",
                    "match_type": "精确匹配",
                    "condition": "A Love of a Lifetime"
                }
            ]
        },
        "table_name": "TV_series",
        "id": "346"
    },
    {
        "question": "What is the weekly ranking of the TV series episode titled 'A Love of a Lifetime'?",
        "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Weekly_Rank",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Episode",
                    "match_type": "精确匹配",
                    "condition": "A Love of a Lifetime"
                }
            ]
        },
        "table_name": "TV_series",
        "id": "347"
    },
    {
        "question": "What is the weekly ranking for the episode 'A Love of a Lifetime'? ",
        "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Weekly_Rank"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Episode",
                    "match_type": "精确匹配",
                    "condition": "A Love of a Lifetime"
                }
            ]
        },
        "table_name": "TV_series",
        "id": "348"
    },
    {
        "question": "Calculate the total number of cartoons for each director from the list.",
        "SQL": "SELECT count(*), Directed_by FROM cartoon GROUP BY Directed_by",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Directed_by"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "cartoon",
        "id": "349"
    },
    {
        "question": "What is the number of cartoons created by each director?",
        "SQL": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Directed_by"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "cartoon",
        "id": "350"
    },
    {
        "question": "Identify the production code and channel for the cartoon that was most recently broadcasted.",
        "SQL": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "production_code"
                },
                {
                    "column": "channel"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "cartoon",
        "id": "351"
    },
    {
        "question": "What are the production code and channel of the latest cartoon?",
        "SQL": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "production_code"
                },
                {
                    "column": "channel"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "original_air_date",
                    "match_type": "relative_time",
                    "condition": "latest_data_date"
                }
            ]
        },
        "table_name": "cartoon",
        "id": "352"
    },
    {
        "question": "Identify the package option and series name for TV channels that offer high definition TV.",
        "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "package_option"
                },
                {
                    "column": "series_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "hight_definition_TV",
                    "match_type": "精确匹配",
                    "condition": "yes"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "353"
    },
    {
        "question": "For the TV channels that support high definition, what are the available package options and series names?",
        "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "package_option"
                },
                {
                    "column": "series_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "hight_definition_TV",
                    "match_type": "精确匹配",
                    "condition": "yes"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "354"
    },
    {
        "question": "获取不使用英语的电视频道的像素宽高比和国家。",
        "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Pixel_aspect_ratio_PAR"
                },
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "不等于",
                    "condition": "English"
                }
            ]
        },
        "table_name": "tv_channel",
        "id": "355"
    },
    {
        "question": "For all TV channels that are not in English, what is their pixel aspect ratio and country of origin?",
        "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Pixel_aspect_ratio_PAR"
                },
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "不等于",
                    "condition": "English"
                }
            ]
        },
        "table_name": "tv_channel",
        "id": "356"
    },
    {
        "question": "获取来自拥有超过两个电视台的国家的电视台ID。",
        "SQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "*",
                    "match_type": "大于",
                    "condition": "2"
                }
            ]
        },
        "table_name": "tv_channel",
        "id": "357"
    },
    {
        "question": "What is the total number of poker players?",
        "SQL": "SELECT count(*) FROM poker_player",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "359"
    },
    {
        "question": "How many poker players are there?",
        "SQL": "SELECT count(*) FROM poker_player",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "360"
    },
    {
        "question": "Show the earnings of poker players sorted from highest to lowest.",
        "SQL": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Earnings",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "361"
    },
    {
        "question": "List the earnings of poker players in descending order.",
        "SQL": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Earnings",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "362"
    },
    {
        "question": "Show the final tables achieved and the top finishes for poker players.",
        "SQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Final_Table_Made"
                }
            ],
            "measure": [
                {
                    "column": "Best_Finish",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "363"
    },
    {
        "question": "Can you provide the number of final tables made and the best finishes for each poker player?",
        "SQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Final_Table_Made"
                },
                {
                    "column": "Best_Finish"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "364"
    },
    {
        "question": "What are the mean earnings for poker players?",
        "SQL": "SELECT avg(Earnings) FROM poker_player",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Earnings",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "365"
    },
    {
        "question": "Calculate the average earnings for all poker players.",
        "SQL": "SELECT avg(Earnings) FROM poker_player",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Earnings",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "366"
    },
    {
        "question": "What is the money rank of the poker player who has earned the most?",
        "SQL": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Money_Rank"
                }
            ],
            "measure": [
                {
                    "column": "Earnings",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "367"
    },
    {
        "question": "What is the money rank of the player who has the highest earnings?",
        "SQL": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Money_Rank"
                }
            ],
            "measure": [
                {
                    "column": "Earnings",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "poker_player",
        "id": "368"
    },
    {
        "question": "What is the highest number of final tables achieved by poker players who have earned less than 200,000?",
        "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Final_Table_Made",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Earnings",
                    "match_type": "小于",
                    "condition": "200000"
                }
            ]
        },
        "table_name": "poker_player",
        "id": "369"
    },
    {
        "question": "Find the highest number of final tables made by poker players with earnings less than 200000.",
        "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Final_Table_Made",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Earnings",
                    "match_type": "小于",
                    "condition": "200000"
                }
            ]
        },
        "table_name": "poker_player",
        "id": "370"
    },
    {
        "question": "Can you provide a list of nationalities along with the number of individuals from each nationality?",
        "SQL": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Nationality"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "people",
        "id": "371"
    },
    {
        "question": "What is the count of individuals for each nationality?",
        "SQL": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Nationality"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "people",
        "id": "372"
    },
    {
        "question": "Which nationality is the most frequent among people?",
        "SQL": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Nationality"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "people",
        "id": "373"
    },
    {
        "question": "What is the most frequent nationality among all individuals?",
        "SQL": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Nationality"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "people",
        "id": "374"
    },
    {
        "question": "Which nationalities are represented by at least two individuals?",
        "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Nationality"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "*",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ]
        },
        "table_name": "people",
        "id": "375"
    },
    {
        "question": "List the nationalities that have two or more individuals.",
        "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Nationality"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "COUNT(*)",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ]
        },
        "table_name": "people",
        "id": "376"
    },
    {
        "question": "Display the names and birth dates of individuals sorted in ascending order by name.",
        "SQL": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "Birth_Date"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "people",
        "id": "377"
    },
    {
        "question": "List the names and birth dates of individuals, sorted alphabetically by name.",
        "SQL": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "Birth_Date"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "people",
        "id": "378"
    },
    {
        "question": "List the names of individuals who are not from Russia.",
        "SQL": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "不等于",
                    "condition": "Russia"
                }
            ]
        },
        "table_name": "people",
        "id": "379"
    },
    {
        "question": "Who are the individuals that do not have Russian nationality?",
        "SQL": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "db_id": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "不等于",
                    "condition": "Russia"
                }
            ]
        },
        "table_name": "people",
        "id": "380"
    },
    {
        "question": "What is the number of unique nationalities?",
        "SQL": "SELECT count(DISTINCT Nationality) FROM people",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Nationality",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": []
        },
        "table_name": "people",
        "id": "381"
    },
    {
        "question": "Calculate the total number of unique nationalities.",
        "SQL": "SELECT count(DISTINCT Nationality) FROM people",
        "db_id": "poker_player",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Nationality",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "people",
        "id": "382"
    },
    {
        "question": "What is the total number of states?",
        "SQL": "SELECT count(*) FROM area_code_state",
        "db_id": "voter_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "area_code_state",
        "id": "383"
    },
    {
        "question": "Display the contestant numbers and names in descending order of contestant names.",
        "SQL": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "db_id": "voter_1",
        "config": {
            "dimension": [
                {
                    "column": "contestant_number"
                },
                {
                    "column": "contestant_name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "contestants",
        "id": "384"
    },
    {
        "question": "Display the vote IDs, phone numbers, and states for all records in the votes table.",
        "SQL": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "db_id": "voter_1",
        "config": {
            "dimension": [
                {
                    "column": "vote_id"
                },
                {
                    "column": "phone_number"
                },
                {
                    "column": "state"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "votes",
        "id": "385"
    },
    {
        "question": "What is the range of values for area codes, including both the highest and lowest?",
        "SQL": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "db_id": "voter_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "area_code",
                    "aggregate_function": "max"
                },
                {
                    "column": "area_code",
                    "aggregate_function": "min"
                }
            ],
            "filter": []
        },
        "table_name": "area_code_state",
        "id": "386"
    },
    {
        "question": "What is the most recent creation date for votes from the state 'CA'? ",
        "SQL": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "db_id": "voter_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "created",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "CA"
                }
            ]
        },
        "table_name": "votes",
        "id": "387"
    },
    {
        "question": "List the names of all contestants except for 'Jessie Alloway'.",
        "SQL": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "db_id": "voter_1",
        "config": {
            "dimension": [
                {
                    "column": "contestant_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "contestant_name",
                    "match_type": "不等于",
                    "condition": "Jessie Alloway"
                }
            ]
        },
        "table_name": "contestants",
        "id": "388"
    },
    {
        "question": "What are the unique states and creation times for all votes?",
        "SQL": "SELECT DISTINCT state ,  created FROM votes",
        "db_id": "voter_1",
        "config": {
            "dimension": [
                {
                    "column": "state"
                },
                {
                    "column": "created"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "votes",
        "id": "389"
    },
    {
        "question": "How many votes have been cast from the states 'NY' or 'CA'?",
        "SQL": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "db_id": "voter_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "state",
                    "match_type": "等于",
                    "condition": "NY"
                },
                {
                    "column": "state",
                    "match_type": "等于",
                    "condition": "CA"
                }
            ]
        },
        "table_name": "votes",
        "id": "390"
    },
    {
        "question": "List the names of all countries that gained independence after 1950.",
        "SQL": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "IndepYear",
                    "match_type": "大于",
                    "condition": "1950"
                }
            ]
        },
        "table_name": "country",
        "id": "391"
    },
    {
        "question": "List the names of countries established after 1950.",
        "SQL": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "IndepYear",
                    "match_type": "大于",
                    "condition": "1950"
                }
            ]
        },
        "table_name": "country",
        "id": "392"
    },
    {
        "question": "What is the number of countries that are governed as a republic?",
        "SQL": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "GovernmentForm",
                    "match_type": "精确匹配",
                    "condition": "Republic"
                }
            ]
        },
        "table_name": "country",
        "id": "393"
    },
    {
        "question": "How many countries have a government form of republic?",
        "SQL": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "GovernmentForm",
                    "match_type": "精确匹配",
                    "condition": "Republic"
                }
            ]
        },
        "table_name": "country",
        "id": "394"
    },
    {
        "question": "What is the combined surface area of all countries in the Caribbean region?",
        "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SurfaceArea",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Region",
                    "match_type": "精确匹配",
                    "condition": "Caribbean"
                }
            ]
        },
        "table_name": "country",
        "id": "395"
    },
    {
        "question": "What is the total surface area of the countries in the Caribbean?",
        "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SurfaceArea",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Region",
                    "match_type": "精确匹配",
                    "condition": "Caribbean"
                }
            ]
        },
        "table_name": "country",
        "id": "396"
    },
    {
        "question": "In which continent is Anguilla located?",
        "SQL": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Continent"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Anguilla"
                }
            ]
        },
        "table_name": "country",
        "id": "397"
    },
    {
        "question": "Which continent does Anguilla belong to?",
        "SQL": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Continent"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Anguilla"
                }
            ]
        },
        "table_name": "country",
        "id": "398"
    },
    {
        "question": "What is the population and life expectancy of Brazil?",
        "SQL": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Brazil"
                }
            ]
        },
        "table_name": "country",
        "id": "399"
    },
    {
        "question": "What is the population and life expectancy of Brazil?",
        "SQL": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Brazil"
                }
            ]
        },
        "table_name": "country",
        "id": "400"
    },
    {
        "question": "Can you provide the population and region of Angola?",
        "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Region"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Angola"
                }
            ]
        },
        "table_name": "country",
        "id": "401"
    },
    {
        "question": "Which region is Angola located in, and what is the population of Angola?",
        "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Region"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Name",
                    "match_type": "精确匹配",
                    "condition": "Angola"
                }
            ]
        },
        "table_name": "country",
        "id": "402"
    },
    {
        "question": "What is the mean life expectancy for countries located in Central Africa?",
        "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Region",
                    "match_type": "精确匹配",
                    "condition": "Central Africa"
                }
            ]
        },
        "table_name": "country",
        "id": "403"
    },
    {
        "question": "What is the average life expectancy of people in Central Africa?",
        "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Region",
                    "match_type": "精确匹配",
                    "condition": "Central Africa"
                }
            ]
        },
        "table_name": "country",
        "id": "404"
    },
    {
        "question": "Which country in Asia has the lowest life expectancy?",
        "SQL": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ]
        },
        "table_name": "country",
        "id": "405"
    },
    {
        "question": "What is the name of the Asian country with the lowest life expectancy?",
        "SQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ]
        },
        "table_name": "country",
        "id": "406"
    },
    {
        "question": "What are the total population and highest GNP in Asia?",
        "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "GNP",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ]
        },
        "table_name": "country",
        "id": "407"
    },
    {
        "question": "What is the total population of Asia and what is the highest GNP in the region?",
        "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "GNP",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ]
        },
        "table_name": "country",
        "id": "408"
    },
    {
        "question": "What is the mean life expectancy for republics in Africa?",
        "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Africa"
                },
                {
                    "column": "GovernmentForm",
                    "match_type": "精确匹配",
                    "condition": "Republic"
                }
            ]
        },
        "table_name": "country",
        "id": "409"
    },
    {
        "question": "What is the average life expectancy for republics in Africa?",
        "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Africa"
                },
                {
                    "column": "GovernmentForm",
                    "match_type": "精确匹配",
                    "condition": "Republic"
                }
            ]
        },
        "table_name": "country",
        "id": "410"
    },
    {
        "question": "What is the combined surface area of Asia and Europe?",
        "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SurfaceArea",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                },
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Europe"
                }
            ]
        },
        "table_name": "country",
        "id": "411"
    },
    {
        "question": "Calculate the total surface area of countries located in Asia or Europe.",
        "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SurfaceArea",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                },
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Europe"
                }
            ]
        },
        "table_name": "country",
        "id": "412"
    },
    {
        "question": "What is the total population of the Gelderland district?",
        "SQL": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "District",
                    "match_type": "精确匹配",
                    "condition": "Gelderland"
                }
            ]
        },
        "table_name": "city",
        "id": "413"
    },
    {
        "question": "What are the average GNP and total population of all countries that are US territories?",
        "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "GNP",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "GovernmentForm",
                    "match_type": "精确匹配",
                    "condition": "US Territory"
                }
            ]
        },
        "table_name": "country",
        "id": "415"
    },
    {
        "question": "Provide the average GNP and total population of countries that are classified as US territories.",
        "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "GNP",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "GovernmentForm",
                    "match_type": "精确匹配",
                    "condition": "US Territory"
                }
            ]
        },
        "table_name": "country",
        "id": "416"
    },
    {
        "question": "What is the number of distinct languages spoken globally?",
        "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LANGUAGE",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "countrylanguage",
        "id": "417"
    },
    {
        "question": "How many different languages are used globally?",
        "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LANGUAGE",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "countrylanguage",
        "id": "418"
    },
    {
        "question": "What is the number of different government forms found in African countries?",
        "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "GovernmentForm"
                }
            ],
            "measure": [
                {
                    "column": "GovernmentForm",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Africa"
                }
            ]
        },
        "table_name": "country",
        "id": "419"
    },
    {
        "question": "What is the number of unique government types found in African countries?",
        "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "GovernmentForm",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Africa"
                }
            ]
        },
        "table_name": "country",
        "id": "420"
    },
    {
        "question": "What is the name, population, and life expectancy of the largest Asian country by area?",
        "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "Population"
                },
                {
                    "column": "LifeExpectancy"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ]
        },
        "table_name": "country",
        "id": "421"
    },
    {
        "question": "What is the name, population, and life expectancy of the largest country in Asia by land area?",
        "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "Population"
                },
                {
                    "column": "LifeExpectancy"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ]
        },
        "table_name": "country",
        "id": "422"
    },
    {
        "question": "Which African countries have a smaller population than the least populous country in Asia?",
        "SQL": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Africa"
                },
                {
                    "column": "population",
                    "match_type": "小于",
                    "condition": "(SELECT max(population) FROM country WHERE Continent = 'Asia')"
                }
            ]
        },
        "table_name": "country",
        "id": "425"
    },
    {
        "question": "What are the names of African countries with a population less than the smallest population of any country in Asia?",
        "SQL": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Africa"
                },
                {
                    "column": "population",
                    "match_type": "小于",
                    "condition": "(SELECT min(population) FROM country WHERE Continent = \"Asia\")"
                }
            ]
        },
        "table_name": "country",
        "id": "426"
    },
    {
        "question": "What are the names of Asian countries with a population greater than the largest population of any country in Africa?",
        "SQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "population",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                },
                {
                    "column": "population",
                    "match_type": "大于",
                    "condition": "(SELECT max(population) FROM country WHERE Continent = 'Africa')"
                }
            ]
        },
        "table_name": "country",
        "id": "427"
    },
    {
        "question": "Which country codes belong to countries where English is not spoken?",
        "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "精确匹配",
                    "condition": "English"
                }
            ]
        },
        "table_name": "countrylanguage",
        "id": "429"
    },
    {
        "question": "Provide the country codes for countries where English is not spoken.",
        "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "精确匹配",
                    "condition": "English"
                }
            ]
        },
        "table_name": "countrylanguage",
        "id": "430"
    },
    {
        "question": "Which country codes belong to countries where languages other than English are spoken?",
        "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "不等于",
                    "condition": "English"
                }
            ]
        },
        "table_name": "countrylanguage",
        "id": "431"
    },
    {
        "question": "Provide the country codes of countries where languages other than English are spoken.",
        "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "不等于",
                    "condition": "English"
                }
            ]
        },
        "table_name": "countrylanguage",
        "id": "432"
    },
    {
        "question": "Can you provide the name, year of independence, and surface area for the country that has the smallest population?",
        "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "IndepYear"
                },
                {
                    "column": "SurfaceArea"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "country",
        "id": "433"
    },
    {
        "question": "Provide the name, year of independence, and surface area for the country with the smallest population.",
        "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "SurfaceArea"
                },
                {
                    "column": "IndepYear"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": []
        },
        "table_name": "country",
        "id": "434"
    },
    {
        "question": "Which country has the largest area, and what is its population, name, and head of state?",
        "SQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "HeadOfState"
                }
            ],
            "measure": [
                {
                    "column": "population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "country",
        "id": "435"
    },
    {
        "question": "Provide the name, population, and head of state for the country with the largest area.",
        "SQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "population"
                },
                {
                    "column": "HeadOfState"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "country",
        "id": "436"
    },
    {
        "question": "统计各区中人口数量超过城市平均人口的城市数目？",
        "SQL": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "District"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Population",
                    "match_type": "大于",
                    "condition": "(SELECT avg(Population) FROM city)"
                }
            ]
        },
        "table_name": "city",
        "id": "437"
    },
    {
        "question": "In each district, how many cities have a population greater than the average population of all cities?",
        "SQL": "SELECT count(*),  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "District"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Population",
                    "match_type": "大于",
                    "condition": "(SELECT avg(Population) FROM city)"
                }
            ]
        },
        "table_name": "city",
        "id": "438"
    },
    {
        "question": "List the government form and the total population for each type of government where the average life expectancy exceeds 72 years.",
        "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "GovernmentForm"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "LifeExpectancy",
                    "match_type": "大于",
                    "condition": "72"
                }
            ]
        },
        "table_name": "country",
        "id": "439"
    },
    {
        "question": "Which government forms have an average life expectancy over 72, and what is the total population for each of these government forms?",
        "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "GovernmentForm"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "LifeExpectancy",
                    "match_type": "大于",
                    "condition": "72"
                }
            ]
        },
        "table_name": "country",
        "id": "440"
    },
    {
        "question": "For each continent, calculate the total population and average life expectancy, but only include those continents where the average life expectancy is less than 72.",
        "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Continent"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "LifeExpectancy",
                    "match_type": "AVG",
                    "condition": "< 72"
                }
            ]
        },
        "table_name": "country",
        "id": "441"
    },
    {
        "question": "List the continents along with their total population and average life expectancy, but only for those continents where the average life expectancy is below 72.",
        "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Continent"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "LifeExpectancy",
                    "match_type": "AVG",
                    "condition": "< 72"
                }
            ]
        },
        "table_name": "country",
        "id": "442"
    },
    {
        "question": "List the names and surface areas of the five countries with the largest land area.",
        "SQL": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "SurfaceArea",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "country",
        "id": "443"
    },
    {
        "question": "Provide the names and surface areas of the top 5 largest countries.",
        "SQL": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "SurfaceArea",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "country",
        "id": "444"
    },
    {
        "question": "Which countries have the highest population, listing the top 3?",
        "SQL": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "country",
        "id": "445"
    },
    {
        "question": "List the names of the top 3 most populous countries.",
        "SQL": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "country",
        "id": "446"
    },
    {
        "question": "Can you provide the names of the three countries with the smallest populations?",
        "SQL": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "country",
        "id": "447"
    },
    {
        "question": "Provide the names of the three countries that have the smallest population.",
        "SQL": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "country",
        "id": "448"
    },
    {
        "question": "What is the number of countries located in Asia?",
        "SQL": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ]
        },
        "table_name": "country",
        "id": "449"
    },
    {
        "question": "How many countries are there in Asia?",
        "SQL": "SELECT count(*) FROM country WHERE continent = 'Asia'",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ]
        },
        "table_name": "country",
        "id": "450"
    },
    {
        "question": "Which countries are located in Europe and have a population of 80,000?",
        "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "continent",
                    "match_type": "精确匹配",
                    "condition": "Europe"
                },
                {
                    "column": "Population",
                    "match_type": "等于",
                    "condition": "80000"
                }
            ]
        },
        "table_name": "country",
        "id": "451"
    },
    {
        "question": "List the names of countries located in Europe with a population of 80,000.",
        "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "continent",
                    "match_type": "精确匹配",
                    "condition": "Europe"
                },
                {
                    "column": "Population",
                    "match_type": "等于",
                    "condition": "80000"
                }
            ]
        },
        "table_name": "country",
        "id": "452"
    },
    {
        "question": "What are the total population and average surface area of countries in North America with a surface area greater than 3000?",
        "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "surfacearea",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "continent",
                    "match_type": "精确匹配",
                    "condition": "north america"
                },
                {
                    "column": "surfacearea",
                    "match_type": "大于",
                    "condition": "3000"
                }
            ]
        },
        "table_name": "country",
        "id": "453"
    },
    {
        "question": "Calculate the total population and the average surface area for countries in North America with a surface area exceeding 3000.",
        "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "surfacearea",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "continent",
                    "match_type": "精确匹配",
                    "condition": "north america"
                },
                {
                    "column": "surfacearea",
                    "match_type": "大于",
                    "condition": "3000"
                }
            ]
        },
        "table_name": "country",
        "id": "454"
    },
    {
        "question": "Which cities have a population ranging from 160,000 to 900,000?",
        "SQL": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Population",
                    "match_type": "在区间",
                    "condition": [
                        160000,
                        900000
                    ]
                }
            ]
        },
        "table_name": "city",
        "id": "455"
    },
    {
        "question": "List the names of cities with a population ranging from 160,000 to 900,000.",
        "SQL": "select name from city where population between 160000 and 900000",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "population",
                    "match_type": "在区间",
                    "condition": [
                        160000,
                        900000
                    ]
                }
            ]
        },
        "table_name": "city",
        "id": "456"
    },
    {
        "question": "What is the language that is spoken in the most countries?",
        "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "countrylanguage",
        "id": "457"
    },
    {
        "question": "What is the language spoken in the highest number of countries?",
        "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "countrylanguage",
        "id": "458"
    },
    {
        "question": "Which language is spoken by the highest percentage of the population in each country?",
        "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                },
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                }
            ],
            "filter": []
        },
        "table_name": "countrylanguage",
        "id": "459"
    },
    {
        "question": "Can you provide the country codes for various countries along with the languages that have the highest percentage of speakers in each?",
        "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                },
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                }
            ],
            "filter": []
        },
        "table_name": "countrylanguage",
        "id": "460"
    },
    {
        "question": "How many countries have Spanish as the language with the highest percentage of speakers?",
        "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                },
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "精确匹配",
                    "condition": "Spanish"
                }
            ]
        },
        "table_name": "countrylanguage",
        "id": "461"
    },
    {
        "question": "How many countries have Spanish as the predominant language?",
        "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "Percentage",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "精确匹配",
                    "condition": "Spanish"
                }
            ]
        },
        "table_name": "countrylanguage",
        "id": "462"
    },
    {
        "question": "Which country codes have the highest percentage of people speaking Spanish?",
        "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "精确匹配",
                    "condition": "Spanish"
                }
            ]
        },
        "table_name": "countrylanguage",
        "id": "463"
    },
    {
        "question": "Provide the country codes where Spanish is the most widely spoken language.",
        "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "精确匹配",
                    "condition": "Spanish"
                }
            ]
        },
        "table_name": "countrylanguage",
        "id": "464"
    },
    {
        "question": "What is the total number of conductors?",
        "SQL": "SELECT count(*) FROM conductor",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "conductor",
        "id": "465"
    },
    {
        "question": "Calculate the total number of conductors.",
        "SQL": "SELECT count(*) FROM conductor",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "conductor",
        "id": "466"
    },
    {
        "question": "Display the names of conductors sorted by their age in ascending order.",
        "SQL": "SELECT Name FROM conductor ORDER BY Age ASC",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "conductor",
        "id": "467"
    },
    {
        "question": "Which conductors do not have USA as their nationality?",
        "SQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "不等于",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "conductor",
        "id": "469"
    },
    {
        "question": "List the names of conductors who are not from the USA.",
        "SQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "不等于",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "conductor",
        "id": "470"
    },
    {
        "question": "List the record companies of orchestras sorted by their founding years in descending order.",
        "SQL": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "orchestra",
        "id": "471"
    },
    {
        "question": "List the record companies of orchestras, ordered from the most recently founded to the oldest.",
        "SQL": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "orchestra",
        "id": "472"
    },
    {
        "question": "What is the mean audience size for the performances?",
        "SQL": "SELECT avg(Attendance) FROM SHOW",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Attendance",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "SHOW",
        "id": "473"
    },
    {
        "question": "Calculate the average attendance for all shows.",
        "SQL": "SELECT avg(Attendance) FROM SHOW",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Attendance",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "SHOW",
        "id": "474"
    },
    {
        "question": "Find the highest and lowest share percentages for performances that are not categorized as 'Live final'.",
        "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SHARE",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "SHARE",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "TYPE",
                    "match_type": "不等于",
                    "condition": "Live final"
                }
            ]
        },
        "table_name": "performance",
        "id": "475"
    },
    {
        "question": "Find the highest and lowest shares for performances excluding those with the type 'Live final'.",
        "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SHARE",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "SHARE",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "TYPE",
                    "match_type": "不等于",
                    "condition": "Live final"
                }
            ]
        },
        "table_name": "performance",
        "id": "476"
    },
    {
        "question": "What is the number of unique nationalities among conductors?",
        "SQL": "SELECT count(DISTINCT Nationality) FROM conductor",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Nationality",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "conductor",
        "id": "477"
    },
    {
        "question": "How many unique nationalities are there among conductors?",
        "SQL": "SELECT count(DISTINCT Nationality) FROM conductor",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Nationality",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "conductor",
        "id": "478"
    },
    {
        "question": "Display the names of conductors sorted by their years of work in descending order.",
        "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Year_of_Work",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "conductor",
        "id": "479"
    },
    {
        "question": "List the names of conductors, ordered from the most to the least experienced in terms of years worked.",
        "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Year_of_Work",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "conductor",
        "id": "480"
    },
    {
        "question": "Identify the conductor who has worked for the longest period and provide their name.",
        "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Year_of_Work",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "conductor",
        "id": "481"
    },
    {
        "question": "Who is the conductor with the most years of experience?",
        "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Year_of_Work",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "conductor",
        "id": "482"
    },
    {
        "question": "Display the various record companies along with the number of orchestras they have.",
        "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "orchestra",
        "id": "483"
    },
    {
        "question": "What is the number of orchestras managed by each record company?",
        "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "orchestra",
        "id": "484"
    },
    {
        "question": "Display the major record formats of orchestras sorted by their frequency in ascending order.",
        "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Major_Record_Format"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "orchestra",
        "id": "485"
    },
    {
        "question": "List the main recording formats used by orchestras, ordered by how often they appear.",
        "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Major_Record_Format"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "orchestra",
        "id": "486"
    },
    {
        "question": "Identify the record company that is associated with the highest number of orchestras.",
        "SQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "orchestra",
        "id": "487"
    },
    {
        "question": "Which record company is utilized by the highest number of orchestras?",
        "SQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "orchestra",
        "id": "488"
    },
    {
        "question": "List the record companies that are associated with orchestras founded both before 2003 and after 2003.",
        "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "小于",
                    "condition": "2003"
                },
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2003"
                }
            ]
        },
        "table_name": "orchestra",
        "id": "489"
    },
    {
        "question": "Which record companies are associated with orchestras established both before and after the year 2003?",
        "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  > 2003",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "小于",
                    "condition": "2003"
                },
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2003"
                }
            ]
        },
        "table_name": "orchestra",
        "id": "490"
    },
    {
        "question": "Count the orchestras that have a major record format of either 'CD' or 'DVD'.",
        "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Major_Record_Format",
                    "match_type": "精确匹配",
                    "condition": "CD"
                },
                {
                    "column": "Major_Record_Format",
                    "match_type": "精确匹配",
                    "condition": "DVD"
                }
            ]
        },
        "table_name": "orchestra",
        "id": "491"
    },
    {
        "question": "How many orchestras use CD or DVD as their primary recording format?",
        "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Major_Record_Format",
                    "match_type": "精确匹配",
                    "condition": "CD"
                },
                {
                    "column": "Major_Record_Format",
                    "match_type": "精确匹配",
                    "condition": "DVD"
                }
            ]
        },
        "table_name": "orchestra",
        "id": "492"
    },
    {
        "question": "What is the total number of high school students?",
        "SQL": "SELECT count(*) FROM Highschooler",
        "db_id": "network_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "493"
    },
    {
        "question": "Calculate the total number of high school students.",
        "SQL": "SELECT count(*) FROM Highschooler",
        "db_id": "network_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "494"
    },
    {
        "question": "Display the names and grades of all high school students.",
        "SQL": "SELECT name ,  grade FROM Highschooler",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "495"
    },
    {
        "question": "List the names and grades of all high school students.",
        "SQL": "SELECT name ,  grade FROM Highschooler",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "496"
    },
    {
        "question": "Display all the grades of the high school students.",
        "SQL": "SELECT grade FROM Highschooler",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "497"
    },
    {
        "question": "What grade is each high school student in?",
        "SQL": "SELECT grade FROM Highschooler",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "498"
    },
    {
        "question": "In which grade is Kyle?",
        "SQL": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Kyle"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "499"
    },
    {
        "question": "What is the grade of the high school student named Kyle?",
        "SQL": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Kyle"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "500"
    },
    {
        "question": "List the names of all 10th-grade high school students.",
        "SQL": "SELECT name FROM Highschooler WHERE grade = 10",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "501"
    },
    {
        "question": "Can you provide the names of all 10th-grade high school students?",
        "SQL": "SELECT name FROM Highschooler WHERE grade  =  10",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "502"
    },
    {
        "question": "Display the ID for the high school student named Kyle.",
        "SQL": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "ID"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Kyle"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "503"
    },
    {
        "question": "What is the ID of the highschooler named Kyle?",
        "SQL": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
        "db_id": "network_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "ID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Kyle"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "504"
    },
    {
        "question": "What is the total number of students in grades 9 and 10?",
        "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "db_id": "network_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "9"
                },
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "505"
    },
    {
        "question": "How many students are there in 9th and 10th grades?",
        "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "db_id": "network_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "9"
                },
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "506"
    },
    {
        "question": "Display the count of high school students per grade.",
        "SQL": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "507"
    },
    {
        "question": "What is the number of high school students in each grade?",
        "SQL": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "508"
    },
    {
        "question": "What is the grade with the highest number of high school students?",
        "SQL": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "509"
    },
    {
        "question": "Find the grade with the highest number of high school students.",
        "SQL": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": []
        },
        "table_name": "Highschooler",
        "id": "510"
    },
    {
        "question": "List all grades with a minimum of 4 students.",
        "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于等于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "511"
    },
    {
        "question": "What are the grades that have at least 4 high school students?",
        "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于等于",
                    "condition": "4"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "512"
    },
    {
        "question": "列出每个学生的ID及其对应的朋友数量。",
        "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "student_id"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Friend",
        "id": "513"
    },
    {
        "question": "What is the number of friends for each student?",
        "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "student_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Friend",
        "id": "514"
    },
    {
        "question": "Calculate the total number of likes per student ID.",
        "SQL": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "student_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Likes",
        "id": "515"
    },
    {
        "question": "What is the number of likes for each student ID?",
        "SQL": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "student_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Likes",
        "id": "516"
    },
    {
        "question": "Show the email addresses of the professionals residing in Hawaii or Wisconsin.",
        "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "email_address"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "Hawaii"
                },
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "Wisconsin"
                }
            ]
        },
        "table_name": "Professionals",
        "id": "517"
    },
    {
        "question": "Can you provide the email addresses of the professionals who reside in Hawaii or Wisconsin?",
        "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "email_address"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "Hawaii"
                },
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "Wisconsin"
                }
            ]
        },
        "table_name": "Professionals",
        "id": "518"
    },
    {
        "question": "What are the arrival and departure dates for all the dogs?",
        "SQL": "SELECT date_arrived ,  date_departed FROM Dogs",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "date_arrived"
                },
                {
                    "column": "date_departed"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Dogs",
        "id": "519"
    },
    {
        "question": "Show the arrival and departure dates for all dogs.",
        "SQL": "SELECT date_arrived ,  date_departed FROM Dogs",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "date_arrived"
                },
                {
                    "column": "date_departed"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "Dogs",
        "id": "520"
    },
    {
        "question": "What is the number of unique dogs that received any treatments?",
        "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "dog_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Treatments",
        "id": "521"
    },
    {
        "question": "How many unique dogs received treatment?",
        "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "dog_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Treatments",
        "id": "522"
    },
    {
        "question": "How many unique professionals have provided treatments to dogs?",
        "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "professional_id",
                    "aggregate_function": "COUNT DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Treatments",
        "id": "523"
    },
    {
        "question": "Determine how many professionals have provided treatments to dogs.",
        "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "professional_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Treatments",
        "id": "524"
    },
    {
        "question": "List the role, street, city, and state of professionals who live in a city that includes 'West' in its name.",
        "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "role_code"
                },
                {
                    "column": "street"
                },
                {
                    "column": "city"
                },
                {
                    "column": "state"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "city",
                    "match_type": "模糊匹配",
                    "condition": "West"
                }
            ]
        },
        "table_name": "professionals",
        "id": "525"
    },
    {
        "question": "Identify the role, street address, city, and state of the professionals residing in cities that include 'West' as part of their name.",
        "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "role_code"
                },
                {
                    "column": "street"
                },
                {
                    "column": "city"
                },
                {
                    "column": "state"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "city",
                    "match_type": "模糊匹配",
                    "condition": "%West%"
                }
            ]
        },
        "table_name": "professionals",
        "id": "526"
    },
    {
        "question": "List the first name, last name, and email of owners who live in a state with 'North' in its name.",
        "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                },
                {
                    "column": "email_address"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state",
                    "match_type": "模糊匹配",
                    "condition": "North"
                }
            ]
        },
        "table_name": "Owners",
        "id": "527"
    },
    {
        "question": "Provide the first name, last name, and email address of owners who reside in a state with 'North' in its name.",
        "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                },
                {
                    "column": "email_address"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state",
                    "match_type": "模糊匹配",
                    "condition": "North"
                }
            ]
        },
        "table_name": "Owners",
        "id": "528"
    },
    {
        "question": "What is the number of dogs whose age is less than the average age?",
        "SQL": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "( SELECT avg(age) FROM Dogs )"
                }
            ]
        },
        "table_name": "Dogs",
        "id": "529"
    },
    {
        "question": "Calculate the total number of dogs that are younger than the average age of all dogs.",
        "SQL": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "( SELECT avg(age) FROM Dogs )"
                }
            ]
        },
        "table_name": "Dogs",
        "id": "530"
    },
    {
        "question": "What is the cost of the latest treatment?",
        "SQL": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "cost_of_treatment",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Treatments",
        "id": "531"
    },
    {
        "question": "What is the cost of the latest treatment that was performed?",
        "SQL": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "cost_of_treatment",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Treatments",
        "id": "532"
    },
    {
        "question": "Show the names, ages, and weights of the dogs that have been abandoned (where 1 indicates yes).",
        "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "age"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "abandoned_yn",
                    "match_type": "等于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "Dogs",
        "id": "533"
    },
    {
        "question": "Can you provide me with the names, ages, and weights of the dogs that have been abandoned? In the database, 1 indicates yes and 0 indicates no.",
        "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "age"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "abandoned_yn",
                    "match_type": "等于",
                    "condition": "1"
                }
            ]
        },
        "table_name": "Dogs",
        "id": "534"
    },
    {
        "question": "What is the mean age of all the dogs?",
        "SQL": "SELECT avg(age) FROM Dogs",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "Dogs",
        "id": "535"
    },
    {
        "question": "Calculate the mean age of all the dogs.",
        "SQL": "SELECT avg(age) FROM Dogs",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": []
        },
        "table_name": "Dogs",
        "id": "536"
    },
    {
        "question": "What is the maximum age among the dogs?",
        "SQL": "SELECT max(age) FROM Dogs",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Dogs",
        "id": "537"
    },
    {
        "question": "What is the age of the oldest dog?",
        "SQL": "SELECT max(age) FROM Dogs",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Dogs",
        "id": "538"
    },
    {
        "question": "What is the cost of each charge type? Please list the charge type along with the amount.",
        "SQL": "SELECT charge_type ,  charge_amount FROM Charges",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "charge_type"
                }
            ],
            "measure": [
                {
                    "column": "charge_amount",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "Charges",
        "id": "539"
    },
    {
        "question": "Display every charge type along with its corresponding amount.",
        "SQL": "SELECT charge_type ,  charge_amount FROM Charges",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "charge_type"
                }
            ],
            "measure": [
                {
                    "column": "charge_amount",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": []
        },
        "table_name": "Charges",
        "id": "540"
    },
    {
        "question": "What is the cost of the most expensive charge type?",
        "SQL": "SELECT max(charge_amount) FROM Charges",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "charge_amount",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Charges",
        "id": "541"
    },
    {
        "question": "What is the highest charge amount among all charge types?",
        "SQL": "SELECT max(charge_amount) FROM Charges",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "charge_amount",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "Charges",
        "id": "542"
    },
    {
        "question": "Provide the email, mobile number, and home phone for all professionals.",
        "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "email_address"
                },
                {
                    "column": "cell_number"
                },
                {
                    "column": "home_phone"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "professionals",
        "id": "543"
    },
    {
        "question": "Can you provide the email address, cell number, and home phone for each professional?",
        "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "email_address"
                },
                {
                    "column": "cell_number"
                },
                {
                    "column": "home_phone"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "professionals",
        "id": "544"
    },
    {
        "question": "List all unique combinations of breed type and size type.",
        "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "breed_code"
                },
                {
                    "column": "size_code"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "dogs",
        "id": "545"
    },
    {
        "question": "Identify unique combinations of breed and size types for dogs.",
        "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "breed_code"
                },
                {
                    "column": "size_code"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "dogs",
        "id": "546"
    },
    {
        "question": "What is the total number of singers?",
        "SQL": "SELECT count(*) FROM singer",
        "db_id": "singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "547"
    },
    {
        "question": "How many singers are there?",
        "SQL": "SELECT count(*) FROM singer",
        "db_id": "singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "548"
    },
    {
        "question": "Display the names of singers sorted by their net worth in ascending order.",
        "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "singer",
        "id": "549"
    },
    {
        "question": "List the names of singers in ascending order of their net worth.",
        "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "singer",
        "id": "550"
    },
    {
        "question": "Can you provide the birth years and citizenships of the singers?",
        "SQL": "SELECT Birth_Year ,  Citizenship FROM singer",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Birth_Year"
                },
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "singer",
        "id": "551"
    },
    {
        "question": "Can you provide the birth years and nationalities of the singers?",
        "SQL": "SELECT Birth_Year ,  Citizenship FROM singer",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Birth_Year"
                },
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "singer",
        "id": "552"
    },
    {
        "question": "Show the names of singers who are not citizens of France.",
        "SQL": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "不等于",
                    "condition": "France"
                }
            ]
        },
        "table_name": "singer",
        "id": "553"
    },
    {
        "question": "Which singers are not citizens of France?",
        "SQL": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "不等于",
                    "condition": "France"
                }
            ]
        },
        "table_name": "singer",
        "id": "554"
    },
    {
        "question": "List the names of singers born in 1948 or 1949.",
        "SQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Birth_Year",
                    "match_type": "等于",
                    "condition": "1948"
                },
                {
                    "column": "Birth_Year",
                    "match_type": "等于",
                    "condition": "1949"
                }
            ]
        },
        "table_name": "singer",
        "id": "555"
    },
    {
        "question": "List the names of singers born in 1948 or 1949.",
        "SQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Birth_Year",
                    "match_type": "等于",
                    "condition": "1948"
                },
                {
                    "column": "Birth_Year",
                    "match_type": "等于",
                    "condition": "1949"
                }
            ]
        },
        "table_name": "singer",
        "id": "556"
    },
    {
        "question": "Who is the singer with the highest net worth?",
        "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Net_Worth_Millions",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "557"
    },
    {
        "question": "Who is the wealthiest singer?",
        "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Net_Worth_Millions",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "558"
    },
    {
        "question": "Display the various nationalities of singers along with the count of singers for each nationality.",
        "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "559"
    },
    {
        "question": "How many singers are there for each country based on their citizenship?",
        "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "560"
    },
    {
        "question": "What is the most frequent citizenship among singers?",
        "SQL": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "561"
    },
    {
        "question": "Which citizenship is the most frequent among singers?",
        "SQL": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "citizenship"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "562"
    },
    {
        "question": "Display the various citizenships along with the highest net worth of singers for each citizenship.",
        "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "Net_Worth_Millions",
                    "aggregate_function": "max"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "563"
    },
    {
        "question": "What is the highest net worth for each citizenship?",
        "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "Net_Worth_Millions",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": []
        },
        "table_name": "singer",
        "id": "564"
    },
    {
        "question": "Display the citizenship that is common among singers born before 1945 and after 1955.",
        "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1955",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Birth_Year",
                    "match_type": "小于",
                    "condition": "1945"
                },
                {
                    "column": "Birth_Year",
                    "match_type": "大于",
                    "condition": "1955"
                }
            ]
        },
        "table_name": "singer",
        "id": "565"
    },
    {
        "question": "Which citizenships are common among singers born before 1945 and after 1955?",
        "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1955",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Birth_Year",
                    "match_type": "小于",
                    "condition": "1945"
                },
                {
                    "column": "Birth_Year",
                    "match_type": "大于",
                    "condition": "1955"
                }
            ]
        },
        "table_name": "singer",
        "id": "566"
    },
    {
        "question": "What is the total number of available features?",
        "SQL": "SELECT count(*) FROM Other_Available_Features",
        "db_id": "real_estate_properties",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Other_Available_Features",
        "id": "567"
    },
    {
        "question": "Which properties are either houses or apartments with more than one room?",
        "SQL": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "db_id": "real_estate_properties",
        "config": {
            "dimension": [
                {
                    "column": "property_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "property_type_code",
                    "match_type": "等于",
                    "condition": "House"
                },
                {
                    "column": "property_type_code",
                    "match_type": "等于",
                    "condition": "Apartment"
                },
                {
                    "column": "room_count",
                    "match_type": "大于",
                    "condition": 1
                }
            ]
        },
        "table_name": "Properties",
        "id": "568"
    }
]