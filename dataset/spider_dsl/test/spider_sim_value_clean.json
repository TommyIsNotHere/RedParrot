[
  {
    "question": "How many singers are from the USA?",
    "SQL": "SELECT count(*) FROM singer WHERE nationality = 'USA'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1138,
    "table_name": "singer"
  },
  {
    "question": "What is the total number of active singers?",
    "SQL": "SELECT count(*) FROM singer WHERE status = 'active'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "active"
        }
      ]
    },
    "id": 1139,
    "table_name": "singer"
  },
  {
    "question": "Show name, country, age for all singers older than 30 years old, ordered by age from the oldest to the youngest.",
    "SQL": "SELECT name ,  country ,  age FROM singer WHERE age > 30 ORDER BY age DESC",
    "db_id": "concert_singer",
    "table_description": "Table 'singer' contains information about singers including their name, country, and age.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1140,
    "table_name": "singer"
  },
  {
    "question": "What are the names, countries, and ages for every singer older than 30 in descending order of age?",
    "SQL": "SELECT name ,  country ,  age FROM singer WHERE age > 30 ORDER BY age DESC",
    "db_id": "concert_singer",
    "table_description": "The 'singer' table contains information about singers including their name, country, and age.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1141,
    "table_name": "singer"
  },
  {
    "question": "What is the average, minimum, and maximum age of all singers from Italy?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'Italy'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Italy"
        }
      ]
    },
    "id": 1142,
    "table_name": "singer"
  },
  {
    "question": "What is the average, minimum, and maximum age for all French or Italian singers?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country IN ('France', 'Italy')",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "IN ('France', 'Italy')"
        }
      ]
    },
    "id": 1143,
    "table_name": "singer"
  },
  {
    "question": "Show the name and the release year of the song by the youngest singer born after 1990.",
    "SQL": "SELECT song_name ,  song_release_year FROM singer WHERE birth_year > 1990 ORDER BY age LIMIT 1",
    "db_id": "concert_singer",
    "table_description": "The singer table contains information about singers including their songs and birth years.",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birth_year",
          "match_type": "大于",
          "condition": "1990"
        }
      ]
    },
    "id": 1144,
    "table_name": "singer"
  },
  {
    "question": "What are the names and release years for all the songs of the singer who is exactly 25 years old?",
    "SQL": "SELECT song_name ,  song_release_year FROM singer WHERE age = 25",
    "db_id": "concert_singer",
    "table_description": "Table containing information about singers and their songs.",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "等于",
          "condition": "25"
        }
      ]
    },
    "id": 1145,
    "table_name": "singer"
  },
  {
    "question": "What are all distinct countries where singers aged 25 or older are from?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age  >=  25",
    "db_id": "concert_singer",
    "table_description": "Table 'singer' contains information about singers including their country and age.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于等于",
          "condition": "25"
        }
      ]
    },
    "id": 1146,
    "table_name": "singer"
  },
  {
    "question": "What are the different countries with singers above age 25?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age > 25",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "25"
        }
      ]
    },
    "id": 1147,
    "table_name": "singer"
  },
  {
    "question": "Show all countries and the number of singers in each country, but only for countries with more than 5 singers.",
    "SQL": "SELECT country ,  count(*) FROM singer GROUP BY country HAVING count(*) > 5",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1148,
    "table_name": "singer"
  },
  {
    "question": "How many singers are from each country, excluding those from the United States?",
    "SQL": "SELECT country ,  count(*) FROM singer WHERE country != 'United States' GROUP BY country",
    "db_id": "concert_singer",
    "table_description": "The singer table contains information about singers, including their country of origin.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "不等于",
          "condition": "United States"
        }
      ]
    },
    "id": 1149,
    "table_name": "singer"
  },
  {
    "question": "List all song names by singers older than 30 years old.",
    "SQL": "SELECT song_name FROM singer WHERE age > 30",
    "db_id": "concert_singer",
    "table_description": "Table 'singer' contains information about singers and their songs.",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1150,
    "table_name": "singer"
  },
  {
    "question": "What are all the song names by singers who are younger than or equal to the average age?",
    "SQL": "SELECT song_name FROM singer WHERE age <= (SELECT avg(age) FROM singer)",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于等于",
          "condition": "(SELECT avg(age) FROM singer)"
        }
      ]
    },
    "id": 1151,
    "table_name": "singer"
  },
  {
    "question": "Show location and name for all stadiums with a capacity greater than 7000.",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity > 7000",
    "db_id": "concert_singer",
    "table_description": "Table 'stadium' contains information about different stadiums including their names, locations, and capacities.",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "capacity",
          "match_type": "大于",
          "condition": 7000
        }
      ]
    },
    "id": 1152,
    "table_name": "stadium"
  },
  {
    "question": "What are the locations and names of all stations with capacity greater than 7000?",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity > 7000",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "capacity",
          "match_type": "大于",
          "condition": 7000
        }
      ]
    },
    "id": 1153,
    "table_name": "stadium"
  },
  {
    "question": "What is the maximum capacity and the average of all stadiums with a capacity greater than 50000?",
    "SQL": "select max(capacity), avg(capacity) from stadium where capacity > 50000",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        },
        {
          "column": "capacity",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "capacity",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1154,
    "table_name": "stadium"
  },
  {
    "question": "What is the average and maximum capacities for all stadiums with a capacity greater than 50000?",
    "SQL": "select avg(capacity) ,  max(capacity) from stadium where capacity > 50000",
    "db_id": "concert_singer",
    "table_description": "The stadium table contains information about different stadiums including their capacity.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "AVG"
        },
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "capacity",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1155,
    "table_name": "stadium"
  },
  {
    "question": "What is the name and capacity for the stadium with an average attendance greater than 50,000?",
    "SQL": "SELECT name, capacity FROM stadium WHERE average > 50000",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "average",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1156,
    "table_name": "stadium"
  },
  {
    "question": "What is the name and capacity for the stadium with an average attendance greater than 50000?",
    "SQL": "SELECT name ,  capacity FROM stadium WHERE average > 50000",
    "db_id": "concert_singer",
    "table_description": "The stadium table contains information about different stadiums including their names, capacities, and average attendances.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "average",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1157,
    "table_name": "stadium"
  },
  {
    "question": "How many concerts are there in the years before 2016?",
    "SQL": "SELECT count(*) FROM concert WHERE YEAR < 2016",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "小于",
          "condition": "2016"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "id": 1158,
    "table_name": "concert"
  },
  {
    "question": "How many concerts occurred in 2014 or 2016?",
    "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2016",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "id": 1159,
    "table_name": "concert"
  },
  {
    "question": "Which year has most number of concerts with more than 10 attendees?",
    "SQL": "SELECT YEAR FROM concert WHERE attendees > 10 GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "table_description": "Table contains information about concerts, including the year, number of attendees, and other details.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "attendees",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1160,
    "table_name": "concert"
  },
  {
    "question": "What is the year that had more than 100 concerts?",
    "SQL": "SELECT YEAR FROM concert GROUP BY YEAR HAVING COUNT(*) > 100 ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1161,
    "table_name": "concert"
  },
  {
    "question": "Show countries where a singer above age 45 and a singer below 25 are from.",
    "SQL": "SELECT country FROM singer WHERE age  >  45 INTERSECT SELECT country FROM singer WHERE age  <  25",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "45"
        },
        {
          "column": "age",
          "match_type": "小于",
          "condition": "25"
        }
      ]
    },
    "id": 1162,
    "table_name": "singer"
  },
  {
    "question": "what is the name and nation of the singer who have a song having 'Hello' in its name?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hello%'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_name",
          "match_type": "模糊匹配",
          "condition": "Hello"
        }
      ]
    },
    "id": 1163,
    "table_name": "singer"
  },
  {
    "question": "What is the name and country of origin of every singer who has a song with the word 'Love' in its title?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Love%'",
    "db_id": "concert_singer",
    "table_description": "This table contains information about singers, including their names and countries of origin, as well as songs they have performed.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_name",
          "match_type": "模糊匹配",
          "condition": "Love"
        }
      ]
    },
    "table_name": "singer",
    "id": 1164
  },
  {
    "question": "Find the number of pets whose weight is less than or equal to 15.",
    "SQL": "SELECT count(*) FROM pets WHERE weight  <=  15",
    "db_id": "pets_1",
    "table_description": "Table contains information about different pets including their weights.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "小于等于",
          "condition": "15"
        }
      ]
    },
    "id": 1165,
    "table_name": "pets"
  },
  {
    "question": "How many pets have a weight greater than 15?",
    "SQL": "SELECT count(*) FROM pets WHERE weight  >  15",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "15"
        }
      ]
    },
    "id": 1166,
    "table_name": "pets"
  },
  {
    "question": "Find the weight of the youngest dog.",
    "SQL": "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "db_id": "pets_1",
    "table_description": "Table 'pets' contains information about pets including their age and weight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "(SELECT MIN(pet_age) FROM pets)"
        }
      ]
    },
    "id": 1167,
    "table_name": "pets"
  },
  {
    "question": "What is the weight of the pet that is 2 years old?",
    "SQL": "SELECT weight FROM pets WHERE pet_age = 2",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "pets",
    "id": 1168
  },
  {
    "question": "Find the maximum weight for each type of pet, but only for pets that weigh more than 10 pounds. List the maximum weight and pet type.",
    "SQL": "SELECT max(weight) ,  petType FROM pets WHERE weight > 10 GROUP BY petType",
    "db_id": "pets_1",
    "table_description": "The 'pets' table contains information about different types of pets including their weights.",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1169,
    "table_name": "pets"
  },
  {
    "question": "List the maximum weight and type for each type of pet where the weight is greater than 10.",
    "SQL": "SELECT max(weight) ,  petType FROM pets WHERE weight > 10 GROUP BY petType",
    "db_id": "pets_1",
    "table_description": "The pets table contains information about different types of pets including their weight and type.",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1170,
    "table_name": "pets"
  },
  {
    "question": "Find the number of distinct types of pets that are dogs.",
    "SQL": "SELECT count(DISTINCT pettype) FROM pets WHERE pettype = 'dog'",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "pettype",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "pettype",
          "match_type": "精确匹配",
          "condition": "dog"
        }
      ]
    },
    "id": 1171,
    "table_name": "pets"
  },
  {
    "question": "How many different types of pet are there, excluding fish?",
    "SQL": "SELECT count(DISTINCT pettype) FROM pets WHERE pettype != 'fish'",
    "db_id": "pets_1",
    "table_description": "Table 'pets' contains information about various types of pets including their types.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "pettype",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "pettype",
          "match_type": "不等于",
          "condition": "fish"
        }
      ]
    },
    "id": 1172,
    "table_name": "pets"
  },
  {
    "question": "Find the type and weight of the youngest pet that is a dog.",
    "SQL": "SELECT pettype ,  weight FROM pets WHERE pettype = 'dog' ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pettype",
          "match_type": "精确匹配",
          "condition": "dog"
        }
      ]
    },
    "id": 1173,
    "table_name": "pets"
  },
  {
    "question": "What type of pet is the youngest animal, and how much does it weigh, given that the pet's age is less than 2 years?",
    "SQL": "SELECT pettype ,  weight FROM pets WHERE pet_age < 2 ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "小于",
          "condition": "2"
        }
      ]
    },
    "id": 1174,
    "table_name": "pets"
  },
  {
    "question": "Find the id and weight of all pets whose age is greater than or equal to 2.",
    "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >=  2",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 1175,
    "table_name": "pets"
  },
  {
    "question": "What is the id and weight of every pet who is older than 2?",
    "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  2",
    "db_id": "pets_1",
    "table_description": "This table contains information about pets including their id, age, and weight.",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1176,
    "table_name": "pets"
  },
  {
    "question": "Find the average and maximum age for dogs and cats only.",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets WHERE pettype IN ('dog', 'cat') GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "pet_age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "pettype",
          "match_type": "IN",
          "condition": "['dog', 'cat']"
        }
      ]
    },
    "id": 1177,
    "table_name": "pets"
  },
  {
    "question": "What is the average and maximum age for each pet type where the pet's name contains 'Bella'?",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets WHERE pet_name LIKE '%Bella%' GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "Table with information about pets including their types, names, and ages.",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "avg"
        },
        {
          "column": "pet_age",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "pet_name",
          "match_type": "模糊匹配",
          "condition": "Bella"
        }
      ]
    },
    "id": 1178,
    "table_name": "pets"
  },
  {
    "question": "Find the average weight for each pet type where the pet type is 'dog'.",
    "SQL": "SELECT avg(weight) ,  pettype FROM pets WHERE pettype = 'dog' GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "pettype",
          "match_type": "精确匹配",
          "condition": "dog"
        }
      ]
    },
    "id": 1179,
    "table_name": "pets"
  },
  {
    "question": "What is the average weight for each type of pet with a weight greater than 5?",
    "SQL": "SELECT avg(weight) ,  pettype FROM pets WHERE weight > 5 GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1180,
    "table_name": "pets"
  },
  {
    "question": "How many continents have a population greater than 100 million?",
    "SQL": "SELECT count(*) FROM CONTINENTS WHERE population > 100000000;",
    "db_id": "car_1",
    "table_description": "The CONTINENTS table contains information about different continents, including their names and populations.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "population",
          "match_type": "大于",
          "condition": "100000000"
        }
      ]
    },
    "id": 1181,
    "table_name": "CONTINENTS"
  },
  {
    "question": "What is the number of continents with names starting with 'A'?",
    "SQL": "SELECT count(*) FROM CONTINENTS WHERE name LIKE 'A%';",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "A%"
        }
      ]
    },
    "id": 1182,
    "table_name": "CONTINENTS"
  },
  {
    "question": "How many countries have a population greater than 10 million?",
    "SQL": "SELECT count(*) FROM COUNTRIES WHERE POPULATION > 10000000;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "POPULATION",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1183,
    "table_name": "COUNTRIES"
  },
  {
    "question": "How many countries have a population greater than 10 million?",
    "SQL": "SELECT count(*) FROM COUNTRIES WHERE population > 10000000;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1184,
    "table_name": "COUNTRIES"
  },
  {
    "question": "What is the average miles per gallon (mpg) of the cars with 6 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 6;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "6"
        }
      ]
    },
    "id": 1185,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average miles per gallon of all the cars with more than 4 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders > 4;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "id": 1186,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the smallest weight of the car produced with 8 cylinders after 1973?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  >  1973",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "大于",
          "condition": "1973"
        }
      ]
    },
    "id": 1187,
    "table_name": "cars_data"
  },
  {
    "question": "What is the minimum weight of the car with 8 cylinders produced before 1975?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  <  1975",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1975"
        }
      ]
    },
    "id": 1188,
    "table_name": "cars_data"
  },
  {
    "question": "What are all the makers and models of cars made after 2000?",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST WHERE Year > 2000;",
    "db_id": "car_1",
    "table_description": "Table containing car models and their makers with the year they were made.",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year",
          "match_type": "大于",
          "condition": "2000"
        }
      ]
    },
    "id": 1189,
    "table_name": "MODEL_LIST"
  },
  {
    "question": "What are the makers and models for the year 2020?",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST WHERE Year = '2020';",
    "db_id": "car_1",
    "table_description": "This table contains information about different car models and their manufacturers.",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year",
          "match_type": "等于",
          "condition": "2020"
        }
      ]
    },
    "id": 1190,
    "table_name": "MODEL_LIST"
  },
  {
    "question": "What is the number of the cars with horsepower greater than or equal to 160?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >=  160;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "horsepower",
          "match_type": "大于等于",
          "condition": "160"
        }
      ]
    },
    "id": 1191,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with a horsepower greater than 200?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  200;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "horsepower",
          "match_type": "大于",
          "condition": "200"
        }
      ]
    },
    "id": 1192,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average weight of cars each year, but only for cars with a weight greater than 3000?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA WHERE Weight > 3000 GROUP BY YEAR;",
    "db_id": "car_1",
    "table_description": "A dataset containing information about various car models, including their weights and manufacturing years.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Weight",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "id": 1193,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average weight and year for each year, but only for cars with a weight greater than 3000?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA WHERE Weight > 3000 GROUP BY YEAR;",
    "db_id": "car_1",
    "table_description": "This table contains data about various car models including their weights and manufacturing years.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Weight",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "id": 1194,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average horsepower of the cars from 1970 to 1979?",
    "SQL": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR BETWEEN 1970 AND 1979;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "在区间",
          "condition": "1970,1979"
        }
      ]
    },
    "id": 1195,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average horsepower for all cars produced between 1970 and 1980?",
    "SQL": "select avg(horsepower) from cars_data where year >= 1970 and year < 1980;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "在区间",
          "condition": "[1970, 1980)"
        }
      ]
    },
    "id": 1196,
    "table_name": "cars_data"
  },
  {
    "question": "What is the maximum accelerate for different number of cylinders with a horsepower greater than 100?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA WHERE Horsepower > 100 GROUP BY Cylinders;",
    "db_id": "car_1",
    "table_description": "The table contains data about various cars including their specifications such as horsepower, acceleration, and number of cylinders.",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Horsepower",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1197,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the maximum accelerate for all the different cylinders with a horsepower greater than 100?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA WHERE Horsepower > 100 GROUP BY Cylinders;",
    "db_id": "car_1",
    "table_description": "Table containing car data including various attributes such as cylinders, horsepower, and acceleration.",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Horsepower",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1198,
    "table_name": "CARS_DATA"
  },
  {
    "question": "Which model has the most version(make) of cars, excluding models with less than 5 versions?",
    "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model HAVING COUNT(*) > 5 ORDER BY COUNT(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "Table containing car names and their corresponding models.",
    "config": {
      "dimension": [
        {
          "column": "Model"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1199,
    "table_name": "CAR_NAMES"
  },
  {
    "question": "What model has the most different versions, excluding models with fewer than 5 versions?",
    "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model HAVING COUNT(*) > 5 ORDER BY COUNT(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "Table containing car models and their names.",
    "config": {
      "dimension": [
        {
          "column": "Model"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1200,
    "table_name": "CAR_NAMES"
  },
  {
    "question": "How many cars have at least 6 cylinders?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >=  6;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于等于",
          "condition": "6"
        }
      ]
    },
    "id": 1201,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with 6 or more cylinders?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >=  6;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于等于",
          "condition": "6"
        }
      ]
    },
    "id": 1202,
    "table_name": "CARS_DATA"
  },
  {
    "question": "how many cars were produced in the last 5 years?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  >=  2018;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "大于等于",
          "condition": "2018"
        }
      ]
    },
    "id": 1203,
    "table_name": "CARS_DATA"
  },
  {
    "question": "In 1981, how many cars were made?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1981;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "1981"
        }
      ]
    },
    "id": 1204,
    "table_name": "CARS_DATA"
  },
  {
    "question": "In which years cars were produced weighing more than 3500?",
    "SQL": "select distinct year from cars_data where weight > 3500;",
    "db_id": "car_1",
    "table_description": "Table containing car data including year, model, weight, etc.",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": 3500
        }
      ]
    },
    "id": 1205,
    "table_name": "cars_data"
  },
  {
    "question": "What are the different years in which there were cars produced that weighed less than 4000 or more than 3000?",
    "SQL": "select distinct year from cars_data where weight < 4000 or weight > 3000;",
    "db_id": "car_1",
    "table_description": "Table containing data about cars including their year of production and weight.",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "小于",
          "condition": 4000
        },
        {
          "column": "weight",
          "match_type": "大于",
          "condition": 3000
        }
      ]
    },
    "id": 1206,
    "table_name": "cars_data"
  },
  {
    "question": "What is the horsepower of the car that accelerates the fastest and has a weight greater than 2500?",
    "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 WHERE T1.weight > 2500 ORDER BY T1.accelerate DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "CARS_DATA contains various attributes of cars including horsepower, accelerate, and weight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "accelerate",
          "match_type": "ORDER_BY_DESC_LIMIT_1",
          "condition": ""
        },
        {
          "column": "weight",
          "match_type": "greater_than",
          "condition": "2500"
        }
      ]
    },
    "id": 1207,
    "table_name": "CARS_DATA AS T1"
  },
  {
    "question": "What is the maximum horsepower of cars that have an acceleration time greater than 15 seconds?",
    "SQL": "SELECT MAX(T1.horsepower) FROM CARS_DATA AS T1 WHERE T1.accelerate > 15;",
    "db_id": "car_1",
    "table_description": "Table contains data about various car models including their specifications like horsepower, acceleration time, etc.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T1.horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "T1.accelerate",
          "match_type": "大于",
          "condition": "15"
        }
      ]
    },
    "id": 1208,
    "table_name": "CARS_DATA AS T1"
  },
  {
    "question": "How many cars have a larger acceleration time than the car with the second-largest horsepower?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 OFFSET 1 );",
    "db_id": "car_1",
    "table_description": "Table containing data about various car models, including their performance metrics such as horsepower and acceleration.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Accelerate",
          "match_type": "大于",
          "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 OFFSET 1 )"
        }
      ]
    },
    "id": 1209,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with a greater acceleration time than the one with the least horsepower?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower ASC LIMIT 1 );",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Accelerate",
          "match_type": "大于",
          "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower ASC LIMIT 1 )"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1210
  },
  {
    "question": "How many cars have exactly 8 cylinders?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders = 8;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "8"
        }
      ]
    },
    "id": 1211,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with 8 or more cylinders?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders >= 8;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于等于",
          "condition": "8"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1212
  },
  {
    "question": "What is the maximum miles per gallon of the car with 6 cylinders or produced before 1978?",
    "SQL": "select max(mpg) from cars_data where cylinders  =  6 or year  <  1978",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "6"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1978"
        }
      ]
    },
    "id": 1213,
    "table_name": "cars_data"
  },
  {
    "question": "What is the maximum mpg of the cars that had more than 6 cylinders or that were produced before 1975?",
    "SQL": "select max(mpg) from cars_data where cylinders  >  6 or year  <  1975",
    "db_id": "car_1",
    "table_description": "The table 'cars_data' contains information about various car models including their fuel efficiency (mpg), number of cylinders, and production year.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "大于",
          "condition": "6"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1975"
        }
      ]
    },
    "id": 1214,
    "table_name": "cars_data"
  },
  {
    "question": "Which country does the airline with the code 'B6' belong to?",
    "SQL": "SELECT Country FROM AIRLINES WHERE AirlineCode = 'B6'",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirlineCode",
          "match_type": "精确匹配",
          "condition": "B6"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1215
  },
  {
    "question": "Which countries are airlines similar to Jetblue Airways affiliated with?",
    "SQL": "SELECT Country FROM AIRLINES WHERE Airline LIKE '%JetBlue Airways%'",
    "db_id": "flight_2",
    "table_description": "Table containing information about airlines including their names and the countries they are affiliated with.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "模糊匹配",
          "condition": "%JetBlue Airways%"
        }
      ]
    },
    "id": 1216,
    "table_name": "AIRLINES"
  },
  {
    "question": "What is the abbreviation of Airline 'JetBlue Airways Corporation'?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways Corporation'",
    "db_id": "flight_2",
    "table_description": "The AIRLINES table contains information about different airlines including their names and abbreviations.",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways Corporation"
        }
      ]
    },
    "id": 1217,
    "table_name": "AIRLINES"
  },
  {
    "question": "What is the abbreviation for airlines related to Jetblue?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline LIKE \"%JetBlue%\"",
    "db_id": "flight_2",
    "table_description": "This table contains information about different airlines including their names and abbreviations.",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "模糊匹配",
          "condition": "%JetBlue%"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1218
  },
  {
    "question": "List all airline names and their abbreviations related to \"International\".",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Type  LIKE  \"%International%\"",
    "db_id": "flight_2",
    "table_description": "Table AIRLINES contains information about different airlines including their names, abbreviations, countries, and types.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Type",
          "match_type": "模糊匹配",
          "condition": "International"
        }
      ]
    },
    "id": 1219,
    "table_name": "AIRLINES"
  },
  {
    "question": "What are the airline names and abbreviations for airlines in Canada?",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'Canada'",
    "db_id": "flight_2",
    "table_description": "Table containing information about airlines including their names, abbreviations, and countries.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "Canada"
        }
      ]
    },
    "id": 1220,
    "table_name": "AIRLINES"
  },
  {
    "question": "List the airport code and name in the city of Abilene.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Abilene\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about airports including their codes, names, and cities.",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Abilene"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1221
  },
  {
    "question": "Give the airport code and airport name corresponding to the city that starts with 'Ant'.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  LIKE  'Ant%'",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "Ant%"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1222
  },
  {
    "question": "How many airlines do we have that are active?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE status = 'active'",
    "db_id": "flight_2",
    "table_description": "Table containing information about airlines including their status (active or inactive).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "active"
        }
      ]
    },
    "id": 1223,
    "table_name": "AIRLINES"
  },
  {
    "question": "What is the total number of active airlines?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE active = 'Y'",
    "db_id": "flight_2",
    "table_description": "The AIRLINES table contains information about different airlines, including their status (active or not).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "active",
          "match_type": "精确匹配",
          "condition": "Y"
        }
      ]
    },
    "id": 1224,
    "table_name": "AIRLINES"
  },
  {
    "question": "How many airports are there with a city name containing 'New'?",
    "SQL": "SELECT count(*) FROM AIRPORTS WHERE city LIKE '%New%'",
    "db_id": "flight_2",
    "table_description": "The AIRPORTS table contains information about airports including their city names.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "New"
        }
      ]
    },
    "id": 1225,
    "table_name": "AIRPORTS"
  },
  {
    "question": "Return the number of active airports.",
    "SQL": "SELECT count(*) FROM AIRPORTS WHERE status = 'active'",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "active"
        }
      ]
    },
    "id": 1226,
    "table_name": "AIRPORTS"
  },
  {
    "question": "How many flights were there yesterday?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DATE = 'yesterday'",
    "db_id": "flight_2",
    "table_description": "FLIGHTS table contains flight records with a date column indicating the date of each flight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DATE",
          "match_type": "relative_time",
          "condition": "yesterday"
        }
      ]
    },
    "id": 1227,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Return the number of flights that have a distance greater than 1000 miles.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE distance > 1000",
    "db_id": "flight_2",
    "table_description": "The FLIGHTS table contains information about flights including their unique flight ID, origin airport, destination airport, and distance in miles.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "distance",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1228,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Which airline is abbreviated as 'UA'?",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UA\"",
    "db_id": "flight_2",
    "table_description": "The AIRLINES table contains information about different airlines including their names and abbreviations.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "UA"
        }
      ]
    },
    "id": 1229,
    "table_name": "AIRLINES"
  },
  {
    "question": "Give the airline with abbreviation 'AA'.",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"AA\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about airlines including their full name and abbreviation.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "AA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1230
  },
  {
    "question": "How many airlines are from Canada?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = 'Canada'",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "Canada"
        }
      ]
    },
    "id": 1231,
    "table_name": "AIRLINES"
  },
  {
    "question": "Return the number of airlines in Canada.",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = 'Canada'",
    "db_id": "flight_2",
    "table_description": "The table contains information about various airlines including their names and countries.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "Canada"
        }
      ]
    },
    "id": 1232,
    "table_name": "AIRLINES"
  },
  {
    "question": "Which city and country is the Alton airport at?",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  LIKE  \"%Alton%\"",
    "db_id": "flight_2",
    "table_description": "Table containing information about airports including their names, cities, and countries.",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "模糊匹配",
          "condition": "%Alton%"
        }
      ]
    },
    "id": 1233,
    "table_name": "AIRPORTS"
  },
  {
    "question": "Give the city and country for the airport that is not Alton.",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName != \"Alton\"",
    "db_id": "flight_2",
    "table_description": "The airports table contains information about different airports including their names, cities, and countries.",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "不等于",
          "condition": "Alton"
        }
      ]
    },
    "id": 1234,
    "table_name": "AIRPORTS"
  },
  {
    "question": "What is the airport name for airport 'JFK'?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"JFK\"",
    "db_id": "flight_2",
    "table_description": "This table contains information about different airports, including their codes and names.",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "JFK"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1235
  },
  {
    "question": "Return the name of the airport with code 'ATL'.",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"ATL\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about airports, including their codes and names.",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "ATL"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1236
  },
  {
    "question": "What are the airport names at City 'Belfast'?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Belfast\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about airports including their names and cities.",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Belfast"
        }
      ]
    },
    "id": 1237,
    "table_name": "AIRPORTS"
  },
  {
    "question": "What are the names of airports that are not in Aberdeen?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City != 'Aberdeen'",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "不等于",
          "condition": "Aberdeen"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1238
  },
  {
    "question": "How many flights depart from 'ATL'?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"ATL\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about flights including source airport and destination airport.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "ATL"
        }
      ]
    },
    "id": 1239,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Count the number of flights departing from 'BOS'.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"BOS\"",
    "db_id": "flight_2",
    "table_description": "Table FLIGHTS contains flight information including source airport and destination airport.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "BOS"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1240
  },
  {
    "question": "How many flights are related to destination ATO?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport LIKE '%ATO%'",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "模糊匹配",
          "condition": "%ATO%"
        }
      ]
    },
    "id": 1241,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Count the number of flights into BOS.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'BOS'",
    "db_id": "flight_2",
    "table_description": "The table contains information about flights including origin and destination airports.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "BOS"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1242
  },
  {
    "question": "What are flight numbers of flights departing from Airport \"LAX\"?",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"LAX\"",
    "db_id": "flight_2",
    "table_description": "Table containing flight information.",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "LAX"
        }
      ]
    },
    "id": 1243,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Give the flight numbers of flights leaving from AQP.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"AQP\"",
    "db_id": "flight_2",
    "table_description": "The FLIGHTS table contains information about flights including their source and destination airports.",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "AQP"
        }
      ]
    },
    "id": 1244,
    "table_name": "FLIGHTS"
  },
  {
    "question": "What are flight numbers of flights arriving at Airport \"BOS\"?",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"BOS\"",
    "db_id": "flight_2",
    "table_description": "表 FLIGHTS 包含了航班信息，其中包括航班号（FlightNo）和目的地机场（DestAirport）。",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "BOS"
        }
      ]
    },
    "id": 1245,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Give the flight numbers of flights landing at BOS.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'BOS'",
    "db_id": "flight_2",
    "table_description": "FLIGHTS table contains information about flights including their origin and destination airports.",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "BOS"
        }
      ]
    },
    "id": 1246,
    "table_name": "FLIGHTS"
  },
  {
    "question": "How many employees have a salary greater than 50000?",
    "SQL": "SELECT count(*) FROM employee WHERE salary > 50000",
    "db_id": "employee_hire_evaluation",
    "table_description": "The employee table contains information about employees including their salaries.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "salary",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1247,
    "table_name": "employee"
  },
  {
    "question": "Count the number of employees hired before 2020-01-01",
    "SQL": "SELECT count(*) FROM employee WHERE hire_date < '2020-01-01'",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hire_date",
          "match_type": "绝对时间",
          "condition": [
            "",
            "2020-01-01"
          ]
        }
      ]
    },
    "id": 1248,
    "table_name": "employee"
  },
  {
    "question": "Sort employee names by their age in ascending order, but only include employees who are older than 30.",
    "SQL": "SELECT name FROM employee WHERE age > 30 ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1249,
    "table_name": "employee"
  },
  {
    "question": "List the names of employees older than 30 and sort in ascending order of age.",
    "SQL": "SELECT name FROM employee WHERE age > 30 ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "table_description": "员工雇佣评估表",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1250,
    "table_name": "employee"
  },
  {
    "question": "What is the number of employees from each city, excluding those from New York?",
    "SQL": "SELECT count(*) ,  city FROM employee WHERE city != 'New York' GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "city",
          "match_type": "不等于",
          "condition": "New York"
        }
      ]
    },
    "id": 1251,
    "table_name": "employee"
  },
  {
    "question": "Count the number of employees for each city, but only for cities with more than 10 employees.",
    "SQL": "SELECT count(*), city FROM employee WHERE city IN (SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 10) GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "table_description": "The 'employee' table contains information about employees, including their city of residence.",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "city",
          "match_type": "in_subquery",
          "condition": "(SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 10)"
        }
      ]
    },
    "id": 1252,
    "table_name": "employee"
  },
  {
    "question": "Which cities do employees under age 28 come from, and have more than two employees?",
    "SQL": "SELECT city FROM employee WHERE age < 28 GROUP BY city HAVING count(*) > 2",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "28"
        },
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1253,
    "table_name": "employee"
  },
  {
    "question": "Find the cities that have more than two employees under age 30.",
    "SQL": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 2",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table contains employee information including name, city, age, and other details.",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        },
        {
          "column": "*",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1254,
    "table_name": "employee"
  },
  {
    "question": "Find the number of shops in each location that are active.",
    "SQL": "SELECT count(*), LOCATION FROM shop WHERE STATUS = 'active' GROUP BY LOCATION",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "STATUS",
          "match_type": "精确匹配",
          "condition": "active"
        }
      ]
    },
    "id": 1255,
    "table_name": "shop"
  },
  {
    "question": "How many shops are there in each location, excluding those in the 'downtown' area?",
    "SQL": "SELECT count(*) ,  LOCATION FROM shop WHERE LOCATION != 'downtown' GROUP BY LOCATION",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LOCATION",
          "match_type": "不等于",
          "condition": "downtown"
        }
      ]
    },
    "id": 1256,
    "table_name": "shop"
  },
  {
    "question": "Find the manager name and district of the shop whose number of products is greater than 500.",
    "SQL": "SELECT manager_name ,  district FROM shop WHERE number_products > 500",
    "db_id": "employee_hire_evaluation",
    "table_description": "The shop table contains information about shops including their manager names, districts, and the number of products they have.",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1257,
    "table_name": "shop"
  },
  {
    "question": "What are the manager name and district of the shop that sells more than 500 products?",
    "SQL": "SELECT manager_name ,  district FROM shop WHERE number_products > 500",
    "db_id": "employee_hire_evaluation",
    "table_description": "The shop table contains information about shops including their manager names, districts, and the number of products they sell.",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1258,
    "table_name": "shop"
  },
  {
    "question": "find the minimum and maximum number of products for stores that have more than 50 employees.",
    "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop WHERE Number_employees > 50",
    "db_id": "employee_hire_evaluation",
    "table_description": "This table contains information about different shops, including the number of employees and the number of products they carry.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Number_employees",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1259,
    "table_name": "shop"
  },
  {
    "question": "What are the minimum and maximum number of products across all the shops with more than 100 products?",
    "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop WHERE Number_products > 100",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1260,
    "table_name": "shop"
  },
  {
    "question": "Return the name, location and district of all shops with more than 100 products in descending order of number of products.",
    "SQL": "SELECT name ,  LOCATION ,  district FROM shop WHERE number_products > 100 ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "table_description": "This table contains information about shops, including their names, locations, districts, and the number of products they have.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "LOCATION"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1261,
    "table_name": "shop"
  },
  {
    "question": "Sort all the shops by the number of products in descending order, and return the name, location, and district of each shop where the number of products is greater than 50.",
    "SQL": "SELECT name, LOCATION, district FROM shop WHERE number_products > 50 ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "LOCATION"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1262,
    "table_name": "shop"
  },
  {
    "question": "Find the names of stores whose number of products is more than 100.",
    "SQL": "SELECT name FROM shop WHERE number_products > 100",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1263,
    "table_name": "shop"
  },
  {
    "question": "Which shops' number of products is above the average and have more than 500 products? Give me the shop names.",
    "SQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop) AND number_products > 500",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "AVG"
        },
        {
          "column": "number_products",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "(SELECT avg(number_products) FROM shop)"
        },
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1264,
    "table_name": "shop"
  },
  {
    "question": "What is the total bonus given in all evaluations for employees with a performance score of 4 or higher?",
    "SQL": "SELECT sum(bonus) FROM evaluation WHERE performance_score >= 4",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "performance_score",
          "match_type": "大于等于",
          "condition": "4"
        }
      ]
    },
    "id": 1265,
    "table_name": "evaluation"
  },
  {
    "question": "Find the total amount of bonus given in all the evaluations where the evaluation score is greater than 80.",
    "SQL": "SELECT sum(bonus) FROM evaluation WHERE score > 80",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "score",
          "match_type": "大于",
          "condition": "80"
        }
      ]
    },
    "id": 1266,
    "table_name": "evaluation"
  },
  {
    "question": "Give me all the information about hiring for the month of January 2023.",
    "SQL": "SELECT * FROM hiring WHERE hire_date BETWEEN '2023-01-01' AND '2023-01-31'",
    "db_id": "employee_hire_evaluation",
    "table_description": "The hiring table contains information about employee hires, including the hire date and other details.",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "hire_date",
          "match_type": "绝对时间",
          "condition": [
            "2023-01-01",
            "2023-01-31"
          ]
        }
      ]
    },
    "id": 1267,
    "table_name": "hiring"
  },
  {
    "question": "What is all the information about hiring in the IT department?",
    "SQL": "SELECT * FROM hiring WHERE department = 'IT'",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table containing details of employee hiring including department, position, hire date, etc.",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "department",
          "match_type": "精确匹配",
          "condition": "IT"
        }
      ]
    },
    "id": 1268,
    "table_name": "hiring"
  },
  {
    "question": "Which district has both stores with less than 2500 products and stores with more than 10000 products?",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  2500 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "2500"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "id": 1269,
    "table_name": "shop"
  },
  {
    "question": "Find the districts in which there are both shops selling fewer than 5000 products and shops selling more than 8000 products.",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  5000 INTERSECT SELECT district FROM shop WHERE Number_products  >  8000",
    "db_id": "employee_hire_evaluation",
    "table_description": "The 'shop' table contains information about various shops, including the number of products they sell and their districts.",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "5000"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "8000"
        }
      ]
    },
    "id": 1270,
    "table_name": "shop"
  },
  {
    "question": "How many different store locations are there in the city of New York?",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop WHERE CITY = 'New York'",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table containing information about various stores and their locations.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "CITY",
          "match_type": "精确匹配",
          "condition": "New York"
        }
      ]
    },
    "id": 1271,
    "table_name": "shop"
  },
  {
    "question": "Count the number of distinct store locations in New York.",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop WHERE LOCATION = 'New York'",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "LOCATION",
          "match_type": "精确匹配",
          "condition": "New York"
        }
      ]
    },
    "id": 1272,
    "table_name": "shop"
  },
  {
    "question": "How many documents were created in the last 3 days?",
    "SQL": "SELECT count(*) FROM Documents WHERE created_date >= DATE_SUB(CURDATE(), INTERVAL 3 DAY)",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "created_date",
          "match_type": "近3天",
          "condition": "近3天"
        }
      ]
    },
    "id": 1273,
    "table_name": "Documents"
  },
  {
    "question": "Count the number of documents created in the last 7 days.",
    "SQL": "SELECT count(*) FROM Documents WHERE creation_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their creation date.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "creation_date",
          "match_type": "relative_time",
          "condition": "近7天"
        }
      ]
    },
    "id": 1274,
    "table_name": "Documents"
  },
  {
    "question": "What are the ids, names, and descriptions for all documents created in the last 30 days?",
    "SQL": "SELECT document_id, document_name, document_description FROM Documents WHERE document_created_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about documents including their IDs, names, descriptions, and creation dates.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "document_name"
        },
        {
          "column": "document_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_created_date",
          "match_type": "近30天",
          "condition": "近30天"
        }
      ]
    },
    "id": 1275,
    "table_name": "Documents"
  },
  {
    "question": "What is the document name and template id for documents with a description that includes the word 'work'?",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%work%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their names, template IDs, and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "模糊匹配",
          "condition": "%work%"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1276
  },
  {
    "question": "Return the names and template ids for documents that contain the word 'work' in their description.",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%work%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their names, template IDs, and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "模糊匹配",
          "condition": "work"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1277
  },
  {
    "question": "What is the document id, template id and description for documents related to \"CV\"?",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  LIKE  \"%CV%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their ids, names, descriptions, and templates.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "模糊匹配",
          "condition": "%CV%"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1278
  },
  {
    "question": "Return the document id, template id, and description for the document with the name containing 'Robbin'.",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name LIKE \"%Robbin%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "模糊匹配",
          "condition": "%Robbin%"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1279
  },
  {
    "question": "How many different templates were used by documents created in the last 30 days?",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents WHERE creation_date >= DATE('now', '-30 days')",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about all the documents and their associated templates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "creation_date",
          "match_type": "相对时间",
          "condition": "近30天"
        }
      ]
    },
    "id": 1280,
    "table_name": "Documents"
  },
  {
    "question": "Count the number of different templates used for documents created after January 1, 2023.",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents WHERE creation_date > '2023-01-01'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about documents and their templates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "creation_date",
          "match_type": "绝对时间",
          "condition": "> '2023-01-01'"
        }
      ]
    },
    "id": 1281,
    "table_name": "Documents"
  },
  {
    "question": "Show all template ids and the number of documents using each template for templates with an ID greater than 100.",
    "SQL": "SELECT template_id ,  count(*) FROM Documents WHERE template_id > 100 GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1282,
    "table_name": "Documents"
  },
  {
    "question": "What are all different template ids used for documents, and how many times were each of them used within the last week?",
    "SQL": "SELECT template_id ,  count(*) FROM Documents WHERE created_at >= DATE('now', '-7 days') GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about document templates including their creation date.",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "created_at",
          "match_type": "relative_time",
          "condition": "近7天"
        }
      ]
    },
    "id": 1283,
    "table_name": "Documents"
  },
  {
    "question": "Show ids for all templates that are used by at least two documents.",
    "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >=  2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about the documents and their associated templates.",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 1284,
    "table_name": "Documents"
  },
  {
    "question": "What are the template ids of any templates used in at least two documents?",
    "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) >= 2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Documents table contains information about documents and their associated template IDs.",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 1285,
    "table_name": "Documents"
  },
  {
    "question": "How many templates do we have that are related to marketing?",
    "SQL": "SELECT count(*) FROM Templates WHERE Template_Name LIKE '%marketing%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about document templates, including their names and descriptions.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Template_Name",
          "match_type": "模糊匹配",
          "condition": "marketing"
        }
      ]
    },
    "id": 1286,
    "table_name": "Templates"
  },
  {
    "question": "Count the number of templates created in the last 7 days.",
    "SQL": "SELECT count(*) FROM Templates WHERE created_at >= DATE('now', '-7 days')",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about document templates, including their creation date.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "created_at",
          "match_type": "相对时间",
          "condition": "近7天"
        }
      ]
    },
    "id": 1287,
    "table_name": "Templates"
  },
  {
    "question": "Show template ids, version numbers, and template type codes for all templates where the template type code is 'T001'.",
    "SQL": "SELECT template_id ,  version_number ,  template_type_code FROM Templates WHERE template_type_code = 'T001'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        },
        {
          "column": "version_number"
        },
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "T001"
        }
      ]
    },
    "id": 1288,
    "table_name": "Templates"
  },
  {
    "question": "Show all distinct template type codes for all templates with a specific template type code of 'T001'.",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates WHERE template_type_code = 'T001'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "T001"
        }
      ]
    },
    "id": 1289,
    "table_name": "Templates"
  },
  {
    "question": "What are the different template type codes for templates created after January 1, 2023?",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates WHERE created_date > '2023-01-01'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "created_date",
          "match_type": "绝对时间",
          "condition": "['2023-01-01', null]"
        }
      ]
    },
    "id": 1290,
    "table_name": "Templates"
  },
  {
    "question": "Return the ids of templates that have the code related to PP or PPT.",
    "SQL": "SELECT template_id FROM Templates WHERE template_type_code LIKE \"%PP%\" OR template_type_code LIKE \"%PPT%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "模糊匹配",
          "condition": "%PP%"
        },
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "PPT"
        }
      ]
    },
    "id": 1291,
    "table_name": "Templates"
  },
  {
    "question": "How many templates have template type code JD?",
    "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  'JD'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about different document templates used in the system.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "等于",
          "condition": "JD"
        }
      ]
    },
    "id": 1292,
    "table_name": "Templates"
  },
  {
    "question": "Count the number of templates of the type Cover Letter.",
    "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  'Cover Letter'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about different types of document templates, including their type codes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "Cover Letter"
        }
      ]
    },
    "table_name": "Templates",
    "id": 1293
  },
  {
    "question": "What is the version number and template type code for the template with a version number greater than or equal to 6?",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >=  6",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing document template management information.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "None"
        }
      ],
      "filter": [
        {
          "column": "version_number",
          "match_type": "大于等于",
          "condition": "6"
        }
      ]
    },
    "id": 1294,
    "table_name": "Templates"
  },
  {
    "question": "Return the version numbers and template type codes of templates with a version number greater than 8.",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  8",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing document template information including version numbers and type codes.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "version_number",
          "match_type": "大于",
          "condition": "8"
        }
      ]
    },
    "id": 1295,
    "table_name": "Templates"
  },
  {
    "question": "Show all template type codes and number of templates for each where the template type code is 'Email'.",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates WHERE template_type_code = 'Email' GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table contains information about document templates including their types and other metadata.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "Email"
        }
      ]
    },
    "id": 1296,
    "table_name": "Templates"
  },
  {
    "question": "What are the different template type codes, and how many templates correspond to each, for templates that have been used more than 10 times?",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates WHERE usage_count > 10 GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "This table contains information about document templates including their type codes and usage counts.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "usage_count",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1297,
    "table_name": "Templates"
  },
  {
    "question": "Which template type code has the most number of templates among those created after 2022-01-01?",
    "SQL": "SELECT template_type_code FROM Templates WHERE create_date > '2022-01-01' GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about document templates, including their type codes and creation dates.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "create_date",
          "match_type": "绝对时间",
          "condition": [
            "2022-01-01",
            null
          ]
        }
      ]
    },
    "id": 1298,
    "table_name": "Templates"
  },
  {
    "question": "Return the type code of the template type that the most templates belong to, but exclude the 'Report' template type.",
    "SQL": "SELECT template_type_code FROM Templates WHERE template_type_code != 'Report' GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about different document templates, including their type codes.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "不等于",
          "condition": "Report"
        }
      ]
    },
    "id": 1299,
    "table_name": "Templates"
  },
  {
    "question": "Show all template type codes with more than two templates.",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  >  2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Templates table contains information about document templates including their type codes.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1300,
    "table_name": "Templates"
  },
  {
    "question": "What are the codes of template types that have exactly 2 templates?",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  =  2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about different document templates and their types.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "等于",
          "condition": "2"
        }
      ]
    },
    "id": 1301,
    "table_name": "Templates"
  },
  {
    "question": "What is the smallest version number for template type code 'T001'?",
    "SQL": "SELECT min(Version_Number) FROM Templates WHERE template_type_code = 'T001'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table contains information about document templates including their version numbers and type codes.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "T001"
        }
      ]
    },
    "id": 1302,
    "table_name": "Templates"
  },
  {
    "question": "Return the lowest version number, along with its corresponding template type code for templates that have a version number greater than 1.",
    "SQL": "SELECT min(Version_Number) ,  template_type_code FROM Templates WHERE Version_Number > 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table 'Templates' contains columns: template_type_code, Version_Number, etc.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "min"
        }
      ],
      "filter": [
        {
          "column": "Version_Number",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 1303,
    "table_name": "Templates"
  },
  {
    "question": "Show all template type codes and descriptions for active templates.",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types WHERE is_active = 'Y'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Reference table for document template types",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "is_active",
          "match_type": "等于",
          "condition": "Y"
        }
      ]
    },
    "id": 1304,
    "table_name": "Ref_template_types"
  },
  {
    "question": "What are the type codes and descriptions for all template types?",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Reference table for document template types",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Ref_template_types",
    "id": 1305
  },
  {
    "question": "What is the template type descriptions for template type code 'AP'.",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AP'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing reference data for document template types.",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "AP"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1306
  },
  {
    "question": "Return the template type description of the template type with the code AR.",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AR\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "This table contains reference data for document template types, including their codes and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "AR"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1307
  },
  {
    "question": "What is the template type code for template type description related to 'Reading Material'?",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description LIKE '%Reading Material%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "模糊匹配",
          "condition": "Reading Material"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1308
  },
  {
    "question": "Return the type code of the template type with a description that contains the word 'Book'.",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description LIKE '%Book%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "模糊匹配",
          "condition": "Book"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1309
  },
  {
    "question": "How many paragraphs are there in the document?",
    "SQL": "SELECT count(*) FROM Paragraphs",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing paragraphs of documents.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 1310,
    "table_name": "Paragraphs"
  },
  {
    "question": "Count the number of paragraphs created yesterday.",
    "SQL": "SELECT count(*) FROM Paragraphs WHERE creation_date = DATE('now', '-1 day')",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing information about paragraphs including their creation dates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "creation_date",
          "match_type": "相对时间",
          "condition": "昨天"
        }
      ]
    },
    "id": 1311,
    "table_name": "Paragraphs"
  },
  {
    "question": "What are the details for the paragraph that contains the text 'South Korea'?",
    "SQL": "select other_details from paragraphs where paragraph_text like '%South Korea%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "This table stores information about different paragraphs in documents.",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "模糊匹配",
          "condition": "South Korea"
        }
      ]
    },
    "table_name": "paragraphs",
    "id": 1312
  },
  {
    "question": "Show all document ids and the number of paragraphs in each document where the document id is greater than 10. Order by document id.",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs WHERE document_id > 10 GROUP BY document_id ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Paragraphs table contains information about paragraphs within documents, including the document ID and paragraph content.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "document_id",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1313,
    "table_name": "Paragraphs"
  },
  {
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, where the document id is greater than 100, ordered by id.",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs WHERE document_id > 100 GROUP BY document_id ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The table 'Paragraphs' contains information about paragraphs in documents, including their IDs and the document they belong to.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "document_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1314,
    "table_name": "Paragraphs"
  },
  {
    "question": "List all document ids with at least three paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  3",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing paragraphs of documents with document_id and paragraph_id columns.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1315,
    "table_name": "Paragraphs"
  },
  {
    "question": "What are the ids of documents that have more than 3 paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >  3",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Paragraphs table contains information about paragraphs within documents, including their IDs and the document they belong to.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "id": 1316,
    "table_name": "Paragraphs"
  },
  {
    "question": "What is the document id with least number of paragraphs, where the paragraph content contains 'example'?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_content LIKE '%example%' GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The table 'Paragraphs' contains information about paragraphs within documents, including the document ID and paragraph content.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "paragraph_content",
          "match_type": "模糊匹配",
          "condition": "example"
        }
      ]
    },
    "id": 1317,
    "table_name": "Paragraphs"
  },
  {
    "question": "Return the id of the document with the fewest paragraphs that has more than 5 paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) > 5 ORDER BY count(*) ASC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "This table contains information about paragraphs within documents, including the document ID and paragraph content.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1318,
    "table_name": "Paragraphs"
  },
  {
    "question": "What is the document id with more than 2 paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) > 2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table contains information about paragraphs in documents.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": 2
        }
      ]
    },
    "id": 1319,
    "table_name": "Paragraphs"
  },
  {
    "question": "Give the ids of documents that have more than three paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) > 3",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing information about paragraphs within documents.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": 3
        }
      ]
    },
    "id": 1320,
    "table_name": "Paragraphs"
  },
  {
    "question": "Show the document id with paragraph text 'Brazil' or 'Germany'.",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' UNION SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Germany'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Brazil"
        },
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Germany"
        }
      ]
    },
    "id": 1321,
    "table_name": "Paragraphs"
  },
  {
    "question": "What are the ids of documents that contain the paragraph text 'Brazil' and related to 'Europe'?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  LIKE  '%Europe%'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Brazil"
        },
        {
          "column": "paragraph_text",
          "match_type": "模糊匹配",
          "condition": "Europe"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 1322
  },
  {
    "question": "How many teachers are there who have more than 5 years of experience?",
    "SQL": "SELECT count(*) FROM teacher WHERE experience > 5",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "experience",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1323,
    "table_name": "teacher"
  },
  {
    "question": "What is the total count of teachers who have more than 5 years of teaching experience?",
    "SQL": "SELECT count(*) FROM teacher WHERE teaching_experience > 5",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers, including their ID, name, and teaching experience in years.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "teaching_experience",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1324,
    "table_name": "teacher"
  },
  {
    "question": "List the names of teachers older than 30 in ascending order of age.",
    "SQL": "SELECT Name FROM teacher WHERE Age > 30 ORDER BY Age ASC",
    "db_id": "course_teach",
    "table_description": "Table 'teacher' contains information about teachers including their names and ages.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1325,
    "table_name": "teacher"
  },
  {
    "question": "What are the names of the teachers who are older than 30, ordered by ascending age?",
    "SQL": "SELECT Name FROM teacher WHERE Age > 30 ORDER BY Age ASC",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1326,
    "table_name": "teacher"
  },
  {
    "question": "What are the age and hometown of teachers from Beijing?",
    "SQL": "SELECT Age ,  Hometown FROM teacher WHERE Hometown = 'Beijing'",
    "db_id": "course_teach",
    "table_description": "This table contains information about teachers including their age and hometown.",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "精确匹配",
          "condition": "Beijing"
        }
      ]
    },
    "id": 1327,
    "table_name": "teacher"
  },
  {
    "question": "What is the age and hometown of every teacher who is over 30 years old?",
    "SQL": "SELECT Age ,  Hometown FROM teacher WHERE Age > 30",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1328,
    "table_name": "teacher"
  },
  {
    "question": "List the name of teachers whose hometown is not 'Bury'.",
    "SQL": "select name from teacher where hometown != 'Bury'",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hometown",
          "match_type": "不等于",
          "condition": "Bury"
        }
      ]
    },
    "id": 1329,
    "table_name": "teacher"
  },
  {
    "question": "What are the names of the teachers whose hometown is not 'Bootle'? ",
    "SQL": "select name from teacher where hometown != 'bootle'",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers, including their names and hometowns.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hometown",
          "match_type": "不等于",
          "condition": "Bootle"
        }
      ]
    },
    "id": 1330,
    "table_name": "teacher"
  },
  {
    "question": "Show the name of teachers aged either 32 or 34?",
    "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  34",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "32"
        },
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "34"
        }
      ]
    },
    "id": 1331,
    "table_name": "teacher"
  },
  {
    "question": "What are the names of the teachers who are aged either 32 or 34?",
    "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  34",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers including their names and ages.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "32"
        },
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "34"
        }
      ]
    },
    "id": 1332,
    "table_name": "teacher"
  },
  {
    "question": "What is the hometown of the oldest teacher?",
    "SQL": "SELECT Hometown FROM teacher ORDER BY Age DESC LIMIT 1",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "最大值",
          "condition": ""
        }
      ]
    },
    "id": 1333,
    "table_name": "teacher"
  },
  {
    "question": "Where is the youngest teacher from?",
    "SQL": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "(SELECT MIN(Age) FROM teacher)"
        }
      ]
    },
    "id": 1334,
    "table_name": "teacher"
  },
  {
    "question": "Show different hometowns of teachers who are not from New York and the number of teachers from each hometown.",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher WHERE Hometown != 'New York' GROUP BY Hometown",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers including their hometowns.",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "不等于",
          "condition": "New York"
        }
      ]
    },
    "id": 1335,
    "table_name": "teacher"
  },
  {
    "question": "For each hometown, how many teachers who have more than 5 years of experience are there?",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher WHERE Experience > 5 GROUP BY Hometown",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Experience",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1336,
    "table_name": "teacher"
  },
  {
    "question": "List the most common hometown of teachers from Beijing.",
    "SQL": "SELECT Hometown FROM teacher WHERE Hometown = 'Beijing' GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "精确匹配",
          "condition": "Beijing"
        }
      ]
    },
    "id": 1337,
    "table_name": "teacher"
  },
  {
    "question": "What is the most common hometown for teachers who have more than 5 years of experience?",
    "SQL": "SELECT Hometown FROM teacher WHERE Years_of_Experience > 5 GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "table_description": "The 'teacher' table contains information about teachers including their hometown and years of experience.",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Years_of_Experience",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1338,
    "table_name": "teacher"
  },
  {
    "question": "Show the hometowns shared by at least three teachers.",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  3",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1339,
    "table_name": "teacher"
  },
  {
    "question": "What are the towns from which at least three teachers come from?",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  3",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers including their hometowns.",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1340,
    "table_name": "teacher"
  },
  {
    "question": "How many visitors aged 30 and above are there?",
    "SQL": "SELECT count(*) FROM visitor WHERE age >= 30",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于等于",
          "condition": "30"
        }
      ]
    },
    "id": 1341,
    "table_name": "visitor"
  },
  {
    "question": "Find the names of the visitors whose membership level is not lower than 5, and order the results by the level from high to low.",
    "SQL": "SELECT name FROM visitor WHERE Level_of_membership  >=  5 ORDER BY Level_of_membership DESC",
    "db_id": "museum_visit",
    "table_description": "Table 'visitor' contains information about museum visitors, including their names and membership levels.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "大于等于",
          "condition": "5"
        }
      ]
    },
    "id": 1342,
    "table_name": "visitor"
  },
  {
    "question": "What is the average age of the visitors whose membership level is exactly 3?",
    "SQL": "SELECT avg(age) FROM visitor WHERE Level_of_membership = 3",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "等于",
          "condition": "3"
        }
      ]
    },
    "id": 1343,
    "table_name": "visitor"
  },
  {
    "question": "Find the name and membership level of the visitors whose membership level is not equal to 4, and sort by their age from old to young.",
    "SQL": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  !=  4 ORDER BY age DESC",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "Level_of_membership"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "不等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "visitor",
    "id": 1344
  },
  {
    "question": "Find the id and name of the museum that has more than 50 staff members?",
    "SQL": "SELECT museum_id ,  name FROM museum WHERE num_of_staff > 50 ORDER BY num_of_staff DESC LIMIT 1",
    "db_id": "museum_visit",
    "table_description": "Table 'museum' contains information about museums including their ID, name, and number of staff members.",
    "config": {
      "dimension": [
        {
          "column": "museum_id"
        },
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "num_of_staff",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1345,
    "table_name": "museum"
  },
  {
    "question": "Find the average number of staff working for the museums that were open after 2009.",
    "SQL": "SELECT avg(num_of_staff) FROM museum WHERE open_year  >  2009",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2009"
        }
      ]
    },
    "id": 1346,
    "table_name": "museum"
  },
  {
    "question": "What are the opening year and staff number of the museum named Modern Art Museum?",
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Modern Art Museum'",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "Open_Year"
        },
        {
          "column": "Num_of_Staff"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Modern Art Museum"
        }
      ]
    },
    "table_name": "museum",
    "id": 1347
  },
  {
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2015.",
    "SQL": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2015)",
    "db_id": "museum_visit",
    "table_description": "The museum table contains information about various museums, including their names, number of staff, and opening years.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "NONE"
        },
        {
          "column": "num_of_staff",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2015"
        },
        {
          "column": "num_of_staff",
          "match_type": "大于",
          "condition": "(SELECT min(num_of_staff) FROM museum WHERE open_year  >  2015)"
        }
      ]
    },
    "id": 1348,
    "table_name": "museum"
  },
  {
    "question": "What are the average and maximum number of tickets bought in all visits where the number of tickets is greater than 1?",
    "SQL": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit WHERE num_of_ticket > 1",
    "db_id": "museum_visit",
    "table_description": "The 'visit' table records details of each visit to the museum, including the number of tickets bought.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_ticket",
          "aggregate_function": "avg"
        },
        {
          "column": "num_of_ticket",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "num_of_ticket",
          "match_type": "greater",
          "condition": "1"
        }
      ]
    },
    "id": 1349,
    "table_name": "visit"
  },
  {
    "question": "How many museums were opened after 2014 or before 2007?",
    "SQL": "SELECT count(*) FROM museum WHERE open_year  >  2014 OR open_year  <  2007",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2014"
        },
        {
          "column": "open_year",
          "match_type": "小于",
          "condition": "2007"
        }
      ]
    },
    "id": 1350,
    "table_name": "museum"
  },
  {
    "question": "Find the total number of players who have a player ID greater than 100.",
    "SQL": "SELECT count(*) FROM players WHERE player_id > 100",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "player_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1351,
    "table_name": "players"
  },
  {
    "question": "How many players are there with a ranking greater than 100?",
    "SQL": "SELECT count(*) FROM players WHERE ranking > 100",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ranking",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1352,
    "table_name": "players"
  },
  {
    "question": "Find the total number of matches that occurred yesterday.",
    "SQL": "SELECT count(*) FROM matches WHERE match_date = DATE('now', '-1 day')",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches including the date of the match (match_date).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "match_date",
          "match_type": "绝对时间",
          "condition": "昨天"
        }
      ]
    },
    "id": 1353,
    "table_name": "matches"
  },
  {
    "question": "Count the number of matches in the year 2020.",
    "SQL": "SELECT count(*) FROM matches WHERE match_year = 2020",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains information about tennis matches including match_year.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "match_year",
          "match_type": "等于",
          "condition": "2020"
        }
      ]
    },
    "id": 1354,
    "table_name": "matches"
  },
  {
    "question": "List the first name and birth date of all players from the country with code CAN.",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'CAN'",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their names, birth dates, and country codes.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "CAN"
        }
      ]
    },
    "id": 1355,
    "table_name": "players"
  },
  {
    "question": "What are the first names and birth dates of players from the United States?",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'US'",
    "db_id": "wta_1",
    "table_description": "This table contains information about players including their first names, birth dates, and country codes.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "US"
        }
      ]
    },
    "id": 1356,
    "table_name": "players"
  },
  {
    "question": "Find the average age of losers and winners of all matches where the match duration is more than 120 minutes.",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches WHERE match_duration > 120",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "match_duration",
          "match_type": "大于",
          "condition": "120"
        }
      ]
    },
    "id": 1357,
    "table_name": "matches"
  },
  {
    "question": "What are the average ages of losers and winners in matches that took place after 2010?",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches WHERE match_date > '2010-01-01'",
    "db_id": "wta_1",
    "table_description": "Table containing match information including match date, loser age, and winner age.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "match_date",
          "match_type": "绝对时间",
          "condition": "2010-01-01"
        }
      ]
    },
    "id": 1358,
    "table_name": "matches"
  },
  {
    "question": "Find the average rank of winners in matches where the match score is '6-3, 6-4'.",
    "SQL": "SELECT avg(winner_rank) FROM matches WHERE score = '6-3, 6-4'",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches, including the winner's rank and the match score.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "score",
          "match_type": "精确匹配",
          "condition": "6-3, 6-4"
        }
      ]
    },
    "id": 1359,
    "table_name": "matches"
  },
  {
    "question": "What is the average rank for winners in matches where the winner's country is USA?",
    "SQL": "SELECT avg(winner_rank) FROM matches WHERE winner_country = 'USA'",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "winner_country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1360,
    "table_name": "matches"
  },
  {
    "question": "Find the highest rank of losers in matches where the loser's country is USA.",
    "SQL": "SELECT min(loser_rank) FROM matches WHERE loser_country = 'USA'",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches including player ranks and countries.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "loser_country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1361,
    "table_name": "matches"
  },
  {
    "question": "What is the best rank of losers with a rank greater than 100 across all matches?",
    "SQL": "SELECT min(loser_rank) FROM matches WHERE loser_rank > 100",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "loser_rank",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1362,
    "table_name": "matches"
  },
  {
    "question": "find the number of distinct country codes of all players from the US and Canada.",
    "SQL": "SELECT count(DISTINCT country_code) FROM players WHERE country_code IN ('US', 'CA')",
    "db_id": "wta_1",
    "table_description": "The players table contains player information including country code.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "IN ('US', 'CA')"
        }
      ]
    },
    "id": 1363,
    "table_name": "players"
  },
  {
    "question": "How many distinct countries do players come from who have a rank higher than 100?",
    "SQL": "SELECT count(DISTINCT country_code) FROM players WHERE rank > 100",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "rank",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1364,
    "table_name": "players"
  },
  {
    "question": "Find the number of distinct names of losers who have lost in the last week.",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches WHERE match_date >= DATE('now', '-7 days')",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "match_date",
          "match_type": "相对时间",
          "condition": "近7天"
        }
      ]
    },
    "id": 1365,
    "table_name": "matches"
  },
  {
    "question": "How many different loser names are there from the matches that happened before 2020-01-01?",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches WHERE match_date < '2020-01-01'",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches including match date and player names.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "match_date",
          "match_type": "绝对时间",
          "condition": "< '2020-01-01'"
        }
      ]
    },
    "id": 1366,
    "table_name": "matches"
  },
  {
    "question": "Find the name of tourney that has more than 15 matches.",
    "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  15",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains information about tennis matches, including the tournament name and match details.",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "15"
        }
      ]
    },
    "id": 1367,
    "table_name": "matches"
  },
  {
    "question": "What are the names of tournaments that have more than 5 matches?",
    "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  5",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches, including tournament names and match details.",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1368,
    "table_name": "matches"
  },
  {
    "question": "List the names of all winners who played in both 2013 and 2014.",
    "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2014",
    "db_id": "wta_1",
    "table_description": "This table contains information about tennis matches, including the year, tournament, and winners.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        }
      ]
    },
    "id": 1369,
    "table_name": "matches"
  },
  {
    "question": "What are the names of players who won in both 2013 and 2014?",
    "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2014",
    "db_id": "wta_1",
    "table_description": "This table contains information about matches including the year, tournament, round, winner name, and more.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        }
      ]
    },
    "id": 1370,
    "table_name": "matches"
  },
  {
    "question": "List the number of all matches who played in years of 2013 or 2015.",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2015",
    "db_id": "wta_1",
    "table_description": "The table 'matches' contains details about tennis matches including the year they were played.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "id": 1371,
    "table_name": "matches"
  },
  {
    "question": "How many matches were played in 2013 or 2015?",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2015",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "id": 1372,
    "table_name": "matches"
  },
  {
    "question": "Find the first name and country code of the oldest player who is not from the United States.",
    "SQL": "SELECT first_name ,  country_code FROM players WHERE country_code != 'US' ORDER BY birth_date LIMIT 1",
    "db_id": "wta_1",
    "table_description": "Table 'players' contains information about players including their first name, country code, and birth date.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "不等于",
          "condition": "US"
        }
      ]
    },
    "id": 1373,
    "table_name": "players"
  },
  {
    "question": "What is the first name and country code of the oldest player from France?",
    "SQL": "SELECT first_name ,  country_code FROM players WHERE country_code = 'FRA' ORDER BY birth_date LIMIT 1",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their first name, country code, and birth date.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "FRA"
        }
      ]
    },
    "id": 1374,
    "table_name": "players"
  },
  {
    "question": "List the first and last name of all players born after January 1, 1980, in the order of birth date.",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE birth_date > '1980-01-01' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "players table contains player information including their first name, last name, and birth date.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birth_date",
          "match_type": "大于",
          "condition": "1980-01-01"
        }
      ]
    },
    "id": 1375,
    "table_name": "players"
  },
  {
    "question": "What are the full names of all players born before 1990, sorted by birth date?",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE birth_date < '1990-01-01' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "Table containing player information.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birth_date",
          "match_type": "绝对时间",
          "condition": "1990-01-01"
        }
      ]
    },
    "id": 1376,
    "table_name": "players"
  },
  {
    "question": "List the first and last name of all players who are right / R hand in the order of birth date.",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'R' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "This table contains player information including their names, hand preference, and birth dates.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "table_name": "players",
    "id": 1377
  },
  {
    "question": "What are the full names of all right handed players, in order of birth date?",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'R' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "This table contains information about players including their first name, last name, hand, and birth date.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 1378,
    "table_name": "players"
  },
  {
    "question": "Find the year that has more than 1000 matches.",
    "SQL": "SELECT YEAR FROM matches GROUP BY YEAR HAVING COUNT(*) > 1000 ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches, including the year they were played.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1379,
    "table_name": "matches"
  },
  {
    "question": "Which year had the most matches after 2010?",
    "SQL": "SELECT YEAR FROM matches WHERE YEAR > 2010 GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "Table contains match records including the year of the match.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "大于",
          "condition": "2010"
        }
      ]
    },
    "id": 1380,
    "table_name": "matches"
  },
  {
    "question": "Find the name and rank points of the winner who has more than 5000 rank points and won the most times.",
    "SQL": "SELECT winner_name ,  winner_rank_points FROM matches WHERE winner_rank_points > 5000 GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains information about tennis matches including the names and rank points of the winners.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank_points"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "winner_rank_points",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "id": 1381,
    "table_name": "matches"
  },
  {
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have, excluding players with less than 500 rank points?",
    "SQL": "SELECT winner_name ,  winner_rank_points FROM matches WHERE winner_rank_points >= 500 GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "This table contains information about tennis matches including the names of the winners and their rank points.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "winner_rank_points",
          "match_type": "大于等于",
          "condition": "500"
        }
      ]
    },
    "id": 1382,
    "table_name": "matches"
  },
  {
    "question": "Find the name of the winner who has the highest rank points and participated in the French Open tourney.",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'French Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "This table contains match records from various tennis tournaments including player names, tournament names, and ranking points.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "French Open"
        }
      ]
    },
    "id": 1383,
    "table_name": "matches"
  },
  {
    "question": "What is the name of the winner with the most rank points who participated in the US Open tournament?",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'US Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "This table contains match data from various tennis tournaments.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "US Open"
        }
      ]
    },
    "id": 1384,
    "table_name": "matches"
  },
  {
    "question": "find the names of loser and winner who played in the match that lasted more than 120 minutes.",
    "SQL": "SELECT winner_name ,  loser_name FROM matches WHERE minutes > 120",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains information about tennis matches, including player names and match duration.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "minutes",
          "match_type": "大于",
          "condition": "120"
        }
      ]
    },
    "id": 1385,
    "table_name": "matches"
  },
  {
    "question": "What are the names of the winner and loser who played in a match longer than 180 minutes?",
    "SQL": "SELECT winner_name ,  loser_name FROM matches WHERE minutes > 180 ORDER BY minutes DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "The 'matches' table contains information about tennis matches including the winner's name, loser's name, and the duration of the match in minutes.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [
        {
          "column": "minutes",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "minutes",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "id": 1386,
    "table_name": "matches"
  },
  {
    "question": "find the number of players for each country, excluding players from China.",
    "SQL": "SELECT count(*) ,  country_code FROM players WHERE country_code != 'China' GROUP BY country_code",
    "db_id": "wta_1",
    "table_description": "The players table contains player information including country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "不等于",
          "condition": "China"
        }
      ]
    },
    "id": 1387,
    "table_name": "players"
  },
  {
    "question": "How many players are from each country, excluding those from the United States?",
    "SQL": "SELECT count(*), country_code FROM players WHERE country_code != 'US' GROUP BY country_code",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "不等于",
          "condition": "US"
        }
      ]
    },
    "id": 1388,
    "table_name": "players"
  },
  {
    "question": "find the code of the country where has the greatest number of players, but exclude players from the United States.",
    "SQL": "SELECT country_code FROM players WHERE country_code != 'US' GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "不等于",
          "condition": "US"
        }
      ]
    },
    "id": 1389,
    "table_name": "players"
  },
  {
    "question": "What is the code of the country with the most players?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "The players table contains information about players including their country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "US"
        }
      ]
    },
    "id": 1390,
    "table_name": "players"
  },
  {
    "question": "Find the codes of countries that have more than 100 players.",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  100",
    "db_id": "wta_1",
    "table_description": "The players table contains information about players, including their country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "table_name": "players",
    "id": 1391
  },
  {
    "question": "What are the codes of countries with more than 100 players?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 100",
    "db_id": "wta_1",
    "table_description": "The players table contains information about players including their country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "table_name": "players",
    "id": 1392
  },
  {
    "question": "Find the total number of tours for each ranking date in the last month.",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings WHERE ranking_date >= DATE('now', '-1 month') GROUP BY ranking_date",
    "db_id": "wta_1",
    "table_description": "The 'rankings' table contains information about player rankings and the number of tours they have played.",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "ranking_date",
          "match_type": "相对时间",
          "condition": "近1月"
        }
      ]
    },
    "id": 1393,
    "table_name": "rankings"
  },
  {
    "question": "How many total tours were there for each ranking date before 2020-01-01?",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings WHERE ranking_date < '2020-01-01' GROUP BY ranking_date",
    "db_id": "wta_1",
    "table_description": "Table contains rankings of players with their ranking dates and number of tours.",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "ranking_date",
          "match_type": "绝对时间",
          "condition": "< '2020-01-01'"
        }
      ]
    },
    "id": 1394,
    "table_name": "rankings"
  },
  {
    "question": "Find the number of matches happened in each year after 2010.",
    "SQL": "SELECT count(*), YEAR FROM matches WHERE YEAR > 2010 GROUP BY YEAR",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "大于",
          "condition": "2010"
        }
      ]
    },
    "id": 1395,
    "table_name": "matches"
  },
  {
    "question": "How many matches were played in each year before 2010?",
    "SQL": "SELECT count(*), YEAR FROM matches WHERE YEAR < 2010 GROUP BY YEAR",
    "db_id": "wta_1",
    "table_description": "The 'matches' table contains information about tennis matches, including the year in which they were played.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "小于",
          "condition": "2010"
        }
      ]
    },
    "id": 1396,
    "table_name": "matches"
  },
  {
    "question": "Find the name and rank of the 3 youngest winners who have won a match with a score of 6-3, 6-4.",
    "SQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches WHERE score = '6-3, 6-4' ORDER BY winner_age LIMIT 3",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches, including the names and ranks of the winners, the scores, and other details.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "score",
          "match_type": "精确匹配",
          "condition": "6-3, 6-4"
        }
      ]
    },
    "id": 1397,
    "table_name": "matches"
  },
  {
    "question": "What are the names and ranks of the winners under the age of 25 across all matches?",
    "SQL": "SELECT DISTINCT winner_name, winner_rank FROM matches WHERE winner_age < 25",
    "db_id": "wta_1",
    "table_description": "This table contains match results including player names, ranks, and ages.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "winner_age",
          "match_type": "小于",
          "condition": "25"
        }
      ]
    },
    "id": 1398,
    "table_name": "matches"
  },
  {
    "question": "How many different winners both participated in the US Open and were left handed?",
    "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'US Open' AND winner_hand  =  'L'",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches including tournament name, player names, and player hand.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "US Open"
        },
        {
          "column": "winner_hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "id": 1399,
    "table_name": "matches"
  },
  {
    "question": "Find the number of left-handed or ambidextrous winners who participated in the WTA Championships.",
    "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND (winner_hand  =  'L' OR winner_hand  =  'A')",
    "db_id": "wta_1",
    "table_description": "This table contains match data from the Women's Tennis Association (WTA) tournaments, including player names, tournament names, and player handedness.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_name",
          "aggregate_function": "COUNT DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        },
        {
          "column": "winner_hand",
          "match_type": "精确匹配",
          "condition": "L,A"
        }
      ]
    },
    "id": 1400,
    "table_name": "matches"
  },
  {
    "question": "Find the number of players for each hand type who have a ranking greater than 50.",
    "SQL": "SELECT count(*), hand FROM players WHERE ranking > 50 GROUP BY hand",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their hand type and ranking.",
    "config": {
      "dimension": [
        {
          "column": "hand"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ranking",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1401,
    "table_name": "players"
  },
  {
    "question": "How many players are there for each hand type, excluding those with 'Right' as their hand type?",
    "SQL": "SELECT count(*), hand FROM players WHERE hand != 'Right' GROUP BY hand",
    "db_id": "wta_1",
    "table_description": "The players table contains information about players, including their hand type.",
    "config": {
      "dimension": [
        {
          "column": "hand"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hand",
          "match_type": "不等于",
          "condition": "Right"
        }
      ]
    },
    "id": 1402,
    "table_name": "players"
  },
  {
    "question": "How many ships ended up being 'Sunk'?",
    "SQL": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Sunk'",
    "db_id": "battle_death",
    "table_description": "The ship table contains information about ships involved in battles, including their disposition after the battle.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "disposition_of_ship",
          "match_type": "精确匹配",
          "condition": "Sunk"
        }
      ]
    },
    "id": 1403,
    "table_name": "ship"
  },
  {
    "question": "List the name, date and result of each battle that happened after 1940.",
    "SQL": "SELECT name, date FROM battle WHERE date > '1940-01-01'",
    "db_id": "battle_death",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": "1940-01-01"
        }
      ]
    },
    "id": 1404,
    "table_name": "battle"
  },
  {
    "question": "What is the maximum and minimum death toll caused each time in battles involving over 100 soldiers?",
    "SQL": "SELECT max(killed) ,  min(killed) FROM death WHERE soldiers > 100",
    "db_id": "battle_death",
    "table_description": "The 'death' table records details of battles, including the number of soldiers involved and the number of people killed.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "killed",
          "aggregate_function": "max"
        },
        {
          "column": "killed",
          "aggregate_function": "min"
        }
      ],
      "filter": [
        {
          "column": "soldiers",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1405,
    "table_name": "death"
  },
  {
    "question": "What is the average number of injuries caused each time when the location is related to 'Iraq'?",
    "SQL": "SELECT avg(injured) FROM death WHERE location LIKE '%Iraq%'",
    "db_id": "battle_death",
    "table_description": "The table contains records of battle deaths and injuries.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "injured",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "location",
          "match_type": "模糊匹配",
          "condition": "Iraq"
        }
      ]
    },
    "id": 1406,
    "table_name": "death"
  },
  {
    "question": "What are the name and results of the battles when the Bulgarian commander is 'Ivan'",
    "SQL": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander = 'Ivan'",
    "db_id": "battle_death",
    "table_description": "The battle table contains information about historical battles including the names, results, and commanders.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "RESULT"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "等于",
          "condition": "Ivan"
        }
      ]
    },
    "table_name": "battle",
    "id": 1407
  },
  {
    "question": "What are the distinct battle names which are between bulgarian commander 'Ivan Asen II' and latin commander 'Baldwin I'?",
    "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Ivan Asen II' AND latin_commander  =  'Baldwin I'",
    "db_id": "battle_death",
    "table_description": "The battle table contains information about battles, including the names of commanders from different sides.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "精确匹配",
          "condition": "Ivan Asen II"
        },
        {
          "column": "latin_commander",
          "match_type": "精确匹配",
          "condition": "Baldwin I"
        }
      ]
    },
    "id": 1408,
    "table_name": "battle"
  },
  {
    "question": "How many different results are there for the battles that took place on land?",
    "SQL": "SELECT count(DISTINCT RESULT) FROM battle WHERE BATTLE_TYPE = 'land'",
    "db_id": "battle_death",
    "table_description": "The battle table contains information about various battles including their types and outcomes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "RESULT",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "BATTLE_TYPE",
          "match_type": "精确匹配",
          "condition": "land"
        }
      ]
    },
    "id": 1409,
    "table_name": "battle"
  },
  {
    "question": "What are the notes of the death events which have the word 'eastern'?",
    "SQL": "SELECT note FROM death WHERE note LIKE '%eastern%'",
    "db_id": "battle_death",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "note"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "note",
          "match_type": "模糊匹配",
          "condition": "eastern"
        }
      ]
    },
    "table_name": "death",
    "id": 1410
  },
  {
    "question": "What are all the addresses containing 'Main Street' in line 1 or line 2?",
    "SQL": "SELECT line_1, line_2 FROM addresses WHERE line_1 LIKE '%Main Street%' OR line_2 LIKE '%Main Street%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "line_1",
          "match_type": "模糊匹配",
          "condition": "Main Street"
        },
        {
          "column": "line_2",
          "match_type": "模糊匹配",
          "condition": "Main Street"
        }
      ]
    },
    "id": 1411,
    "table_name": "addresses"
  },
  {
    "question": "What is the first and second line for all addresses with a city name that includes 'Spring'?",
    "SQL": "SELECT line_1 ,  line_2 FROM addresses WHERE city LIKE '%Spring%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table contains address information including lines, city, state, and zip code.",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "Spring"
        }
      ]
    },
    "id": 1412,
    "table_name": "addresses"
  },
  {
    "question": "How many courses that have more than 10 enrollments are listed?",
    "SQL": "SELECT count(*) FROM Courses WHERE enrollments > 10",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Courses table contains information about the courses, including course ID, name, and number of enrollments.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "enrollments",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1413,
    "table_name": "Courses"
  },
  {
    "question": "How many courses are there with a duration longer than 10 weeks?",
    "SQL": "SELECT count(*) FROM Courses WHERE duration > 10",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table 'Courses' contains information about various courses, including their duration.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "duration",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1414,
    "table_name": "Courses"
  },
  {
    "question": "What is the description of the mathematics course?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name LIKE '%mathematics%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "模糊匹配",
          "condition": "mathematics"
        }
      ]
    },
    "id": 1415,
    "table_name": "Courses"
  },
  {
    "question": "What are the descriptions for all the math-related courses?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "course_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "模糊匹配",
          "condition": "%math%"
        }
      ]
    },
    "id": 1416,
    "table_name": "Courses"
  },
  {
    "question": "What is the zip code of the address in the city Port Chelsea?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Addresses table contains information about addresses including city and zip code.",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Port Chelsea"
        }
      ]
    },
    "id": 1417,
    "table_name": "Addresses"
  },
  {
    "question": "What is the zip code for Port Chelsea?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Contains address information such as city and zip code.",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Port Chelsea"
        }
      ]
    },
    "table_name": "Addresses",
    "id": 1418
  },
  {
    "question": "How many departments offer a Bachelor's degree?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE degree_type = 'Bachelor'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The table Degree_Programs contains information about the degree programs offered by different departments.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "COUNT_DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "degree_type",
          "match_type": "精确匹配",
          "condition": "Bachelor"
        }
      ]
    },
    "id": 1419,
    "table_name": "Degree_Programs"
  },
  {
    "question": "How many different departments offer degrees in the last 5 years?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE year >= DATE('now', '-5 years')",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "绝对时间",
          "condition": "近5年"
        }
      ]
    },
    "id": 1420,
    "table_name": "Degree_Programs"
  },
  {
    "question": "How many different degree names are offered in the program with ID 123?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs WHERE program_id = 123",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about degree programs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "program_id",
          "match_type": "等于",
          "condition": "123"
        }
      ]
    },
    "id": 1421,
    "table_name": "Degree_Programs"
  },
  {
    "question": "How many different degrees are offered in the College of Engineering?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs WHERE college_name = 'College of Engineering'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about degree programs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "college_name",
          "match_type": "精确匹配",
          "condition": "College of Engineering"
        }
      ]
    },
    "id": 1422,
    "table_name": "Degree_Programs"
  },
  {
    "question": "What are the names and descriptions of all the sections?",
    "SQL": "SELECT section_name ,  section_description FROM Sections",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 1423
  },
  {
    "question": "What are the names and descriptions for all the sections that have 'Math' in their description?",
    "SQL": "SELECT section_name ,  section_description FROM Sections WHERE section_description LIKE '%Math%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Sections table contains information about different sections including their names and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "section_description",
          "match_type": "模糊匹配",
          "condition": "%Math%"
        }
      ]
    },
    "id": 1424,
    "table_name": "Sections"
  },
  {
    "question": "List the section_name in reversed lexicographical order.",
    "SQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 1425
  },
  {
    "question": "What are the names of the sections in reverse alphabetical order that start with 'B'?",
    "SQL": "SELECT section_name FROM Sections WHERE section_name LIKE 'B%' ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about different sections.",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "模糊匹配",
          "condition": "B%"
        }
      ]
    },
    "id": 1426,
    "table_name": "Sections"
  },
  {
    "question": "What is the description of the department whose name contains the word 'science'?",
    "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%science%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Contains information about different departments.",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "department_name",
          "match_type": "模糊匹配",
          "condition": "science"
        }
      ]
    },
    "table_name": "Departments",
    "id": 1427
  },
  {
    "question": "What is the department description for the one whose name contains the word science?",
    "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%science%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Departments table contains information about different departments including their names and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "department_name",
          "match_type": "模糊匹配",
          "condition": "science"
        }
      ]
    },
    "table_name": "Departments",
    "id": 1428
  },
  {
    "question": "What is the phone number of the man with the first name Timothy and the last name Ward?",
    "SQL": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timothy' AND last_name  =  'Ward'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cell_mobile_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Timothy"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Ward"
        }
      ]
    },
    "id": 1429,
    "table_name": "Students"
  },
  {
    "question": "What is the mobile phone number of the student named Timothy Ward?",
    "SQL": "select cell_mobile_number from students where first_name  =  'Timothy' and last_name  =  'Ward'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their names and contact details.",
    "config": {
      "dimension": [
        {
          "column": "cell_mobile_number"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Timothy"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Ward"
        }
      ]
    },
    "id": 1430,
    "table_name": "students"
  },
  {
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE date_first_registered >= '1980-01-01' ORDER BY date_first_registered ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "This table contains information about students including their names and registration dates.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_first_registered",
          "match_type": "absolute_time",
          "condition": [
            "1980-01-01",
            null
          ]
        }
      ]
    },
    "id": 1431,
    "table_name": "Students"
  },
  {
    "question": "What is the first, middle, and last name of the student who registered on '2022-01-15'?",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE date_first_registered = '2022-01-15' LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks the information about students including their registration details.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_first_registered",
          "match_type": "绝对时间",
          "condition": "2022-01-15"
        }
      ]
    },
    "id": 1432,
    "table_name": "Students"
  },
  {
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks student information including their names and graduation dates.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_left",
          "match_type": "不为空",
          "condition": "IS NOT NULL"
        }
      ]
    },
    "id": 1433,
    "table_name": "Students"
  },
  {
    "question": "What is the first, middle, and last name of the earliest school graduate from the year 2020?",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE YEAR(date_left) = 2020 ORDER BY date_left ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their names and graduation dates.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_left",
          "match_type": "绝对时间",
          "condition": "2020-01-01 TO 2020-12-31"
        }
      ]
    },
    "id": 1434,
    "table_name": "Students"
  },
  {
    "question": "Whose permanent address is not the same as his or her current address? List his or her first name.",
    "SQL": "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their first name, current address ID, and permanent address ID.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "current_address_id",
          "match_type": "不等于",
          "condition": "permanent_address_id"
        }
      ]
    },
    "id": 1435,
    "table_name": "Students"
  },
  {
    "question": "What is the first name of the student whose current address ID is 100 and permanent address is different from his or her current one?",
    "SQL": "SELECT first_name FROM Students WHERE current_address_id = 100 AND permanent_address_id != current_address_id",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their first names and address IDs.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "current_address_id",
          "match_type": "等于",
          "condition": "100"
        },
        {
          "column": "permanent_address_id",
          "match_type": "不等于",
          "condition": "current_address_id"
        }
      ]
    },
    "id": 1436,
    "table_name": "Students"
  },
  {
    "question": "On average, when were the transcripts printed for students who graduated after 2020?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts WHERE graduation_year > 2020",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about student transcripts and their printing dates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "graduation_year",
          "match_type": "大于",
          "condition": "2020"
        }
      ]
    },
    "id": 1437,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the average transcript date for transcripts created before 2023-01-01?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts WHERE transcript_date < '2023-01-01'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": "< '2023-01-01'"
        }
      ]
    },
    "id": 1438,
    "table_name": "Transcripts"
  },
  {
    "question": "When is the first transcript released? List the date and details for transcripts released after January 1, 2023.",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts WHERE transcript_date > '2023-01-01' ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": "> 2023-01-01"
        }
      ]
    },
    "id": 1439,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the earliest date of a transcript release for students in the fall semester, and what details can you tell me?",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts WHERE semester = 'Fall' ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student transcript information.",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "semester",
          "match_type": "精确匹配",
          "condition": "Fall"
        }
      ]
    },
    "id": 1440,
    "table_name": "Transcripts"
  },
  {
    "question": "How many transcripts were released today?",
    "SQL": "SELECT count(*) FROM Transcripts WHERE release_date = CURRENT_DATE",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "release_date",
          "match_type": "绝对时间",
          "condition": "今天"
        }
      ]
    },
    "id": 1441,
    "table_name": "Transcripts"
  },
  {
    "question": "How many transcripts were listed for the year 2023?",
    "SQL": "SELECT count(*) FROM Transcripts WHERE year = 2023",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Transcripts table contains information about student transcripts, including the year they were issued.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2023"
        }
      ]
    },
    "id": 1442,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the last transcript release date for a specific course?",
    "SQL": "SELECT transcript_date FROM Transcripts WHERE course_id = 'CS101' ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "This table contains information about student transcripts including the course ID and the date the transcript was released.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "course_id",
          "match_type": "精确匹配",
          "condition": "CS101"
        }
      ]
    },
    "id": 1443,
    "table_name": "Transcripts"
  },
  {
    "question": "When was the last transcript released in 2023?",
    "SQL": "SELECT transcript_date FROM Transcripts WHERE YEAR(transcript_date) = 2023 ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks the release dates of student transcripts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": "2023-01-01 to 2023-12-31"
        }
      ]
    },
    "id": 1444,
    "table_name": "Transcripts"
  },
  {
    "question": "How many times at most can a course enrollment result show in different transcripts for a specific term? Also show the course enrollment id.",
    "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents WHERE term_id = '202301' GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing details of course enrollments and their corresponding transcripts.",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        }
      ],
      "measure": [
        {
          "column": "student_course_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "term_id",
          "match_type": "精确匹配",
          "condition": "202301"
        }
      ]
    },
    "id": 1445,
    "table_name": "Transcript_Contents"
  },
  {
    "question": "What is the maximum number of times that a course shows up in different transcripts for courses with an ID greater than 100 and what is that course's enrollment id?",
    "SQL": "SELECT COUNT(*), student_course_id FROM Transcript_Contents WHERE student_course_id > 100 GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing details of courses in student transcripts.",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "student_course_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1446,
    "table_name": "Transcript_Contents"
  },
  {
    "question": "How many different addresses do the students currently live in cities that contain 'ville'?",
    "SQL": "SELECT count(DISTINCT current_address_id) FROM Students WHERE city LIKE '%ville%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Students table contains information about student's transcripts and personal details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "current_address_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "ville"
        }
      ]
    },
    "id": 1447,
    "table_name": "Students"
  },
  {
    "question": "How many different addresses do the students live in?",
    "SQL": "SELECT COUNT(DISTINCT current_address_id) AS num_addresses FROM Students",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their current address IDs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "current_address_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "id": 1448,
    "table_name": "Students"
  },
  {
    "question": "List all the student details where the student ID is greater than 100 in reversed lexicographical order.",
    "SQL": "SELECT other_student_details FROM Students WHERE student_id > 100 ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "other_student_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "student_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1449,
    "table_name": "Students"
  },
  {
    "question": "What other details can you tell me about students who have a grade higher than 85 in reverse alphabetical order?",
    "SQL": "SELECT other_student_details FROM Students WHERE grade > 85 ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于",
          "condition": "85"
        }
      ]
    },
    "id": 1450,
    "table_name": "Students"
  },
  {
    "question": "Describe sections related to h.",
    "SQL": "SELECT section_description FROM Sections WHERE section_name LIKE '%h%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "模糊匹配",
          "condition": "%h%"
        }
      ]
    },
    "table_name": "Sections",
    "id": 1451
  },
  {
    "question": "What is the description for the section named i?",
    "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'i'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing sections and their descriptions.",
    "config": {
      "dimension": [
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "精确匹配",
          "condition": "i"
        }
      ]
    },
    "table_name": "Sections",
    "id": 1452
  },
  {
    "question": "List the title of all cartoons in alphabetical order that have the word 'Adventure' in them.",
    "SQL": "SELECT Title FROM Cartoon WHERE Title LIKE '%Adventure%' ORDER BY title",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Title",
          "match_type": "模糊匹配",
          "condition": "Adventure"
        }
      ]
    },
    "id": 1453,
    "table_name": "Cartoon"
  },
  {
    "question": "What are the titles of the cartoons sorted alphabetically?",
    "SQL": "SELECT Title FROM Cartoon ORDER BY title",
    "db_id": "tvshow",
    "table_description": "The Cartoon table contains information about various cartoon shows.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 1454
  },
  {
    "question": "List all cartoons directed by 'John Smith'.",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'John Smith';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "John Smith"
        }
      ]
    },
    "id": 1455,
    "table_name": "Cartoon"
  },
  {
    "question": "What are the names of all cartoons directed by John Smith?",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'John Smith';",
    "db_id": "tvshow",
    "table_description": "Table containing information about various cartoons including their titles and directors.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "John Smith"
        }
      ]
    },
    "id": 1456,
    "table_name": "Cartoon"
  },
  {
    "question": "How many cartoons were written by someone related to \"Joseph Kuhr\"?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by LIKE '%Joseph Kuhr%';",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "模糊匹配",
          "condition": "%Joseph Kuhr%"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 1457
  },
  {
    "question": "How many cartoons are related to Joseph Kuhr's writing?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by LIKE '%Joseph Kuhr%';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "模糊匹配",
          "condition": "%Joseph Kuhr%"
        }
      ]
    },
    "id": 1458,
    "table_name": "Cartoon"
  },
  {
    "question": "list all cartoon titles and their directors that aired before 2020-01-01, ordered by their air date",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon WHERE Original_air_date < '2020-01-01' ORDER BY Original_air_date",
    "db_id": "tvshow",
    "table_description": "The table contains information about cartoons including their titles, directors, and original air dates.",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Original_air_date",
          "match_type": "绝对时间",
          "condition": "< '2020-01-01'"
        }
      ]
    },
    "id": 1459,
    "table_name": "Cartoon"
  },
  {
    "question": "What is the name and directors of all the cartoons that aired after January 1, 2020, ordered by air date?",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon WHERE Original_air_date > '2020-01-01' ORDER BY Original_air_date",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Original_air_date",
          "match_type": "绝对时间",
          "condition": "2020-01-01"
        }
      ]
    },
    "id": 1460,
    "table_name": "Cartoon"
  },
  {
    "question": "List the title of all cartoon directed by \"Ben Jones\" or containing the word \"Vietti\" in the director's name.",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by LIKE '%Vietti%';",
    "db_id": "tvshow",
    "table_description": "A table that lists information about cartoons, including their titles and directors.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Directed_by",
          "match_type": "模糊匹配",
          "condition": "%Vietti%"
        }
      ]
    },
    "id": 1461,
    "table_name": "Cartoon"
  },
  {
    "question": "What are the titles of all cartoons directed by Ben Jones or related to Brandon Vietti?",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by LIKE '%Brandon Vietti%';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Directed_by",
          "match_type": "模糊匹配",
          "condition": "%Brandon Vietti%"
        }
      ]
    },
    "id": 1462,
    "table_name": "Cartoon"
  },
  {
    "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel WHERE Country != 'Unknown' GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about various TV channels, including their country of origin.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "不等于",
          "condition": "Unknown"
        }
      ]
    },
    "id": 1463,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the country with the most number of TV Channels and how many does it have, excluding channels that are not active?",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel WHERE Status = 'Active' GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about various TV channels including their country and status.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Status",
          "match_type": "等于",
          "condition": "Active"
        }
      ]
    },
    "id": 1464,
    "table_name": "TV_Channel"
  },
  {
    "question": "List the number of different series names and contents that involve 'Drama' in the TV Channel table.",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel WHERE content LIKE '%Drama%';",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about TV shows, including series names and content types.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "content",
          "match_type": "模糊匹配",
          "condition": "Drama"
        }
      ]
    },
    "id": 1465,
    "table_name": "TV_Channel"
  },
  {
    "question": "How many different series and contents are listed in the TV Channel table, specifically for the 'Drama' genre?",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel WHERE genre = 'Drama';",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about TV shows, including their series name, content, and genre.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "genre",
          "match_type": "精确匹配",
          "condition": "Drama"
        }
      ]
    },
    "id": 1466,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the content of TV Channel with a series name related to \"Sky Radio\"?",
    "SQL": "SELECT Content FROM TV_Channel WHERE series_name LIKE \"%Sky Radio%\";",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "模糊匹配",
          "condition": "%Sky Radio%"
        }
      ]
    },
    "id": 1467,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the content of the series involving Sky Radio?",
    "SQL": "SELECT Content FROM TV_Channel WHERE series_name LIKE \"%Sky Radio%\";",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV shows and their series.",
    "config": {
      "dimension": [
        {
          "column": "Content"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "模糊匹配",
          "condition": "%Sky Radio%"
        }
      ]
    },
    "id": 1468,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the Package Option of TV Channel with serial name similar to \"Space Cable\"?",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name LIKE '%Space Cable%';",
    "db_id": "tvshow",
    "table_description": "The table TV_Channel contains information about different TV channels, including their serial names and package options.",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "模糊匹配",
          "condition": "Space Cable"
        }
      ]
    },
    "id": 1469,
    "table_name": "TV_Channel"
  },
  {
    "question": "What are the Package Options of the TV Channels whose series names contain 'Radio'?",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name LIKE \"%Radio%\";",
    "db_id": "tvshow",
    "table_description": "Table TV_Channel contains information about TV channels including their series names and package options.",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "模糊匹配",
          "condition": "Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1470
  },
  {
    "question": "How many TV Channel using language Spanish?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'Spanish';",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV channels including their languages.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "id": 1471,
    "table_name": "TV_Channel"
  },
  {
    "question": "How many TV Channels use the Spanish language?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'Spanish';",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about various TV channels including their languages.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "id": 1472,
    "table_name": "TV_Channel"
  },
  {
    "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about TV channels including their language.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "CHANNEL_ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 1473,
    "table_name": "TV_Channel"
  },
  {
    "question": "What are the languages used by the least number of TV Channels and how many channels use it, excluding English?",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV Channels including their language.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "id": 1474,
    "table_name": "TV_Channel"
  },
  {
    "question": "List each language and the number of TV Channels using it, excluding channels that use 'English'.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "table_description": "Table TV_Channel contains information about TV channels including their language.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "id": 1475,
    "table_name": "TV_Channel"
  },
  {
    "question": "For each language, list the number of TV Channels that use it, excluding those that use English.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "table_description": "Table contains information about TV channels including their languages.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "id": 1476,
    "table_name": "TV_Channel"
  },
  {
    "question": "List the Episode of all TV series with a rating greater than 7.5, sorted by rating.",
    "SQL": "SELECT Episode FROM TV_series WHERE rating > 7.5 ORDER BY rating",
    "db_id": "tvshow",
    "table_description": "Table TV_series contains information about different TV series including their episodes and ratings.",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rating",
          "match_type": "大于",
          "condition": "7.5"
        }
      ]
    },
    "id": 1477,
    "table_name": "TV_series"
  },
  {
    "question": "What are all of the episodes with a rating greater than 8.0, ordered by ratings?",
    "SQL": "SELECT Episode FROM TV_series WHERE rating > 8.0 ORDER BY rating",
    "db_id": "tvshow",
    "table_description": "Table TV_series contains information about TV show episodes and their ratings.",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rating",
          "match_type": "大于",
          "condition": "8.0"
        }
      ]
    },
    "id": 1478,
    "table_name": "TV_series"
  },
  {
    "question": "List top 3 highest Rated TV series with a rating greater than 8.5. List the TV series's Episode and Rating.",
    "SQL": "SELECT Episode ,  Rating FROM TV_series WHERE Rating > 8.5 ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Rating",
          "match_type": "大于",
          "condition": "8.5"
        }
      ]
    },
    "id": 1479,
    "table_name": "TV_series"
  },
  {
    "question": "What are 3 most highly rated episodes in the TV series table that have a rating greater than 8.5 and what were those ratings?",
    "SQL": "SELECT Episode ,  Rating FROM TV_series WHERE Rating > 8.5 ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV series episodes.",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Rating",
          "match_type": "大于",
          "condition": "8.5"
        }
      ]
    },
    "id": 1480,
    "table_name": "TV_series"
  },
  {
    "question": "What is the minimum and maximum share of TV series with a rating greater than 7.5?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series WHERE RATING > 7.5;",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "RATING",
          "match_type": "大于",
          "condition": "7.5"
        }
      ]
    },
    "id": 1481,
    "table_name": "TV_series"
  },
  {
    "question": "What is the maximum and minimum share for the TV series with a rating higher than 6.5?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series WHERE RATING > 6.5;",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "RATING",
          "match_type": "大于",
          "condition": "6.5"
        }
      ]
    },
    "id": 1482,
    "table_name": "TV_series"
  },
  {
    "question": "What is the air date of TV series with Episode containing 'Love'?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Episode LIKE '%Love%';",
    "db_id": "tvshow",
    "table_description": "Table TV_series contains information about various TV series including their episodes and air dates.",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "模糊匹配",
          "condition": "%Love%"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1483
  },
  {
    "question": "When did the episode related to 'Lifetime' air?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Episode LIKE '%Lifetime%';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "模糊匹配",
          "condition": "Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1484
  },
  {
    "question": "What is the Weekly Rank of TV series that have Episodes related to 'A Love Story'?",
    "SQL": "SELECT MAX(Weekly_Rank) FROM TV_series WHERE Episode LIKE '%A Love Story%';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Weekly_Rank",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Episode",
          "match_type": "模糊匹配",
          "condition": "A Love Story"
        }
      ]
    },
    "id": 1485,
    "table_name": "TV_series"
  },
  {
    "question": "What is the weekly rank for the episode that involves 'Lifetime'?",
    "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode LIKE \"%Lifetime%\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Weekly_Rank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "模糊匹配",
          "condition": "Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1486
  },
  {
    "question": "Find the number of cartoons directed by each of the listed directors, excluding those directed by John Smith.",
    "SQL": "SELECT count(*), Directed_by FROM cartoon WHERE Directed_by != 'John Smith' GROUP BY Directed_by",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "不等于",
          "condition": "John Smith"
        }
      ]
    },
    "id": 1487,
    "table_name": "cartoon"
  },
  {
    "question": "How many cartoons did each director create in the last month?",
    "SQL": "SELECT count(*) ,  Directed_by FROM cartoon WHERE Date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH) GROUP BY Directed_by",
    "db_id": "tvshow",
    "table_description": "Table 'cartoon' contains information about various cartoons, including their creation date and the director.",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": "['2023-08-01', '2023-09-01']"
        }
      ]
    },
    "id": 1488,
    "table_name": "cartoon"
  },
  {
    "question": "Find the production code and channel of the most recently aired cartoon from ABC channel.",
    "SQL": "select production_code ,  channel from cartoon where channel = 'ABC' order by original_air_date desc limit 1",
    "db_id": "tvshow",
    "table_description": "Table containing information about cartoons including their production codes, channels, and air dates.",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "channel",
          "match_type": "精确匹配",
          "condition": "ABC"
        }
      ]
    },
    "id": 1489,
    "table_name": "cartoon"
  },
  {
    "question": "What is the production code and channel of the most recent cartoon aired yesterday?",
    "SQL": "select production_code ,  channel from cartoon where original_air_date = date('now', '-1 day') order by original_air_date desc limit 1",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "original_air_date",
          "match_type": "relative_time",
          "condition": "yesterday"
        }
      ]
    },
    "table_name": "cartoon",
    "id": 1490
  },
  {
    "question": "Find the package choice and series name of the TV channel that has standard definition TV.",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'no'",
    "db_id": "tvshow",
    "table_description": "This table contains information about TV channels, including their package options, series names, and whether they offer high-definition TV.",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hight_definition_TV",
          "match_type": "精确匹配",
          "condition": "no"
        }
      ]
    },
    "id": 1491,
    "table_name": "TV_Channel"
  },
  {
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV with a premium package?",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'yes' AND package_option  =  'premium'",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about different TV channels, including whether they support high definition TV, the series names, and package options.",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hight_definition_TV",
          "match_type": "精确匹配",
          "condition": "yes"
        },
        {
          "column": "package_option",
          "match_type": "精确匹配",
          "condition": "premium"
        }
      ]
    },
    "id": 1492,
    "table_name": "TV_Channel"
  },
  {
    "question": "find the pixel aspect ratio and nation of the tv channels that use French.",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE = 'French'",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV channels including their language, pixel aspect ratio, and country.",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "等于",
          "condition": "French"
        }
      ]
    },
    "id": 1493,
    "table_name": "tv_channel"
  },
  {
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that use French?",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE = 'French'",
    "db_id": "tvshow",
    "table_description": "The table 'tv_channel' contains information about various TV channels including their language, pixel aspect ratio, and country of origin.",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "等于",
          "condition": "French"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 1494
  },
  {
    "question": "find id of the tv channels that from the countries where have more than three tv channels.",
    "SQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  3",
    "db_id": "tvshow",
    "table_description": "Table contains information about TV channels including their IDs and the countries they are from.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "id": 1495,
    "table_name": "tv_channel"
  },
  {
    "question": "What are the ids of all tv channels that have more than 3 TV channels?",
    "SQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  3",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "id": 1496,
    "table_name": "tv_channel"
  },
  {
    "question": "How many poker players have a rank higher than 50?",
    "SQL": "SELECT count(*) FROM poker_player WHERE rank > 50",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players including their ID, name, and rank.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "rank",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1497,
    "table_name": "poker_player"
  },
  {
    "question": "Count the number of poker players who have a rank of 'pro'.",
    "SQL": "SELECT count(*) FROM poker_player WHERE rank = 'pro'",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "rank",
          "match_type": "精确匹配",
          "condition": "pro"
        }
      ]
    },
    "id": 1498,
    "table_name": "poker_player"
  },
  {
    "question": "List the earnings of poker players with earnings greater than 50000 in descending order.",
    "SQL": "SELECT Earnings FROM poker_player WHERE Earnings > 50000 ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "table_description": "Table containing information about poker players including their earnings.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1499,
    "table_name": "poker_player"
  },
  {
    "question": "What are the earnings of poker players with more than 10 wins, ordered descending by value?",
    "SQL": "SELECT Earnings FROM poker_player WHERE Wins > 10 ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "table_description": "Table containing information about poker players including their earnings and number of wins.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Wins",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1500,
    "table_name": "poker_player"
  },
  {
    "question": "List the final tables made and the best finishes of poker players who have at least one tournament win.",
    "SQL": "SELECT Final_Table_Made ,  MAX(Best_Finish) FROM poker_player WHERE Tournament_Wins > 0 GROUP BY Final_Table_Made",
    "db_id": "poker_player",
    "table_description": "Table containing information about poker players including their final tables made, best finishes, and tournament wins.",
    "config": {
      "dimension": [
        {
          "column": "Final_Table_Made"
        }
      ],
      "measure": [
        {
          "column": "Best_Finish",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Tournament_Wins",
          "match_type": "大于",
          "condition": "0"
        }
      ]
    },
    "id": 1501,
    "table_name": "poker_player"
  },
  {
    "question": "What are the final tables made and best finishes for all poker players with at least one final table made?",
    "SQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player WHERE Final_Table_Made >= 1",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Final_Table_Made"
        },
        {
          "column": "Best_Finish"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Final_Table_Made",
          "match_type": "大于等于",
          "condition": "1"
        }
      ]
    },
    "id": 1502,
    "table_name": "poker_player"
  },
  {
    "question": "What is the average earnings of poker players who have earnings greater than 10000?",
    "SQL": "SELECT avg(Earnings) FROM poker_player WHERE Earnings > 10000",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players and their earnings.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "id": 1503,
    "table_name": "poker_player"
  },
  {
    "question": "Return the average earnings of poker players with earnings greater than 50000.",
    "SQL": "SELECT avg(Earnings) FROM poker_player WHERE Earnings > 50000",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players and their earnings.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1504,
    "table_name": "poker_player"
  },
  {
    "question": "What is the money rank of the poker player who earned more than $100,000?",
    "SQL": "SELECT Money_Rank FROM poker_player WHERE Earnings > 100000",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Money_Rank"
        }
      ],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "100000"
        }
      ]
    },
    "id": 1505,
    "table_name": "poker_player"
  },
  {
    "question": "Return the money rank of the player whose earnings are greater than 1000000.",
    "SQL": "SELECT Money_Rank FROM poker_player WHERE Earnings > 1000000",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Money_Rank"
        }
      ],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1506,
    "table_name": "poker_player"
  },
  {
    "question": "What is the maximum number of final tables made among poker players with earnings not equal to 250000?",
    "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings <> 250000",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players including their earnings and the number of final tables they have made.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Final_Table_Made",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "不等于",
          "condition": "250000"
        }
      ]
    },
    "id": 1507,
    "table_name": "poker_player"
  },
  {
    "question": "Return the maximum final tables made across all poker players who have earnings below 150000.",
    "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  150000",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players including their earnings and final tables made.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Final_Table_Made",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "小于",
          "condition": "150000"
        }
      ]
    },
    "id": 1508,
    "table_name": "poker_player"
  },
  {
    "question": "What are different nationalities of people and the corresponding number of people from each nation, excluding those from China?",
    "SQL": "SELECT Nationality ,  COUNT(*) FROM people WHERE Nationality != 'China' GROUP BY Nationality",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "China"
        }
      ]
    },
    "id": 1509,
    "table_name": "people"
  },
  {
    "question": "How many people are there of each nationality from China and USA?",
    "SQL": "SELECT Nationality ,  COUNT(*) FROM people WHERE Nationality IN ('China', 'USA') GROUP BY Nationality",
    "db_id": "poker_player",
    "table_description": "The people table contains information about individuals, including their nationality.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "精确匹配",
          "condition": "IN ('China', 'USA')"
        }
      ]
    },
    "id": 1510,
    "table_name": "people"
  },
  {
    "question": "What is the most common nationality of people who are not from the United States?",
    "SQL": "SELECT Nationality FROM people WHERE Nationality != 'United States' GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "poker_player",
    "table_description": "The people table contains information about poker players, including their nationality.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "United States"
        }
      ]
    },
    "id": 1511,
    "table_name": "people"
  },
  {
    "question": "Give the nationality that is most common among people with a height greater than 180cm.",
    "SQL": "SELECT Nationality FROM people WHERE Height > 180 GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "poker_player",
    "table_description": "The 'people' table contains information about individuals, including their nationality and height.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Height",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "id": 1512,
    "table_name": "people"
  },
  {
    "question": "What are the nationalities that are shared by at least three people?",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  3",
    "db_id": "poker_player",
    "table_description": "The 'people' table contains information about individuals, including their nationality.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1513,
    "table_name": "people"
  },
  {
    "question": "Return the nationalities for which there are three or more people.",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  3",
    "db_id": "poker_player",
    "table_description": "The 'people' table contains information about individuals including their nationality.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1514,
    "table_name": "people"
  },
  {
    "question": "List the names and birth dates of people born before 1980 in ascending alphabetical order of name.",
    "SQL": "SELECT Name ,  Birth_Date FROM people WHERE Birth_Date < '1980-01-01' ORDER BY Name ASC",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Birth_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Date",
          "match_type": "绝对时间",
          "condition": "< '1980-01-01'"
        }
      ]
    },
    "id": 1515,
    "table_name": "people"
  },
  {
    "question": "What are the names and birth dates of people born before January 1, 1980, ordered by their names in alphabetical order?",
    "SQL": "SELECT Name ,  Birth_Date FROM people WHERE Birth_Date < '1980-01-01' ORDER BY Name ASC",
    "db_id": "poker_player",
    "table_description": "Table containing information about people including their names and birth dates.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Birth_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Date",
          "match_type": "绝对时间",
          "condition": "1980-01-01"
        }
      ]
    },
    "id": 1516,
    "table_name": "people"
  },
  {
    "question": "Show names of people whose nationality is not related to 'Russian'.",
    "SQL": "SELECT Name FROM people WHERE Nationality NOT LIKE '%Russian%'",
    "db_id": "poker_player",
    "table_description": "Table 'people' contains information about individuals including their names and nationalities.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "模糊匹配",
          "condition": "Russian"
        }
      ]
    },
    "id": 1517,
    "table_name": "people"
  },
  {
    "question": "What are the names of people who are not from China?",
    "SQL": "SELECT Name FROM people WHERE Nationality != 'China'",
    "db_id": "poker_player",
    "table_description": "This table contains information about poker players including their names and nationalities.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "China"
        }
      ]
    },
    "id": 1518,
    "table_name": "people"
  },
  {
    "question": "How many distinct nationalities are there for players with an age greater than 30?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM people WHERE Age > 30",
    "db_id": "poker_player",
    "table_description": "The 'people' table contains information about poker players including their nationality and age.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1519,
    "table_name": "people"
  },
  {
    "question": "Count the number of different nationalities excluding players from China.",
    "SQL": "SELECT count(DISTINCT Nationality) FROM people WHERE Nationality != 'China'",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "China"
        }
      ]
    },
    "id": 1520,
    "table_name": "people"
  },
  {
    "question": "How many states are there?",
    "SQL": "SELECT count(*) FROM area_code_state",
    "db_id": "voter_1",
    "table_description": "Table 'area_code_state' contains information about area codes and their corresponding states.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 1521,
    "table_name": "area_code_state"
  },
  {
    "question": "List the contestant numbers and names where the contestant number is greater than 100, ordered by contestant name descending.",
    "SQL": "SELECT contestant_number ,  contestant_name FROM contestants WHERE contestant_number > 100 ORDER BY contestant_name DESC",
    "db_id": "voter_1",
    "table_description": "Table containing information about contestants including their numbers and names.",
    "config": {
      "dimension": [
        {
          "column": "contestant_number"
        },
        {
          "column": "contestant_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "contestant_number",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1522,
    "table_name": "contestants"
  },
  {
    "question": "List the vote ids, phone numbers and states of all votes from Texas.",
    "SQL": "SELECT vote_id ,  phone_number ,  state FROM votes WHERE state = 'Texas'",
    "db_id": "voter_1",
    "table_description": "The votes table contains information about votes, including vote_id, phone_number, and state.",
    "config": {
      "dimension": [
        {
          "column": "vote_id"
        },
        {
          "column": "phone_number"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Texas"
        }
      ]
    },
    "id": 1523,
    "table_name": "votes"
  },
  {
    "question": "What are the maximum and minimum values of area codes for the state of California?",
    "SQL": "SELECT max(area_code) ,  min(area_code) FROM area_code_state WHERE state = 'California'",
    "db_id": "voter_1",
    "table_description": "Table contains area code and corresponding state information.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "area_code",
          "aggregate_function": "max"
        },
        {
          "column": "area_code",
          "aggregate_function": "min"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "California"
        }
      ]
    },
    "id": 1524,
    "table_name": "area_code_state"
  },
  {
    "question": "What is the last date created of votes from states that contain 'C'?",
    "SQL": "SELECT max(created) FROM votes WHERE state LIKE '%C%'",
    "db_id": "voter_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "created",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "模糊匹配",
          "condition": "%C%"
        }
      ]
    },
    "id": 1525,
    "table_name": "votes"
  },
  {
    "question": "What are the names of the contestants whose names do not contain 'Alloway'",
    "SQL": "SELECT contestant_name FROM contestants WHERE contestant_name NOT LIKE '%Alloway%'",
    "db_id": "voter_1",
    "table_description": "Table containing contestant information",
    "config": {
      "dimension": [
        {
          "column": "contestant_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "contestant_name",
          "match_type": "模糊匹配",
          "condition": "Alloway"
        }
      ]
    },
    "id": 1526,
    "table_name": "contestants"
  },
  {
    "question": "What are the distinct states and create time of all votes created after '2023-01-01'?",
    "SQL": "SELECT DISTINCT state ,  created FROM votes WHERE created > '2023-01-01'",
    "db_id": "voter_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "state"
        },
        {
          "column": "created"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "created",
          "match_type": "绝对时间",
          "condition": "2023-01-01"
        }
      ]
    },
    "id": 1527,
    "table_name": "votes"
  },
  {
    "question": "What are the number of votes from state 'NY' or 'TX'?",
    "SQL": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'TX'",
    "db_id": "voter_1",
    "table_description": "The table contains information about votes including the state where the vote was cast.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "等于",
          "condition": "NY"
        },
        {
          "column": "state",
          "match_type": "等于",
          "condition": "TX"
        }
      ]
    },
    "id": 1528,
    "table_name": "votes"
  },
  {
    "question": "What are the names of all the countries that became independent after 1960?",
    "SQL": "SELECT Name FROM country WHERE IndepYear  >  1960",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about various countries including their name, independence year, and other details.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "IndepYear",
          "match_type": "大于",
          "condition": "1960"
        }
      ]
    },
    "id": 1529,
    "table_name": "country"
  },
  {
    "question": "Give the names of the nations that were founded after 1960.",
    "SQL": "SELECT Name FROM country WHERE IndepYear  >  1960",
    "db_id": "world_1",
    "table_description": "The country table contains information about different countries including their names and the year they gained independence.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "IndepYear",
          "match_type": "大于",
          "condition": "1960"
        }
      ]
    },
    "id": 1530,
    "table_name": "country"
  },
  {
    "question": "How many countries have a constitutional monarchy as their form of government?",
    "SQL": "SELECT count(*) FROM country WHERE GovernmentForm = 'Constitutional Monarchy'",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, government forms, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Constitutional Monarchy"
        }
      ]
    },
    "id": 1531,
    "table_name": "country"
  },
  {
    "question": "How many countries have governments that are constitutional monarchies?",
    "SQL": "SELECT count(*) FROM country WHERE GovernmentForm  =  'Constitutional Monarchy'",
    "db_id": "world_1",
    "table_description": "The table contains information about countries, including their names, government forms, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Constitutional Monarchy"
        }
      ]
    },
    "table_name": "country",
    "id": 1532
  },
  {
    "question": "What is the total surface area of the countries in the North America region?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'North America'",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, regions, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "North America"
        }
      ]
    },
    "table_name": "country",
    "id": 1533
  },
  {
    "question": "How much surface area do the countries in Central America and the Carribean cover together?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Central America and the Caribbean'",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, regions, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Central America and the Caribbean"
        }
      ]
    },
    "id": 1534,
    "table_name": "country"
  },
  {
    "question": "Which continent is Antigua and Barbuda in?",
    "SQL": "SELECT Continent FROM country WHERE Name = 'Antigua and Barbuda'",
    "db_id": "world_1",
    "table_description": "The country table contains information about countries including their names and continents.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Antigua and Barbuda"
        }
      ]
    },
    "id": 1535,
    "table_name": "country"
  },
  {
    "question": "What is the continent name which Antigua and Barbuda belongs to?",
    "SQL": "SELECT Continent FROM country WHERE Name  =  'Antigua and Barbuda'",
    "db_id": "world_1",
    "table_description": "The country table contains information about different countries including their names and continents.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Antigua and Barbuda"
        }
      ]
    },
    "id": 1536,
    "table_name": "country"
  },
  {
    "question": "What are the population and life expectancies for countries that include 'Bra' in their name?",
    "SQL": "SELECT SUM(Population) ,  AVG(LifeExpectancy) FROM country WHERE Name LIKE '%Bra%'",
    "db_id": "world_1",
    "table_description": "Table containing country information including name, population, and life expectancy.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "模糊匹配",
          "condition": "%Bra%"
        }
      ]
    },
    "id": 1537,
    "table_name": "country"
  },
  {
    "question": "Give me Brazil’s population and average life expectancy.",
    "SQL": "SELECT SUM(Population) AS Total_Population, AVG(LifeExpectancy) AS Average_LifeExpectancy FROM country WHERE Name  =  'Brazil'",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about countries including their names, populations, and life expectancies.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Brazil"
        }
      ]
    },
    "id": 1538,
    "table_name": "country"
  },
  {
    "question": "What are the region and population of Zimbabwe?",
    "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  'Zimbabwe'",
    "db_id": "world_1",
    "table_description": "The table contains information about countries including their name, region, and population.",
    "config": {
      "dimension": [
        {
          "column": "Region"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Zimbabwe"
        }
      ]
    },
    "id": 1539,
    "table_name": "country"
  },
  {
    "question": "What region does Angola belong to and what is its population?",
    "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  'Angola'",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their names, regions, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Region"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Angola"
        }
      ]
    },
    "id": 1540,
    "table_name": "country"
  },
  {
    "question": "What is the average expected life expectancy for countries in the region related to Western Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region LIKE '%Western Africa%'",
    "db_id": "world_1",
    "table_description": "Contains information about countries including their names, regions, and life expectancy.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "模糊匹配",
          "condition": "%Western Africa%"
        }
      ]
    },
    "id": 1541,
    "table_name": "country"
  },
  {
    "question": "What is the average life expectancy of people in Western Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Western Africa'",
    "db_id": "world_1",
    "table_description": "Table contains data about countries including their regions and life expectancy.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Western Africa"
        }
      ]
    },
    "id": 1542,
    "table_name": "country"
  },
  {
    "question": "What is the name of the country that has the shortest life expectancy in Africa?",
    "SQL": "SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy LIMIT 1",
    "db_id": "world_1",
    "table_description": "This table contains information about countries including their names, continents, and life expectancies.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "id": 1543,
    "table_name": "country"
  },
  {
    "question": "Give the name of the country in Europe with the lowest life expectancy.",
    "SQL": "SELECT Name FROM country WHERE Continent  =  'Europe' ORDER BY LifeExpectancy LIMIT 1",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about countries including their names, continents, and life expectancies.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        }
      ]
    },
    "id": 1544,
    "table_name": "country"
  },
  {
    "question": "What is the total population and maximum GNP in countries where the name contains 'stan' in Asia?",
    "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia' AND Name LIKE '%stan%'",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their names, populations, GNPs, and continents.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "GNP",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Name",
          "match_type": "模糊匹配",
          "condition": "%stan%"
        }
      ]
    },
    "id": 1545,
    "table_name": "country"
  },
  {
    "question": "How many people live in Asia, and what is the largest GNP among them, excluding countries with a GNP less than 10000?",
    "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia' AND GNP > 10000",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "GNP",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "GNP",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "id": 1546,
    "table_name": "country"
  },
  {
    "question": "What is the average life expectancy in African countries that have a government form related to a monarchy?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  LIKE  '%Monarchy%'",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "GovernmentForm",
          "match_type": "模糊匹配",
          "condition": "%Monarchy%"
        }
      ]
    },
    "id": 1547,
    "table_name": "country"
  },
  {
    "question": "Give the average life expectancy for countries in Africa which have a government form related to republics?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm LIKE '%Republic%'",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their names, continents, government forms, and life expectancies.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "GovernmentForm",
          "match_type": "模糊匹配",
          "condition": "%Republic%"
        }
      ]
    },
    "id": 1548,
    "table_name": "country"
  },
  {
    "question": "What is the total surface area of the continents Asia and North America?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"North America\"",
    "db_id": "world_1",
    "table_description": "The table contains information about different countries, including their names, continents, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "North America"
        }
      ]
    },
    "id": 1549,
    "table_name": "country"
  },
  {
    "question": "Give the total surface area covered by countries in Asia or Africa.",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Africa\"",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, continents, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "id": 1550,
    "table_name": "country"
  },
  {
    "question": "How many people live in Utrecht district?",
    "SQL": "SELECT sum(Population) FROM city WHERE District  =  \"Utrecht\"",
    "db_id": "world_1",
    "table_description": "This table contains information about different cities including the name, district, population, etc.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "District",
          "match_type": "精确匹配",
          "condition": "Utrecht"
        }
      ]
    },
    "table_name": "city",
    "id": 1551
  },
  {
    "question": "What is the total population of cities where the district name contains 'land'?",
    "SQL": "SELECT sum(Population) FROM city WHERE District LIKE '%land%'",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "District",
          "match_type": "模糊匹配",
          "condition": "%land%"
        }
      ]
    },
    "id": 1552,
    "table_name": "city"
  },
  {
    "question": "What is the average GNP and total population in all nations whose government form involves a commonwealth or territory of the United States?",
    "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  LIKE  '%Commonwealth%' OR GovernmentForm  LIKE  '%US Territory%'",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their government forms, GNP, and population.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GNP",
          "aggregate_function": "AVG"
        },
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "模糊匹配",
          "condition": "%Commonwealth%"
        },
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "US Territory"
        }
      ]
    },
    "id": 1553,
    "table_name": "country"
  },
  {
    "question": "Give the mean GNP and total population of nations which are related to US territory.",
    "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  LIKE  '%US Territory%'",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GNP",
          "aggregate_function": "AVG"
        },
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "模糊匹配",
          "condition": "%US Territory%"
        }
      ]
    },
    "id": 1554,
    "table_name": "country"
  },
  {
    "question": "How many unique languages are spoken in countries with a population greater than 1 million?",
    "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage WHERE Population > 1000000",
    "db_id": "world_1",
    "table_description": "The countrylanguage table contains information about the languages spoken in different countries and their populations.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LANGUAGE",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1555,
    "table_name": "countrylanguage"
  },
  {
    "question": "What is the number of distinct languages used around the world that are spoken by more than 10% of the population?",
    "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage WHERE Percentage > 0.1",
    "db_id": "world_1",
    "table_description": "The countrylanguage table contains information about the languages spoken in different countries and the percentage of the population that speaks each language.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LANGUAGE",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Percentage",
          "match_type": "大于",
          "condition": "0.1"
        }
      ]
    },
    "id": 1556,
    "table_name": "countrylanguage"
  },
  {
    "question": "How many types of governments are there in countries with a population greater than 10 million in Africa?",
    "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa' AND Population > 10000000",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their government form and population.",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "GovernmentForm",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1557,
    "table_name": "country"
  },
  {
    "question": "How many different forms of governments are there in Asia?",
    "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Asia'",
    "db_id": "world_1",
    "table_description": "The table contains information about countries including their names, government forms, and continents.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GovernmentForm",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "id": 1558,
    "table_name": "country"
  },
  {
    "question": "Find the name, population and expected life length of asian country with the largest population?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY Population DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "country table contains information about countries including their names, populations, life expectancies, and continents.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "id": 1559,
    "table_name": "country"
  },
  {
    "question": "What are the name, population, and life expectancy of the largest African country by land?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Africa' ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "Table 'country' contains information about countries including their names, populations, life expectancies, continents, and surface areas.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "id": 1560,
    "table_name": "country"
  },
  {
    "question": "What are the countries that have a larger surface area than the smallest country in Europe?",
    "SQL": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = 'Europe')",
    "db_id": "world_1",
    "table_description": "The table contains information about countries including their names, continents, and surface areas.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "(SELECT min(SurfaceArea) FROM country WHERE Continent = 'Europe')"
        }
      ]
    },
    "id": 1561,
    "table_name": "country"
  },
  {
    "question": "Which countries have a larger area than the smallest country in Europe?",
    "SQL": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')",
    "db_id": "world_1",
    "table_description": "This table contains information about countries including their names, continents, and surface areas.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "(SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')"
        }
      ]
    },
    "id": 1562,
    "table_name": "country"
  },
  {
    "question": "What are the African countries that have a population less than the maximum population of any country in Asia?",
    "SQL": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT MAX(population) FROM country WHERE Continent = 'Asia')",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their names, continents, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "population",
          "match_type": "小于",
          "condition": "(SELECT MAX(population) FROM country WHERE Continent = 'Asia')"
        }
      ]
    },
    "id": 1563,
    "table_name": "country"
  },
  {
    "question": "Which African countries have a population less than the smallest population of any country in Asia?",
    "SQL": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
    "db_id": "world_1",
    "table_description": "Table containing country information including name, continent, and population.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "population",
          "match_type": "小于",
          "condition": "(SELECT min(population) FROM country WHERE Continent = 'Asia')"
        }
      ]
    },
    "id": 1564,
    "table_name": "country"
  },
  {
    "question": "Which Asian countries have a population greater than the maximum population of a specific African country?",
    "SQL": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT population FROM country WHERE Continent = 'Africa' AND Name = 'Nigeria')",
    "db_id": "world_1",
    "table_description": "Table containing country information including name, continent, and population.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "population",
          "match_type": "大于",
          "condition": "(SELECT population FROM country WHERE Continent = 'Africa' AND Name = 'Nigeria')"
        }
      ]
    },
    "id": 1565,
    "table_name": "country"
  },
  {
    "question": "What are the Asian countries which have a population larger than 10 million?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  10000000",
    "db_id": "world_1",
    "table_description": "A table containing information about countries including their names, continents, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1566,
    "table_name": "country"
  },
  {
    "question": "What are the country codes for countries that do not speak French?",
    "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'French'",
    "db_id": "world_1",
    "table_description": "This table contains information about languages spoken in different countries including the country code and the language.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "French"
        }
      ]
    },
    "id": 1567,
    "table_name": "countrylanguage"
  },
  {
    "question": "Return the country codes for countries that do not speak Spanish.",
    "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'Spanish'",
    "db_id": "world_1",
    "table_description": "This table contains information about languages spoken in different countries, including the country code and the language name.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "id": 1568,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the country codes of countries where people use languages that include Chinese?",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE LIKE '%Chinese%'",
    "db_id": "world_1",
    "table_description": "Table 'countrylanguage' contains information about the languages spoken in different countries.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "模糊匹配",
          "condition": "Chinese"
        }
      ]
    },
    "id": 1569,
    "table_name": "countrylanguage"
  },
  {
    "question": "Give the country codes for countries in which people speak languages that include French.",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE LIKE '%French%'",
    "db_id": "world_1",
    "table_description": "countrylanguage table includes columns: CountryCode, Language, IsOfficial, Percentage",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "模糊匹配",
          "condition": "French"
        }
      ]
    },
    "id": 1570,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the name, independence year, and surface area of the country with the largest population?",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, independence years, surface areas, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "IndepYear"
        },
        {
          "column": "SurfaceArea"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "country",
    "id": 1571
  },
  {
    "question": "Give the name, year of independence, and surface area of the country that has a population less than 100000.",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country WHERE Population < 100000",
    "db_id": "world_1",
    "table_description": "The country table contains information about different countries including their names, surface areas, years of independence, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "SurfaceArea"
        },
        {
          "column": "IndepYear"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "小于",
          "condition": "100000"
        }
      ]
    },
    "id": 1572,
    "table_name": "country"
  },
  {
    "question": "What are the population, name and leader of the country with the largest area that is not a monarchy?",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country WHERE Government != 'Monarchy' ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Government",
          "match_type": "不等于",
          "condition": "Monarchy"
        }
      ]
    },
    "id": 1573,
    "table_name": "country"
  },
  {
    "question": "Give the name, population, and head of state for the country that has a surface area greater than 10,000,000.",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country WHERE SurfaceArea > 10000000",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their names, populations, heads of state, and surface areas.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "population"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1574,
    "table_name": "country"
  },
  {
    "question": "Find the number of cities in each district whose population is greater than or equal to the average population of cities?",
    "SQL": "SELECT count(*) ,  District FROM city WHERE Population  >=  (SELECT avg(Population) FROM city) GROUP BY District",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于等于",
          "condition": "(SELECT avg(Population) FROM city)"
        }
      ]
    },
    "table_name": "city",
    "id": 1575
  },
  {
    "question": "How many cities in each district have a population greater than 1 million?",
    "SQL": "SELECT count(*),  District FROM city WHERE Population  >  1000000 GROUP BY District",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "table_name": "city",
    "id": 1576
  },
  {
    "question": "Find the government form name and total population for each government form whose average life expectancy is greater than or equal to 72.",
    "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >=  72",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their government form, population, and life expectancy.",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于等于",
          "condition": "72"
        }
      ]
    },
    "id": 1577,
    "table_name": "country"
  },
  {
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than or equal to 72?",
    "SQL": "SELECT SUM(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy)  >=  72",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their government form, population, and life expectancy.",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于等于",
          "condition": "72"
        }
      ]
    },
    "id": 1578,
    "table_name": "country"
  },
  {
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 75?",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  75",
    "db_id": "world_1",
    "table_description": "This table contains information about countries including their names, continents, populations, and life expectancies.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "AVG",
          "condition": "< 75"
        }
      ]
    },
    "table_name": "country",
    "id": 1579
  },
  {
    "question": "What are the different continents and the total population and average life expectancy corresponding to each, for continents that have an average life expectancy less than 75?",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  75",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about different countries including their continent, population, and life expectancy.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "AVG",
          "condition": "< 75"
        }
      ]
    },
    "id": 1580,
    "table_name": "country"
  },
  {
    "question": "What are the names and areas of countries with an area larger than 500,000 square kilometers?",
    "SQL": "SELECT Name ,  SurfaceArea FROM country WHERE SurfaceArea > 500000",
    "db_id": "world_1",
    "table_description": "Table 'country' contains information about different countries including their names, surface areas, and other details.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "500000"
        }
      ]
    },
    "id": 1581,
    "table_name": "country"
  },
  {
    "question": "Return the names and surface areas of the 5 largest countries with a population greater than 10 million.",
    "SQL": "SELECT Name ,  SurfaceArea FROM country WHERE Population > 10000000 ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about countries including their names, surface areas, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1582,
    "table_name": "country"
  },
  {
    "question": "What are names of countries with the top 3 largest population where the surface area is greater than 500000?",
    "SQL": "SELECT Name FROM country WHERE SurfaceArea > 500000 ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their name, population, and surface area.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "500000"
        }
      ]
    },
    "id": 1583,
    "table_name": "country"
  },
  {
    "question": "Return the names of the 3 most populated countries where the population is greater than 100 million.",
    "SQL": "SELECT Name FROM country WHERE Population > 100000000 ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about different countries including their names and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "100000000"
        }
      ]
    },
    "id": 1584,
    "table_name": "country"
  },
  {
    "question": "What are the names of the nations with a population less than 1000000?",
    "SQL": "SELECT Name FROM country WHERE Population < 1000000",
    "db_id": "world_1",
    "table_description": "Table 'country' contains information about different countries including their names and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "小于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1585,
    "table_name": "country"
  },
  {
    "question": "Return the names of the 3 countries with the fewest people where the population is greater than 1 million.",
    "SQL": "SELECT Name FROM country WHERE Population > 1000000 ORDER BY Population ASC LIMIT 3",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about different countries including their names and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1586,
    "table_name": "country"
  },
  {
    "question": "how many countries are related to Asia?",
    "SQL": "SELECT count(*) FROM country WHERE continent LIKE '%Asia%'",
    "db_id": "world_1",
    "table_description": "Table contains information about different countries including their names, populations, and the continents they belong to.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "模糊匹配",
          "condition": "%Asia%"
        }
      ]
    },
    "table_name": "country",
    "id": 1587
  },
  {
    "question": "Count the number of countries where the name contains 'a' in Asia.",
    "SQL": "SELECT count(*) FROM country WHERE continent = 'Asia' AND name LIKE '%a%'",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "%a%"
        }
      ]
    },
    "id": 1588,
    "table_name": "country"
  },
  {
    "question": "What are the names of the countries that are in the continent of Europe and have a population greater than 80000?",
    "SQL": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  >  '80000'",
    "db_id": "world_1",
    "table_description": "The country table contains information about different countries including their names, continents, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "80000"
        }
      ]
    },
    "id": 1589,
    "table_name": "country"
  },
  {
    "question": "Give the names of countries that are in Europe and have a population greater than 80000.",
    "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  >  \"80000\"",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their name, continent, and population.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "80000"
        }
      ]
    },
    "id": 1590,
    "table_name": "country"
  },
  {
    "question": "What is the total population and average area of countries in the continent of North America whose area is greater than 5000?",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  5000",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their names, continents, populations, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "north america"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "id": 1591,
    "table_name": "country"
  },
  {
    "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3500 .",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3500",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their names, populations, surface areas, and continents.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "north america"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "3500"
        }
      ]
    },
    "id": 1592,
    "table_name": "country"
  },
  {
    "question": "What are the cities whose population is between 180000 and 850000?",
    "SQL": "SELECT name FROM city WHERE Population BETWEEN 180000 AND 850000",
    "db_id": "world_1",
    "table_description": "Table 'city' contains information about different cities including their names and populations.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "在区间",
          "condition": [
            180000,
            850000
          ]
        }
      ]
    },
    "id": 1593,
    "table_name": "city"
  },
  {
    "question": "Return the names of cities that have a population between 200000 and 850000.",
    "SQL": "select name from city where population between 200000 and 850000",
    "db_id": "world_1",
    "table_description": "城市表，包含城市名称、人口等信息",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "population",
          "match_type": "在区间",
          "condition": [
            200000,
            850000
          ]
        }
      ]
    },
    "id": 1594,
    "table_name": "city"
  },
  {
    "question": "Which language is spoken by the largest number of countries?",
    "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "Table 'countrylanguage' contains information about languages spoken in different countries, including the language name and the percentage of people who speak it.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "PERCENTAGE",
          "match_type": "大于",
          "condition": "0.1"
        }
      ]
    },
    "id": 1595,
    "table_name": "countrylanguage"
  },
  {
    "question": "Give the language that is spoken in more than 10 countries.",
    "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE HAVING COUNT(*) > 10 ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "The table 'countrylanguage' contains information about languages spoken in different countries, including the language name and the percentage of speakers.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1596,
    "table_name": "countrylanguage"
  },
  {
    "question": "What is the official language spoken by the largest percentage of people in each country?",
    "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "Table containing language information for countries",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "IsOfficial",
          "match_type": "等于",
          "condition": "T"
        }
      ]
    },
    "id": 1597,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the country codes of the different countries, and what are the languages spoken by more than 50% of the population for each?",
    "SQL": "SELECT LANGUAGE, CountryCode, max(Percentage) FROM countrylanguage WHERE Percentage > 50 GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "The table 'countrylanguage' contains information about the languages spoken in different countries, including the country code, language, and the percentage of the population that speaks it.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Percentage",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1598,
    "table_name": "countrylanguage"
  },
  {
    "question": "What is the total number of countries where French is spoken by the largest percentage of people?",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'French' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "Table containing language information for each country, including the language name and the percentage of people who speak it.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        },
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "French"
        }
      ]
    },
    "id": 1599,
    "table_name": "countrylanguage"
  },
  {
    "question": "Count the number of countries for which English is the predominantly spoken language.",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'English' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "This table contains information about the languages spoken in different countries, including the percentage of the population that speaks each language.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Percentage",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1600
  },
  {
    "question": "What are the codes of countries where English is spoken by the largest percentage of people?",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'English' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "The countrylanguage table contains information about languages spoken in different countries including the language name, the country code, and the percentage of the population that speaks the language.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "id": 1601,
    "table_name": "countrylanguage"
  },
  {
    "question": "Return the codes of countries for which French is the predominantly spoken language.",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'French' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "This table contains information about languages spoken in different countries, including the country code, language name, and percentage of speakers.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "French"
        }
      ]
    },
    "id": 1602,
    "table_name": "countrylanguage"
  },
  {
    "question": "How many conductors are there?",
    "SQL": "SELECT count(*) FROM conductor",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 1603,
    "table_name": "conductor"
  },
  {
    "question": "Count the number of conductors who have been active since 2020.",
    "SQL": "SELECT count(*) FROM conductor WHERE active_since >= '2020-01-01'",
    "db_id": "orchestra",
    "table_description": "The conductor table contains information about orchestra conductors, including their ID, name, and the date they became active (active_since).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "active_since",
          "match_type": "绝对时间",
          "condition": "['2020-01-01', null]"
        }
      ]
    },
    "id": 1604,
    "table_name": "conductor"
  },
  {
    "question": "List the names of conductors older than 50 in ascending order of age.",
    "SQL": "SELECT Name FROM conductor WHERE Age > 50 ORDER BY Age ASC",
    "db_id": "orchestra",
    "table_description": "Table 'conductor' contains information about conductors including their names and ages.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1605,
    "table_name": "conductor"
  },
  {
    "question": "What are the names of conductors under 60 years old, ordered by age?",
    "SQL": "SELECT Name FROM conductor WHERE Age < 60 ORDER BY Age ASC",
    "db_id": "orchestra",
    "table_description": "The conductor table contains information about orchestra conductors.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "小于",
          "condition": "60"
        }
      ]
    },
    "id": 1606,
    "table_name": "conductor"
  },
  {
    "question": "What are the names of conductors whose nationalities are related to \"Europe\"?",
    "SQL": "SELECT Name FROM conductor WHERE Nationality LIKE '%Europe%'",
    "db_id": "orchestra",
    "table_description": "The conductor table contains information about conductors including their name, nationality, and other details.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "模糊匹配",
          "condition": "Europe"
        }
      ]
    },
    "id": 1607,
    "table_name": "conductor"
  },
  {
    "question": "Return the names of conductors that do not have the nationality \"UK\".",
    "SQL": "SELECT Name FROM conductor WHERE Nationality != 'UK'",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "UK"
        }
      ]
    },
    "id": 1608,
    "table_name": "conductor"
  },
  {
    "question": "What are the record companies of orchestras in descending order of years in which they were founded, excluding those founded before 1950?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 1950 ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about various orchestras, including their record companies and the year they were founded.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "大于等于",
          "condition": "1950"
        }
      ]
    },
    "id": 1609,
    "table_name": "orchestra"
  },
  {
    "question": "Return the record companies of orchestras that have been founded before 1980, sorted descending by the years in which they were founded.",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 1980 ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "table_description": "Table containing information about orchestras including their record company and year of foundation.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "id": 1610,
    "table_name": "orchestra"
  },
  {
    "question": "What is the average attendance of shows with more than 500 attendees?",
    "SQL": "SELECT avg(Attendance) FROM SHOW WHERE Attendance > 500",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Attendance",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1611,
    "table_name": "SHOW"
  },
  {
    "question": "Return the average attendance for shows with more than 1000 attendees.",
    "SQL": "SELECT avg(Attendance) FROM SHOW WHERE Attendance > 1000",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Attendance",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1612,
    "table_name": "SHOW"
  },
  {
    "question": "What are the maximum and minimum share of performances whose type is not 'Concert'.",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Concert'",
    "db_id": "orchestra",
    "table_description": "The performance table contains information about different types of performances, including their share.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "TYPE",
          "match_type": "不等于",
          "condition": "Concert"
        }
      ]
    },
    "id": 1613,
    "table_name": "performance"
  },
  {
    "question": "Return the maximum and minimum shares for performances that have the type 'Live rehearsal'.",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE = 'Live rehearsal'",
    "db_id": "orchestra",
    "table_description": "The performance table contains information about different types of performances including their share values.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "TYPE",
          "match_type": "等于",
          "condition": "Live rehearsal"
        }
      ]
    },
    "id": 1614,
    "table_name": "performance"
  },
  {
    "question": "How many different nationalities do conductors have?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "id": 1615,
    "table_name": "conductor"
  },
  {
    "question": "Count the number of different nationalities of conductors, excluding those from Italy.",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor WHERE Nationality != 'Italy'",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "Italy"
        }
      ]
    },
    "id": 1616,
    "table_name": "conductor"
  },
  {
    "question": "List names of conductors with more than 10 years of work in descending order of years of work.",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "table_description": "Table 'conductor' contains information about orchestra conductors including their names and years of work.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1617,
    "table_name": "conductor"
  },
  {
    "question": "What are the names of conductors who have worked for more than 10 years, sorted descending by the number of years they have worked?",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1618,
    "table_name": "conductor"
  },
  {
    "question": "List the name of the conductor with more than 10 years of work.",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1619,
    "table_name": "conductor"
  },
  {
    "question": "What is the name of the conductor who has worked more than 10 years?",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "The conductor table contains information about orchestra conductors including their names and years of work.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1620,
    "table_name": "conductor"
  },
  {
    "question": "Please show the different record companies and the corresponding number of orchestras, excluding any orchestras that have not performed since 2020.",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra WHERE Last_Performance >= '2020-01-01' GROUP BY Record_Company",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about various orchestras including their record company and last performance date.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Last_Performance",
          "match_type": "绝对时间",
          "condition": "['2020-01-01', null]"
        }
      ]
    },
    "id": 1621,
    "table_name": "orchestra"
  },
  {
    "question": "How many orchestras does each record company manage, excluding those managed by 'Universal Music Group'?",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra WHERE Record_Company != 'Universal Music Group' GROUP BY Record_Company",
    "db_id": "orchestra",
    "table_description": "The table contains information about orchestras and their associated record companies.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Record_Company",
          "match_type": "不等于",
          "condition": "Universal Music Group"
        }
      ]
    },
    "id": 1622,
    "table_name": "orchestra"
  },
  {
    "question": "Please show the record formats of orchestras with more than 5 records in ascending order of count.",
    "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format HAVING COUNT(*) > 5 ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1623,
    "table_name": "orchestra"
  },
  {
    "question": "What are the major record formats of orchestras with more than 5 records, sorted by their frequency?",
    "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format HAVING COUNT(*) > 5 ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "table_description": "Table containing information about orchestras and their major record formats.",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1624,
    "table_name": "orchestra"
  },
  {
    "question": "List the record company shared by at least 3 orchestras.",
    "SQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(*) >= 3 ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "Table containing information about orchestras and their associated record companies.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1625,
    "table_name": "orchestra"
  },
  {
    "question": "What is the record company used by the greatest number of orchestras with a record company that starts with 'V'?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Record_Company LIKE 'V%' GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about different orchestras and their associated record companies.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Record_Company",
          "match_type": "模糊匹配",
          "condition": "V%"
        }
      ]
    },
    "id": 1626,
    "table_name": "orchestra"
  },
  {
    "question": "Show the record companies shared by orchestras founded before 2000 and after 2000.",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2000 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  > 2000",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2000"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2000"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 1627
  },
  {
    "question": "What are the record companies that are used by both orchestras founded before 2000 and those founded after 2000?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2000 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  > 2000",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about various orchestras including their name, year of founding, and record company.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2000"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2000"
        }
      ]
    },
    "id": 1628,
    "table_name": "orchestra"
  },
  {
    "question": "Find the number of orchestras whose record format is related to \"Digital\".",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format LIKE \"%Digital%\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "模糊匹配",
          "condition": "Digital"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 1629
  },
  {
    "question": "Count the number of orchestras that have CD or vinyl as their record format.",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"vinyl\"",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about various orchestras, including their major record format.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "vinyl"
        }
      ]
    },
    "id": 1630,
    "table_name": "orchestra"
  },
  {
    "question": "How many high schoolers are there with grade 10 or higher?",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade >= 10",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于等于",
          "condition": "10"
        }
      ]
    },
    "id": 1631,
    "table_name": "Highschooler"
  },
  {
    "question": "Count the number of high schoolers who are in grade 10.",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade = 10",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains information about high school students, including their ID, name, and grade.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "id": 1632,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the names and grades of each high schooler with a grade greater than 10.",
    "SQL": "SELECT name ,  grade FROM Highschooler WHERE grade > 10",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1633,
    "table_name": "Highschooler"
  },
  {
    "question": "What are the names and grades for each high schooler with a grade higher than 10?",
    "SQL": "SELECT name ,  grade FROM Highschooler WHERE grade > 10",
    "db_id": "network_1",
    "table_description": "The 'Highschooler' table contains information about high school students, including their names and grades.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1634,
    "table_name": "Highschooler"
  },
  {
    "question": "Show all the grades of the high schoolers who are in grade 10 or above.",
    "SQL": "SELECT grade FROM Highschooler WHERE grade >= 10",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains information about high school students, including their grades.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于等于",
          "condition": "10"
        }
      ]
    },
    "id": 1635,
    "table_name": "Highschooler"
  },
  {
    "question": "What is the grade of each high schooler who has a student ID greater than 1000?",
    "SQL": "SELECT grade FROM Highschooler WHERE student_id > 1000",
    "db_id": "network_1",
    "table_description": "Highschooler table contains information about students including their grades and IDs.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "student_id",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1636,
    "table_name": "Highschooler"
  },
  {
    "question": "What grade is Alex in?",
    "SQL": "SELECT grade FROM Highschooler WHERE name = 'Alex'",
    "db_id": "network_1",
    "table_description": "Highschooler表描述了高中生的基本信息，包括姓名、年级等。",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Alex"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1637
  },
  {
    "question": "Return the grade for the high schooler whose name is related to Kyle.",
    "SQL": "SELECT grade FROM Highschooler WHERE name LIKE '%Kyle%'",
    "db_id": "network_1",
    "table_description": "Table containing information about high schoolers, including their names and grades.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "%Kyle%"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1638
  },
  {
    "question": "Show the names of all high schoolers in grade 11.",
    "SQL": "SELECT name FROM Highschooler WHERE grade = 11",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "11"
        }
      ]
    },
    "id": 1639,
    "table_name": "Highschooler"
  },
  {
    "question": "What are the names of all high schoolers in grade 11?",
    "SQL": "SELECT name FROM Highschooler WHERE grade  =  11",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "11"
        }
      ]
    },
    "id": 1640,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the ID of the high schooler whose name is related to Kyle.",
    "SQL": "SELECT ID FROM Highschooler WHERE name LIKE '%Kyle%'",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "%Kyle%"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1641
  },
  {
    "question": "What is the id of the student named Alex?",
    "SQL": "SELECT ID FROM Highschooler WHERE name = 'Alex'",
    "db_id": "network_1",
    "table_description": "Highschooler table contains information about high school students.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Alex"
        }
      ]
    },
    "id": 1642,
    "table_name": "Highschooler"
  },
  {
    "question": "How many high schoolers are there in grade 9 or 10?",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade  IN (9, 10)",
    "db_id": "network_1",
    "table_description": "The Highschooler table contains information about students including their grade.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        },
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "id": 1643,
    "table_name": "Highschooler"
  },
  {
    "question": "Count the number of high schoolers in grades 9 to 11.",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10 OR grade  =  11",
    "db_id": "network_1",
    "table_description": "Table containing information about high school students.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        },
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "11"
        }
      ]
    },
    "id": 1644,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the number of high schoolers for each grade who have an ID greater than 1000.",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler WHERE id > 1000 GROUP BY grade",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains columns: id, name, grade, age, gender.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "id",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1645,
    "table_name": "Highschooler"
  },
  {
    "question": "How many high schoolers are in each grade for students with an ID greater than 1000?",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler WHERE id > 1000 GROUP BY grade",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains information about high school students including their IDs and grades.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "id",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1646,
    "table_name": "Highschooler"
  },
  {
    "question": "Which grade has the most high schoolers, excluding grade 9?",
    "SQL": "SELECT grade FROM Highschooler WHERE grade != 9 GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "不等于",
          "condition": "9"
        }
      ]
    },
    "id": 1647,
    "table_name": "Highschooler"
  },
  {
    "question": "Return the grade that has the greatest number of high schoolers, excluding grade 10.",
    "SQL": "SELECT grade FROM Highschooler WHERE grade != 10 GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains information about high school students including their grade level.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "不等于",
          "condition": "10"
        }
      ]
    },
    "id": 1648,
    "table_name": "Highschooler"
  },
  {
    "question": "Show me all grades that have more than 3 students.",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >  3",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "id": 1649,
    "table_name": "Highschooler"
  },
  {
    "question": "Which grades have 5 or more high schoolers?",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  5",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "5"
        }
      ]
    },
    "id": 1650,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the student IDs and numbers of friends corresponding to each, but only for students with more than 2 friends.",
    "SQL": "SELECT student_id ,  count(*) AS friend_count FROM Friend GROUP BY student_id HAVING count(*) > 2",
    "db_id": "network_1",
    "table_description": "Table 'Friend' contains information about friendships between students.",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1651,
    "table_name": "Friend"
  },
  {
    "question": "How many friends does each student have who has more than 2 friends?",
    "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id HAVING count(*) > 2",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1652,
    "table_name": "Friend"
  },
  {
    "question": "Count the number of likes for each student id where the like is from a post with more than 10 comments.",
    "SQL": "SELECT student_id ,  count(*) FROM Likes WHERE post_id IN (SELECT post_id FROM Comments GROUP BY post_id HAVING COUNT(*) > 10) GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "post_id",
          "match_type": "IN",
          "condition": "(SELECT post_id FROM Comments GROUP BY post_id HAVING COUNT(*) > 10)"
        }
      ]
    },
    "id": 1653,
    "table_name": "Likes"
  },
  {
    "question": "How many likes correspond to each student id for student 101?",
    "SQL": "SELECT student_id ,  count(*) FROM Likes WHERE student_id = 101 GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "student_id",
          "match_type": "等于",
          "condition": "101"
        }
      ]
    },
    "id": 1654,
    "table_name": "Likes"
  },
  {
    "question": "List the emails of the professionals who live in the state of Hawaii or have an email address containing 'gmail'.",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR email_address LIKE '%gmail%'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Hawaii"
        },
        {
          "column": "email_address",
          "match_type": "模糊匹配",
          "condition": "gmail"
        }
      ]
    },
    "id": 1655,
    "table_name": "Professionals"
  },
  {
    "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Alaska?",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Alaska'",
    "db_id": "dog_kennels",
    "table_description": "This table contains information about various professionals and their contact details including their states.",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Hawaii"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Alaska"
        }
      ]
    },
    "id": 1656,
    "table_name": "Professionals"
  },
  {
    "question": "What are the arriving date and the departing date of all the dogs that arrived before 2023-01-01?",
    "SQL": "SELECT date_arrived ,  date_departed FROM Dogs WHERE date_arrived < '2023-01-01'",
    "db_id": "dog_kennels",
    "table_description": "This table contains information about dogs in a kennel, including their arrival and departure dates.",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_arrived",
          "match_type": "绝对时间",
          "condition": "2023-01-01之前"
        }
      ]
    },
    "id": 1657,
    "table_name": "Dogs"
  },
  {
    "question": "List the arrival date and the departure date for all the dogs that arrived today.",
    "SQL": "SELECT date_arrived ,  date_departed FROM Dogs WHERE date_arrived = CURRENT_DATE",
    "db_id": "dog_kennels",
    "table_description": "The 'Dogs' table contains information about the dogs including their arrival and departure dates.",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_arrived",
          "match_type": "绝对时间",
          "condition": "CURRENT_DATE"
        }
      ]
    },
    "id": 1658,
    "table_name": "Dogs"
  },
  {
    "question": "How many dogs went through any treatments in the last week?",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments WHERE treatment_date >= DATE('now', '-7 days')",
    "db_id": "dog_kennels",
    "table_description": "The Treatments table contains information about the treatments given to dogs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_date",
          "match_type": "相对时间",
          "condition": "近7天"
        }
      ]
    },
    "id": 1659,
    "table_name": "Treatments"
  },
  {
    "question": "Count the number of dogs that went through a specific treatment.",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments WHERE treatment_type = 'Vaccination'",
    "db_id": "dog_kennels",
    "table_description": "The Treatments table contains information about the treatments given to dogs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_type",
          "match_type": "精确匹配",
          "condition": "Vaccination"
        }
      ]
    },
    "id": 1660,
    "table_name": "Treatments"
  },
  {
    "question": "How many professionals have performed any treatment to dogs in the last week?",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE treatment_date >= DATE('now', '-7 days')",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "COUNT DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_date",
          "match_type": "relative_time",
          "condition": "近7天"
        }
      ]
    },
    "id": 1661,
    "table_name": "Treatments"
  },
  {
    "question": "Find the number of professionals who have ever treated dogs.",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE animal = 'Dog'",
    "db_id": "dog_kennels",
    "table_description": "The Treatments table records the treatments provided by professionals to animals. Each row represents a treatment event with a professional and an animal involved.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "animal",
          "match_type": "精确匹配",
          "condition": "Dog"
        }
      ]
    },
    "id": 1662,
    "table_name": "Treatments"
  },
  {
    "question": "Which professionals live in a city containing the substring 'North'? List his or her role, street, city and state.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%North%'",
    "db_id": "dog_kennels",
    "table_description": "This table contains information about various professionals including their roles, addresses, and contact details.",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "North"
        }
      ]
    },
    "table_name": "professionals",
    "id": 1663
  },
  {
    "question": "Find the role, street, city and state of the professionals living in a city that is exactly 'Westville'.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city = 'Westville'",
    "db_id": "dog_kennels",
    "table_description": "professionals table with columns: role_code, street, city, state",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Westville"
        }
      ]
    },
    "id": 1664,
    "table_name": "professionals"
  },
  {
    "question": "Which owners live in the state whose name is exactly 'North Carolina'? List his first name, last name and email.",
    "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state = 'North Carolina'",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about dog kennel owners, including their names, contact details, and location.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "North Carolina"
        }
      ]
    },
    "table_name": "Owners",
    "id": 1665
  },
  {
    "question": "Return the first name, last name and email of the owners living in a state whose name is exactly 'North Carolina'.",
    "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state = 'North Carolina'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "North Carolina"
        }
      ]
    },
    "table_name": "Owners",
    "id": 1666
  },
  {
    "question": "How many dogs have an age above the average?",
    "SQL": "SELECT count(*) FROM Dogs WHERE age > ( SELECT avg(age) FROM Dogs )",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "( SELECT avg(age) FROM Dogs )"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1667
  },
  {
    "question": "Count the number of dogs with an age above the average.",
    "SQL": "SELECT count(*) FROM Dogs WHERE age  >  ( SELECT avg(age) FROM Dogs )",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "( SELECT avg(age) FROM Dogs )"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1668
  },
  {
    "question": "What is the cost of the most recent treatment that is greater than $50?",
    "SQL": "SELECT cost_of_treatment FROM Treatments WHERE cost_of_treatment > 50 ORDER BY date_of_treatment DESC LIMIT 1",
    "db_id": "dog_kennels",
    "table_description": "The 'Treatments' table records the treatments given to animals, including the cost and date of each treatment.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cost_of_treatment",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1669,
    "table_name": "Treatments"
  },
  {
    "question": "Show me the cost of the treatments that have a cost greater than 500.",
    "SQL": "SELECT cost_of_treatment FROM Treatments WHERE cost_of_treatment > 500",
    "db_id": "dog_kennels",
    "table_description": "The Treatments table contains information about the treatments performed at the dog kennel, including the date and cost of each treatment.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "cost_of_treatment",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1670,
    "table_name": "Treatments"
  },
  {
    "question": "List the dog name, age and weight of the dogs who are not abandoned?",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  0",
    "db_id": "dog_kennels",
    "table_description": "The table 'Dogs' contains information about dogs including their names, ages, weights, and whether they have been abandoned (1 for yes, 0 for no).",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1671
  },
  {
    "question": "What are the dog name, age and weight of the dogs that were not abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  0",
    "db_id": "dog_kennels",
    "table_description": "The table 'Dogs' contains information about dogs including their names, ages, weights, and whether they have been abandoned (1 for yes, 0 for no).",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1672
  },
  {
    "question": "What is the average age of all the dogs that are older than 5 years?",
    "SQL": "SELECT avg(age) FROM Dogs WHERE age > 5",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1673,
    "table_name": "Dogs"
  },
  {
    "question": "Compute the average age of all the dogs older than 5 years.",
    "SQL": "SELECT avg(age) FROM Dogs WHERE age > 5",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1674,
    "table_name": "Dogs"
  },
  {
    "question": "What is the age of the oldest dog that is a Labrador?",
    "SQL": "SELECT max(age) FROM Dogs WHERE breed = 'Labrador'",
    "db_id": "dog_kennels",
    "table_description": "Table contains information about dogs in a kennel including their age and breed.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "breed",
          "match_type": "精确匹配",
          "condition": "Labrador"
        }
      ]
    },
    "id": 1675,
    "table_name": "Dogs"
  },
  {
    "question": "Tell me the age of the oldest dog that is a Labrador.",
    "SQL": "SELECT max(age) FROM Dogs WHERE breed = 'Labrador'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "breed",
          "match_type": "精确匹配",
          "condition": "Labrador"
        }
      ]
    },
    "id": 1676,
    "table_name": "Dogs"
  },
  {
    "question": "How much does each charge type cost for reservations made after January 1, 2023? List both charge type and amount.",
    "SQL": "SELECT charge_type ,  SUM(charge_amount) AS total_charge_amount FROM Charges WHERE reservation_date > '2023-01-01' GROUP BY charge_type",
    "db_id": "dog_kennels",
    "table_description": "The Charges table contains information about the charges for dog kennel reservations, including the charge type and amount.",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "reservation_date",
          "match_type": "绝对时间",
          "condition": "> '2023-01-01'"
        }
      ]
    },
    "id": 1677,
    "table_name": "Charges"
  },
  {
    "question": "List each charge type and the total charge amount for charge types that have a charge amount greater than 100.",
    "SQL": "SELECT charge_type ,  SUM(charge_amount) FROM Charges WHERE charge_amount > 100 GROUP BY charge_type",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "charge_amount",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1678,
    "table_name": "Charges"
  },
  {
    "question": "What is the maximum charge amount for the 'Boarding' charge type?",
    "SQL": "SELECT max(charge_amount) FROM Charges WHERE charge_type = 'Boarding'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "charge_type",
          "match_type": "精确匹配",
          "condition": "Boarding"
        }
      ]
    },
    "id": 1679,
    "table_name": "Charges"
  },
  {
    "question": "What is the maximum charge amount for the charge type 'Boarding'?",
    "SQL": "SELECT max(charge_amount) FROM Charges WHERE charge_type = 'Boarding'",
    "db_id": "dog_kennels",
    "table_description": "The Charges table contains information about different types of charges and their amounts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "charge_type",
          "match_type": "精确匹配",
          "condition": "Boarding"
        }
      ]
    },
    "id": 1680,
    "table_name": "Charges"
  },
  {
    "question": "List the email, cell phone and home phone of all the professionals who have a cell phone number.",
    "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals WHERE cell_number IS NOT NULL",
    "db_id": "dog_kennels",
    "table_description": "Table 'professionals' contains information about professionals including their contact details.",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cell_number",
          "match_type": "不为空",
          "condition": "IS NOT NULL"
        }
      ]
    },
    "id": 1681,
    "table_name": "professionals"
  },
  {
    "question": "What are the email, cell phone and home phone of each professional whose home phone starts with '555'?",
    "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals WHERE home_phone LIKE '555%'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "home_phone",
          "match_type": "模糊匹配",
          "condition": "555%"
        }
      ]
    },
    "id": 1682,
    "table_name": "professionals"
  },
  {
    "question": "What are all the possible breed type and size type combinations for dogs that have been adopted?",
    "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs WHERE adoption_status = 'adopted'",
    "db_id": "dog_kennels",
    "table_description": "The 'dogs' table contains information about dogs in a kennel including their breed, size, and adoption status.",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "adoption_status",
          "match_type": "精确匹配",
          "condition": "adopted"
        }
      ]
    },
    "id": 1683,
    "table_name": "dogs"
  },
  {
    "question": "Find the distinct breed type and size type combinations for dogs that are small.",
    "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs WHERE size_code = 'small'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "size_code",
          "match_type": "精确匹配",
          "condition": "small"
        }
      ]
    },
    "id": 1684,
    "table_name": "dogs"
  },
  {
    "question": "How many singers are there who have a stage name?",
    "SQL": "SELECT count(*) FROM singer WHERE stage_name IS NOT NULL",
    "db_id": "singer",
    "table_description": "Table 'singer' contains information about singers, including their stage names.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "stage_name",
          "match_type": "not null",
          "condition": "IS NOT NULL"
        }
      ]
    },
    "id": 1685,
    "table_name": "singer"
  },
  {
    "question": "What is the count of singers with an age greater than 30?",
    "SQL": "SELECT count(*) FROM singer WHERE age > 30",
    "db_id": "singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1686,
    "table_name": "singer"
  },
  {
    "question": "List the name of singers with a net worth greater than 10 million in ascending order of net worth.",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 10 ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "table_description": "The singer table contains information about various singers including their names and net worth in millions.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1687,
    "table_name": "singer"
  },
  {
    "question": "What are the names of singers with a net worth greater than 10 million dollars, ordered by ascending net worth?",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 10 ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "table_description": "The 'singer' table contains information about various singers including their names and net worth.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1688,
    "table_name": "singer"
  },
  {
    "question": "What are the birth year and citizenship of singers from the United States?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer WHERE Citizenship = 'United States'",
    "db_id": "singer",
    "table_description": "The singer table contains information about singers including their birth year and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "id": 1689,
    "table_name": "singer"
  },
  {
    "question": "What are the birth years and citizenships of the singers who were born before 1980?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer WHERE Birth_Year < 1980",
    "db_id": "singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "id": 1690,
    "table_name": "singer"
  },
  {
    "question": "List the name of singers whose citizenship is not \"United States\".",
    "SQL": "SELECT Name FROM singer WHERE Citizenship != 'United States'",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their names and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "United States"
        }
      ]
    },
    "id": 1691,
    "table_name": "singer"
  },
  {
    "question": "What are the names of the singers who are American citizens?",
    "SQL": "SELECT Name FROM singer WHERE Citizenship = 'USA'",
    "db_id": "singer",
    "table_description": "Table containing information about singers",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "等于",
          "condition": "USA"
        }
      ]
    },
    "id": 1692,
    "table_name": "singer"
  },
  {
    "question": "Show the name of singers whose birth year is between 1948 and 1949?",
    "SQL": "SELECT Name FROM singer WHERE Birth_Year BETWEEN 1948 AND 1949",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their names and birth years.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "在区间",
          "condition": "1948,1949"
        }
      ]
    },
    "id": 1693,
    "table_name": "singer"
  },
  {
    "question": "What are the names of the singers whose birth years are either 1948 or 1950?",
    "SQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1950",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their names and birth years.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1948"
        },
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1950"
        }
      ]
    },
    "id": 1694,
    "table_name": "singer"
  },
  {
    "question": "What is the name of the singer with a net worth greater than 500 million?",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 500 ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their names and net worth.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1695,
    "table_name": "singer"
  },
  {
    "question": "What is the name of the singer who is worth more than 100 million?",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100 ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1696,
    "table_name": "singer"
  },
  {
    "question": "Show different citizenship of singers and the number of singers of each citizenship for those who are not from the United States.",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer WHERE Citizenship != 'United States' GROUP BY Citizenship",
    "db_id": "singer",
    "table_description": "The singer table contains information about singers including their citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "United States"
        }
      ]
    },
    "id": 1697,
    "table_name": "singer"
  },
  {
    "question": "For each citizenship, how many singers are from that country, excluding those from the USA?",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer WHERE Citizenship != 'USA' GROUP BY Citizenship",
    "db_id": "singer",
    "table_description": "The singer table contains information about singers, including their citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "USA"
        }
      ]
    },
    "id": 1698,
    "table_name": "singer"
  },
  {
    "question": "Please show the most common citizenship of singers who have won awards.",
    "SQL": "SELECT Citizenship FROM singer WHERE Awarded = 'Yes' GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "singer",
    "table_description": "The table contains information about singers including their name, citizenship, and whether they have been awarded.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Awarded",
          "match_type": "精确匹配",
          "condition": "Yes"
        }
      ]
    },
    "id": 1699,
    "table_name": "singer"
  },
  {
    "question": "What is the most common singer citizenship for singers with more than 5 albums?",
    "SQL": "select citizenship from singer where album_count > 5 group by citizenship order by count(*) desc limit 1",
    "db_id": "singer",
    "table_description": "Table containing information about singers, including their citizenship and number of albums.",
    "config": {
      "dimension": [
        {
          "column": "citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "album_count",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1700,
    "table_name": "singer"
  },
  {
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship where the net worth is greater than 50 million.",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer WHERE Net_Worth_Millions > 50 GROUP BY Citizenship",
    "db_id": "singer",
    "table_description": "Table 'singer' contains information about singers including their citizenship and net worth in millions.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1701,
    "table_name": "singer"
  },
  {
    "question": "For each citizenship, what is the maximum net worth for singers with a net worth greater than 10 million?",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer WHERE Net_Worth_Millions > 10 GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1702,
    "table_name": "singer"
  },
  {
    "question": "Show the citizenship shared by singers with birth year before 1940 and after 1960.",
    "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1940 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1960",
    "db_id": "singer",
    "table_description": "singer table contains information about singers including their citizenship and birth year.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1940"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1960"
        }
      ]
    },
    "id": 1703,
    "table_name": "singer"
  },
  {
    "question": "What are the citizenships that are shared by singers with a birth year before 1940 and after 1960?",
    "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1940 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1960",
    "db_id": "singer",
    "table_description": "The 'singer' table contains information about various singers including their name, birth year, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1940"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1960"
        }
      ]
    },
    "id": 1704,
    "table_name": "singer"
  },
  {
    "question": "How many available features are there in total for properties with a pool?",
    "SQL": "SELECT count(*) FROM Other_Available_Features WHERE feature = 'pool'",
    "db_id": "real_estate_properties",
    "table_description": "Table containing additional features of real estate properties.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "feature",
          "match_type": "精确匹配",
          "condition": "pool"
        }
      ]
    },
    "id": 1705,
    "table_name": "Other_Available_Features"
  },
  {
    "question": "What are the names of properties that are either houses or apartments with at least 2 rooms?",
    "SQL": "SELECT property_name FROM Properties WHERE property_type_code  =  'House' UNION SELECT property_name FROM Properties WHERE property_type_code  =  'Apartment' AND room_count  >=  2",
    "db_id": "real_estate_properties",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "property_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "property_type_code",
          "match_type": "等于",
          "condition": "House"
        },
        {
          "column": "property_type_code",
          "match_type": "等于",
          "condition": "Apartment"
        },
        {
          "column": "room_count",
          "match_type": "大于等于",
          "condition": 2
        }
      ]
    },
    "id": 1706,
    "table_name": "Properties"
  }
]