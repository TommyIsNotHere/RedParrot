[
  {
    "question": "How many singers are from the USA?",
    "SQL": "SELECT count(*) FROM singer WHERE nationality = 'USA'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "nationality",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1138,
    "table_name": "singer"
  },
  {
    "question": "What is the total number of active singers?",
    "SQL": "SELECT count(*) FROM singer WHERE status = 'active'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "active"
        }
      ]
    },
    "id": 1139,
    "table_name": "singer"
  },
  {
    "question": "Show name, country, age for all singers older than 30 years old, ordered by age from the oldest to the youngest.",
    "SQL": "SELECT name ,  country ,  age FROM singer WHERE age > 30 ORDER BY age DESC",
    "db_id": "concert_singer",
    "table_description": "Table 'singer' contains information about singers including their name, country, and age.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1140,
    "table_name": "singer"
  },
  {
    "question": "What are the names, countries, and ages for every singer older than 30 in descending order of age?",
    "SQL": "SELECT name ,  country ,  age FROM singer WHERE age > 30 ORDER BY age DESC",
    "db_id": "concert_singer",
    "table_description": "The 'singer' table contains information about singers including their name, country, and age.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1141,
    "table_name": "singer"
  },
  {
    "question": "What is the average, minimum, and maximum age of all singers from Italy?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'Italy'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "Italy"
        }
      ]
    },
    "id": 1142,
    "table_name": "singer"
  },
  {
    "question": "What is the average, minimum, and maximum age for all French or Italian singers?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country IN ('France', 'Italy')",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "IN ('France', 'Italy')"
        }
      ]
    },
    "id": 1143,
    "table_name": "singer"
  },
  {
    "question": "Show the name and the release year of the song by the youngest singer born after 1990.",
    "SQL": "SELECT song_name ,  song_release_year FROM singer WHERE birth_year > 1990 ORDER BY age LIMIT 1",
    "db_id": "concert_singer",
    "table_description": "The singer table contains information about singers including their songs and birth years.",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birth_year",
          "match_type": "大于",
          "condition": "1990"
        }
      ]
    },
    "id": 1144,
    "table_name": "singer"
  },
  {
    "question": "What are the names and release years for all the songs of the singer who is exactly 25 years old?",
    "SQL": "SELECT song_name ,  song_release_year FROM singer WHERE age = 25",
    "db_id": "concert_singer",
    "table_description": "Table containing information about singers and their songs.",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "等于",
          "condition": "25"
        }
      ]
    },
    "id": 1145,
    "table_name": "singer"
  },
  {
    "question": "What are all distinct countries where singers aged 25 or older are from?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age  >=  25",
    "db_id": "concert_singer",
    "table_description": "Table 'singer' contains information about singers including their country and age.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于等于",
          "condition": "25"
        }
      ]
    },
    "id": 1146,
    "table_name": "singer"
  },
  {
    "question": "What are the different countries with singers above age 25?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age > 25",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "25"
        }
      ]
    },
    "id": 1147,
    "table_name": "singer"
  },
  {
    "question": "Show all countries and the number of singers in each country, but only for countries with more than 5 singers.",
    "SQL": "SELECT country ,  count(*) FROM singer GROUP BY country HAVING count(*) > 5",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1148,
    "table_name": "singer"
  },
  {
    "question": "How many singers are from each country, excluding those from the United States?",
    "SQL": "SELECT country ,  count(*) FROM singer WHERE country != 'United States' GROUP BY country",
    "db_id": "concert_singer",
    "table_description": "The singer table contains information about singers, including their country of origin.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "不等于",
          "condition": "United States"
        }
      ]
    },
    "id": 1149,
    "table_name": "singer"
  },
  {
    "question": "List all song names by singers older than 30 years old.",
    "SQL": "SELECT song_name FROM singer WHERE age > 30",
    "db_id": "concert_singer",
    "table_description": "Table 'singer' contains information about singers and their songs.",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1150,
    "table_name": "singer"
  },
  {
    "question": "What are all the song names by singers who are younger than or equal to the average age?",
    "SQL": "SELECT song_name FROM singer WHERE age <= (SELECT avg(age) FROM singer)",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于等于",
          "condition": "(SELECT avg(age) FROM singer)"
        }
      ]
    },
    "id": 1151,
    "table_name": "singer"
  },
  {
    "question": "Show location and name for all stadiums with a capacity greater than 7000.",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity > 7000",
    "db_id": "concert_singer",
    "table_description": "Table 'stadium' contains information about different stadiums including their names, locations, and capacities.",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "capacity",
          "match_type": "大于",
          "condition": 7000
        }
      ]
    },
    "id": 1152,
    "table_name": "stadium"
  },
  {
    "question": "What are the locations and names of all stations with capacity greater than 7000?",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity > 7000",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "capacity",
          "match_type": "大于",
          "condition": 7000
        }
      ]
    },
    "id": 1153,
    "table_name": "stadium"
  },
  {
    "question": "What is the maximum capacity and the average of all stadiums with a capacity greater than 50000?",
    "SQL": "select max(capacity), avg(capacity) from stadium where capacity > 50000",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        },
        {
          "column": "capacity",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "capacity",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1154,
    "table_name": "stadium"
  },
  {
    "question": "What is the average and maximum capacities for all stadiums with a capacity greater than 50000?",
    "SQL": "select avg(capacity) ,  max(capacity) from stadium where capacity > 50000",
    "db_id": "concert_singer",
    "table_description": "The stadium table contains information about different stadiums including their capacity.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "AVG"
        },
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "capacity",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1155,
    "table_name": "stadium"
  },
  {
    "question": "What is the name and capacity for the stadium with an average attendance greater than 50,000?",
    "SQL": "SELECT name, capacity FROM stadium WHERE average > 50000",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "average",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1156,
    "table_name": "stadium"
  },
  {
    "question": "What is the name and capacity for the stadium with an average attendance greater than 50000?",
    "SQL": "SELECT name ,  capacity FROM stadium WHERE average > 50000",
    "db_id": "concert_singer",
    "table_description": "The stadium table contains information about different stadiums including their names, capacities, and average attendances.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "average",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1157,
    "table_name": "stadium"
  },
  {
    "question": "How many concerts are there in the years before 2016?",
    "SQL": "SELECT count(*) FROM concert WHERE YEAR < 2016",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "小于",
          "condition": "2016"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "id": 1158,
    "table_name": "concert"
  },
  {
    "question": "How many concerts occurred in 2014 or 2016?",
    "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2016",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "id": 1159,
    "table_name": "concert"
  },
  {
    "question": "Which year has most number of concerts with more than 10 attendees?",
    "SQL": "SELECT YEAR FROM concert WHERE attendees > 10 GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "table_description": "Table contains information about concerts, including the year, number of attendees, and other details.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "attendees",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1160,
    "table_name": "concert"
  },
  {
    "question": "What is the year that had more than 100 concerts?",
    "SQL": "SELECT YEAR FROM concert GROUP BY YEAR HAVING COUNT(*) > 100 ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1161,
    "table_name": "concert"
  },
  {
    "question": "Show countries where a singer above age 45 and a singer below 25 are from.",
    "SQL": "SELECT country FROM singer WHERE age  >  45 INTERSECT SELECT country FROM singer WHERE age  <  25",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "45"
        },
        {
          "column": "age",
          "match_type": "小于",
          "condition": "25"
        }
      ]
    },
    "id": 1162,
    "table_name": "singer"
  },
  {
    "question": "what is the name and nation of the singer who have a song having 'Hello' in its name?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hello%'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_name",
          "match_type": "模糊匹配",
          "condition": "Hello"
        }
      ]
    },
    "id": 1163,
    "table_name": "singer"
  },
  {
    "question": "What is the name and country of origin of every singer who has a song with the word 'Love' in its title?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Love%'",
    "db_id": "concert_singer",
    "table_description": "This table contains information about singers, including their names and countries of origin, as well as songs they have performed.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_name",
          "match_type": "模糊匹配",
          "condition": "Love"
        }
      ]
    },
    "table_name": "singer",
    "id": 1164
  },
  {
    "question": "Find the number of pets whose weight is less than or equal to 15.",
    "SQL": "SELECT count(*) FROM pets WHERE weight  <=  15",
    "db_id": "pets_1",
    "table_description": "Table contains information about different pets including their weights.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "小于等于",
          "condition": "15"
        }
      ]
    },
    "id": 1165,
    "table_name": "pets"
  },
  {
    "question": "How many pets have a weight greater than 15?",
    "SQL": "SELECT count(*) FROM pets WHERE weight  >  15",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "15"
        }
      ]
    },
    "id": 1166,
    "table_name": "pets"
  },
  {
    "question": "Find the weight of the youngest dog.",
    "SQL": "SELECT weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)",
    "db_id": "pets_1",
    "table_description": "Table 'pets' contains information about pets including their age and weight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "(SELECT MIN(pet_age) FROM pets)"
        }
      ]
    },
    "id": 1167,
    "table_name": "pets"
  },
  {
    "question": "What is the weight of the pet that is 2 years old?",
    "SQL": "SELECT weight FROM pets WHERE pet_age = 2",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "pets",
    "id": 1168
  },
  {
    "question": "Find the maximum weight for each type of pet, but only for pets that weigh more than 10 pounds. List the maximum weight and pet type.",
    "SQL": "SELECT max(weight) ,  petType FROM pets WHERE weight > 10 GROUP BY petType",
    "db_id": "pets_1",
    "table_description": "The 'pets' table contains information about different types of pets including their weights.",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1169,
    "table_name": "pets"
  },
  {
    "question": "List the maximum weight and type for each type of pet where the weight is greater than 10.",
    "SQL": "SELECT max(weight) ,  petType FROM pets WHERE weight > 10 GROUP BY petType",
    "db_id": "pets_1",
    "table_description": "The pets table contains information about different types of pets including their weight and type.",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1170,
    "table_name": "pets"
  },
  {
    "question": "Find the number of distinct types of pets that are dogs.",
    "SQL": "SELECT count(DISTINCT pettype) FROM pets WHERE pettype = 'dog'",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "pettype",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "pettype",
          "match_type": "精确匹配",
          "condition": "dog"
        }
      ]
    },
    "id": 1171,
    "table_name": "pets"
  },
  {
    "question": "How many different types of pet are there, excluding fish?",
    "SQL": "SELECT count(DISTINCT pettype) FROM pets WHERE pettype != 'fish'",
    "db_id": "pets_1",
    "table_description": "Table 'pets' contains information about various types of pets including their types.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "pettype",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "pettype",
          "match_type": "不等于",
          "condition": "fish"
        }
      ]
    },
    "id": 1172,
    "table_name": "pets"
  },
  {
    "question": "Find the type and weight of the youngest pet that is a dog.",
    "SQL": "SELECT pettype ,  weight FROM pets WHERE pettype = 'dog' ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pettype",
          "match_type": "精确匹配",
          "condition": "dog"
        }
      ]
    },
    "id": 1173,
    "table_name": "pets"
  },
  {
    "question": "What type of pet is the youngest animal, and how much does it weigh, given that the pet's age is less than 2 years?",
    "SQL": "SELECT pettype ,  weight FROM pets WHERE pet_age < 2 ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "小于",
          "condition": "2"
        }
      ]
    },
    "id": 1174,
    "table_name": "pets"
  },
  {
    "question": "Find the id and weight of all pets whose age is greater than or equal to 2.",
    "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >=  2",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 1175,
    "table_name": "pets"
  },
  {
    "question": "What is the id and weight of every pet who is older than 2?",
    "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  2",
    "db_id": "pets_1",
    "table_description": "This table contains information about pets including their id, age, and weight.",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1176,
    "table_name": "pets"
  },
  {
    "question": "Find the average and maximum age for dogs and cats only.",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets WHERE pettype IN ('dog', 'cat') GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "pet_age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "pettype",
          "match_type": "IN",
          "condition": "['dog', 'cat']"
        }
      ]
    },
    "id": 1177,
    "table_name": "pets"
  },
  {
    "question": "What is the average and maximum age for each pet type where the pet's name contains 'Bella'?",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets WHERE pet_name LIKE '%Bella%' GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "Table with information about pets including their types, names, and ages.",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "avg"
        },
        {
          "column": "pet_age",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "pet_name",
          "match_type": "模糊匹配",
          "condition": "Bella"
        }
      ]
    },
    "id": 1178,
    "table_name": "pets"
  },
  {
    "question": "Find the average weight for each pet type where the pet type is 'dog'.",
    "SQL": "SELECT avg(weight) ,  pettype FROM pets WHERE pettype = 'dog' GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "pettype",
          "match_type": "精确匹配",
          "condition": "dog"
        }
      ]
    },
    "id": 1179,
    "table_name": "pets"
  },
  {
    "question": "What is the average weight for each type of pet with a weight greater than 5?",
    "SQL": "SELECT avg(weight) ,  pettype FROM pets WHERE weight > 5 GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1180,
    "table_name": "pets"
  },
  {
    "question": "How many continents have a population greater than 100 million?",
    "SQL": "SELECT count(*) FROM CONTINENTS WHERE population > 100000000;",
    "db_id": "car_1",
    "table_description": "The CONTINENTS table contains information about different continents, including their names and populations.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "population",
          "match_type": "大于",
          "condition": "100000000"
        }
      ]
    },
    "id": 1181,
    "table_name": "CONTINENTS"
  },
  {
    "question": "What is the number of continents with names starting with 'A'?",
    "SQL": "SELECT count(*) FROM CONTINENTS WHERE name LIKE 'A%';",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "A%"
        }
      ]
    },
    "id": 1182,
    "table_name": "CONTINENTS"
  },
  {
    "question": "How many countries have a population greater than 10 million?",
    "SQL": "SELECT count(*) FROM COUNTRIES WHERE POPULATION > 10000000;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "POPULATION",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1183,
    "table_name": "COUNTRIES"
  },
  {
    "question": "How many countries have a population greater than 10 million?",
    "SQL": "SELECT count(*) FROM COUNTRIES WHERE population > 10000000;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1184,
    "table_name": "COUNTRIES"
  },
  {
    "question": "What is the average miles per gallon (mpg) of the cars with 6 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 6;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "6"
        }
      ]
    },
    "id": 1185,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average miles per gallon of all the cars with more than 4 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders > 4;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "id": 1186,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the smallest weight of the car produced with 8 cylinders after 1973?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  >  1973",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "大于",
          "condition": "1973"
        }
      ]
    },
    "id": 1187,
    "table_name": "cars_data"
  },
  {
    "question": "What is the minimum weight of the car with 8 cylinders produced before 1975?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  <  1975",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1975"
        }
      ]
    },
    "id": 1188,
    "table_name": "cars_data"
  },
  {
    "question": "What are all the makers and models of cars made after 2000?",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST WHERE Year > 2000;",
    "db_id": "car_1",
    "table_description": "Table containing car models and their makers with the year they were made.",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year",
          "match_type": "大于",
          "condition": "2000"
        }
      ]
    },
    "id": 1189,
    "table_name": "MODEL_LIST"
  },
  {
    "question": "What are the makers and models for the year 2020?",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST WHERE Year = '2020';",
    "db_id": "car_1",
    "table_description": "This table contains information about different car models and their manufacturers.",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year",
          "match_type": "等于",
          "condition": "2020"
        }
      ]
    },
    "id": 1190,
    "table_name": "MODEL_LIST"
  },
  {
    "question": "What is the number of the cars with horsepower greater than or equal to 160?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >=  160;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "horsepower",
          "match_type": "大于等于",
          "condition": "160"
        }
      ]
    },
    "id": 1191,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with a horsepower greater than 200?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  200;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "horsepower",
          "match_type": "大于",
          "condition": "200"
        }
      ]
    },
    "id": 1192,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average weight of cars each year, but only for cars with a weight greater than 3000?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA WHERE Weight > 3000 GROUP BY YEAR;",
    "db_id": "car_1",
    "table_description": "A dataset containing information about various car models, including their weights and manufacturing years.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Weight",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "id": 1193,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average weight and year for each year, but only for cars with a weight greater than 3000?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA WHERE Weight > 3000 GROUP BY YEAR;",
    "db_id": "car_1",
    "table_description": "This table contains data about various car models including their weights and manufacturing years.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Weight",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "id": 1194,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average horsepower of the cars from 1970 to 1979?",
    "SQL": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR BETWEEN 1970 AND 1979;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "在区间",
          "condition": "1970,1979"
        }
      ]
    },
    "id": 1195,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average horsepower for all cars produced between 1970 and 1980?",
    "SQL": "select avg(horsepower) from cars_data where year >= 1970 and year < 1980;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "在区间",
          "condition": "[1970, 1980)"
        }
      ]
    },
    "id": 1196,
    "table_name": "cars_data"
  },
  {
    "question": "What is the maximum accelerate for different number of cylinders with a horsepower greater than 100?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA WHERE Horsepower > 100 GROUP BY Cylinders;",
    "db_id": "car_1",
    "table_description": "The table contains data about various cars including their specifications such as horsepower, acceleration, and number of cylinders.",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Horsepower",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1197,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the maximum accelerate for all the different cylinders with a horsepower greater than 100?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA WHERE Horsepower > 100 GROUP BY Cylinders;",
    "db_id": "car_1",
    "table_description": "Table containing car data including various attributes such as cylinders, horsepower, and acceleration.",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Horsepower",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1198,
    "table_name": "CARS_DATA"
  },
  {
    "question": "Which model has the most version(make) of cars, excluding models with less than 5 versions?",
    "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model HAVING COUNT(*) > 5 ORDER BY COUNT(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "Table containing car names and their corresponding models.",
    "config": {
      "dimension": [
        {
          "column": "Model"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1199,
    "table_name": "CAR_NAMES"
  },
  {
    "question": "What model has the most different versions, excluding models with fewer than 5 versions?",
    "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model HAVING COUNT(*) > 5 ORDER BY COUNT(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "Table containing car models and their names.",
    "config": {
      "dimension": [
        {
          "column": "Model"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1200,
    "table_name": "CAR_NAMES"
  },
  {
    "question": "How many cars have at least 6 cylinders?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >=  6;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于等于",
          "condition": "6"
        }
      ]
    },
    "id": 1201,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with 6 or more cylinders?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >=  6;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于等于",
          "condition": "6"
        }
      ]
    },
    "id": 1202,
    "table_name": "CARS_DATA"
  },
  {
    "question": "how many cars were produced in the last 5 years?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  >=  2018;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "大于等于",
          "condition": "2018"
        }
      ]
    },
    "id": 1203,
    "table_name": "CARS_DATA"
  },
  {
    "question": "In 1981, how many cars were made?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1981;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "1981"
        }
      ]
    },
    "id": 1204,
    "table_name": "CARS_DATA"
  },
  {
    "question": "In which years cars were produced weighing more than 3500?",
    "SQL": "select distinct year from cars_data where weight > 3500;",
    "db_id": "car_1",
    "table_description": "Table containing car data including year, model, weight, etc.",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": 3500
        }
      ]
    },
    "id": 1205,
    "table_name": "cars_data"
  },
  {
    "question": "What are the different years in which there were cars produced that weighed less than 4000 or more than 3000?",
    "SQL": "select distinct year from cars_data where weight < 4000 or weight > 3000;",
    "db_id": "car_1",
    "table_description": "Table containing data about cars including their year of production and weight.",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "小于",
          "condition": 4000
        },
        {
          "column": "weight",
          "match_type": "大于",
          "condition": 3000
        }
      ]
    },
    "id": 1206,
    "table_name": "cars_data"
  },
  {
    "question": "What is the horsepower of the car that accelerates the fastest and has a weight greater than 2500?",
    "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 WHERE T1.weight > 2500 ORDER BY T1.accelerate DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "CARS_DATA contains various attributes of cars including horsepower, accelerate, and weight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "accelerate",
          "match_type": "ORDER_BY_DESC_LIMIT_1",
          "condition": ""
        },
        {
          "column": "weight",
          "match_type": "greater_than",
          "condition": "2500"
        }
      ]
    },
    "id": 1207,
    "table_name": "CARS_DATA AS T1"
  },
  {
    "question": "What is the maximum horsepower of cars that have an acceleration time greater than 15 seconds?",
    "SQL": "SELECT MAX(T1.horsepower) FROM CARS_DATA AS T1 WHERE T1.accelerate > 15;",
    "db_id": "car_1",
    "table_description": "Table contains data about various car models including their specifications like horsepower, acceleration time, etc.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T1.horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "T1.accelerate",
          "match_type": "大于",
          "condition": "15"
        }
      ]
    },
    "id": 1208,
    "table_name": "CARS_DATA AS T1"
  },
  {
    "question": "How many cars have a larger acceleration time than the car with the second-largest horsepower?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 OFFSET 1 );",
    "db_id": "car_1",
    "table_description": "Table containing data about various car models, including their performance metrics such as horsepower and acceleration.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Accelerate",
          "match_type": "大于",
          "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 OFFSET 1 )"
        }
      ]
    },
    "id": 1209,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with a greater acceleration time than the one with the least horsepower?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower ASC LIMIT 1 );",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Accelerate",
          "match_type": "大于",
          "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower ASC LIMIT 1 )"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1210
  },
  {
    "question": "How many cars have exactly 8 cylinders?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders = 8;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "8"
        }
      ]
    },
    "id": 1211,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with 8 or more cylinders?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders >= 8;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于等于",
          "condition": "8"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1212
  },
  {
    "question": "What is the maximum miles per gallon of the car with 6 cylinders or produced before 1978?",
    "SQL": "select max(mpg) from cars_data where cylinders  =  6 or year  <  1978",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "6"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1978"
        }
      ]
    },
    "id": 1213,
    "table_name": "cars_data"
  },
  {
    "question": "What is the maximum mpg of the cars that had more than 6 cylinders or that were produced before 1975?",
    "SQL": "select max(mpg) from cars_data where cylinders  >  6 or year  <  1975",
    "db_id": "car_1",
    "table_description": "The table 'cars_data' contains information about various car models including their fuel efficiency (mpg), number of cylinders, and production year.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "大于",
          "condition": "6"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1975"
        }
      ]
    },
    "id": 1214,
    "table_name": "cars_data"
  },
  {
    "question": "Which country does the airline with the code 'B6' belong to?",
    "SQL": "SELECT Country FROM AIRLINES WHERE AirlineCode = 'B6'",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirlineCode",
          "match_type": "精确匹配",
          "condition": "B6"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1215
  },
  {
    "question": "Which countries are airlines similar to Jetblue Airways affiliated with?",
    "SQL": "SELECT Country FROM AIRLINES WHERE Airline LIKE '%JetBlue Airways%'",
    "db_id": "flight_2",
    "table_description": "Table containing information about airlines including their names and the countries they are affiliated with.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "模糊匹配",
          "condition": "%JetBlue Airways%"
        }
      ]
    },
    "id": 1216,
    "table_name": "AIRLINES"
  },
  {
    "question": "What is the abbreviation of Airline 'JetBlue Airways Corporation'?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways Corporation'",
    "db_id": "flight_2",
    "table_description": "The AIRLINES table contains information about different airlines including their names and abbreviations.",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways Corporation"
        }
      ]
    },
    "id": 1217,
    "table_name": "AIRLINES"
  },
  {
    "question": "What is the abbreviation for airlines related to Jetblue?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline LIKE \"%JetBlue%\"",
    "db_id": "flight_2",
    "table_description": "This table contains information about different airlines including their names and abbreviations.",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "模糊匹配",
          "condition": "%JetBlue%"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1218
  },
  {
    "question": "List all airline names and their abbreviations related to \"International\".",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Type  LIKE  \"%International%\"",
    "db_id": "flight_2",
    "table_description": "Table AIRLINES contains information about different airlines including their names, abbreviations, countries, and types.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Type",
          "match_type": "模糊匹配",
          "condition": "International"
        }
      ]
    },
    "id": 1219,
    "table_name": "AIRLINES"
  },
  {
    "question": "What are the airline names and abbreviations for airlines in Canada?",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'Canada'",
    "db_id": "flight_2",
    "table_description": "Table containing information about airlines including their names, abbreviations, and countries.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "Canada"
        }
      ]
    },
    "id": 1220,
    "table_name": "AIRLINES"
  },
  {
    "question": "List the airport code and name in the city of Abilene.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Abilene\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about airports including their codes, names, and cities.",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Abilene"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1221
  },
  {
    "question": "Give the airport code and airport name corresponding to the city that starts with 'Ant'.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  LIKE  'Ant%'",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "Ant%"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1222
  },
  {
    "question": "How many airlines do we have that are active?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE status = 'active'",
    "db_id": "flight_2",
    "table_description": "Table containing information about airlines including their status (active or inactive).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "active"
        }
      ]
    },
    "id": 1223,
    "table_name": "AIRLINES"
  },
  {
    "question": "What is the total number of active airlines?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE active = 'Y'",
    "db_id": "flight_2",
    "table_description": "The AIRLINES table contains information about different airlines, including their status (active or not).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "active",
          "match_type": "精确匹配",
          "condition": "Y"
        }
      ]
    },
    "id": 1224,
    "table_name": "AIRLINES"
  },
  {
    "question": "How many airports are there with a city name containing 'New'?",
    "SQL": "SELECT count(*) FROM AIRPORTS WHERE city LIKE '%New%'",
    "db_id": "flight_2",
    "table_description": "The AIRPORTS table contains information about airports including their city names.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "New"
        }
      ]
    },
    "id": 1225,
    "table_name": "AIRPORTS"
  },
  {
    "question": "Return the number of active airports.",
    "SQL": "SELECT count(*) FROM AIRPORTS WHERE status = 'active'",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "status",
          "match_type": "精确匹配",
          "condition": "active"
        }
      ]
    },
    "id": 1226,
    "table_name": "AIRPORTS"
  },
  {
    "question": "How many flights were there yesterday?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DATE = 'yesterday'",
    "db_id": "flight_2",
    "table_description": "FLIGHTS table contains flight records with a date column indicating the date of each flight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DATE",
          "match_type": "relative_time",
          "condition": "yesterday"
        }
      ]
    },
    "id": 1227,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Return the number of flights that have a distance greater than 1000 miles.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE distance > 1000",
    "db_id": "flight_2",
    "table_description": "The FLIGHTS table contains information about flights including their unique flight ID, origin airport, destination airport, and distance in miles.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "distance",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1228,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Which airline is abbreviated as 'UA'?",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UA\"",
    "db_id": "flight_2",
    "table_description": "The AIRLINES table contains information about different airlines including their names and abbreviations.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "UA"
        }
      ]
    },
    "id": 1229,
    "table_name": "AIRLINES"
  },
  {
    "question": "Give the airline with abbreviation 'AA'.",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"AA\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about airlines including their full name and abbreviation.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "AA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1230
  },
  {
    "question": "How many airlines are from Canada?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = 'Canada'",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "Canada"
        }
      ]
    },
    "id": 1231,
    "table_name": "AIRLINES"
  },
  {
    "question": "Return the number of airlines in Canada.",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = 'Canada'",
    "db_id": "flight_2",
    "table_description": "The table contains information about various airlines including their names and countries.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "Canada"
        }
      ]
    },
    "id": 1232,
    "table_name": "AIRLINES"
  },
  {
    "question": "Which city and country is the Alton airport at?",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  LIKE  \"%Alton%\"",
    "db_id": "flight_2",
    "table_description": "Table containing information about airports including their names, cities, and countries.",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "模糊匹配",
          "condition": "%Alton%"
        }
      ]
    },
    "id": 1233,
    "table_name": "AIRPORTS"
  },
  {
    "question": "Give the city and country for the airport that is not Alton.",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName != \"Alton\"",
    "db_id": "flight_2",
    "table_description": "The airports table contains information about different airports including their names, cities, and countries.",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "不等于",
          "condition": "Alton"
        }
      ]
    },
    "id": 1234,
    "table_name": "AIRPORTS"
  },
  {
    "question": "What is the airport name for airport 'JFK'?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"JFK\"",
    "db_id": "flight_2",
    "table_description": "This table contains information about different airports, including their codes and names.",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "JFK"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1235
  },
  {
    "question": "Return the name of the airport with code 'ATL'.",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"ATL\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about airports, including their codes and names.",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "ATL"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1236
  },
  {
    "question": "What are the airport names at City 'Belfast'?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Belfast\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about airports including their names and cities.",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Belfast"
        }
      ]
    },
    "id": 1237,
    "table_name": "AIRPORTS"
  },
  {
    "question": "What are the names of airports that are not in Aberdeen?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City != 'Aberdeen'",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "不等于",
          "condition": "Aberdeen"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1238
  },
  {
    "question": "How many flights depart from 'ATL'?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"ATL\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about flights including source airport and destination airport.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "ATL"
        }
      ]
    },
    "id": 1239,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Count the number of flights departing from 'BOS'.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"BOS\"",
    "db_id": "flight_2",
    "table_description": "Table FLIGHTS contains flight information including source airport and destination airport.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "BOS"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1240
  },
  {
    "question": "How many flights are related to destination ATO?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport LIKE '%ATO%'",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "模糊匹配",
          "condition": "%ATO%"
        }
      ]
    },
    "id": 1241,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Count the number of flights into BOS.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'BOS'",
    "db_id": "flight_2",
    "table_description": "The table contains information about flights including origin and destination airports.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "BOS"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1242
  },
  {
    "question": "What are flight numbers of flights departing from Airport \"LAX\"?",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"LAX\"",
    "db_id": "flight_2",
    "table_description": "Table containing flight information.",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "LAX"
        }
      ]
    },
    "id": 1243,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Give the flight numbers of flights leaving from AQP.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"AQP\"",
    "db_id": "flight_2",
    "table_description": "The FLIGHTS table contains information about flights including their source and destination airports.",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "AQP"
        }
      ]
    },
    "id": 1244,
    "table_name": "FLIGHTS"
  },
  {
    "question": "What are flight numbers of flights arriving at Airport \"BOS\"?",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"BOS\"",
    "db_id": "flight_2",
    "table_description": "表 FLIGHTS 包含了航班信息，其中包括航班号（FlightNo）和目的地机场（DestAirport）。",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "BOS"
        }
      ]
    },
    "id": 1245,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Give the flight numbers of flights landing at BOS.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'BOS'",
    "db_id": "flight_2",
    "table_description": "FLIGHTS table contains information about flights including their origin and destination airports.",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "BOS"
        }
      ]
    },
    "id": 1246,
    "table_name": "FLIGHTS"
  },
  {
    "question": "How many employees have a salary greater than 50000?",
    "SQL": "SELECT count(*) FROM employee WHERE salary > 50000",
    "db_id": "employee_hire_evaluation",
    "table_description": "The employee table contains information about employees including their salaries.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "salary",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1247,
    "table_name": "employee"
  },
  {
    "question": "Count the number of employees hired before 2020-01-01",
    "SQL": "SELECT count(*) FROM employee WHERE hire_date < '2020-01-01'",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hire_date",
          "match_type": "绝对时间",
          "condition": [
            "",
            "2020-01-01"
          ]
        }
      ]
    },
    "id": 1248,
    "table_name": "employee"
  },
  {
    "question": "Sort employee names by their age in ascending order, but only include employees who are older than 30.",
    "SQL": "SELECT name FROM employee WHERE age > 30 ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1249,
    "table_name": "employee"
  },
  {
    "question": "List the names of employees older than 30 and sort in ascending order of age.",
    "SQL": "SELECT name FROM employee WHERE age > 30 ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "table_description": "员工雇佣评估表",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1250,
    "table_name": "employee"
  },
  {
    "question": "What is the number of employees from each city, excluding those from New York?",
    "SQL": "SELECT count(*) ,  city FROM employee WHERE city != 'New York' GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "city",
          "match_type": "不等于",
          "condition": "New York"
        }
      ]
    },
    "id": 1251,
    "table_name": "employee"
  },
  {
    "question": "Count the number of employees for each city, but only for cities with more than 10 employees.",
    "SQL": "SELECT count(*), city FROM employee WHERE city IN (SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 10) GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "table_description": "The 'employee' table contains information about employees, including their city of residence.",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "city",
          "match_type": "in_subquery",
          "condition": "(SELECT city FROM employee GROUP BY city HAVING COUNT(*) > 10)"
        }
      ]
    },
    "id": 1252,
    "table_name": "employee"
  },
  {
    "question": "Which cities do employees under age 28 come from, and have more than two employees?",
    "SQL": "SELECT city FROM employee WHERE age < 28 GROUP BY city HAVING count(*) > 2",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "28"
        },
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1253,
    "table_name": "employee"
  },
  {
    "question": "Find the cities that have more than two employees under age 30.",
    "SQL": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 2",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table contains employee information including name, city, age, and other details.",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        },
        {
          "column": "*",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1254,
    "table_name": "employee"
  },
  {
    "question": "Find the number of shops in each location that are active.",
    "SQL": "SELECT count(*), LOCATION FROM shop WHERE STATUS = 'active' GROUP BY LOCATION",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "STATUS",
          "match_type": "精确匹配",
          "condition": "active"
        }
      ]
    },
    "id": 1255,
    "table_name": "shop"
  },
  {
    "question": "How many shops are there in each location, excluding those in the 'downtown' area?",
    "SQL": "SELECT count(*) ,  LOCATION FROM shop WHERE LOCATION != 'downtown' GROUP BY LOCATION",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LOCATION",
          "match_type": "不等于",
          "condition": "downtown"
        }
      ]
    },
    "id": 1256,
    "table_name": "shop"
  },
  {
    "question": "Find the manager name and district of the shop whose number of products is greater than 500.",
    "SQL": "SELECT manager_name ,  district FROM shop WHERE number_products > 500",
    "db_id": "employee_hire_evaluation",
    "table_description": "The shop table contains information about shops including their manager names, districts, and the number of products they have.",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1257,
    "table_name": "shop"
  },
  {
    "question": "What are the manager name and district of the shop that sells more than 500 products?",
    "SQL": "SELECT manager_name ,  district FROM shop WHERE number_products > 500",
    "db_id": "employee_hire_evaluation",
    "table_description": "The shop table contains information about shops including their manager names, districts, and the number of products they sell.",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1258,
    "table_name": "shop"
  },
  {
    "question": "find the minimum and maximum number of products for stores that have more than 50 employees.",
    "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop WHERE Number_employees > 50",
    "db_id": "employee_hire_evaluation",
    "table_description": "This table contains information about different shops, including the number of employees and the number of products they carry.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Number_employees",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1259,
    "table_name": "shop"
  },
  {
    "question": "What are the minimum and maximum number of products across all the shops with more than 100 products?",
    "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop WHERE Number_products > 100",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1260,
    "table_name": "shop"
  },
  {
    "question": "Return the name, location and district of all shops with more than 100 products in descending order of number of products.",
    "SQL": "SELECT name ,  LOCATION ,  district FROM shop WHERE number_products > 100 ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "table_description": "This table contains information about shops, including their names, locations, districts, and the number of products they have.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "LOCATION"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1261,
    "table_name": "shop"
  },
  {
    "question": "Sort all the shops by the number of products in descending order, and return the name, location, and district of each shop where the number of products is greater than 50.",
    "SQL": "SELECT name, LOCATION, district FROM shop WHERE number_products > 50 ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "LOCATION"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1262,
    "table_name": "shop"
  },
  {
    "question": "Find the names of stores whose number of products is more than 100.",
    "SQL": "SELECT name FROM shop WHERE number_products > 100",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1263,
    "table_name": "shop"
  },
  {
    "question": "Which shops' number of products is above the average and have more than 500 products? Give me the shop names.",
    "SQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop) AND number_products > 500",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "AVG"
        },
        {
          "column": "number_products",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "(SELECT avg(number_products) FROM shop)"
        },
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1264,
    "table_name": "shop"
  },
  {
    "question": "What is the total bonus given in all evaluations for employees with a performance score of 4 or higher?",
    "SQL": "SELECT sum(bonus) FROM evaluation WHERE performance_score >= 4",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "performance_score",
          "match_type": "大于等于",
          "condition": "4"
        }
      ]
    },
    "id": 1265,
    "table_name": "evaluation"
  },
  {
    "question": "Find the total amount of bonus given in all the evaluations where the evaluation score is greater than 80.",
    "SQL": "SELECT sum(bonus) FROM evaluation WHERE score > 80",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "score",
          "match_type": "大于",
          "condition": "80"
        }
      ]
    },
    "id": 1266,
    "table_name": "evaluation"
  },
  {
    "question": "Give me all the information about hiring for the month of January 2023.",
    "SQL": "SELECT * FROM hiring WHERE hire_date BETWEEN '2023-01-01' AND '2023-01-31'",
    "db_id": "employee_hire_evaluation",
    "table_description": "The hiring table contains information about employee hires, including the hire date and other details.",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "hire_date",
          "match_type": "绝对时间",
          "condition": [
            "2023-01-01",
            "2023-01-31"
          ]
        }
      ]
    },
    "id": 1267,
    "table_name": "hiring"
  },
  {
    "question": "What is all the information about hiring in the IT department?",
    "SQL": "SELECT * FROM hiring WHERE department = 'IT'",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table containing details of employee hiring including department, position, hire date, etc.",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "department",
          "match_type": "精确匹配",
          "condition": "IT"
        }
      ]
    },
    "id": 1268,
    "table_name": "hiring"
  },
  {
    "question": "Which district has both stores with less than 2500 products and stores with more than 10000 products?",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  2500 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "2500"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "id": 1269,
    "table_name": "shop"
  },
  {
    "question": "Find the districts in which there are both shops selling fewer than 5000 products and shops selling more than 8000 products.",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  5000 INTERSECT SELECT district FROM shop WHERE Number_products  >  8000",
    "db_id": "employee_hire_evaluation",
    "table_description": "The 'shop' table contains information about various shops, including the number of products they sell and their districts.",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "5000"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "8000"
        }
      ]
    },
    "id": 1270,
    "table_name": "shop"
  },
  {
    "question": "How many different store locations are there in the city of New York?",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop WHERE CITY = 'New York'",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table containing information about various stores and their locations.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "CITY",
          "match_type": "精确匹配",
          "condition": "New York"
        }
      ]
    },
    "id": 1271,
    "table_name": "shop"
  },
  {
    "question": "Count the number of distinct store locations in New York.",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop WHERE LOCATION = 'New York'",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "LOCATION",
          "match_type": "精确匹配",
          "condition": "New York"
        }
      ]
    },
    "id": 1272,
    "table_name": "shop"
  },
  {
    "question": "How many documents were created in the last 3 days?",
    "SQL": "SELECT count(*) FROM Documents WHERE created_date >= DATE_SUB(CURDATE(), INTERVAL 3 DAY)",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "created_date",
          "match_type": "近3天",
          "condition": "近3天"
        }
      ]
    },
    "id": 1273,
    "table_name": "Documents"
  },
  {
    "question": "Count the number of documents created in the last 7 days.",
    "SQL": "SELECT count(*) FROM Documents WHERE creation_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their creation date.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "creation_date",
          "match_type": "relative_time",
          "condition": "近7天"
        }
      ]
    },
    "id": 1274,
    "table_name": "Documents"
  },
  {
    "question": "What are the ids, names, and descriptions for all documents created in the last 30 days?",
    "SQL": "SELECT document_id, document_name, document_description FROM Documents WHERE document_created_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about documents including their IDs, names, descriptions, and creation dates.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "document_name"
        },
        {
          "column": "document_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_created_date",
          "match_type": "近30天",
          "condition": "近30天"
        }
      ]
    },
    "id": 1275,
    "table_name": "Documents"
  },
  {
    "question": "What is the document name and template id for documents with a description that includes the word 'work'?",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%work%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their names, template IDs, and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "模糊匹配",
          "condition": "%work%"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1276
  },
  {
    "question": "Return the names and template ids for documents that contain the word 'work' in their description.",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%work%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their names, template IDs, and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "模糊匹配",
          "condition": "work"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1277
  },
  {
    "question": "What is the document id, template id and description for documents related to \"CV\"?",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  LIKE  \"%CV%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their ids, names, descriptions, and templates.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "模糊匹配",
          "condition": "%CV%"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1278
  },
  {
    "question": "Return the document id, template id, and description for the document with the name containing 'Robbin'.",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name LIKE \"%Robbin%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "模糊匹配",
          "condition": "%Robbin%"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1279
  },
  {
    "question": "How many different templates were used by documents created in the last 30 days?",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents WHERE creation_date >= DATE('now', '-30 days')",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about all the documents and their associated templates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "creation_date",
          "match_type": "相对时间",
          "condition": "近30天"
        }
      ]
    },
    "id": 1280,
    "table_name": "Documents"
  },
  {
    "question": "Count the number of different templates used for documents created after January 1, 2023.",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents WHERE creation_date > '2023-01-01'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about documents and their templates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "creation_date",
          "match_type": "绝对时间",
          "condition": "> '2023-01-01'"
        }
      ]
    },
    "id": 1281,
    "table_name": "Documents"
  },
  {
    "question": "Show all template ids and the number of documents using each template for templates with an ID greater than 100.",
    "SQL": "SELECT template_id ,  count(*) FROM Documents WHERE template_id > 100 GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1282,
    "table_name": "Documents"
  },
  {
    "question": "What are all different template ids used for documents, and how many times were each of them used within the last week?",
    "SQL": "SELECT template_id ,  count(*) FROM Documents WHERE created_at >= DATE('now', '-7 days') GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about document templates including their creation date.",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "created_at",
          "match_type": "relative_time",
          "condition": "近7天"
        }
      ]
    },
    "id": 1283,
    "table_name": "Documents"
  },
  {
    "question": "Show ids for all templates that are used by at least two documents.",
    "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >=  2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about the documents and their associated templates.",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 1284,
    "table_name": "Documents"
  },
  {
    "question": "What are the template ids of any templates used in at least two documents?",
    "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) >= 2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Documents table contains information about documents and their associated template IDs.",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 1285,
    "table_name": "Documents"
  },
  {
    "question": "How many templates do we have that are related to marketing?",
    "SQL": "SELECT count(*) FROM Templates WHERE Template_Name LIKE '%marketing%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about document templates, including their names and descriptions.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Template_Name",
          "match_type": "模糊匹配",
          "condition": "marketing"
        }
      ]
    },
    "id": 1286,
    "table_name": "Templates"
  },
  {
    "question": "Count the number of templates created in the last 7 days.",
    "SQL": "SELECT count(*) FROM Templates WHERE created_at >= DATE('now', '-7 days')",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about document templates, including their creation date.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "created_at",
          "match_type": "相对时间",
          "condition": "近7天"
        }
      ]
    },
    "id": 1287,
    "table_name": "Templates"
  },
  {
    "question": "Show template ids, version numbers, and template type codes for all templates where the template type code is 'T001'.",
    "SQL": "SELECT template_id ,  version_number ,  template_type_code FROM Templates WHERE template_type_code = 'T001'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        },
        {
          "column": "version_number"
        },
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "T001"
        }
      ]
    },
    "id": 1288,
    "table_name": "Templates"
  },
  {
    "question": "Show all distinct template type codes for all templates with a specific template type code of 'T001'.",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates WHERE template_type_code = 'T001'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "T001"
        }
      ]
    },
    "id": 1289,
    "table_name": "Templates"
  },
  {
    "question": "What are the different template type codes for templates created after January 1, 2023?",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates WHERE created_date > '2023-01-01'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "created_date",
          "match_type": "绝对时间",
          "condition": "['2023-01-01', null]"
        }
      ]
    },
    "id": 1290,
    "table_name": "Templates"
  },
  {
    "question": "Return the ids of templates that have the code related to PP or PPT.",
    "SQL": "SELECT template_id FROM Templates WHERE template_type_code LIKE \"%PP%\" OR template_type_code LIKE \"%PPT%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "模糊匹配",
          "condition": "%PP%"
        },
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "PPT"
        }
      ]
    },
    "id": 1291,
    "table_name": "Templates"
  },
  {
    "question": "How many templates have template type code JD?",
    "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  'JD'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about different document templates used in the system.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "等于",
          "condition": "JD"
        }
      ]
    },
    "id": 1292,
    "table_name": "Templates"
  },
  {
    "question": "Count the number of templates of the type Cover Letter.",
    "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  'Cover Letter'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about different types of document templates, including their type codes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "Cover Letter"
        }
      ]
    },
    "table_name": "Templates",
    "id": 1293
  },
  {
    "question": "What is the version number and template type code for the template with a version number greater than or equal to 6?",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >=  6",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing document template management information.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "None"
        }
      ],
      "filter": [
        {
          "column": "version_number",
          "match_type": "大于等于",
          "condition": "6"
        }
      ]
    },
    "id": 1294,
    "table_name": "Templates"
  },
  {
    "question": "Return the version numbers and template type codes of templates with a version number greater than 8.",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  8",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing document template information including version numbers and type codes.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "version_number",
          "match_type": "大于",
          "condition": "8"
        }
      ]
    },
    "id": 1295,
    "table_name": "Templates"
  },
  {
    "question": "Show all template type codes and number of templates for each where the template type code is 'Email'.",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates WHERE template_type_code = 'Email' GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table contains information about document templates including their types and other metadata.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "Email"
        }
      ]
    },
    "id": 1296,
    "table_name": "Templates"
  },
  {
    "question": "What are the different template type codes, and how many templates correspond to each, for templates that have been used more than 10 times?",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates WHERE usage_count > 10 GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "This table contains information about document templates including their type codes and usage counts.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "usage_count",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1297,
    "table_name": "Templates"
  },
  {
    "question": "Which template type code has the most number of templates among those created after 2022-01-01?",
    "SQL": "SELECT template_type_code FROM Templates WHERE create_date > '2022-01-01' GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about document templates, including their type codes and creation dates.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "create_date",
          "match_type": "绝对时间",
          "condition": [
            "2022-01-01",
            null
          ]
        }
      ]
    },
    "id": 1298,
    "table_name": "Templates"
  },
  {
    "question": "Return the type code of the template type that the most templates belong to, but exclude the 'Report' template type.",
    "SQL": "SELECT template_type_code FROM Templates WHERE template_type_code != 'Report' GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about different document templates, including their type codes.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "不等于",
          "condition": "Report"
        }
      ]
    },
    "id": 1299,
    "table_name": "Templates"
  },
  {
    "question": "Show all template type codes with more than two templates.",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  >  2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Templates table contains information about document templates including their type codes.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1300,
    "table_name": "Templates"
  },
  {
    "question": "What are the codes of template types that have exactly 2 templates?",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  =  2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Templates table contains information about different document templates and their types.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "等于",
          "condition": "2"
        }
      ]
    },
    "id": 1301,
    "table_name": "Templates"
  },
  {
    "question": "What is the smallest version number for template type code 'T001'?",
    "SQL": "SELECT min(Version_Number) FROM Templates WHERE template_type_code = 'T001'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table contains information about document templates including their version numbers and type codes.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "T001"
        }
      ]
    },
    "id": 1302,
    "table_name": "Templates"
  },
  {
    "question": "Return the lowest version number, along with its corresponding template type code for templates that have a version number greater than 1.",
    "SQL": "SELECT min(Version_Number) ,  template_type_code FROM Templates WHERE Version_Number > 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table 'Templates' contains columns: template_type_code, Version_Number, etc.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "min"
        }
      ],
      "filter": [
        {
          "column": "Version_Number",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 1303,
    "table_name": "Templates"
  },
  {
    "question": "Show all template type codes and descriptions for active templates.",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types WHERE is_active = 'Y'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Reference table for document template types",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "is_active",
          "match_type": "等于",
          "condition": "Y"
        }
      ]
    },
    "id": 1304,
    "table_name": "Ref_template_types"
  },
  {
    "question": "What are the type codes and descriptions for all template types?",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Reference table for document template types",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Ref_template_types",
    "id": 1305
  },
  {
    "question": "What is the template type descriptions for template type code 'AP'.",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  'AP'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing reference data for document template types.",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "AP"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1306
  },
  {
    "question": "Return the template type description of the template type with the code AR.",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AR\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "This table contains reference data for document template types, including their codes and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "AR"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1307
  },
  {
    "question": "What is the template type code for template type description related to 'Reading Material'?",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description LIKE '%Reading Material%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "模糊匹配",
          "condition": "Reading Material"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1308
  },
  {
    "question": "Return the type code of the template type with a description that contains the word 'Book'.",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description LIKE '%Book%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "模糊匹配",
          "condition": "Book"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1309
  },
  {
    "question": "How many paragraphs are there in the document?",
    "SQL": "SELECT count(*) FROM Paragraphs",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing paragraphs of documents.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 1310,
    "table_name": "Paragraphs"
  },
  {
    "question": "Count the number of paragraphs created yesterday.",
    "SQL": "SELECT count(*) FROM Paragraphs WHERE creation_date = DATE('now', '-1 day')",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing information about paragraphs including their creation dates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "creation_date",
          "match_type": "相对时间",
          "condition": "昨天"
        }
      ]
    },
    "id": 1311,
    "table_name": "Paragraphs"
  },
  {
    "question": "What are the details for the paragraph that contains the text 'South Korea'?",
    "SQL": "select other_details from paragraphs where paragraph_text like '%South Korea%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "This table stores information about different paragraphs in documents.",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "模糊匹配",
          "condition": "South Korea"
        }
      ]
    },
    "table_name": "paragraphs",
    "id": 1312
  },
  {
    "question": "Show all document ids and the number of paragraphs in each document where the document id is greater than 10. Order by document id.",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs WHERE document_id > 10 GROUP BY document_id ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Paragraphs table contains information about paragraphs within documents, including the document ID and paragraph content.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "document_id",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1313,
    "table_name": "Paragraphs"
  },
  {
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, where the document id is greater than 100, ordered by id.",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs WHERE document_id > 100 GROUP BY document_id ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The table 'Paragraphs' contains information about paragraphs in documents, including their IDs and the document they belong to.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "document_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1314,
    "table_name": "Paragraphs"
  },
  {
    "question": "List all document ids with at least three paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  3",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing paragraphs of documents with document_id and paragraph_id columns.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1315,
    "table_name": "Paragraphs"
  },
  {
    "question": "What are the ids of documents that have more than 3 paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >  3",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Paragraphs table contains information about paragraphs within documents, including their IDs and the document they belong to.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "id": 1316,
    "table_name": "Paragraphs"
  },
  {
    "question": "What is the document id with least number of paragraphs, where the paragraph content contains 'example'?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_content LIKE '%example%' GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The table 'Paragraphs' contains information about paragraphs within documents, including the document ID and paragraph content.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "paragraph_content",
          "match_type": "模糊匹配",
          "condition": "example"
        }
      ]
    },
    "id": 1317,
    "table_name": "Paragraphs"
  },
  {
    "question": "Return the id of the document with the fewest paragraphs that has more than 5 paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) > 5 ORDER BY count(*) ASC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "This table contains information about paragraphs within documents, including the document ID and paragraph content.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1318,
    "table_name": "Paragraphs"
  },
  {
    "question": "What is the document id with more than 2 paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) > 2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table contains information about paragraphs in documents.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": 2
        }
      ]
    },
    "id": 1319,
    "table_name": "Paragraphs"
  },
  {
    "question": "Give the ids of documents that have more than three paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) > 3",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing information about paragraphs within documents.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": 3
        }
      ]
    },
    "id": 1320,
    "table_name": "Paragraphs"
  },
  {
    "question": "Show the document id with paragraph text 'Brazil' or 'Germany'.",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' UNION SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Germany'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Brazil"
        },
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Germany"
        }
      ]
    },
    "id": 1321,
    "table_name": "Paragraphs"
  },
  {
    "question": "What are the ids of documents that contain the paragraph text 'Brazil' and related to 'Europe'?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  LIKE  '%Europe%'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Brazil"
        },
        {
          "column": "paragraph_text",
          "match_type": "模糊匹配",
          "condition": "Europe"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 1322
  },
  {
    "question": "How many teachers are there who have more than 5 years of experience?",
    "SQL": "SELECT count(*) FROM teacher WHERE experience > 5",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "experience",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1323,
    "table_name": "teacher"
  },
  {
    "question": "What is the total count of teachers who have more than 5 years of teaching experience?",
    "SQL": "SELECT count(*) FROM teacher WHERE teaching_experience > 5",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers, including their ID, name, and teaching experience in years.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "teaching_experience",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1324,
    "table_name": "teacher"
  },
  {
    "question": "List the names of teachers older than 30 in ascending order of age.",
    "SQL": "SELECT Name FROM teacher WHERE Age > 30 ORDER BY Age ASC",
    "db_id": "course_teach",
    "table_description": "Table 'teacher' contains information about teachers including their names and ages.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1325,
    "table_name": "teacher"
  },
  {
    "question": "What are the names of the teachers who are older than 30, ordered by ascending age?",
    "SQL": "SELECT Name FROM teacher WHERE Age > 30 ORDER BY Age ASC",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1326,
    "table_name": "teacher"
  },
  {
    "question": "What are the age and hometown of teachers from Beijing?",
    "SQL": "SELECT Age ,  Hometown FROM teacher WHERE Hometown = 'Beijing'",
    "db_id": "course_teach",
    "table_description": "This table contains information about teachers including their age and hometown.",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "精确匹配",
          "condition": "Beijing"
        }
      ]
    },
    "id": 1327,
    "table_name": "teacher"
  },
  {
    "question": "What is the age and hometown of every teacher who is over 30 years old?",
    "SQL": "SELECT Age ,  Hometown FROM teacher WHERE Age > 30",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1328,
    "table_name": "teacher"
  },
  {
    "question": "List the name of teachers whose hometown is not 'Bury'.",
    "SQL": "select name from teacher where hometown != 'Bury'",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hometown",
          "match_type": "不等于",
          "condition": "Bury"
        }
      ]
    },
    "id": 1329,
    "table_name": "teacher"
  },
  {
    "question": "What are the names of the teachers whose hometown is not 'Bootle'? ",
    "SQL": "select name from teacher where hometown != 'bootle'",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers, including their names and hometowns.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hometown",
          "match_type": "不等于",
          "condition": "Bootle"
        }
      ]
    },
    "id": 1330,
    "table_name": "teacher"
  },
  {
    "question": "Show the name of teachers aged either 32 or 34?",
    "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  34",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "32"
        },
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "34"
        }
      ]
    },
    "id": 1331,
    "table_name": "teacher"
  },
  {
    "question": "What are the names of the teachers who are aged either 32 or 34?",
    "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  34",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers including their names and ages.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "32"
        },
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "34"
        }
      ]
    },
    "id": 1332,
    "table_name": "teacher"
  },
  {
    "question": "What is the hometown of the oldest teacher?",
    "SQL": "SELECT Hometown FROM teacher ORDER BY Age DESC LIMIT 1",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "最大值",
          "condition": ""
        }
      ]
    },
    "id": 1333,
    "table_name": "teacher"
  },
  {
    "question": "Where is the youngest teacher from?",
    "SQL": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "(SELECT MIN(Age) FROM teacher)"
        }
      ]
    },
    "id": 1334,
    "table_name": "teacher"
  },
  {
    "question": "Show different hometowns of teachers who are not from New York and the number of teachers from each hometown.",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher WHERE Hometown != 'New York' GROUP BY Hometown",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers including their hometowns.",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "不等于",
          "condition": "New York"
        }
      ]
    },
    "id": 1335,
    "table_name": "teacher"
  },
  {
    "question": "For each hometown, how many teachers who have more than 5 years of experience are there?",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher WHERE Experience > 5 GROUP BY Hometown",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Experience",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1336,
    "table_name": "teacher"
  },
  {
    "question": "List the most common hometown of teachers from Beijing.",
    "SQL": "SELECT Hometown FROM teacher WHERE Hometown = 'Beijing' GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "精确匹配",
          "condition": "Beijing"
        }
      ]
    },
    "id": 1337,
    "table_name": "teacher"
  },
  {
    "question": "What is the most common hometown for teachers who have more than 5 years of experience?",
    "SQL": "SELECT Hometown FROM teacher WHERE Years_of_Experience > 5 GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "table_description": "The 'teacher' table contains information about teachers including their hometown and years of experience.",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Years_of_Experience",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1338,
    "table_name": "teacher"
  },
  {
    "question": "Show the hometowns shared by at least three teachers.",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  3",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1339,
    "table_name": "teacher"
  },
  {
    "question": "What are the towns from which at least three teachers come from?",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  3",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers including their hometowns.",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1340,
    "table_name": "teacher"
  },
  {
    "question": "How many visitors aged 30 and above are there?",
    "SQL": "SELECT count(*) FROM visitor WHERE age >= 30",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于等于",
          "condition": "30"
        }
      ]
    },
    "id": 1341,
    "table_name": "visitor"
  },
  {
    "question": "Find the names of the visitors whose membership level is not lower than 5, and order the results by the level from high to low.",
    "SQL": "SELECT name FROM visitor WHERE Level_of_membership  >=  5 ORDER BY Level_of_membership DESC",
    "db_id": "museum_visit",
    "table_description": "Table 'visitor' contains information about museum visitors, including their names and membership levels.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "大于等于",
          "condition": "5"
        }
      ]
    },
    "id": 1342,
    "table_name": "visitor"
  },
  {
    "question": "What is the average age of the visitors whose membership level is exactly 3?",
    "SQL": "SELECT avg(age) FROM visitor WHERE Level_of_membership = 3",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "等于",
          "condition": "3"
        }
      ]
    },
    "id": 1343,
    "table_name": "visitor"
  },
  {
    "question": "Find the name and membership level of the visitors whose membership level is not equal to 4, and sort by their age from old to young.",
    "SQL": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  !=  4 ORDER BY age DESC",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "Level_of_membership"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "不等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "visitor",
    "id": 1344
  },
  {
    "question": "Find the id and name of the museum that has more than 50 staff members?",
    "SQL": "SELECT museum_id ,  name FROM museum WHERE num_of_staff > 50 ORDER BY num_of_staff DESC LIMIT 1",
    "db_id": "museum_visit",
    "table_description": "Table 'museum' contains information about museums including their ID, name, and number of staff members.",
    "config": {
      "dimension": [
        {
          "column": "museum_id"
        },
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "num_of_staff",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1345,
    "table_name": "museum"
  },
  {
    "question": "Find the average number of staff working for the museums that were open after 2009.",
    "SQL": "SELECT avg(num_of_staff) FROM museum WHERE open_year  >  2009",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2009"
        }
      ]
    },
    "id": 1346,
    "table_name": "museum"
  },
  {
    "question": "What are the opening year and staff number of the museum named Modern Art Museum?",
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Modern Art Museum'",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "Open_Year"
        },
        {
          "column": "Num_of_Staff"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Modern Art Museum"
        }
      ]
    },
    "table_name": "museum",
    "id": 1347
  },
  {
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2015.",
    "SQL": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2015)",
    "db_id": "museum_visit",
    "table_description": "The museum table contains information about various museums, including their names, number of staff, and opening years.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "NONE"
        },
        {
          "column": "num_of_staff",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2015"
        },
        {
          "column": "num_of_staff",
          "match_type": "大于",
          "condition": "(SELECT min(num_of_staff) FROM museum WHERE open_year  >  2015)"
        }
      ]
    },
    "id": 1348,
    "table_name": "museum"
  },
  {
    "question": "What are the average and maximum number of tickets bought in all visits where the number of tickets is greater than 1?",
    "SQL": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit WHERE num_of_ticket > 1",
    "db_id": "museum_visit",
    "table_description": "The 'visit' table records details of each visit to the museum, including the number of tickets bought.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_ticket",
          "aggregate_function": "avg"
        },
        {
          "column": "num_of_ticket",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "num_of_ticket",
          "match_type": "greater",
          "condition": "1"
        }
      ]
    },
    "id": 1349,
    "table_name": "visit"
  },
  {
    "question": "How many museums were opened after 2014 or before 2007?",
    "SQL": "SELECT count(*) FROM museum WHERE open_year  >  2014 OR open_year  <  2007",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2014"
        },
        {
          "column": "open_year",
          "match_type": "小于",
          "condition": "2007"
        }
      ]
    },
    "id": 1350,
    "table_name": "museum"
  },
  {
    "question": "Find the total number of players who have a player ID greater than 100.",
    "SQL": "SELECT count(*) FROM players WHERE player_id > 100",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "player_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1351,
    "table_name": "players"
  },
  {
    "question": "How many players are there with a ranking greater than 100?",
    "SQL": "SELECT count(*) FROM players WHERE ranking > 100",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ranking",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1352,
    "table_name": "players"
  },
  {
    "question": "Find the total number of matches that occurred yesterday.",
    "SQL": "SELECT count(*) FROM matches WHERE match_date = DATE('now', '-1 day')",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches including the date of the match (match_date).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "match_date",
          "match_type": "绝对时间",
          "condition": "昨天"
        }
      ]
    },
    "id": 1353,
    "table_name": "matches"
  },
  {
    "question": "Count the number of matches in the year 2020.",
    "SQL": "SELECT count(*) FROM matches WHERE match_year = 2020",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains information about tennis matches including match_year.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "match_year",
          "match_type": "等于",
          "condition": "2020"
        }
      ]
    },
    "id": 1354,
    "table_name": "matches"
  },
  {
    "question": "List the first name and birth date of all players from the country with code CAN.",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'CAN'",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their names, birth dates, and country codes.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "CAN"
        }
      ]
    },
    "id": 1355,
    "table_name": "players"
  },
  {
    "question": "What are the first names and birth dates of players from the United States?",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'US'",
    "db_id": "wta_1",
    "table_description": "This table contains information about players including their first names, birth dates, and country codes.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "US"
        }
      ]
    },
    "id": 1356,
    "table_name": "players"
  },
  {
    "question": "Find the average age of losers and winners of all matches where the match duration is more than 120 minutes.",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches WHERE match_duration > 120",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "match_duration",
          "match_type": "大于",
          "condition": "120"
        }
      ]
    },
    "id": 1357,
    "table_name": "matches"
  },
  {
    "question": "What are the average ages of losers and winners in matches that took place after 2010?",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches WHERE match_date > '2010-01-01'",
    "db_id": "wta_1",
    "table_description": "Table containing match information including match date, loser age, and winner age.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "match_date",
          "match_type": "绝对时间",
          "condition": "2010-01-01"
        }
      ]
    },
    "id": 1358,
    "table_name": "matches"
  },
  {
    "question": "Find the average rank of winners in matches where the match score is '6-3, 6-4'.",
    "SQL": "SELECT avg(winner_rank) FROM matches WHERE score = '6-3, 6-4'",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches, including the winner's rank and the match score.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "score",
          "match_type": "精确匹配",
          "condition": "6-3, 6-4"
        }
      ]
    },
    "id": 1359,
    "table_name": "matches"
  },
  {
    "question": "What is the average rank for winners in matches where the winner's country is USA?",
    "SQL": "SELECT avg(winner_rank) FROM matches WHERE winner_country = 'USA'",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "winner_country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1360,
    "table_name": "matches"
  },
  {
    "question": "Find the highest rank of losers in matches where the loser's country is USA.",
    "SQL": "SELECT min(loser_rank) FROM matches WHERE loser_country = 'USA'",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches including player ranks and countries.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "loser_country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1361,
    "table_name": "matches"
  },
  {
    "question": "What is the best rank of losers with a rank greater than 100 across all matches?",
    "SQL": "SELECT min(loser_rank) FROM matches WHERE loser_rank > 100",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "loser_rank",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1362,
    "table_name": "matches"
  },
  {
    "question": "find the number of distinct country codes of all players from the US and Canada.",
    "SQL": "SELECT count(DISTINCT country_code) FROM players WHERE country_code IN ('US', 'CA')",
    "db_id": "wta_1",
    "table_description": "The players table contains player information including country code.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "IN ('US', 'CA')"
        }
      ]
    },
    "id": 1363,
    "table_name": "players"
  },
  {
    "question": "How many distinct countries do players come from who have a rank higher than 100?",
    "SQL": "SELECT count(DISTINCT country_code) FROM players WHERE rank > 100",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "rank",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1364,
    "table_name": "players"
  },
  {
    "question": "Find the number of distinct names of losers who have lost in the last week.",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches WHERE match_date >= DATE('now', '-7 days')",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "match_date",
          "match_type": "相对时间",
          "condition": "近7天"
        }
      ]
    },
    "id": 1365,
    "table_name": "matches"
  },
  {
    "question": "How many different loser names are there from the matches that happened before 2020-01-01?",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches WHERE match_date < '2020-01-01'",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches including match date and player names.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "match_date",
          "match_type": "绝对时间",
          "condition": "< '2020-01-01'"
        }
      ]
    },
    "id": 1366,
    "table_name": "matches"
  },
  {
    "question": "Find the name of tourney that has more than 15 matches.",
    "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  15",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains information about tennis matches, including the tournament name and match details.",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "15"
        }
      ]
    },
    "id": 1367,
    "table_name": "matches"
  },
  {
    "question": "What are the names of tournaments that have more than 5 matches?",
    "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  5",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches, including tournament names and match details.",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1368,
    "table_name": "matches"
  },
  {
    "question": "List the names of all winners who played in both 2013 and 2014.",
    "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2014",
    "db_id": "wta_1",
    "table_description": "This table contains information about tennis matches, including the year, tournament, and winners.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        }
      ]
    },
    "id": 1369,
    "table_name": "matches"
  },
  {
    "question": "What are the names of players who won in both 2013 and 2014?",
    "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2014",
    "db_id": "wta_1",
    "table_description": "This table contains information about matches including the year, tournament, round, winner name, and more.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        }
      ]
    },
    "id": 1370,
    "table_name": "matches"
  },
  {
    "question": "List the number of all matches who played in years of 2013 or 2015.",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2015",
    "db_id": "wta_1",
    "table_description": "The table 'matches' contains details about tennis matches including the year they were played.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "id": 1371,
    "table_name": "matches"
  },
  {
    "question": "How many matches were played in 2013 or 2015?",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2015",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "id": 1372,
    "table_name": "matches"
  },
  {
    "question": "Find the first name and country code of the oldest player who is not from the United States.",
    "SQL": "SELECT first_name ,  country_code FROM players WHERE country_code != 'US' ORDER BY birth_date LIMIT 1",
    "db_id": "wta_1",
    "table_description": "Table 'players' contains information about players including their first name, country code, and birth date.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "不等于",
          "condition": "US"
        }
      ]
    },
    "id": 1373,
    "table_name": "players"
  },
  {
    "question": "What is the first name and country code of the oldest player from France?",
    "SQL": "SELECT first_name ,  country_code FROM players WHERE country_code = 'FRA' ORDER BY birth_date LIMIT 1",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their first name, country code, and birth date.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "FRA"
        }
      ]
    },
    "id": 1374,
    "table_name": "players"
  },
  {
    "question": "List the first and last name of all players born after January 1, 1980, in the order of birth date.",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE birth_date > '1980-01-01' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "players table contains player information including their first name, last name, and birth date.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birth_date",
          "match_type": "大于",
          "condition": "1980-01-01"
        }
      ]
    },
    "id": 1375,
    "table_name": "players"
  },
  {
    "question": "What are the full names of all players born before 1990, sorted by birth date?",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE birth_date < '1990-01-01' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "Table containing player information.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birth_date",
          "match_type": "绝对时间",
          "condition": "1990-01-01"
        }
      ]
    },
    "id": 1376,
    "table_name": "players"
  },
  {
    "question": "List the first and last name of all players who are right / R hand in the order of birth date.",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'R' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "This table contains player information including their names, hand preference, and birth dates.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "table_name": "players",
    "id": 1377
  },
  {
    "question": "What are the full names of all right handed players, in order of birth date?",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'R' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "This table contains information about players including their first name, last name, hand, and birth date.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 1378,
    "table_name": "players"
  },
  {
    "question": "Find the year that has more than 1000 matches.",
    "SQL": "SELECT YEAR FROM matches GROUP BY YEAR HAVING COUNT(*) > 1000 ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches, including the year they were played.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1379,
    "table_name": "matches"
  },
  {
    "question": "Which year had the most matches after 2010?",
    "SQL": "SELECT YEAR FROM matches WHERE YEAR > 2010 GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "Table contains match records including the year of the match.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "大于",
          "condition": "2010"
        }
      ]
    },
    "id": 1380,
    "table_name": "matches"
  },
  {
    "question": "Find the name and rank points of the winner who has more than 5000 rank points and won the most times.",
    "SQL": "SELECT winner_name ,  winner_rank_points FROM matches WHERE winner_rank_points > 5000 GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains information about tennis matches including the names and rank points of the winners.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank_points"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "winner_rank_points",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "id": 1381,
    "table_name": "matches"
  },
  {
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have, excluding players with less than 500 rank points?",
    "SQL": "SELECT winner_name ,  winner_rank_points FROM matches WHERE winner_rank_points >= 500 GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "This table contains information about tennis matches including the names of the winners and their rank points.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "winner_rank_points",
          "match_type": "大于等于",
          "condition": "500"
        }
      ]
    },
    "id": 1382,
    "table_name": "matches"
  },
  {
    "question": "Find the name of the winner who has the highest rank points and participated in the French Open tourney.",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'French Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "This table contains match records from various tennis tournaments including player names, tournament names, and ranking points.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "French Open"
        }
      ]
    },
    "id": 1383,
    "table_name": "matches"
  },
  {
    "question": "What is the name of the winner with the most rank points who participated in the US Open tournament?",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'US Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "This table contains match data from various tennis tournaments.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "US Open"
        }
      ]
    },
    "id": 1384,
    "table_name": "matches"
  },
  {
    "question": "find the names of loser and winner who played in the match that lasted more than 120 minutes.",
    "SQL": "SELECT winner_name ,  loser_name FROM matches WHERE minutes > 120",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains information about tennis matches, including player names and match duration.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "minutes",
          "match_type": "大于",
          "condition": "120"
        }
      ]
    },
    "id": 1385,
    "table_name": "matches"
  },
  {
    "question": "What are the names of the winner and loser who played in a match longer than 180 minutes?",
    "SQL": "SELECT winner_name ,  loser_name FROM matches WHERE minutes > 180 ORDER BY minutes DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "The 'matches' table contains information about tennis matches including the winner's name, loser's name, and the duration of the match in minutes.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [
        {
          "column": "minutes",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "minutes",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "id": 1386,
    "table_name": "matches"
  },
  {
    "question": "find the number of players for each country, excluding players from China.",
    "SQL": "SELECT count(*) ,  country_code FROM players WHERE country_code != 'China' GROUP BY country_code",
    "db_id": "wta_1",
    "table_description": "The players table contains player information including country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "不等于",
          "condition": "China"
        }
      ]
    },
    "id": 1387,
    "table_name": "players"
  },
  {
    "question": "How many players are from each country, excluding those from the United States?",
    "SQL": "SELECT count(*), country_code FROM players WHERE country_code != 'US' GROUP BY country_code",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "不等于",
          "condition": "US"
        }
      ]
    },
    "id": 1388,
    "table_name": "players"
  },
  {
    "question": "find the code of the country where has the greatest number of players, but exclude players from the United States.",
    "SQL": "SELECT country_code FROM players WHERE country_code != 'US' GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "不等于",
          "condition": "US"
        }
      ]
    },
    "id": 1389,
    "table_name": "players"
  },
  {
    "question": "What is the code of the country with the most players?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "The players table contains information about players including their country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "US"
        }
      ]
    },
    "id": 1390,
    "table_name": "players"
  },
  {
    "question": "Find the codes of countries that have more than 100 players.",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  100",
    "db_id": "wta_1",
    "table_description": "The players table contains information about players, including their country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "table_name": "players",
    "id": 1391
  },
  {
    "question": "What are the codes of countries with more than 100 players?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 100",
    "db_id": "wta_1",
    "table_description": "The players table contains information about players including their country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "table_name": "players",
    "id": 1392
  },
  {
    "question": "Find the total number of tours for each ranking date in the last month.",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings WHERE ranking_date >= DATE('now', '-1 month') GROUP BY ranking_date",
    "db_id": "wta_1",
    "table_description": "The 'rankings' table contains information about player rankings and the number of tours they have played.",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "ranking_date",
          "match_type": "相对时间",
          "condition": "近1月"
        }
      ]
    },
    "id": 1393,
    "table_name": "rankings"
  },
  {
    "question": "How many total tours were there for each ranking date before 2020-01-01?",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings WHERE ranking_date < '2020-01-01' GROUP BY ranking_date",
    "db_id": "wta_1",
    "table_description": "Table contains rankings of players with their ranking dates and number of tours.",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "ranking_date",
          "match_type": "绝对时间",
          "condition": "< '2020-01-01'"
        }
      ]
    },
    "id": 1394,
    "table_name": "rankings"
  },
  {
    "question": "Find the number of matches happened in each year after 2010.",
    "SQL": "SELECT count(*), YEAR FROM matches WHERE YEAR > 2010 GROUP BY YEAR",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "大于",
          "condition": "2010"
        }
      ]
    },
    "id": 1395,
    "table_name": "matches"
  },
  {
    "question": "How many matches were played in each year before 2010?",
    "SQL": "SELECT count(*), YEAR FROM matches WHERE YEAR < 2010 GROUP BY YEAR",
    "db_id": "wta_1",
    "table_description": "The 'matches' table contains information about tennis matches, including the year in which they were played.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "小于",
          "condition": "2010"
        }
      ]
    },
    "id": 1396,
    "table_name": "matches"
  },
  {
    "question": "Find the name and rank of the 3 youngest winners who have won a match with a score of 6-3, 6-4.",
    "SQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches WHERE score = '6-3, 6-4' ORDER BY winner_age LIMIT 3",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches, including the names and ranks of the winners, the scores, and other details.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "score",
          "match_type": "精确匹配",
          "condition": "6-3, 6-4"
        }
      ]
    },
    "id": 1397,
    "table_name": "matches"
  },
  {
    "question": "What are the names and ranks of the winners under the age of 25 across all matches?",
    "SQL": "SELECT DISTINCT winner_name, winner_rank FROM matches WHERE winner_age < 25",
    "db_id": "wta_1",
    "table_description": "This table contains match results including player names, ranks, and ages.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "winner_age",
          "match_type": "小于",
          "condition": "25"
        }
      ]
    },
    "id": 1398,
    "table_name": "matches"
  },
  {
    "question": "How many different winners both participated in the US Open and were left handed?",
    "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'US Open' AND winner_hand  =  'L'",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches including tournament name, player names, and player hand.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "US Open"
        },
        {
          "column": "winner_hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "id": 1399,
    "table_name": "matches"
  },
  {
    "question": "Find the number of left-handed or ambidextrous winners who participated in the WTA Championships.",
    "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND (winner_hand  =  'L' OR winner_hand  =  'A')",
    "db_id": "wta_1",
    "table_description": "This table contains match data from the Women's Tennis Association (WTA) tournaments, including player names, tournament names, and player handedness.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_name",
          "aggregate_function": "COUNT DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        },
        {
          "column": "winner_hand",
          "match_type": "精确匹配",
          "condition": "L,A"
        }
      ]
    },
    "id": 1400,
    "table_name": "matches"
  },
  {
    "question": "Find the number of players for each hand type who have a ranking greater than 50.",
    "SQL": "SELECT count(*), hand FROM players WHERE ranking > 50 GROUP BY hand",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their hand type and ranking.",
    "config": {
      "dimension": [
        {
          "column": "hand"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "ranking",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1401,
    "table_name": "players"
  },
  {
    "question": "How many players are there for each hand type, excluding those with 'Right' as their hand type?",
    "SQL": "SELECT count(*), hand FROM players WHERE hand != 'Right' GROUP BY hand",
    "db_id": "wta_1",
    "table_description": "The players table contains information about players, including their hand type.",
    "config": {
      "dimension": [
        {
          "column": "hand"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hand",
          "match_type": "不等于",
          "condition": "Right"
        }
      ]
    },
    "id": 1402,
    "table_name": "players"
  },
  {
    "question": "How many ships ended up being 'Sunk'?",
    "SQL": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Sunk'",
    "db_id": "battle_death",
    "table_description": "The ship table contains information about ships involved in battles, including their disposition after the battle.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "disposition_of_ship",
          "match_type": "精确匹配",
          "condition": "Sunk"
        }
      ]
    },
    "id": 1403,
    "table_name": "ship"
  },
  {
    "question": "List the name, date and result of each battle that happened after 1940.",
    "SQL": "SELECT name, date FROM battle WHERE date > '1940-01-01'",
    "db_id": "battle_death",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date",
          "match_type": "绝对时间",
          "condition": "1940-01-01"
        }
      ]
    },
    "id": 1404,
    "table_name": "battle"
  },
  {
    "question": "What is the maximum and minimum death toll caused each time in battles involving over 100 soldiers?",
    "SQL": "SELECT max(killed) ,  min(killed) FROM death WHERE soldiers > 100",
    "db_id": "battle_death",
    "table_description": "The 'death' table records details of battles, including the number of soldiers involved and the number of people killed.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "killed",
          "aggregate_function": "max"
        },
        {
          "column": "killed",
          "aggregate_function": "min"
        }
      ],
      "filter": [
        {
          "column": "soldiers",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1405,
    "table_name": "death"
  },
  {
    "question": "What is the average number of injuries caused each time when the location is related to 'Iraq'?",
    "SQL": "SELECT avg(injured) FROM death WHERE location LIKE '%Iraq%'",
    "db_id": "battle_death",
    "table_description": "The table contains records of battle deaths and injuries.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "injured",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "location",
          "match_type": "模糊匹配",
          "condition": "Iraq"
        }
      ]
    },
    "id": 1406,
    "table_name": "death"
  },
  {
    "question": "What are the name and results of the battles when the Bulgarian commander is 'Ivan'",
    "SQL": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander = 'Ivan'",
    "db_id": "battle_death",
    "table_description": "The battle table contains information about historical battles including the names, results, and commanders.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "RESULT"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "等于",
          "condition": "Ivan"
        }
      ]
    },
    "table_name": "battle",
    "id": 1407
  },
  {
    "question": "What are the distinct battle names which are between bulgarian commander 'Ivan Asen II' and latin commander 'Baldwin I'?",
    "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Ivan Asen II' AND latin_commander  =  'Baldwin I'",
    "db_id": "battle_death",
    "table_description": "The battle table contains information about battles, including the names of commanders from different sides.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "精确匹配",
          "condition": "Ivan Asen II"
        },
        {
          "column": "latin_commander",
          "match_type": "精确匹配",
          "condition": "Baldwin I"
        }
      ]
    },
    "id": 1408,
    "table_name": "battle"
  },
  {
    "question": "How many different results are there for the battles that took place on land?",
    "SQL": "SELECT count(DISTINCT RESULT) FROM battle WHERE BATTLE_TYPE = 'land'",
    "db_id": "battle_death",
    "table_description": "The battle table contains information about various battles including their types and outcomes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "RESULT",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "BATTLE_TYPE",
          "match_type": "精确匹配",
          "condition": "land"
        }
      ]
    },
    "id": 1409,
    "table_name": "battle"
  },
  {
    "question": "What are the notes of the death events which have the word 'eastern'?",
    "SQL": "SELECT note FROM death WHERE note LIKE '%eastern%'",
    "db_id": "battle_death",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "note"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "note",
          "match_type": "模糊匹配",
          "condition": "eastern"
        }
      ]
    },
    "table_name": "death",
    "id": 1410
  },
  {
    "question": "What are all the addresses containing 'Main Street' in line 1 or line 2?",
    "SQL": "SELECT line_1, line_2 FROM addresses WHERE line_1 LIKE '%Main Street%' OR line_2 LIKE '%Main Street%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "line_1",
          "match_type": "模糊匹配",
          "condition": "Main Street"
        },
        {
          "column": "line_2",
          "match_type": "模糊匹配",
          "condition": "Main Street"
        }
      ]
    },
    "id": 1411,
    "table_name": "addresses"
  },
  {
    "question": "What is the first and second line for all addresses with a city name that includes 'Spring'?",
    "SQL": "SELECT line_1 ,  line_2 FROM addresses WHERE city LIKE '%Spring%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table contains address information including lines, city, state, and zip code.",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "Spring"
        }
      ]
    },
    "id": 1412,
    "table_name": "addresses"
  },
  {
    "question": "How many courses that have more than 10 enrollments are listed?",
    "SQL": "SELECT count(*) FROM Courses WHERE enrollments > 10",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Courses table contains information about the courses, including course ID, name, and number of enrollments.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "enrollments",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1413,
    "table_name": "Courses"
  },
  {
    "question": "How many courses are there with a duration longer than 10 weeks?",
    "SQL": "SELECT count(*) FROM Courses WHERE duration > 10",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table 'Courses' contains information about various courses, including their duration.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "duration",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1414,
    "table_name": "Courses"
  },
  {
    "question": "What is the description of the mathematics course?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name LIKE '%mathematics%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "模糊匹配",
          "condition": "mathematics"
        }
      ]
    },
    "id": 1415,
    "table_name": "Courses"
  },
  {
    "question": "What are the descriptions for all the math-related courses?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "course_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "模糊匹配",
          "condition": "%math%"
        }
      ]
    },
    "id": 1416,
    "table_name": "Courses"
  },
  {
    "question": "What is the zip code of the address in the city Port Chelsea?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Addresses table contains information about addresses including city and zip code.",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Port Chelsea"
        }
      ]
    },
    "id": 1417,
    "table_name": "Addresses"
  },
  {
    "question": "What is the zip code for Port Chelsea?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Contains address information such as city and zip code.",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Port Chelsea"
        }
      ]
    },
    "table_name": "Addresses",
    "id": 1418
  },
  {
    "question": "How many departments offer a Bachelor's degree?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE degree_type = 'Bachelor'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The table Degree_Programs contains information about the degree programs offered by different departments.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "COUNT_DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "degree_type",
          "match_type": "精确匹配",
          "condition": "Bachelor"
        }
      ]
    },
    "id": 1419,
    "table_name": "Degree_Programs"
  },
  {
    "question": "How many different departments offer degrees in the last 5 years?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE year >= DATE('now', '-5 years')",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "绝对时间",
          "condition": "近5年"
        }
      ]
    },
    "id": 1420,
    "table_name": "Degree_Programs"
  },
  {
    "question": "How many different degree names are offered in the program with ID 123?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs WHERE program_id = 123",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about degree programs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "program_id",
          "match_type": "等于",
          "condition": "123"
        }
      ]
    },
    "id": 1421,
    "table_name": "Degree_Programs"
  },
  {
    "question": "How many different degrees are offered in the College of Engineering?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs WHERE college_name = 'College of Engineering'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about degree programs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "college_name",
          "match_type": "精确匹配",
          "condition": "College of Engineering"
        }
      ]
    },
    "id": 1422,
    "table_name": "Degree_Programs"
  },
  {
    "question": "What are the names and descriptions of all the sections?",
    "SQL": "SELECT section_name ,  section_description FROM Sections",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 1423
  },
  {
    "question": "What are the names and descriptions for all the sections that have 'Math' in their description?",
    "SQL": "SELECT section_name ,  section_description FROM Sections WHERE section_description LIKE '%Math%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Sections table contains information about different sections including their names and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "section_description",
          "match_type": "模糊匹配",
          "condition": "%Math%"
        }
      ]
    },
    "id": 1424,
    "table_name": "Sections"
  },
  {
    "question": "List the section_name in reversed lexicographical order.",
    "SQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 1425
  },
  {
    "question": "What are the names of the sections in reverse alphabetical order that start with 'B'?",
    "SQL": "SELECT section_name FROM Sections WHERE section_name LIKE 'B%' ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about different sections.",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "模糊匹配",
          "condition": "B%"
        }
      ]
    },
    "id": 1426,
    "table_name": "Sections"
  },
  {
    "question": "What is the description of the department whose name contains the word 'science'?",
    "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%science%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Contains information about different departments.",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "department_name",
          "match_type": "模糊匹配",
          "condition": "science"
        }
      ]
    },
    "table_name": "Departments",
    "id": 1427
  },
  {
    "question": "What is the department description for the one whose name contains the word science?",
    "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%science%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Departments table contains information about different departments including their names and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "department_name",
          "match_type": "模糊匹配",
          "condition": "science"
        }
      ]
    },
    "table_name": "Departments",
    "id": 1428
  },
  {
    "question": "What is the phone number of the man with the first name Timothy and the last name Ward?",
    "SQL": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timothy' AND last_name  =  'Ward'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cell_mobile_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Timothy"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Ward"
        }
      ]
    },
    "id": 1429,
    "table_name": "Students"
  },
  {
    "question": "What is the mobile phone number of the student named Timothy Ward?",
    "SQL": "select cell_mobile_number from students where first_name  =  'Timothy' and last_name  =  'Ward'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their names and contact details.",
    "config": {
      "dimension": [
        {
          "column": "cell_mobile_number"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Timothy"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Ward"
        }
      ]
    },
    "id": 1430,
    "table_name": "students"
  },
  {
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE date_first_registered >= '1980-01-01' ORDER BY date_first_registered ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "This table contains information about students including their names and registration dates.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_first_registered",
          "match_type": "absolute_time",
          "condition": [
            "1980-01-01",
            null
          ]
        }
      ]
    },
    "id": 1431,
    "table_name": "Students"
  },
  {
    "question": "What is the first, middle, and last name of the student who registered on '2022-01-15'?",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE date_first_registered = '2022-01-15' LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks the information about students including their registration details.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_first_registered",
          "match_type": "绝对时间",
          "condition": "2022-01-15"
        }
      ]
    },
    "id": 1432,
    "table_name": "Students"
  },
  {
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks student information including their names and graduation dates.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_left",
          "match_type": "不为空",
          "condition": "IS NOT NULL"
        }
      ]
    },
    "id": 1433,
    "table_name": "Students"
  },
  {
    "question": "What is the first, middle, and last name of the earliest school graduate from the year 2020?",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE YEAR(date_left) = 2020 ORDER BY date_left ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their names and graduation dates.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_left",
          "match_type": "绝对时间",
          "condition": "2020-01-01 TO 2020-12-31"
        }
      ]
    },
    "id": 1434,
    "table_name": "Students"
  },
  {
    "question": "Whose permanent address is not the same as his or her current address? List his or her first name.",
    "SQL": "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their first name, current address ID, and permanent address ID.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "current_address_id",
          "match_type": "不等于",
          "condition": "permanent_address_id"
        }
      ]
    },
    "id": 1435,
    "table_name": "Students"
  },
  {
    "question": "What is the first name of the student whose current address ID is 100 and permanent address is different from his or her current one?",
    "SQL": "SELECT first_name FROM Students WHERE current_address_id = 100 AND permanent_address_id != current_address_id",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their first names and address IDs.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "current_address_id",
          "match_type": "等于",
          "condition": "100"
        },
        {
          "column": "permanent_address_id",
          "match_type": "不等于",
          "condition": "current_address_id"
        }
      ]
    },
    "id": 1436,
    "table_name": "Students"
  },
  {
    "question": "On average, when were the transcripts printed for students who graduated after 2020?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts WHERE graduation_year > 2020",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about student transcripts and their printing dates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "graduation_year",
          "match_type": "大于",
          "condition": "2020"
        }
      ]
    },
    "id": 1437,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the average transcript date for transcripts created before 2023-01-01?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts WHERE transcript_date < '2023-01-01'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": "< '2023-01-01'"
        }
      ]
    },
    "id": 1438,
    "table_name": "Transcripts"
  },
  {
    "question": "When is the first transcript released? List the date and details for transcripts released after January 1, 2023.",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts WHERE transcript_date > '2023-01-01' ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": "> 2023-01-01"
        }
      ]
    },
    "id": 1439,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the earliest date of a transcript release for students in the fall semester, and what details can you tell me?",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts WHERE semester = 'Fall' ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student transcript information.",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "semester",
          "match_type": "精确匹配",
          "condition": "Fall"
        }
      ]
    },
    "id": 1440,
    "table_name": "Transcripts"
  },
  {
    "question": "How many transcripts were released today?",
    "SQL": "SELECT count(*) FROM Transcripts WHERE release_date = CURRENT_DATE",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "release_date",
          "match_type": "绝对时间",
          "condition": "今天"
        }
      ]
    },
    "id": 1441,
    "table_name": "Transcripts"
  },
  {
    "question": "How many transcripts were listed for the year 2023?",
    "SQL": "SELECT count(*) FROM Transcripts WHERE year = 2023",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Transcripts table contains information about student transcripts, including the year they were issued.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "等于",
          "condition": "2023"
        }
      ]
    },
    "id": 1442,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the last transcript release date for a specific course?",
    "SQL": "SELECT transcript_date FROM Transcripts WHERE course_id = 'CS101' ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "This table contains information about student transcripts including the course ID and the date the transcript was released.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "course_id",
          "match_type": "精确匹配",
          "condition": "CS101"
        }
      ]
    },
    "id": 1443,
    "table_name": "Transcripts"
  },
  {
    "question": "When was the last transcript released in 2023?",
    "SQL": "SELECT transcript_date FROM Transcripts WHERE YEAR(transcript_date) = 2023 ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks the release dates of student transcripts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": "2023-01-01 to 2023-12-31"
        }
      ]
    },
    "id": 1444,
    "table_name": "Transcripts"
  },
  {
    "question": "How many times at most can a course enrollment result show in different transcripts for a specific term? Also show the course enrollment id.",
    "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents WHERE term_id = '202301' GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing details of course enrollments and their corresponding transcripts.",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        }
      ],
      "measure": [
        {
          "column": "student_course_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "term_id",
          "match_type": "精确匹配",
          "condition": "202301"
        }
      ]
    },
    "id": 1445,
    "table_name": "Transcript_Contents"
  },
  {
    "question": "What is the maximum number of times that a course shows up in different transcripts for courses with an ID greater than 100 and what is that course's enrollment id?",
    "SQL": "SELECT COUNT(*), student_course_id FROM Transcript_Contents WHERE student_course_id > 100 GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing details of courses in student transcripts.",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "student_course_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1446,
    "table_name": "Transcript_Contents"
  },
  {
    "question": "How many different addresses do the students currently live in cities that contain 'ville'?",
    "SQL": "SELECT count(DISTINCT current_address_id) FROM Students WHERE city LIKE '%ville%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Students table contains information about student's transcripts and personal details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "current_address_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "ville"
        }
      ]
    },
    "id": 1447,
    "table_name": "Students"
  },
  {
    "question": "How many different addresses do the students live in?",
    "SQL": "SELECT COUNT(DISTINCT current_address_id) AS num_addresses FROM Students",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student information including their current address IDs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "current_address_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "id": 1448,
    "table_name": "Students"
  },
  {
    "question": "List all the student details where the student ID is greater than 100 in reversed lexicographical order.",
    "SQL": "SELECT other_student_details FROM Students WHERE student_id > 100 ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "other_student_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "student_id",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1449,
    "table_name": "Students"
  },
  {
    "question": "What other details can you tell me about students who have a grade higher than 85 in reverse alphabetical order?",
    "SQL": "SELECT other_student_details FROM Students WHERE grade > 85 ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于",
          "condition": "85"
        }
      ]
    },
    "id": 1450,
    "table_name": "Students"
  },
  {
    "question": "Describe sections related to h.",
    "SQL": "SELECT section_description FROM Sections WHERE section_name LIKE '%h%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "模糊匹配",
          "condition": "%h%"
        }
      ]
    },
    "table_name": "Sections",
    "id": 1451
  },
  {
    "question": "What is the description for the section named i?",
    "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'i'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing sections and their descriptions.",
    "config": {
      "dimension": [
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "精确匹配",
          "condition": "i"
        }
      ]
    },
    "table_name": "Sections",
    "id": 1452
  },
  {
    "question": "List the title of all cartoons in alphabetical order that have the word 'Adventure' in them.",
    "SQL": "SELECT Title FROM Cartoon WHERE Title LIKE '%Adventure%' ORDER BY title",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Title",
          "match_type": "模糊匹配",
          "condition": "Adventure"
        }
      ]
    },
    "id": 1453,
    "table_name": "Cartoon"
  },
  {
    "question": "What are the titles of the cartoons sorted alphabetically?",
    "SQL": "SELECT Title FROM Cartoon ORDER BY title",
    "db_id": "tvshow",
    "table_description": "The Cartoon table contains information about various cartoon shows.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 1454
  },
  {
    "question": "List all cartoons directed by 'John Smith'.",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'John Smith';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "John Smith"
        }
      ]
    },
    "id": 1455,
    "table_name": "Cartoon"
  },
  {
    "question": "What are the names of all cartoons directed by John Smith?",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'John Smith';",
    "db_id": "tvshow",
    "table_description": "Table containing information about various cartoons including their titles and directors.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "John Smith"
        }
      ]
    },
    "id": 1456,
    "table_name": "Cartoon"
  },
  {
    "question": "How many cartoons were written by someone related to \"Joseph Kuhr\"?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by LIKE '%Joseph Kuhr%';",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "模糊匹配",
          "condition": "%Joseph Kuhr%"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 1457
  },
  {
    "question": "How many cartoons are related to Joseph Kuhr's writing?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by LIKE '%Joseph Kuhr%';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "模糊匹配",
          "condition": "%Joseph Kuhr%"
        }
      ]
    },
    "id": 1458,
    "table_name": "Cartoon"
  },
  {
    "question": "list all cartoon titles and their directors that aired before 2020-01-01, ordered by their air date",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon WHERE Original_air_date < '2020-01-01' ORDER BY Original_air_date",
    "db_id": "tvshow",
    "table_description": "The table contains information about cartoons including their titles, directors, and original air dates.",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Original_air_date",
          "match_type": "绝对时间",
          "condition": "< '2020-01-01'"
        }
      ]
    },
    "id": 1459,
    "table_name": "Cartoon"
  },
  {
    "question": "What is the name and directors of all the cartoons that aired after January 1, 2020, ordered by air date?",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon WHERE Original_air_date > '2020-01-01' ORDER BY Original_air_date",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Original_air_date",
          "match_type": "绝对时间",
          "condition": "2020-01-01"
        }
      ]
    },
    "id": 1460,
    "table_name": "Cartoon"
  },
  {
    "question": "List the title of all cartoon directed by \"Ben Jones\" or containing the word \"Vietti\" in the director's name.",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by LIKE '%Vietti%';",
    "db_id": "tvshow",
    "table_description": "A table that lists information about cartoons, including their titles and directors.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Directed_by",
          "match_type": "模糊匹配",
          "condition": "%Vietti%"
        }
      ]
    },
    "id": 1461,
    "table_name": "Cartoon"
  },
  {
    "question": "What are the titles of all cartoons directed by Ben Jones or related to Brandon Vietti?",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by LIKE '%Brandon Vietti%';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Directed_by",
          "match_type": "模糊匹配",
          "condition": "%Brandon Vietti%"
        }
      ]
    },
    "id": 1462,
    "table_name": "Cartoon"
  },
  {
    "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel WHERE Country != 'Unknown' GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about various TV channels, including their country of origin.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "不等于",
          "condition": "Unknown"
        }
      ]
    },
    "id": 1463,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the country with the most number of TV Channels and how many does it have, excluding channels that are not active?",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel WHERE Status = 'Active' GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about various TV channels including their country and status.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Status",
          "match_type": "等于",
          "condition": "Active"
        }
      ]
    },
    "id": 1464,
    "table_name": "TV_Channel"
  },
  {
    "question": "List the number of different series names and contents that involve 'Drama' in the TV Channel table.",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel WHERE content LIKE '%Drama%';",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about TV shows, including series names and content types.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "content",
          "match_type": "模糊匹配",
          "condition": "Drama"
        }
      ]
    },
    "id": 1465,
    "table_name": "TV_Channel"
  },
  {
    "question": "How many different series and contents are listed in the TV Channel table, specifically for the 'Drama' genre?",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel WHERE genre = 'Drama';",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about TV shows, including their series name, content, and genre.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "genre",
          "match_type": "精确匹配",
          "condition": "Drama"
        }
      ]
    },
    "id": 1466,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the content of TV Channel with a series name related to \"Sky Radio\"?",
    "SQL": "SELECT Content FROM TV_Channel WHERE series_name LIKE \"%Sky Radio%\";",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "模糊匹配",
          "condition": "%Sky Radio%"
        }
      ]
    },
    "id": 1467,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the content of the series involving Sky Radio?",
    "SQL": "SELECT Content FROM TV_Channel WHERE series_name LIKE \"%Sky Radio%\";",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV shows and their series.",
    "config": {
      "dimension": [
        {
          "column": "Content"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "模糊匹配",
          "condition": "%Sky Radio%"
        }
      ]
    },
    "id": 1468,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the Package Option of TV Channel with serial name similar to \"Space Cable\"?",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name LIKE '%Space Cable%';",
    "db_id": "tvshow",
    "table_description": "The table TV_Channel contains information about different TV channels, including their serial names and package options.",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "模糊匹配",
          "condition": "Space Cable"
        }
      ]
    },
    "id": 1469,
    "table_name": "TV_Channel"
  },
  {
    "question": "What are the Package Options of the TV Channels whose series names contain 'Radio'?",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name LIKE \"%Radio%\";",
    "db_id": "tvshow",
    "table_description": "Table TV_Channel contains information about TV channels including their series names and package options.",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "模糊匹配",
          "condition": "Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1470
  },
  {
    "question": "How many TV Channel using language Spanish?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'Spanish';",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV channels including their languages.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "id": 1471,
    "table_name": "TV_Channel"
  },
  {
    "question": "How many TV Channels use the Spanish language?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'Spanish';",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about various TV channels including their languages.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "id": 1472,
    "table_name": "TV_Channel"
  },
  {
    "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about TV channels including their language.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "CHANNEL_ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 1473,
    "table_name": "TV_Channel"
  },
  {
    "question": "What are the languages used by the least number of TV Channels and how many channels use it, excluding English?",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV Channels including their language.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "id": 1474,
    "table_name": "TV_Channel"
  },
  {
    "question": "List each language and the number of TV Channels using it, excluding channels that use 'English'.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "table_description": "Table TV_Channel contains information about TV channels including their language.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "id": 1475,
    "table_name": "TV_Channel"
  },
  {
    "question": "For each language, list the number of TV Channels that use it, excluding those that use English.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "table_description": "Table contains information about TV channels including their languages.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "id": 1476,
    "table_name": "TV_Channel"
  },
  {
    "question": "List the Episode of all TV series with a rating greater than 7.5, sorted by rating.",
    "SQL": "SELECT Episode FROM TV_series WHERE rating > 7.5 ORDER BY rating",
    "db_id": "tvshow",
    "table_description": "Table TV_series contains information about different TV series including their episodes and ratings.",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rating",
          "match_type": "大于",
          "condition": "7.5"
        }
      ]
    },
    "id": 1477,
    "table_name": "TV_series"
  },
  {
    "question": "What are all of the episodes with a rating greater than 8.0, ordered by ratings?",
    "SQL": "SELECT Episode FROM TV_series WHERE rating > 8.0 ORDER BY rating",
    "db_id": "tvshow",
    "table_description": "Table TV_series contains information about TV show episodes and their ratings.",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "rating",
          "match_type": "大于",
          "condition": "8.0"
        }
      ]
    },
    "id": 1478,
    "table_name": "TV_series"
  },
  {
    "question": "List top 3 highest Rated TV series with a rating greater than 8.5. List the TV series's Episode and Rating.",
    "SQL": "SELECT Episode ,  Rating FROM TV_series WHERE Rating > 8.5 ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Rating",
          "match_type": "大于",
          "condition": "8.5"
        }
      ]
    },
    "id": 1479,
    "table_name": "TV_series"
  },
  {
    "question": "What are 3 most highly rated episodes in the TV series table that have a rating greater than 8.5 and what were those ratings?",
    "SQL": "SELECT Episode ,  Rating FROM TV_series WHERE Rating > 8.5 ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV series episodes.",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Rating",
          "match_type": "大于",
          "condition": "8.5"
        }
      ]
    },
    "id": 1480,
    "table_name": "TV_series"
  },
  {
    "question": "What is the minimum and maximum share of TV series with a rating greater than 7.5?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series WHERE RATING > 7.5;",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "RATING",
          "match_type": "大于",
          "condition": "7.5"
        }
      ]
    },
    "id": 1481,
    "table_name": "TV_series"
  },
  {
    "question": "What is the maximum and minimum share for the TV series with a rating higher than 6.5?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series WHERE RATING > 6.5;",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "RATING",
          "match_type": "大于",
          "condition": "6.5"
        }
      ]
    },
    "id": 1482,
    "table_name": "TV_series"
  },
  {
    "question": "What is the air date of TV series with Episode containing 'Love'?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Episode LIKE '%Love%';",
    "db_id": "tvshow",
    "table_description": "Table TV_series contains information about various TV series including their episodes and air dates.",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "模糊匹配",
          "condition": "%Love%"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1483
  },
  {
    "question": "When did the episode related to 'Lifetime' air?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Episode LIKE '%Lifetime%';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "模糊匹配",
          "condition": "Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1484
  },
  {
    "question": "What is the Weekly Rank of TV series that have Episodes related to 'A Love Story'?",
    "SQL": "SELECT MAX(Weekly_Rank) FROM TV_series WHERE Episode LIKE '%A Love Story%';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Weekly_Rank",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Episode",
          "match_type": "模糊匹配",
          "condition": "A Love Story"
        }
      ]
    },
    "id": 1485,
    "table_name": "TV_series"
  },
  {
    "question": "What is the weekly rank for the episode that involves 'Lifetime'?",
    "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode LIKE \"%Lifetime%\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Weekly_Rank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "模糊匹配",
          "condition": "Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1486
  },
  {
    "question": "Find the number of cartoons directed by each of the listed directors, excluding those directed by John Smith.",
    "SQL": "SELECT count(*), Directed_by FROM cartoon WHERE Directed_by != 'John Smith' GROUP BY Directed_by",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "不等于",
          "condition": "John Smith"
        }
      ]
    },
    "id": 1487,
    "table_name": "cartoon"
  },
  {
    "question": "How many cartoons did each director create in the last month?",
    "SQL": "SELECT count(*) ,  Directed_by FROM cartoon WHERE Date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH) GROUP BY Directed_by",
    "db_id": "tvshow",
    "table_description": "Table 'cartoon' contains information about various cartoons, including their creation date and the director.",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date",
          "match_type": "绝对时间",
          "condition": "['2023-08-01', '2023-09-01']"
        }
      ]
    },
    "id": 1488,
    "table_name": "cartoon"
  },
  {
    "question": "Find the production code and channel of the most recently aired cartoon from ABC channel.",
    "SQL": "select production_code ,  channel from cartoon where channel = 'ABC' order by original_air_date desc limit 1",
    "db_id": "tvshow",
    "table_description": "Table containing information about cartoons including their production codes, channels, and air dates.",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "channel",
          "match_type": "精确匹配",
          "condition": "ABC"
        }
      ]
    },
    "id": 1489,
    "table_name": "cartoon"
  },
  {
    "question": "What is the production code and channel of the most recent cartoon aired yesterday?",
    "SQL": "select production_code ,  channel from cartoon where original_air_date = date('now', '-1 day') order by original_air_date desc limit 1",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "original_air_date",
          "match_type": "relative_time",
          "condition": "yesterday"
        }
      ]
    },
    "table_name": "cartoon",
    "id": 1490
  },
  {
    "question": "Find the package choice and series name of the TV channel that has standard definition TV.",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'no'",
    "db_id": "tvshow",
    "table_description": "This table contains information about TV channels, including their package options, series names, and whether they offer high-definition TV.",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hight_definition_TV",
          "match_type": "精确匹配",
          "condition": "no"
        }
      ]
    },
    "id": 1491,
    "table_name": "TV_Channel"
  },
  {
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV with a premium package?",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  'yes' AND package_option  =  'premium'",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about different TV channels, including whether they support high definition TV, the series names, and package options.",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hight_definition_TV",
          "match_type": "精确匹配",
          "condition": "yes"
        },
        {
          "column": "package_option",
          "match_type": "精确匹配",
          "condition": "premium"
        }
      ]
    },
    "id": 1492,
    "table_name": "TV_Channel"
  },
  {
    "question": "find the pixel aspect ratio and nation of the tv channels that use French.",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE = 'French'",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV channels including their language, pixel aspect ratio, and country.",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "等于",
          "condition": "French"
        }
      ]
    },
    "id": 1493,
    "table_name": "tv_channel"
  },
  {
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that use French?",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE = 'French'",
    "db_id": "tvshow",
    "table_description": "The table 'tv_channel' contains information about various TV channels including their language, pixel aspect ratio, and country of origin.",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "等于",
          "condition": "French"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 1494
  },
  {
    "question": "find id of the tv channels that from the countries where have more than three tv channels.",
    "SQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  3",
    "db_id": "tvshow",
    "table_description": "Table contains information about TV channels including their IDs and the countries they are from.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "id": 1495,
    "table_name": "tv_channel"
  },
  {
    "question": "What are the ids of all tv channels that have more than 3 TV channels?",
    "SQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  3",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "id": 1496,
    "table_name": "tv_channel"
  },
  {
    "question": "How many poker players have a rank higher than 50?",
    "SQL": "SELECT count(*) FROM poker_player WHERE rank > 50",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players including their ID, name, and rank.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "rank",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1497,
    "table_name": "poker_player"
  },
  {
    "question": "Count the number of poker players who have a rank of 'pro'.",
    "SQL": "SELECT count(*) FROM poker_player WHERE rank = 'pro'",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "rank",
          "match_type": "精确匹配",
          "condition": "pro"
        }
      ]
    },
    "id": 1498,
    "table_name": "poker_player"
  },
  {
    "question": "List the earnings of poker players with earnings greater than 50000 in descending order.",
    "SQL": "SELECT Earnings FROM poker_player WHERE Earnings > 50000 ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "table_description": "Table containing information about poker players including their earnings.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1499,
    "table_name": "poker_player"
  },
  {
    "question": "What are the earnings of poker players with more than 10 wins, ordered descending by value?",
    "SQL": "SELECT Earnings FROM poker_player WHERE Wins > 10 ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "table_description": "Table containing information about poker players including their earnings and number of wins.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Wins",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1500,
    "table_name": "poker_player"
  },
  {
    "question": "List the final tables made and the best finishes of poker players who have at least one tournament win.",
    "SQL": "SELECT Final_Table_Made ,  MAX(Best_Finish) FROM poker_player WHERE Tournament_Wins > 0 GROUP BY Final_Table_Made",
    "db_id": "poker_player",
    "table_description": "Table containing information about poker players including their final tables made, best finishes, and tournament wins.",
    "config": {
      "dimension": [
        {
          "column": "Final_Table_Made"
        }
      ],
      "measure": [
        {
          "column": "Best_Finish",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Tournament_Wins",
          "match_type": "大于",
          "condition": "0"
        }
      ]
    },
    "id": 1501,
    "table_name": "poker_player"
  },
  {
    "question": "What are the final tables made and best finishes for all poker players with at least one final table made?",
    "SQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player WHERE Final_Table_Made >= 1",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Final_Table_Made"
        },
        {
          "column": "Best_Finish"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Final_Table_Made",
          "match_type": "大于等于",
          "condition": "1"
        }
      ]
    },
    "id": 1502,
    "table_name": "poker_player"
  },
  {
    "question": "What is the average earnings of poker players who have earnings greater than 10000?",
    "SQL": "SELECT avg(Earnings) FROM poker_player WHERE Earnings > 10000",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players and their earnings.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "id": 1503,
    "table_name": "poker_player"
  },
  {
    "question": "Return the average earnings of poker players with earnings greater than 50000.",
    "SQL": "SELECT avg(Earnings) FROM poker_player WHERE Earnings > 50000",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players and their earnings.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "50000"
        }
      ]
    },
    "id": 1504,
    "table_name": "poker_player"
  },
  {
    "question": "What is the money rank of the poker player who earned more than $100,000?",
    "SQL": "SELECT Money_Rank FROM poker_player WHERE Earnings > 100000",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Money_Rank"
        }
      ],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "100000"
        }
      ]
    },
    "id": 1505,
    "table_name": "poker_player"
  },
  {
    "question": "Return the money rank of the player whose earnings are greater than 1000000.",
    "SQL": "SELECT Money_Rank FROM poker_player WHERE Earnings > 1000000",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Money_Rank"
        }
      ],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1506,
    "table_name": "poker_player"
  },
  {
    "question": "What is the maximum number of final tables made among poker players with earnings not equal to 250000?",
    "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings <> 250000",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players including their earnings and the number of final tables they have made.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Final_Table_Made",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "不等于",
          "condition": "250000"
        }
      ]
    },
    "id": 1507,
    "table_name": "poker_player"
  },
  {
    "question": "Return the maximum final tables made across all poker players who have earnings below 150000.",
    "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  150000",
    "db_id": "poker_player",
    "table_description": "The poker_player table contains information about poker players including their earnings and final tables made.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Final_Table_Made",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "小于",
          "condition": "150000"
        }
      ]
    },
    "id": 1508,
    "table_name": "poker_player"
  },
  {
    "question": "What are different nationalities of people and the corresponding number of people from each nation, excluding those from China?",
    "SQL": "SELECT Nationality ,  COUNT(*) FROM people WHERE Nationality != 'China' GROUP BY Nationality",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "China"
        }
      ]
    },
    "id": 1509,
    "table_name": "people"
  },
  {
    "question": "How many people are there of each nationality from China and USA?",
    "SQL": "SELECT Nationality ,  COUNT(*) FROM people WHERE Nationality IN ('China', 'USA') GROUP BY Nationality",
    "db_id": "poker_player",
    "table_description": "The people table contains information about individuals, including their nationality.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "精确匹配",
          "condition": "IN ('China', 'USA')"
        }
      ]
    },
    "id": 1510,
    "table_name": "people"
  },
  {
    "question": "What is the most common nationality of people who are not from the United States?",
    "SQL": "SELECT Nationality FROM people WHERE Nationality != 'United States' GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "poker_player",
    "table_description": "The people table contains information about poker players, including their nationality.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "United States"
        }
      ]
    },
    "id": 1511,
    "table_name": "people"
  },
  {
    "question": "Give the nationality that is most common among people with a height greater than 180cm.",
    "SQL": "SELECT Nationality FROM people WHERE Height > 180 GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "poker_player",
    "table_description": "The 'people' table contains information about individuals, including their nationality and height.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Height",
          "match_type": "大于",
          "condition": "180"
        }
      ]
    },
    "id": 1512,
    "table_name": "people"
  },
  {
    "question": "What are the nationalities that are shared by at least three people?",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  3",
    "db_id": "poker_player",
    "table_description": "The 'people' table contains information about individuals, including their nationality.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1513,
    "table_name": "people"
  },
  {
    "question": "Return the nationalities for which there are three or more people.",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  3",
    "db_id": "poker_player",
    "table_description": "The 'people' table contains information about individuals including their nationality.",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1514,
    "table_name": "people"
  },
  {
    "question": "List the names and birth dates of people born before 1980 in ascending alphabetical order of name.",
    "SQL": "SELECT Name ,  Birth_Date FROM people WHERE Birth_Date < '1980-01-01' ORDER BY Name ASC",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Birth_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Date",
          "match_type": "绝对时间",
          "condition": "< '1980-01-01'"
        }
      ]
    },
    "id": 1515,
    "table_name": "people"
  },
  {
    "question": "What are the names and birth dates of people born before January 1, 1980, ordered by their names in alphabetical order?",
    "SQL": "SELECT Name ,  Birth_Date FROM people WHERE Birth_Date < '1980-01-01' ORDER BY Name ASC",
    "db_id": "poker_player",
    "table_description": "Table containing information about people including their names and birth dates.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Birth_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Date",
          "match_type": "绝对时间",
          "condition": "1980-01-01"
        }
      ]
    },
    "id": 1516,
    "table_name": "people"
  },
  {
    "question": "Show names of people whose nationality is not related to 'Russian'.",
    "SQL": "SELECT Name FROM people WHERE Nationality NOT LIKE '%Russian%'",
    "db_id": "poker_player",
    "table_description": "Table 'people' contains information about individuals including their names and nationalities.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "模糊匹配",
          "condition": "Russian"
        }
      ]
    },
    "id": 1517,
    "table_name": "people"
  },
  {
    "question": "What are the names of people who are not from China?",
    "SQL": "SELECT Name FROM people WHERE Nationality != 'China'",
    "db_id": "poker_player",
    "table_description": "This table contains information about poker players including their names and nationalities.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "China"
        }
      ]
    },
    "id": 1518,
    "table_name": "people"
  },
  {
    "question": "How many distinct nationalities are there for players with an age greater than 30?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM people WHERE Age > 30",
    "db_id": "poker_player",
    "table_description": "The 'people' table contains information about poker players including their nationality and age.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1519,
    "table_name": "people"
  },
  {
    "question": "Count the number of different nationalities excluding players from China.",
    "SQL": "SELECT count(DISTINCT Nationality) FROM people WHERE Nationality != 'China'",
    "db_id": "poker_player",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "China"
        }
      ]
    },
    "id": 1520,
    "table_name": "people"
  },
  {
    "question": "How many states are there?",
    "SQL": "SELECT count(*) FROM area_code_state",
    "db_id": "voter_1",
    "table_description": "Table 'area_code_state' contains information about area codes and their corresponding states.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 1521,
    "table_name": "area_code_state"
  },
  {
    "question": "List the contestant numbers and names where the contestant number is greater than 100, ordered by contestant name descending.",
    "SQL": "SELECT contestant_number ,  contestant_name FROM contestants WHERE contestant_number > 100 ORDER BY contestant_name DESC",
    "db_id": "voter_1",
    "table_description": "Table containing information about contestants including their numbers and names.",
    "config": {
      "dimension": [
        {
          "column": "contestant_number"
        },
        {
          "column": "contestant_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "contestant_number",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1522,
    "table_name": "contestants"
  },
  {
    "question": "List the vote ids, phone numbers and states of all votes from Texas.",
    "SQL": "SELECT vote_id ,  phone_number ,  state FROM votes WHERE state = 'Texas'",
    "db_id": "voter_1",
    "table_description": "The votes table contains information about votes, including vote_id, phone_number, and state.",
    "config": {
      "dimension": [
        {
          "column": "vote_id"
        },
        {
          "column": "phone_number"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Texas"
        }
      ]
    },
    "id": 1523,
    "table_name": "votes"
  },
  {
    "question": "What are the maximum and minimum values of area codes for the state of California?",
    "SQL": "SELECT max(area_code) ,  min(area_code) FROM area_code_state WHERE state = 'California'",
    "db_id": "voter_1",
    "table_description": "Table contains area code and corresponding state information.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "area_code",
          "aggregate_function": "max"
        },
        {
          "column": "area_code",
          "aggregate_function": "min"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "California"
        }
      ]
    },
    "id": 1524,
    "table_name": "area_code_state"
  },
  {
    "question": "What is the last date created of votes from states that contain 'C'?",
    "SQL": "SELECT max(created) FROM votes WHERE state LIKE '%C%'",
    "db_id": "voter_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "created",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "模糊匹配",
          "condition": "%C%"
        }
      ]
    },
    "id": 1525,
    "table_name": "votes"
  },
  {
    "question": "What are the names of the contestants whose names do not contain 'Alloway'",
    "SQL": "SELECT contestant_name FROM contestants WHERE contestant_name NOT LIKE '%Alloway%'",
    "db_id": "voter_1",
    "table_description": "Table containing contestant information",
    "config": {
      "dimension": [
        {
          "column": "contestant_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "contestant_name",
          "match_type": "模糊匹配",
          "condition": "Alloway"
        }
      ]
    },
    "id": 1526,
    "table_name": "contestants"
  },
  {
    "question": "What are the distinct states and create time of all votes created after '2023-01-01'?",
    "SQL": "SELECT DISTINCT state ,  created FROM votes WHERE created > '2023-01-01'",
    "db_id": "voter_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "state"
        },
        {
          "column": "created"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "created",
          "match_type": "绝对时间",
          "condition": "2023-01-01"
        }
      ]
    },
    "id": 1527,
    "table_name": "votes"
  },
  {
    "question": "What are the number of votes from state 'NY' or 'TX'?",
    "SQL": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'TX'",
    "db_id": "voter_1",
    "table_description": "The table contains information about votes including the state where the vote was cast.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "等于",
          "condition": "NY"
        },
        {
          "column": "state",
          "match_type": "等于",
          "condition": "TX"
        }
      ]
    },
    "id": 1528,
    "table_name": "votes"
  },
  {
    "question": "What are the names of all the countries that became independent after 1960?",
    "SQL": "SELECT Name FROM country WHERE IndepYear  >  1960",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about various countries including their name, independence year, and other details.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "IndepYear",
          "match_type": "大于",
          "condition": "1960"
        }
      ]
    },
    "id": 1529,
    "table_name": "country"
  },
  {
    "question": "Give the names of the nations that were founded after 1960.",
    "SQL": "SELECT Name FROM country WHERE IndepYear  >  1960",
    "db_id": "world_1",
    "table_description": "The country table contains information about different countries including their names and the year they gained independence.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "IndepYear",
          "match_type": "大于",
          "condition": "1960"
        }
      ]
    },
    "id": 1530,
    "table_name": "country"
  },
  {
    "question": "How many countries have a constitutional monarchy as their form of government?",
    "SQL": "SELECT count(*) FROM country WHERE GovernmentForm = 'Constitutional Monarchy'",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, government forms, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Constitutional Monarchy"
        }
      ]
    },
    "id": 1531,
    "table_name": "country"
  },
  {
    "question": "How many countries have governments that are constitutional monarchies?",
    "SQL": "SELECT count(*) FROM country WHERE GovernmentForm  =  'Constitutional Monarchy'",
    "db_id": "world_1",
    "table_description": "The table contains information about countries, including their names, government forms, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Constitutional Monarchy"
        }
      ]
    },
    "table_name": "country",
    "id": 1532
  },
  {
    "question": "What is the total surface area of the countries in the North America region?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'North America'",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, regions, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "North America"
        }
      ]
    },
    "table_name": "country",
    "id": 1533
  },
  {
    "question": "How much surface area do the countries in Central America and the Carribean cover together?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Central America and the Caribbean'",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, regions, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Central America and the Caribbean"
        }
      ]
    },
    "id": 1534,
    "table_name": "country"
  },
  {
    "question": "Which continent is Antigua and Barbuda in?",
    "SQL": "SELECT Continent FROM country WHERE Name = 'Antigua and Barbuda'",
    "db_id": "world_1",
    "table_description": "The country table contains information about countries including their names and continents.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Antigua and Barbuda"
        }
      ]
    },
    "id": 1535,
    "table_name": "country"
  },
  {
    "question": "What is the continent name which Antigua and Barbuda belongs to?",
    "SQL": "SELECT Continent FROM country WHERE Name  =  'Antigua and Barbuda'",
    "db_id": "world_1",
    "table_description": "The country table contains information about different countries including their names and continents.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Antigua and Barbuda"
        }
      ]
    },
    "id": 1536,
    "table_name": "country"
  },
  {
    "question": "What are the population and life expectancies for countries that include 'Bra' in their name?",
    "SQL": "SELECT SUM(Population) ,  AVG(LifeExpectancy) FROM country WHERE Name LIKE '%Bra%'",
    "db_id": "world_1",
    "table_description": "Table containing country information including name, population, and life expectancy.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "模糊匹配",
          "condition": "%Bra%"
        }
      ]
    },
    "id": 1537,
    "table_name": "country"
  },
  {
    "question": "Give me Brazil’s population and average life expectancy.",
    "SQL": "SELECT SUM(Population) AS Total_Population, AVG(LifeExpectancy) AS Average_LifeExpectancy FROM country WHERE Name  =  'Brazil'",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about countries including their names, populations, and life expectancies.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Brazil"
        }
      ]
    },
    "id": 1538,
    "table_name": "country"
  },
  {
    "question": "What are the region and population of Zimbabwe?",
    "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  'Zimbabwe'",
    "db_id": "world_1",
    "table_description": "The table contains information about countries including their name, region, and population.",
    "config": {
      "dimension": [
        {
          "column": "Region"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Zimbabwe"
        }
      ]
    },
    "id": 1539,
    "table_name": "country"
  },
  {
    "question": "What region does Angola belong to and what is its population?",
    "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  'Angola'",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their names, regions, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Region"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Angola"
        }
      ]
    },
    "id": 1540,
    "table_name": "country"
  },
  {
    "question": "What is the average expected life expectancy for countries in the region related to Western Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region LIKE '%Western Africa%'",
    "db_id": "world_1",
    "table_description": "Contains information about countries including their names, regions, and life expectancy.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "模糊匹配",
          "condition": "%Western Africa%"
        }
      ]
    },
    "id": 1541,
    "table_name": "country"
  },
  {
    "question": "What is the average life expectancy of people in Western Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Western Africa'",
    "db_id": "world_1",
    "table_description": "Table contains data about countries including their regions and life expectancy.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Western Africa"
        }
      ]
    },
    "id": 1542,
    "table_name": "country"
  },
  {
    "question": "What is the name of the country that has the shortest life expectancy in Africa?",
    "SQL": "SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy LIMIT 1",
    "db_id": "world_1",
    "table_description": "This table contains information about countries including their names, continents, and life expectancies.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "id": 1543,
    "table_name": "country"
  },
  {
    "question": "Give the name of the country in Europe with the lowest life expectancy.",
    "SQL": "SELECT Name FROM country WHERE Continent  =  'Europe' ORDER BY LifeExpectancy LIMIT 1",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about countries including their names, continents, and life expectancies.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        }
      ]
    },
    "id": 1544,
    "table_name": "country"
  },
  {
    "question": "What is the total population and maximum GNP in countries where the name contains 'stan' in Asia?",
    "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia' AND Name LIKE '%stan%'",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their names, populations, GNPs, and continents.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "GNP",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Name",
          "match_type": "模糊匹配",
          "condition": "%stan%"
        }
      ]
    },
    "id": 1545,
    "table_name": "country"
  },
  {
    "question": "How many people live in Asia, and what is the largest GNP among them, excluding countries with a GNP less than 10000?",
    "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia' AND GNP > 10000",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "GNP",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "GNP",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "id": 1546,
    "table_name": "country"
  },
  {
    "question": "What is the average life expectancy in African countries that have a government form related to a monarchy?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  LIKE  '%Monarchy%'",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "GovernmentForm",
          "match_type": "模糊匹配",
          "condition": "%Monarchy%"
        }
      ]
    },
    "id": 1547,
    "table_name": "country"
  },
  {
    "question": "Give the average life expectancy for countries in Africa which have a government form related to republics?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm LIKE '%Republic%'",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their names, continents, government forms, and life expectancies.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "GovernmentForm",
          "match_type": "模糊匹配",
          "condition": "%Republic%"
        }
      ]
    },
    "id": 1548,
    "table_name": "country"
  },
  {
    "question": "What is the total surface area of the continents Asia and North America?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"North America\"",
    "db_id": "world_1",
    "table_description": "The table contains information about different countries, including their names, continents, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "North America"
        }
      ]
    },
    "id": 1549,
    "table_name": "country"
  },
  {
    "question": "Give the total surface area covered by countries in Asia or Africa.",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Africa\"",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, continents, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "id": 1550,
    "table_name": "country"
  },
  {
    "question": "How many people live in Utrecht district?",
    "SQL": "SELECT sum(Population) FROM city WHERE District  =  \"Utrecht\"",
    "db_id": "world_1",
    "table_description": "This table contains information about different cities including the name, district, population, etc.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "District",
          "match_type": "精确匹配",
          "condition": "Utrecht"
        }
      ]
    },
    "table_name": "city",
    "id": 1551
  },
  {
    "question": "What is the total population of cities where the district name contains 'land'?",
    "SQL": "SELECT sum(Population) FROM city WHERE District LIKE '%land%'",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "District",
          "match_type": "模糊匹配",
          "condition": "%land%"
        }
      ]
    },
    "id": 1552,
    "table_name": "city"
  },
  {
    "question": "What is the average GNP and total population in all nations whose government form involves a commonwealth or territory of the United States?",
    "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  LIKE  '%Commonwealth%' OR GovernmentForm  LIKE  '%US Territory%'",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their government forms, GNP, and population.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GNP",
          "aggregate_function": "AVG"
        },
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "模糊匹配",
          "condition": "%Commonwealth%"
        },
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "US Territory"
        }
      ]
    },
    "id": 1553,
    "table_name": "country"
  },
  {
    "question": "Give the mean GNP and total population of nations which are related to US territory.",
    "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  LIKE  '%US Territory%'",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GNP",
          "aggregate_function": "AVG"
        },
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "模糊匹配",
          "condition": "%US Territory%"
        }
      ]
    },
    "id": 1554,
    "table_name": "country"
  },
  {
    "question": "How many unique languages are spoken in countries with a population greater than 1 million?",
    "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage WHERE Population > 1000000",
    "db_id": "world_1",
    "table_description": "The countrylanguage table contains information about the languages spoken in different countries and their populations.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LANGUAGE",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1555,
    "table_name": "countrylanguage"
  },
  {
    "question": "What is the number of distinct languages used around the world that are spoken by more than 10% of the population?",
    "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage WHERE Percentage > 0.1",
    "db_id": "world_1",
    "table_description": "The countrylanguage table contains information about the languages spoken in different countries and the percentage of the population that speaks each language.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LANGUAGE",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Percentage",
          "match_type": "大于",
          "condition": "0.1"
        }
      ]
    },
    "id": 1556,
    "table_name": "countrylanguage"
  },
  {
    "question": "How many types of governments are there in countries with a population greater than 10 million in Africa?",
    "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa' AND Population > 10000000",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their government form and population.",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "GovernmentForm",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1557,
    "table_name": "country"
  },
  {
    "question": "How many different forms of governments are there in Asia?",
    "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Asia'",
    "db_id": "world_1",
    "table_description": "The table contains information about countries including their names, government forms, and continents.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GovernmentForm",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "id": 1558,
    "table_name": "country"
  },
  {
    "question": "Find the name, population and expected life length of asian country with the largest population?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY Population DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "country table contains information about countries including their names, populations, life expectancies, and continents.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "id": 1559,
    "table_name": "country"
  },
  {
    "question": "What are the name, population, and life expectancy of the largest African country by land?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Africa' ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "Table 'country' contains information about countries including their names, populations, life expectancies, continents, and surface areas.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "id": 1560,
    "table_name": "country"
  },
  {
    "question": "What are the countries that have a larger surface area than the smallest country in Europe?",
    "SQL": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = 'Europe')",
    "db_id": "world_1",
    "table_description": "The table contains information about countries including their names, continents, and surface areas.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "(SELECT min(SurfaceArea) FROM country WHERE Continent = 'Europe')"
        }
      ]
    },
    "id": 1561,
    "table_name": "country"
  },
  {
    "question": "Which countries have a larger area than the smallest country in Europe?",
    "SQL": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')",
    "db_id": "world_1",
    "table_description": "This table contains information about countries including their names, continents, and surface areas.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "(SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe')"
        }
      ]
    },
    "id": 1562,
    "table_name": "country"
  },
  {
    "question": "What are the African countries that have a population less than the maximum population of any country in Asia?",
    "SQL": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < (SELECT MAX(population) FROM country WHERE Continent = 'Asia')",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their names, continents, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "population",
          "match_type": "小于",
          "condition": "(SELECT MAX(population) FROM country WHERE Continent = 'Asia')"
        }
      ]
    },
    "id": 1563,
    "table_name": "country"
  },
  {
    "question": "Which African countries have a population less than the smallest population of any country in Asia?",
    "SQL": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
    "db_id": "world_1",
    "table_description": "Table containing country information including name, continent, and population.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "population",
          "match_type": "小于",
          "condition": "(SELECT min(population) FROM country WHERE Continent = 'Asia')"
        }
      ]
    },
    "id": 1564,
    "table_name": "country"
  },
  {
    "question": "Which Asian countries have a population greater than the maximum population of a specific African country?",
    "SQL": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT population FROM country WHERE Continent = 'Africa' AND Name = 'Nigeria')",
    "db_id": "world_1",
    "table_description": "Table containing country information including name, continent, and population.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "population",
          "match_type": "大于",
          "condition": "(SELECT population FROM country WHERE Continent = 'Africa' AND Name = 'Nigeria')"
        }
      ]
    },
    "id": 1565,
    "table_name": "country"
  },
  {
    "question": "What are the Asian countries which have a population larger than 10 million?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  10000000",
    "db_id": "world_1",
    "table_description": "A table containing information about countries including their names, continents, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1566,
    "table_name": "country"
  },
  {
    "question": "What are the country codes for countries that do not speak French?",
    "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'French'",
    "db_id": "world_1",
    "table_description": "This table contains information about languages spoken in different countries including the country code and the language.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "French"
        }
      ]
    },
    "id": 1567,
    "table_name": "countrylanguage"
  },
  {
    "question": "Return the country codes for countries that do not speak Spanish.",
    "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'Spanish'",
    "db_id": "world_1",
    "table_description": "This table contains information about languages spoken in different countries, including the country code and the language name.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "id": 1568,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the country codes of countries where people use languages that include Chinese?",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE LIKE '%Chinese%'",
    "db_id": "world_1",
    "table_description": "Table 'countrylanguage' contains information about the languages spoken in different countries.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "模糊匹配",
          "condition": "Chinese"
        }
      ]
    },
    "id": 1569,
    "table_name": "countrylanguage"
  },
  {
    "question": "Give the country codes for countries in which people speak languages that include French.",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE LIKE '%French%'",
    "db_id": "world_1",
    "table_description": "countrylanguage table includes columns: CountryCode, Language, IsOfficial, Percentage",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "模糊匹配",
          "condition": "French"
        }
      ]
    },
    "id": 1570,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the name, independence year, and surface area of the country with the largest population?",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their names, independence years, surface areas, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "IndepYear"
        },
        {
          "column": "SurfaceArea"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "country",
    "id": 1571
  },
  {
    "question": "Give the name, year of independence, and surface area of the country that has a population less than 100000.",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country WHERE Population < 100000",
    "db_id": "world_1",
    "table_description": "The country table contains information about different countries including their names, surface areas, years of independence, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "SurfaceArea"
        },
        {
          "column": "IndepYear"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "小于",
          "condition": "100000"
        }
      ]
    },
    "id": 1572,
    "table_name": "country"
  },
  {
    "question": "What are the population, name and leader of the country with the largest area that is not a monarchy?",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country WHERE Government != 'Monarchy' ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Government",
          "match_type": "不等于",
          "condition": "Monarchy"
        }
      ]
    },
    "id": 1573,
    "table_name": "country"
  },
  {
    "question": "Give the name, population, and head of state for the country that has a surface area greater than 10,000,000.",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country WHERE SurfaceArea > 10000000",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their names, populations, heads of state, and surface areas.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "population"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1574,
    "table_name": "country"
  },
  {
    "question": "Find the number of cities in each district whose population is greater than or equal to the average population of cities?",
    "SQL": "SELECT count(*) ,  District FROM city WHERE Population  >=  (SELECT avg(Population) FROM city) GROUP BY District",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于等于",
          "condition": "(SELECT avg(Population) FROM city)"
        }
      ]
    },
    "table_name": "city",
    "id": 1575
  },
  {
    "question": "How many cities in each district have a population greater than 1 million?",
    "SQL": "SELECT count(*),  District FROM city WHERE Population  >  1000000 GROUP BY District",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "table_name": "city",
    "id": 1576
  },
  {
    "question": "Find the government form name and total population for each government form whose average life expectancy is greater than or equal to 72.",
    "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >=  72",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their government form, population, and life expectancy.",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于等于",
          "condition": "72"
        }
      ]
    },
    "id": 1577,
    "table_name": "country"
  },
  {
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than or equal to 72?",
    "SQL": "SELECT SUM(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy)  >=  72",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries including their government form, population, and life expectancy.",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于等于",
          "condition": "72"
        }
      ]
    },
    "id": 1578,
    "table_name": "country"
  },
  {
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 75?",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  75",
    "db_id": "world_1",
    "table_description": "This table contains information about countries including their names, continents, populations, and life expectancies.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "AVG",
          "condition": "< 75"
        }
      ]
    },
    "table_name": "country",
    "id": 1579
  },
  {
    "question": "What are the different continents and the total population and average life expectancy corresponding to each, for continents that have an average life expectancy less than 75?",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  75",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about different countries including their continent, population, and life expectancy.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "AVG",
          "condition": "< 75"
        }
      ]
    },
    "id": 1580,
    "table_name": "country"
  },
  {
    "question": "What are the names and areas of countries with an area larger than 500,000 square kilometers?",
    "SQL": "SELECT Name ,  SurfaceArea FROM country WHERE SurfaceArea > 500000",
    "db_id": "world_1",
    "table_description": "Table 'country' contains information about different countries including their names, surface areas, and other details.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "500000"
        }
      ]
    },
    "id": 1581,
    "table_name": "country"
  },
  {
    "question": "Return the names and surface areas of the 5 largest countries with a population greater than 10 million.",
    "SQL": "SELECT Name ,  SurfaceArea FROM country WHERE Population > 10000000 ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about countries including their names, surface areas, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1582,
    "table_name": "country"
  },
  {
    "question": "What are names of countries with the top 3 largest population where the surface area is greater than 500000?",
    "SQL": "SELECT Name FROM country WHERE SurfaceArea > 500000 ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their name, population, and surface area.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "500000"
        }
      ]
    },
    "id": 1583,
    "table_name": "country"
  },
  {
    "question": "Return the names of the 3 most populated countries where the population is greater than 100 million.",
    "SQL": "SELECT Name FROM country WHERE Population > 100000000 ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about different countries including their names and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "100000000"
        }
      ]
    },
    "id": 1584,
    "table_name": "country"
  },
  {
    "question": "What are the names of the nations with a population less than 1000000?",
    "SQL": "SELECT Name FROM country WHERE Population < 1000000",
    "db_id": "world_1",
    "table_description": "Table 'country' contains information about different countries including their names and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "小于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1585,
    "table_name": "country"
  },
  {
    "question": "Return the names of the 3 countries with the fewest people where the population is greater than 1 million.",
    "SQL": "SELECT Name FROM country WHERE Population > 1000000 ORDER BY Population ASC LIMIT 3",
    "db_id": "world_1",
    "table_description": "The 'country' table contains information about different countries including their names and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1586,
    "table_name": "country"
  },
  {
    "question": "how many countries are related to Asia?",
    "SQL": "SELECT count(*) FROM country WHERE continent LIKE '%Asia%'",
    "db_id": "world_1",
    "table_description": "Table contains information about different countries including their names, populations, and the continents they belong to.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "模糊匹配",
          "condition": "%Asia%"
        }
      ]
    },
    "table_name": "country",
    "id": 1587
  },
  {
    "question": "Count the number of countries where the name contains 'a' in Asia.",
    "SQL": "SELECT count(*) FROM country WHERE continent = 'Asia' AND name LIKE '%a%'",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "%a%"
        }
      ]
    },
    "id": 1588,
    "table_name": "country"
  },
  {
    "question": "What are the names of the countries that are in the continent of Europe and have a population greater than 80000?",
    "SQL": "SELECT Name FROM country WHERE continent  =  'Europe' AND Population  >  '80000'",
    "db_id": "world_1",
    "table_description": "The country table contains information about different countries including their names, continents, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "80000"
        }
      ]
    },
    "id": 1589,
    "table_name": "country"
  },
  {
    "question": "Give the names of countries that are in Europe and have a population greater than 80000.",
    "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  >  \"80000\"",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their name, continent, and population.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "80000"
        }
      ]
    },
    "id": 1590,
    "table_name": "country"
  },
  {
    "question": "What is the total population and average area of countries in the continent of North America whose area is greater than 5000?",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  5000",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their names, continents, populations, and surface areas.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "north america"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "id": 1591,
    "table_name": "country"
  },
  {
    "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3500 .",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  'north america' and surfacearea  >  3500",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about different countries, including their names, populations, surface areas, and continents.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "north america"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "3500"
        }
      ]
    },
    "id": 1592,
    "table_name": "country"
  },
  {
    "question": "What are the cities whose population is between 180000 and 850000?",
    "SQL": "SELECT name FROM city WHERE Population BETWEEN 180000 AND 850000",
    "db_id": "world_1",
    "table_description": "Table 'city' contains information about different cities including their names and populations.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "在区间",
          "condition": [
            180000,
            850000
          ]
        }
      ]
    },
    "id": 1593,
    "table_name": "city"
  },
  {
    "question": "Return the names of cities that have a population between 200000 and 850000.",
    "SQL": "select name from city where population between 200000 and 850000",
    "db_id": "world_1",
    "table_description": "城市表，包含城市名称、人口等信息",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "population",
          "match_type": "在区间",
          "condition": [
            200000,
            850000
          ]
        }
      ]
    },
    "id": 1594,
    "table_name": "city"
  },
  {
    "question": "Which language is spoken by the largest number of countries?",
    "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "Table 'countrylanguage' contains information about languages spoken in different countries, including the language name and the percentage of people who speak it.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "PERCENTAGE",
          "match_type": "大于",
          "condition": "0.1"
        }
      ]
    },
    "id": 1595,
    "table_name": "countrylanguage"
  },
  {
    "question": "Give the language that is spoken in more than 10 countries.",
    "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE HAVING COUNT(*) > 10 ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "The table 'countrylanguage' contains information about languages spoken in different countries, including the language name and the percentage of speakers.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1596,
    "table_name": "countrylanguage"
  },
  {
    "question": "What is the official language spoken by the largest percentage of people in each country?",
    "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "Table containing language information for countries",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "IsOfficial",
          "match_type": "等于",
          "condition": "T"
        }
      ]
    },
    "id": 1597,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the country codes of the different countries, and what are the languages spoken by more than 50% of the population for each?",
    "SQL": "SELECT LANGUAGE, CountryCode, max(Percentage) FROM countrylanguage WHERE Percentage > 50 GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "The table 'countrylanguage' contains information about the languages spoken in different countries, including the country code, language, and the percentage of the population that speaks it.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Percentage",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1598,
    "table_name": "countrylanguage"
  },
  {
    "question": "What is the total number of countries where French is spoken by the largest percentage of people?",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'French' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "Table containing language information for each country, including the language name and the percentage of people who speak it.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        },
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "French"
        }
      ]
    },
    "id": 1599,
    "table_name": "countrylanguage"
  },
  {
    "question": "Count the number of countries for which English is the predominantly spoken language.",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'English' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "This table contains information about the languages spoken in different countries, including the percentage of the population that speaks each language.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Percentage",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1600
  },
  {
    "question": "What are the codes of countries where English is spoken by the largest percentage of people?",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'English' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "The countrylanguage table contains information about languages spoken in different countries including the language name, the country code, and the percentage of the population that speaks the language.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "id": 1601,
    "table_name": "countrylanguage"
  },
  {
    "question": "Return the codes of countries for which French is the predominantly spoken language.",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'French' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "This table contains information about languages spoken in different countries, including the country code, language name, and percentage of speakers.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "French"
        }
      ]
    },
    "id": 1602,
    "table_name": "countrylanguage"
  },
  {
    "question": "How many conductors are there?",
    "SQL": "SELECT count(*) FROM conductor",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 1603,
    "table_name": "conductor"
  },
  {
    "question": "Count the number of conductors who have been active since 2020.",
    "SQL": "SELECT count(*) FROM conductor WHERE active_since >= '2020-01-01'",
    "db_id": "orchestra",
    "table_description": "The conductor table contains information about orchestra conductors, including their ID, name, and the date they became active (active_since).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "active_since",
          "match_type": "绝对时间",
          "condition": "['2020-01-01', null]"
        }
      ]
    },
    "id": 1604,
    "table_name": "conductor"
  },
  {
    "question": "List the names of conductors older than 50 in ascending order of age.",
    "SQL": "SELECT Name FROM conductor WHERE Age > 50 ORDER BY Age ASC",
    "db_id": "orchestra",
    "table_description": "Table 'conductor' contains information about conductors including their names and ages.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1605,
    "table_name": "conductor"
  },
  {
    "question": "What are the names of conductors under 60 years old, ordered by age?",
    "SQL": "SELECT Name FROM conductor WHERE Age < 60 ORDER BY Age ASC",
    "db_id": "orchestra",
    "table_description": "The conductor table contains information about orchestra conductors.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "小于",
          "condition": "60"
        }
      ]
    },
    "id": 1606,
    "table_name": "conductor"
  },
  {
    "question": "What are the names of conductors whose nationalities are related to \"Europe\"?",
    "SQL": "SELECT Name FROM conductor WHERE Nationality LIKE '%Europe%'",
    "db_id": "orchestra",
    "table_description": "The conductor table contains information about conductors including their name, nationality, and other details.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "模糊匹配",
          "condition": "Europe"
        }
      ]
    },
    "id": 1607,
    "table_name": "conductor"
  },
  {
    "question": "Return the names of conductors that do not have the nationality \"UK\".",
    "SQL": "SELECT Name FROM conductor WHERE Nationality != 'UK'",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "UK"
        }
      ]
    },
    "id": 1608,
    "table_name": "conductor"
  },
  {
    "question": "What are the record companies of orchestras in descending order of years in which they were founded, excluding those founded before 1950?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 1950 ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about various orchestras, including their record companies and the year they were founded.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "大于等于",
          "condition": "1950"
        }
      ]
    },
    "id": 1609,
    "table_name": "orchestra"
  },
  {
    "question": "Return the record companies of orchestras that have been founded before 1980, sorted descending by the years in which they were founded.",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 1980 ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "table_description": "Table containing information about orchestras including their record company and year of foundation.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "id": 1610,
    "table_name": "orchestra"
  },
  {
    "question": "What is the average attendance of shows with more than 500 attendees?",
    "SQL": "SELECT avg(Attendance) FROM SHOW WHERE Attendance > 500",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Attendance",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1611,
    "table_name": "SHOW"
  },
  {
    "question": "Return the average attendance for shows with more than 1000 attendees.",
    "SQL": "SELECT avg(Attendance) FROM SHOW WHERE Attendance > 1000",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Attendance",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1612,
    "table_name": "SHOW"
  },
  {
    "question": "What are the maximum and minimum share of performances whose type is not 'Concert'.",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Concert'",
    "db_id": "orchestra",
    "table_description": "The performance table contains information about different types of performances, including their share.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "TYPE",
          "match_type": "不等于",
          "condition": "Concert"
        }
      ]
    },
    "id": 1613,
    "table_name": "performance"
  },
  {
    "question": "Return the maximum and minimum shares for performances that have the type 'Live rehearsal'.",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE = 'Live rehearsal'",
    "db_id": "orchestra",
    "table_description": "The performance table contains information about different types of performances including their share values.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "TYPE",
          "match_type": "等于",
          "condition": "Live rehearsal"
        }
      ]
    },
    "id": 1614,
    "table_name": "performance"
  },
  {
    "question": "How many different nationalities do conductors have?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "id": 1615,
    "table_name": "conductor"
  },
  {
    "question": "Count the number of different nationalities of conductors, excluding those from Italy.",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor WHERE Nationality != 'Italy'",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "Italy"
        }
      ]
    },
    "id": 1616,
    "table_name": "conductor"
  },
  {
    "question": "List names of conductors with more than 10 years of work in descending order of years of work.",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "table_description": "Table 'conductor' contains information about orchestra conductors including their names and years of work.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1617,
    "table_name": "conductor"
  },
  {
    "question": "What are the names of conductors who have worked for more than 10 years, sorted descending by the number of years they have worked?",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1618,
    "table_name": "conductor"
  },
  {
    "question": "List the name of the conductor with more than 10 years of work.",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1619,
    "table_name": "conductor"
  },
  {
    "question": "What is the name of the conductor who has worked more than 10 years?",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "The conductor table contains information about orchestra conductors including their names and years of work.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1620,
    "table_name": "conductor"
  },
  {
    "question": "Please show the different record companies and the corresponding number of orchestras, excluding any orchestras that have not performed since 2020.",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra WHERE Last_Performance >= '2020-01-01' GROUP BY Record_Company",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about various orchestras including their record company and last performance date.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Last_Performance",
          "match_type": "绝对时间",
          "condition": "['2020-01-01', null]"
        }
      ]
    },
    "id": 1621,
    "table_name": "orchestra"
  },
  {
    "question": "How many orchestras does each record company manage, excluding those managed by 'Universal Music Group'?",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra WHERE Record_Company != 'Universal Music Group' GROUP BY Record_Company",
    "db_id": "orchestra",
    "table_description": "The table contains information about orchestras and their associated record companies.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Record_Company",
          "match_type": "不等于",
          "condition": "Universal Music Group"
        }
      ]
    },
    "id": 1622,
    "table_name": "orchestra"
  },
  {
    "question": "Please show the record formats of orchestras with more than 5 records in ascending order of count.",
    "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format HAVING COUNT(*) > 5 ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1623,
    "table_name": "orchestra"
  },
  {
    "question": "What are the major record formats of orchestras with more than 5 records, sorted by their frequency?",
    "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format HAVING COUNT(*) > 5 ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "table_description": "Table containing information about orchestras and their major record formats.",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1624,
    "table_name": "orchestra"
  },
  {
    "question": "List the record company shared by at least 3 orchestras.",
    "SQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(*) >= 3 ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "Table containing information about orchestras and their associated record companies.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "id": 1625,
    "table_name": "orchestra"
  },
  {
    "question": "What is the record company used by the greatest number of orchestras with a record company that starts with 'V'?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Record_Company LIKE 'V%' GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about different orchestras and their associated record companies.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Record_Company",
          "match_type": "模糊匹配",
          "condition": "V%"
        }
      ]
    },
    "id": 1626,
    "table_name": "orchestra"
  },
  {
    "question": "Show the record companies shared by orchestras founded before 2000 and after 2000.",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2000 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  > 2000",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2000"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2000"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 1627
  },
  {
    "question": "What are the record companies that are used by both orchestras founded before 2000 and those founded after 2000?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2000 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  > 2000",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about various orchestras including their name, year of founding, and record company.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2000"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2000"
        }
      ]
    },
    "id": 1628,
    "table_name": "orchestra"
  },
  {
    "question": "Find the number of orchestras whose record format is related to \"Digital\".",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format LIKE \"%Digital%\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "模糊匹配",
          "condition": "Digital"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 1629
  },
  {
    "question": "Count the number of orchestras that have CD or vinyl as their record format.",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"vinyl\"",
    "db_id": "orchestra",
    "table_description": "The orchestra table contains information about various orchestras, including their major record format.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "vinyl"
        }
      ]
    },
    "id": 1630,
    "table_name": "orchestra"
  },
  {
    "question": "How many high schoolers are there with grade 10 or higher?",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade >= 10",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于等于",
          "condition": "10"
        }
      ]
    },
    "id": 1631,
    "table_name": "Highschooler"
  },
  {
    "question": "Count the number of high schoolers who are in grade 10.",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade = 10",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains information about high school students, including their ID, name, and grade.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "id": 1632,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the names and grades of each high schooler with a grade greater than 10.",
    "SQL": "SELECT name ,  grade FROM Highschooler WHERE grade > 10",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1633,
    "table_name": "Highschooler"
  },
  {
    "question": "What are the names and grades for each high schooler with a grade higher than 10?",
    "SQL": "SELECT name ,  grade FROM Highschooler WHERE grade > 10",
    "db_id": "network_1",
    "table_description": "The 'Highschooler' table contains information about high school students, including their names and grades.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1634,
    "table_name": "Highschooler"
  },
  {
    "question": "Show all the grades of the high schoolers who are in grade 10 or above.",
    "SQL": "SELECT grade FROM Highschooler WHERE grade >= 10",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains information about high school students, including their grades.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于等于",
          "condition": "10"
        }
      ]
    },
    "id": 1635,
    "table_name": "Highschooler"
  },
  {
    "question": "What is the grade of each high schooler who has a student ID greater than 1000?",
    "SQL": "SELECT grade FROM Highschooler WHERE student_id > 1000",
    "db_id": "network_1",
    "table_description": "Highschooler table contains information about students including their grades and IDs.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "student_id",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1636,
    "table_name": "Highschooler"
  },
  {
    "question": "What grade is Alex in?",
    "SQL": "SELECT grade FROM Highschooler WHERE name = 'Alex'",
    "db_id": "network_1",
    "table_description": "Highschooler表描述了高中生的基本信息，包括姓名、年级等。",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Alex"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1637
  },
  {
    "question": "Return the grade for the high schooler whose name is related to Kyle.",
    "SQL": "SELECT grade FROM Highschooler WHERE name LIKE '%Kyle%'",
    "db_id": "network_1",
    "table_description": "Table containing information about high schoolers, including their names and grades.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "%Kyle%"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1638
  },
  {
    "question": "Show the names of all high schoolers in grade 11.",
    "SQL": "SELECT name FROM Highschooler WHERE grade = 11",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "11"
        }
      ]
    },
    "id": 1639,
    "table_name": "Highschooler"
  },
  {
    "question": "What are the names of all high schoolers in grade 11?",
    "SQL": "SELECT name FROM Highschooler WHERE grade  =  11",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "11"
        }
      ]
    },
    "id": 1640,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the ID of the high schooler whose name is related to Kyle.",
    "SQL": "SELECT ID FROM Highschooler WHERE name LIKE '%Kyle%'",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "模糊匹配",
          "condition": "%Kyle%"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1641
  },
  {
    "question": "What is the id of the student named Alex?",
    "SQL": "SELECT ID FROM Highschooler WHERE name = 'Alex'",
    "db_id": "network_1",
    "table_description": "Highschooler table contains information about high school students.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Alex"
        }
      ]
    },
    "id": 1642,
    "table_name": "Highschooler"
  },
  {
    "question": "How many high schoolers are there in grade 9 or 10?",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade  IN (9, 10)",
    "db_id": "network_1",
    "table_description": "The Highschooler table contains information about students including their grade.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        },
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "id": 1643,
    "table_name": "Highschooler"
  },
  {
    "question": "Count the number of high schoolers in grades 9 to 11.",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10 OR grade  =  11",
    "db_id": "network_1",
    "table_description": "Table containing information about high school students.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        },
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "11"
        }
      ]
    },
    "id": 1644,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the number of high schoolers for each grade who have an ID greater than 1000.",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler WHERE id > 1000 GROUP BY grade",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains columns: id, name, grade, age, gender.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "id",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1645,
    "table_name": "Highschooler"
  },
  {
    "question": "How many high schoolers are in each grade for students with an ID greater than 1000?",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler WHERE id > 1000 GROUP BY grade",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains information about high school students including their IDs and grades.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "id",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 1646,
    "table_name": "Highschooler"
  },
  {
    "question": "Which grade has the most high schoolers, excluding grade 9?",
    "SQL": "SELECT grade FROM Highschooler WHERE grade != 9 GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "不等于",
          "condition": "9"
        }
      ]
    },
    "id": 1647,
    "table_name": "Highschooler"
  },
  {
    "question": "Return the grade that has the greatest number of high schoolers, excluding grade 10.",
    "SQL": "SELECT grade FROM Highschooler WHERE grade != 10 GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "table_description": "Table 'Highschooler' contains information about high school students including their grade level.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "不等于",
          "condition": "10"
        }
      ]
    },
    "id": 1648,
    "table_name": "Highschooler"
  },
  {
    "question": "Show me all grades that have more than 3 students.",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >  3",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "id": 1649,
    "table_name": "Highschooler"
  },
  {
    "question": "Which grades have 5 or more high schoolers?",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  5",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "5"
        }
      ]
    },
    "id": 1650,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the student IDs and numbers of friends corresponding to each, but only for students with more than 2 friends.",
    "SQL": "SELECT student_id ,  count(*) AS friend_count FROM Friend GROUP BY student_id HAVING count(*) > 2",
    "db_id": "network_1",
    "table_description": "Table 'Friend' contains information about friendships between students.",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1651,
    "table_name": "Friend"
  },
  {
    "question": "How many friends does each student have who has more than 2 friends?",
    "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id HAVING count(*) > 2",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 1652,
    "table_name": "Friend"
  },
  {
    "question": "Count the number of likes for each student id where the like is from a post with more than 10 comments.",
    "SQL": "SELECT student_id ,  count(*) FROM Likes WHERE post_id IN (SELECT post_id FROM Comments GROUP BY post_id HAVING COUNT(*) > 10) GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "post_id",
          "match_type": "IN",
          "condition": "(SELECT post_id FROM Comments GROUP BY post_id HAVING COUNT(*) > 10)"
        }
      ]
    },
    "id": 1653,
    "table_name": "Likes"
  },
  {
    "question": "How many likes correspond to each student id for student 101?",
    "SQL": "SELECT student_id ,  count(*) FROM Likes WHERE student_id = 101 GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "student_id",
          "match_type": "等于",
          "condition": "101"
        }
      ]
    },
    "id": 1654,
    "table_name": "Likes"
  },
  {
    "question": "List the emails of the professionals who live in the state of Hawaii or have an email address containing 'gmail'.",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR email_address LIKE '%gmail%'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Hawaii"
        },
        {
          "column": "email_address",
          "match_type": "模糊匹配",
          "condition": "gmail"
        }
      ]
    },
    "id": 1655,
    "table_name": "Professionals"
  },
  {
    "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Alaska?",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Alaska'",
    "db_id": "dog_kennels",
    "table_description": "This table contains information about various professionals and their contact details including their states.",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Hawaii"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Alaska"
        }
      ]
    },
    "id": 1656,
    "table_name": "Professionals"
  },
  {
    "question": "What are the arriving date and the departing date of all the dogs that arrived before 2023-01-01?",
    "SQL": "SELECT date_arrived ,  date_departed FROM Dogs WHERE date_arrived < '2023-01-01'",
    "db_id": "dog_kennels",
    "table_description": "This table contains information about dogs in a kennel, including their arrival and departure dates.",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_arrived",
          "match_type": "绝对时间",
          "condition": "2023-01-01之前"
        }
      ]
    },
    "id": 1657,
    "table_name": "Dogs"
  },
  {
    "question": "List the arrival date and the departure date for all the dogs that arrived today.",
    "SQL": "SELECT date_arrived ,  date_departed FROM Dogs WHERE date_arrived = CURRENT_DATE",
    "db_id": "dog_kennels",
    "table_description": "The 'Dogs' table contains information about the dogs including their arrival and departure dates.",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_arrived",
          "match_type": "绝对时间",
          "condition": "CURRENT_DATE"
        }
      ]
    },
    "id": 1658,
    "table_name": "Dogs"
  },
  {
    "question": "How many dogs went through any treatments in the last week?",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments WHERE treatment_date >= DATE('now', '-7 days')",
    "db_id": "dog_kennels",
    "table_description": "The Treatments table contains information about the treatments given to dogs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_date",
          "match_type": "相对时间",
          "condition": "近7天"
        }
      ]
    },
    "id": 1659,
    "table_name": "Treatments"
  },
  {
    "question": "Count the number of dogs that went through a specific treatment.",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments WHERE treatment_type = 'Vaccination'",
    "db_id": "dog_kennels",
    "table_description": "The Treatments table contains information about the treatments given to dogs.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_type",
          "match_type": "精确匹配",
          "condition": "Vaccination"
        }
      ]
    },
    "id": 1660,
    "table_name": "Treatments"
  },
  {
    "question": "How many professionals have performed any treatment to dogs in the last week?",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE treatment_date >= DATE('now', '-7 days')",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "COUNT DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_date",
          "match_type": "relative_time",
          "condition": "近7天"
        }
      ]
    },
    "id": 1661,
    "table_name": "Treatments"
  },
  {
    "question": "Find the number of professionals who have ever treated dogs.",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE animal = 'Dog'",
    "db_id": "dog_kennels",
    "table_description": "The Treatments table records the treatments provided by professionals to animals. Each row represents a treatment event with a professional and an animal involved.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "animal",
          "match_type": "精确匹配",
          "condition": "Dog"
        }
      ]
    },
    "id": 1662,
    "table_name": "Treatments"
  },
  {
    "question": "Which professionals live in a city containing the substring 'North'? List his or her role, street, city and state.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%North%'",
    "db_id": "dog_kennels",
    "table_description": "This table contains information about various professionals including their roles, addresses, and contact details.",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "North"
        }
      ]
    },
    "table_name": "professionals",
    "id": 1663
  },
  {
    "question": "Find the role, street, city and state of the professionals living in a city that is exactly 'Westville'.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city = 'Westville'",
    "db_id": "dog_kennels",
    "table_description": "professionals table with columns: role_code, street, city, state",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Westville"
        }
      ]
    },
    "id": 1664,
    "table_name": "professionals"
  },
  {
    "question": "Which owners live in the state whose name is exactly 'North Carolina'? List his first name, last name and email.",
    "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state = 'North Carolina'",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about dog kennel owners, including their names, contact details, and location.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "North Carolina"
        }
      ]
    },
    "table_name": "Owners",
    "id": 1665
  },
  {
    "question": "Return the first name, last name and email of the owners living in a state whose name is exactly 'North Carolina'.",
    "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state = 'North Carolina'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "North Carolina"
        }
      ]
    },
    "table_name": "Owners",
    "id": 1666
  },
  {
    "question": "How many dogs have an age above the average?",
    "SQL": "SELECT count(*) FROM Dogs WHERE age > ( SELECT avg(age) FROM Dogs )",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "( SELECT avg(age) FROM Dogs )"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1667
  },
  {
    "question": "Count the number of dogs with an age above the average.",
    "SQL": "SELECT count(*) FROM Dogs WHERE age  >  ( SELECT avg(age) FROM Dogs )",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "( SELECT avg(age) FROM Dogs )"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1668
  },
  {
    "question": "What is the cost of the most recent treatment that is greater than $50?",
    "SQL": "SELECT cost_of_treatment FROM Treatments WHERE cost_of_treatment > 50 ORDER BY date_of_treatment DESC LIMIT 1",
    "db_id": "dog_kennels",
    "table_description": "The 'Treatments' table records the treatments given to animals, including the cost and date of each treatment.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cost_of_treatment",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1669,
    "table_name": "Treatments"
  },
  {
    "question": "Show me the cost of the treatments that have a cost greater than 500.",
    "SQL": "SELECT cost_of_treatment FROM Treatments WHERE cost_of_treatment > 500",
    "db_id": "dog_kennels",
    "table_description": "The Treatments table contains information about the treatments performed at the dog kennel, including the date and cost of each treatment.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "cost_of_treatment",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1670,
    "table_name": "Treatments"
  },
  {
    "question": "List the dog name, age and weight of the dogs who are not abandoned?",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  0",
    "db_id": "dog_kennels",
    "table_description": "The table 'Dogs' contains information about dogs including their names, ages, weights, and whether they have been abandoned (1 for yes, 0 for no).",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1671
  },
  {
    "question": "What are the dog name, age and weight of the dogs that were not abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  0",
    "db_id": "dog_kennels",
    "table_description": "The table 'Dogs' contains information about dogs including their names, ages, weights, and whether they have been abandoned (1 for yes, 0 for no).",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1672
  },
  {
    "question": "What is the average age of all the dogs that are older than 5 years?",
    "SQL": "SELECT avg(age) FROM Dogs WHERE age > 5",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1673,
    "table_name": "Dogs"
  },
  {
    "question": "Compute the average age of all the dogs older than 5 years.",
    "SQL": "SELECT avg(age) FROM Dogs WHERE age > 5",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1674,
    "table_name": "Dogs"
  },
  {
    "question": "What is the age of the oldest dog that is a Labrador?",
    "SQL": "SELECT max(age) FROM Dogs WHERE breed = 'Labrador'",
    "db_id": "dog_kennels",
    "table_description": "Table contains information about dogs in a kennel including their age and breed.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "breed",
          "match_type": "精确匹配",
          "condition": "Labrador"
        }
      ]
    },
    "id": 1675,
    "table_name": "Dogs"
  },
  {
    "question": "Tell me the age of the oldest dog that is a Labrador.",
    "SQL": "SELECT max(age) FROM Dogs WHERE breed = 'Labrador'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "breed",
          "match_type": "精确匹配",
          "condition": "Labrador"
        }
      ]
    },
    "id": 1676,
    "table_name": "Dogs"
  },
  {
    "question": "How much does each charge type cost for reservations made after January 1, 2023? List both charge type and amount.",
    "SQL": "SELECT charge_type ,  SUM(charge_amount) AS total_charge_amount FROM Charges WHERE reservation_date > '2023-01-01' GROUP BY charge_type",
    "db_id": "dog_kennels",
    "table_description": "The Charges table contains information about the charges for dog kennel reservations, including the charge type and amount.",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "reservation_date",
          "match_type": "绝对时间",
          "condition": "> '2023-01-01'"
        }
      ]
    },
    "id": 1677,
    "table_name": "Charges"
  },
  {
    "question": "List each charge type and the total charge amount for charge types that have a charge amount greater than 100.",
    "SQL": "SELECT charge_type ,  SUM(charge_amount) FROM Charges WHERE charge_amount > 100 GROUP BY charge_type",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "charge_amount",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1678,
    "table_name": "Charges"
  },
  {
    "question": "What is the maximum charge amount for the 'Boarding' charge type?",
    "SQL": "SELECT max(charge_amount) FROM Charges WHERE charge_type = 'Boarding'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "charge_type",
          "match_type": "精确匹配",
          "condition": "Boarding"
        }
      ]
    },
    "id": 1679,
    "table_name": "Charges"
  },
  {
    "question": "What is the maximum charge amount for the charge type 'Boarding'?",
    "SQL": "SELECT max(charge_amount) FROM Charges WHERE charge_type = 'Boarding'",
    "db_id": "dog_kennels",
    "table_description": "The Charges table contains information about different types of charges and their amounts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "charge_type",
          "match_type": "精确匹配",
          "condition": "Boarding"
        }
      ]
    },
    "id": 1680,
    "table_name": "Charges"
  },
  {
    "question": "List the email, cell phone and home phone of all the professionals who have a cell phone number.",
    "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals WHERE cell_number IS NOT NULL",
    "db_id": "dog_kennels",
    "table_description": "Table 'professionals' contains information about professionals including their contact details.",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "cell_number",
          "match_type": "不为空",
          "condition": "IS NOT NULL"
        }
      ]
    },
    "id": 1681,
    "table_name": "professionals"
  },
  {
    "question": "What are the email, cell phone and home phone of each professional whose home phone starts with '555'?",
    "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals WHERE home_phone LIKE '555%'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "home_phone",
          "match_type": "模糊匹配",
          "condition": "555%"
        }
      ]
    },
    "id": 1682,
    "table_name": "professionals"
  },
  {
    "question": "What are all the possible breed type and size type combinations for dogs that have been adopted?",
    "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs WHERE adoption_status = 'adopted'",
    "db_id": "dog_kennels",
    "table_description": "The 'dogs' table contains information about dogs in a kennel including their breed, size, and adoption status.",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "adoption_status",
          "match_type": "精确匹配",
          "condition": "adopted"
        }
      ]
    },
    "id": 1683,
    "table_name": "dogs"
  },
  {
    "question": "Find the distinct breed type and size type combinations for dogs that are small.",
    "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs WHERE size_code = 'small'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "size_code",
          "match_type": "精确匹配",
          "condition": "small"
        }
      ]
    },
    "id": 1684,
    "table_name": "dogs"
  },
  {
    "question": "How many singers are there who have a stage name?",
    "SQL": "SELECT count(*) FROM singer WHERE stage_name IS NOT NULL",
    "db_id": "singer",
    "table_description": "Table 'singer' contains information about singers, including their stage names.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "stage_name",
          "match_type": "not null",
          "condition": "IS NOT NULL"
        }
      ]
    },
    "id": 1685,
    "table_name": "singer"
  },
  {
    "question": "What is the count of singers with an age greater than 30?",
    "SQL": "SELECT count(*) FROM singer WHERE age > 30",
    "db_id": "singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 1686,
    "table_name": "singer"
  },
  {
    "question": "List the name of singers with a net worth greater than 10 million in ascending order of net worth.",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 10 ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "table_description": "The singer table contains information about various singers including their names and net worth in millions.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1687,
    "table_name": "singer"
  },
  {
    "question": "What are the names of singers with a net worth greater than 10 million dollars, ordered by ascending net worth?",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 10 ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "table_description": "The 'singer' table contains information about various singers including their names and net worth.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1688,
    "table_name": "singer"
  },
  {
    "question": "What are the birth year and citizenship of singers from the United States?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer WHERE Citizenship = 'United States'",
    "db_id": "singer",
    "table_description": "The singer table contains information about singers including their birth year and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "id": 1689,
    "table_name": "singer"
  },
  {
    "question": "What are the birth years and citizenships of the singers who were born before 1980?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer WHERE Birth_Year < 1980",
    "db_id": "singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "id": 1690,
    "table_name": "singer"
  },
  {
    "question": "List the name of singers whose citizenship is not \"United States\".",
    "SQL": "SELECT Name FROM singer WHERE Citizenship != 'United States'",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their names and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "United States"
        }
      ]
    },
    "id": 1691,
    "table_name": "singer"
  },
  {
    "question": "What are the names of the singers who are American citizens?",
    "SQL": "SELECT Name FROM singer WHERE Citizenship = 'USA'",
    "db_id": "singer",
    "table_description": "Table containing information about singers",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "等于",
          "condition": "USA"
        }
      ]
    },
    "id": 1692,
    "table_name": "singer"
  },
  {
    "question": "Show the name of singers whose birth year is between 1948 and 1949?",
    "SQL": "SELECT Name FROM singer WHERE Birth_Year BETWEEN 1948 AND 1949",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their names and birth years.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "在区间",
          "condition": "1948,1949"
        }
      ]
    },
    "id": 1693,
    "table_name": "singer"
  },
  {
    "question": "What are the names of the singers whose birth years are either 1948 or 1950?",
    "SQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1950",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their names and birth years.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1948"
        },
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1950"
        }
      ]
    },
    "id": 1694,
    "table_name": "singer"
  },
  {
    "question": "What is the name of the singer with a net worth greater than 500 million?",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 500 ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their names and net worth.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "500"
        }
      ]
    },
    "id": 1695,
    "table_name": "singer"
  },
  {
    "question": "What is the name of the singer who is worth more than 100 million?",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 100 ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1696,
    "table_name": "singer"
  },
  {
    "question": "Show different citizenship of singers and the number of singers of each citizenship for those who are not from the United States.",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer WHERE Citizenship != 'United States' GROUP BY Citizenship",
    "db_id": "singer",
    "table_description": "The singer table contains information about singers including their citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "United States"
        }
      ]
    },
    "id": 1697,
    "table_name": "singer"
  },
  {
    "question": "For each citizenship, how many singers are from that country, excluding those from the USA?",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer WHERE Citizenship != 'USA' GROUP BY Citizenship",
    "db_id": "singer",
    "table_description": "The singer table contains information about singers, including their citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "USA"
        }
      ]
    },
    "id": 1698,
    "table_name": "singer"
  },
  {
    "question": "Please show the most common citizenship of singers who have won awards.",
    "SQL": "SELECT Citizenship FROM singer WHERE Awarded = 'Yes' GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "singer",
    "table_description": "The table contains information about singers including their name, citizenship, and whether they have been awarded.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Awarded",
          "match_type": "精确匹配",
          "condition": "Yes"
        }
      ]
    },
    "id": 1699,
    "table_name": "singer"
  },
  {
    "question": "What is the most common singer citizenship for singers with more than 5 albums?",
    "SQL": "select citizenship from singer where album_count > 5 group by citizenship order by count(*) desc limit 1",
    "db_id": "singer",
    "table_description": "Table containing information about singers, including their citizenship and number of albums.",
    "config": {
      "dimension": [
        {
          "column": "citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "album_count",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 1700,
    "table_name": "singer"
  },
  {
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship where the net worth is greater than 50 million.",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer WHERE Net_Worth_Millions > 50 GROUP BY Citizenship",
    "db_id": "singer",
    "table_description": "Table 'singer' contains information about singers including their citizenship and net worth in millions.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 1701,
    "table_name": "singer"
  },
  {
    "question": "For each citizenship, what is the maximum net worth for singers with a net worth greater than 10 million?",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer WHERE Net_Worth_Millions > 10 GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1702,
    "table_name": "singer"
  },
  {
    "question": "Show the citizenship shared by singers with birth year before 1940 and after 1960.",
    "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1940 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1960",
    "db_id": "singer",
    "table_description": "singer table contains information about singers including their citizenship and birth year.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1940"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1960"
        }
      ]
    },
    "id": 1703,
    "table_name": "singer"
  },
  {
    "question": "What are the citizenships that are shared by singers with a birth year before 1940 and after 1960?",
    "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1940 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1960",
    "db_id": "singer",
    "table_description": "The 'singer' table contains information about various singers including their name, birth year, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1940"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1960"
        }
      ]
    },
    "id": 1704,
    "table_name": "singer"
  },
  {
    "question": "How many available features are there in total for properties with a pool?",
    "SQL": "SELECT count(*) FROM Other_Available_Features WHERE feature = 'pool'",
    "db_id": "real_estate_properties",
    "table_description": "Table containing additional features of real estate properties.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "feature",
          "match_type": "精确匹配",
          "condition": "pool"
        }
      ]
    },
    "id": 1705,
    "table_name": "Other_Available_Features"
  },
  {
    "question": "What are the names of properties that are either houses or apartments with at least 2 rooms?",
    "SQL": "SELECT property_name FROM Properties WHERE property_type_code  =  'House' UNION SELECT property_name FROM Properties WHERE property_type_code  =  'Apartment' AND room_count  >=  2",
    "db_id": "real_estate_properties",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "property_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "property_type_code",
          "match_type": "等于",
          "condition": "House"
        },
        {
          "column": "property_type_code",
          "match_type": "等于",
          "condition": "Apartment"
        },
        {
          "column": "room_count",
          "match_type": "大于等于",
          "condition": 2
        }
      ]
    },
    "id": 1706,
    "table_name": "Properties"
  },
  {
    "question": "How many singers from France do we have?",
    "SQL": "SELECT count(*) FROM singer WHERE Country = 'France'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "id": 569,
    "table_name": "singer"
  },
  {
    "question": "What is the total number of singers from France?",
    "SQL": "SELECT count(*) FROM singer WHERE Country = 'France'",
    "db_id": "concert_singer",
    "table_description": "Table containing information about singers including their ID, name, country, song name, song release year, age, and gender.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "id": 570,
    "table_name": "singer"
  },
  {
    "question": "Show name, country, age for all female singers ordered by age from the oldest to the youngest.",
    "SQL": "SELECT name ,  country ,  age FROM singer WHERE is_male = 'F' ORDER BY age DESC",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "is_male",
          "match_type": "等于",
          "condition": "'F'"
        }
      ]
    },
    "id": 571,
    "table_name": "singer"
  },
  {
    "question": "What are the names, countries, and ages for every male singer in descending order of age?",
    "SQL": "SELECT name ,  country ,  age FROM singer WHERE is_male = 'T' ORDER BY age DESC",
    "db_id": "concert_singer",
    "table_description": "Table containing information about singers including their ID, name, country, song name, song release year, age, and gender.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "is_male",
          "match_type": "等于",
          "condition": "T"
        }
      ]
    },
    "id": 572,
    "table_name": "singer"
  },
  {
    "question": "What is the average, minimum, and maximum age of all male singers from France?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France' AND is_male  =  'T'",
    "db_id": "concert_singer",
    "table_description": "Table containing information about singers including their ID, name, country, song name, song release year, age, and gender.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "France"
        },
        {
          "column": "is_male",
          "match_type": "精确匹配",
          "condition": "T"
        }
      ]
    },
    "id": 573,
    "table_name": "singer"
  },
  {
    "question": "What is the average, minimum, and maximum age for all male French singers?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France' AND Is_male  =  'T'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "France"
        },
        {
          "column": "Is_male",
          "match_type": "精确匹配",
          "condition": "T"
        }
      ]
    },
    "id": 574,
    "table_name": "singer"
  },
  {
    "question": "Show the name and the release year of the song by the youngest singer from France.",
    "SQL": "SELECT song_name ,  song_release_year FROM singer WHERE country = 'France' ORDER BY age LIMIT 1",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "id": 575,
    "table_name": "singer"
  },
  {
    "question": "What are the names and release years for all the songs of the oldest singer?",
    "SQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "最大值",
          "condition": ""
        }
      ]
    },
    "table_name": "singer",
    "id": 576
  },
  {
    "question": "What are all distinct countries where male singers above age 20 are from?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age  >  20 AND is_male = 'T'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "20"
        },
        {
          "column": "is_male",
          "match_type": "等于",
          "condition": "T"
        }
      ]
    },
    "table_name": "singer",
    "id": 577
  },
  {
    "question": "What are the different countries with male singers above age 20?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age > 20 AND is_male = 'T'",
    "db_id": "concert_singer",
    "table_description": "singer table contains information about singers including their ID, name, country, song name, song release year, age, and gender.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "20"
        },
        {
          "column": "is_male",
          "match_type": "等于",
          "condition": "T"
        }
      ]
    },
    "id": 578,
    "table_name": "singer"
  },
  {
    "question": "Show all countries and the number of male singers in each country.",
    "SQL": "SELECT country ,  count(*) FROM singer WHERE is_male = 'T' GROUP BY country",
    "db_id": "concert_singer",
    "table_description": "The singer table contains information about singers including their ID, name, country, song name, song release year, age, and gender.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "is_male",
          "match_type": "等于",
          "condition": "'T'"
        }
      ]
    },
    "id": 579,
    "table_name": "singer"
  },
  {
    "question": "How many male singers are from each country?",
    "SQL": "SELECT country ,  count(*) FROM singer WHERE is_male = 'T' GROUP BY country",
    "db_id": "concert_singer",
    "table_description": "The singer table contains information about singers including their ID, name, country, song name, song release year, age, and gender.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "is_male",
          "match_type": "等于",
          "condition": "T"
        }
      ]
    },
    "id": 580,
    "table_name": "singer"
  },
  {
    "question": "List all song names by singers from France who are above the average age.",
    "SQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer) AND country = 'France'",
    "db_id": "concert_singer",
    "table_description": "Table containing information about singers and their songs.",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "(SELECT avg(age) FROM singer)"
        },
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "id": 581,
    "table_name": "singer"
  },
  {
    "question": "What are all the song names by singers who are younger than 40?",
    "SQL": "SELECT song_name FROM singer WHERE age < 40",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "40"
        }
      ]
    },
    "table_name": "singer",
    "id": 582
  },
  {
    "question": "Show location and name for all stadiums with a capacity between 2000 and 5000.",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 2000 AND 5000",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "capacity",
          "match_type": "在区间",
          "condition": [
            2000,
            5000
          ]
        }
      ]
    },
    "id": 583,
    "table_name": "stadium"
  },
  {
    "question": "What are the locations and names of all stations with average attendance greater than 1000?",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE Average > 1000",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Average",
          "match_type": "大于",
          "condition": 1000
        }
      ]
    },
    "table_name": "stadium",
    "id": 584
  },
  {
    "question": "What is the maximum capacity and the average attendance of all stadiums located in Raith Rovers?",
    "SQL": "SELECT MAX(capacity), AVG(average) FROM stadium WHERE location = 'Raith Rovers'",
    "db_id": "concert_singer",
    "table_description": "The stadium table contains information about different stadiums including their ID, location, name, capacity, highest attendance, lowest attendance, and average attendance.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        },
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "Raith Rovers"
        }
      ]
    },
    "id": 585,
    "table_name": "stadium"
  },
  {
    "question": "What is the average and maximum capacities for all stadiums with a capacity greater than 5000?",
    "SQL": "select avg(capacity) ,  max(capacity) from stadium where capacity > 5000",
    "db_id": "concert_singer",
    "table_description": "The stadium table contains information about different stadiums including their location, name, capacity, highest attendance, lowest attendance, and average attendance.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "AVG"
        },
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "capacity",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "id": 586,
    "table_name": "stadium"
  },
  {
    "question": "What is the name and capacity for the stadium with an average attendance greater than 1000?",
    "SQL": "SELECT name ,  capacity FROM stadium WHERE average > 1000",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "average",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 587,
    "table_name": "stadium"
  },
  {
    "question": "What is the name and capacity for the stadium with an average attendance greater than 1000?",
    "SQL": "SELECT name ,  capacity FROM stadium WHERE average > 1000",
    "db_id": "concert_singer",
    "table_description": "The stadium table contains information about different stadiums including their names, capacities, and average attendances.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "average",
          "match_type": "大于",
          "condition": "1000"
        }
      ]
    },
    "id": 588,
    "table_name": "stadium"
  },
  {
    "question": "How many concerts are there with the theme 'Bleeding Love' or 'Happy Tonight'?",
    "SQL": "SELECT count(*) FROM concert WHERE Theme  =  'Bleeding Love' OR Theme  =  'Happy Tonight'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Theme",
          "match_type": "等于",
          "condition": "Bleeding Love"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "table_name": "concert",
    "id": 589
  },
  {
    "question": "How many concerts occurred in the first half of 2014?",
    "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 AND MONTH <= 6",
    "db_id": "concert_singer",
    "table_description": "Table containing information about concerts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        },
        {
          "column": "MONTH",
          "match_type": "小于等于",
          "condition": "6"
        }
      ]
    },
    "id": 590,
    "table_name": "concert"
  },
  {
    "question": "Which year after 2014 has the most number of concerts?",
    "SQL": "SELECT YEAR FROM concert WHERE Year > '2014' GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "Year",
          "match_type": "大于",
          "condition": "2014"
        }
      ]
    },
    "id": 591,
    "table_name": "concert"
  },
  {
    "question": "What is the year that had the most concerts with the theme 'Bleeding Love'?",
    "SQL": "SELECT YEAR FROM concert WHERE Theme = 'Bleeding Love' GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Theme",
          "match_type": "精确匹配",
          "condition": "Bleeding Love"
        }
      ]
    },
    "id": 592,
    "table_name": "concert"
  },
  {
    "question": "Show countries where a singer above age 40 and a singer with the song 'Sun' are from.",
    "SQL": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE Song_Name = 'Sun'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "40"
        },
        {
          "column": "Song_Name",
          "match_type": "精确匹配",
          "condition": "Sun"
        }
      ]
    },
    "table_name": "singer",
    "id": 593
  },
  {
    "question": "What is the name and nation of the singer who has a song with 'Oh' in its name?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Oh%'",
    "db_id": "concert_singer",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_name",
          "match_type": "模糊匹配",
          "condition": "Oh"
        }
      ]
    },
    "id": 594,
    "table_name": "singer"
  },
  {
    "question": "What is the name and country of origin of every singer who has a song released in 2013?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_release_year = 2013",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_release_year",
          "match_type": "等于",
          "condition": "2013"
        }
      ]
    },
    "id": 595,
    "table_name": "singer"
  },
  {
    "question": "Find the number of pets whose pet age is greater than 2.",
    "SQL": "SELECT count(*) FROM pets WHERE pet_age  >  2",
    "db_id": "pets_1",
    "table_description": "The pets table contains information about different pets including their ID, type, age, and weight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 596,
    "table_name": "pets"
  },
  {
    "question": "How many dogs have a greater weight than 9?",
    "SQL": "SELECT count(*) FROM pets WHERE weight  >  9 AND PetType = 'dog'",
    "db_id": "pets_1",
    "table_description": "A table containing information about different types of pets including their ID, type, age, and weight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "9"
        },
        {
          "column": "PetType",
          "match_type": "精确匹配",
          "condition": "dog"
        }
      ]
    },
    "id": 597,
    "table_name": "pets"
  },
  {
    "question": "Find the weight of the youngest dog with an ID greater than 2001.",
    "SQL": "SELECT weight FROM pets WHERE PetID > 2001 ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "table_description": "A table containing information about different pets including their type, age, and weight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "PetID",
          "match_type": "大于",
          "condition": "2001"
        },
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "MIN(pet_age)"
        }
      ]
    },
    "id": 598,
    "table_name": "pets"
  },
  {
    "question": "What is the weight of the youngest dog that is older than 1 year?",
    "SQL": "SELECT weight FROM pets WHERE pet_age > 1 ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 599,
    "table_name": "pets"
  },
  {
    "question": "Find the maximum weight for each type of pet that is at least 2 years old. List the maximum weight and pet type.",
    "SQL": "SELECT max(weight), petType FROM pets WHERE pet_age >= 2 GROUP BY petType",
    "db_id": "pets_1",
    "table_description": "Table containing information about different types of pets including their ID, type, age, and weight.",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 600,
    "table_name": "pets"
  },
  {
    "question": "List the maximum weight and type for each type of pet with an age greater than 1.",
    "SQL": "SELECT max(weight), petType FROM pets WHERE pet_age > 1 GROUP BY petType",
    "db_id": "pets_1",
    "table_description": "The pets table contains information about different types of pets including their ID, type, age, and weight.",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 601,
    "table_name": "pets"
  },
  {
    "question": "Find the number of distinct types of pets with a pet age greater than 1.",
    "SQL": "SELECT count(DISTINCT pettype) FROM pets WHERE pet_age > 1",
    "db_id": "pets_1",
    "table_description": "The pets table contains information about different types of pets including their ID, type, age, and weight.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "pettype",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 602,
    "table_name": "pets"
  },
  {
    "question": "Find the type and weight of the pet that is exactly 1 year old.",
    "SQL": "SELECT pettype ,  weight FROM pets WHERE pet_age = 1",
    "db_id": "pets_1",
    "table_description": "The pets table contains information about different pets including their type, age, and weight.",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "id": 604,
    "table_name": "pets"
  },
  {
    "question": "What type of pet is the youngest animal, and how much does it weigh if the pet is a dog?",
    "SQL": "SELECT pettype ,  weight FROM pets WHERE pettype = 'dog' ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "table_description": "Table 'pets' contains information about different types of pets including their age and weight.",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pettype",
          "match_type": "精确匹配",
          "condition": "dog"
        }
      ]
    },
    "id": 605,
    "table_name": "pets"
  },
  {
    "question": "Find the id and weight of all pets whose type is dog.",
    "SQL": "SELECT petid ,  weight FROM pets WHERE PetType  =  'dog'",
    "db_id": "pets_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "PetType",
          "match_type": "精确匹配",
          "condition": "dog"
        }
      ]
    },
    "id": 606,
    "table_name": "pets"
  },
  {
    "question": "What is the id and weight of every pet that weighs more than 10?",
    "SQL": "SELECT petid ,  weight FROM pets WHERE weight  >  10",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "pets",
    "id": 607
  },
  {
    "question": "Find the average and maximum age for each type of pet with a weight greater than 10.",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets WHERE weight > 10 GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "pet_age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 608,
    "table_name": "pets"
  },
  {
    "question": "What is the average and maximum age for each pet type where the pet's weight is greater than 10?",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets WHERE weight > 10 GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "Table contains information about different types of pets including their ID, type, age, and weight.",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "avg"
        },
        {
          "column": "pet_age",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 609,
    "table_name": "pets"
  },
  {
    "question": "Find the average weight for each pet type where the pet age is greater than 1.",
    "SQL": "SELECT AVG(weight), pettype FROM pets WHERE pet_age > 1 GROUP BY pettype",
    "db_id": "pets_1",
    "table_description": "Table containing information about different types of pets including their IDs, types, ages, and weights.",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 610,
    "table_name": "pets"
  },
  {
    "question": "What is the average weight for each type of pet older than 1 year?",
    "SQL": "SELECT avg(weight) ,  pettype FROM pets WHERE pet_age > 1 GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 611,
    "table_name": "pets"
  },
  {
    "question": "How many continents are there that contain the letter 'a'?",
    "SQL": "SELECT count(*) FROM CONTINENTS WHERE Continent LIKE '%a%';",
    "db_id": "car_1",
    "table_description": "Table containing continent information.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "模糊匹配",
          "condition": "%a%"
        }
      ]
    },
    "id": 612,
    "table_name": "CONTINENTS"
  },
  {
    "question": "How many continents are there that contain the letter 'a'?",
    "SQL": "SELECT count(*) FROM CONTINENTS WHERE Continent LIKE '%a%';",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "模糊匹配",
          "condition": "%a%"
        }
      ]
    },
    "id": 613,
    "table_name": "CONTINENTS"
  },
  {
    "question": "How many countries are listed in the continent of Europe?",
    "SQL": "SELECT count(*) FROM COUNTRIES WHERE Continent = 2;",
    "db_id": "car_1",
    "table_description": "Table contains country information including ID, name, and continent.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "等于",
          "condition": "2"
        }
      ]
    },
    "id": 614,
    "table_name": "COUNTRIES"
  },
  {
    "question": "How many countries exist in Europe?",
    "SQL": "SELECT count(*) FROM COUNTRIES WHERE Continent = 2;",
    "db_id": "car_1",
    "table_name": "COUNTRIES",
    "id": 615,
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "等于",
          "condition": "2"
        }
      ]
    }
  },
  {
    "question": "What is the average miles per gallon (mpg) of the cars with 8 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  8;",
    "db_id": "car_1",
    "table_description": "Contains car data including miles per gallon, number of cylinders, engine displacement, horsepower, weight, acceleration, and year.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "8"
        }
      ]
    },
    "id": 616,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average miles per gallon of all the cars with 8 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  8;",
    "db_id": "car_1",
    "table_description": "The CARS_DATA table contains information about various cars including their miles per gallon (MPG), number of cylinders, engine displacement, horsepower, weight, acceleration time, and model year.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "8"
        }
      ]
    },
    "id": 617,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the smallest weight of the car produced with 8 cylinders after 1970?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  >  1970",
    "db_id": "car_1",
    "table_description": "Contains information about various cars including their fuel efficiency (MPG), number of cylinders, engine displacement, horsepower, weight, acceleration time, and model year.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "大于",
          "condition": "1970"
        }
      ]
    },
    "id": 618,
    "table_name": "cars_data"
  },
  {
    "question": "What is the minimum weight of the car with 8 cylinders produced after 1970 ?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  >  1970",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "大于",
          "condition": "1970"
        }
      ]
    },
    "id": 619,
    "table_name": "cars_data"
  },
  {
    "question": "What are all the makers and models for Buick?",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST WHERE Model = 'buick';",
    "db_id": "car_1",
    "table_description": "Table contains information about car makers and their models.",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Model",
          "match_type": "精确匹配",
          "condition": "buick"
        }
      ]
    },
    "id": 620,
    "table_name": "MODEL_LIST"
  },
  {
    "question": "What are the makers and models for Buick?",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST WHERE Model = 'buick';",
    "db_id": "car_1",
    "table_description": "MODEL_LIST table contains information about car models and their makers.",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Model",
          "match_type": "精确匹配",
          "condition": "buick"
        }
      ]
    },
    "id": 621,
    "table_name": "MODEL_LIST"
  },
  {
    "question": "What is the number of the cars with weight more than 3500?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE weight  >  3500;",
    "db_id": "car_1",
    "table_description": "Table containing data about various cars including their specifications such as MPG, Cylinders, Engine Displacement, Horsepower, Weight, Acceleration, and Year.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "3500"
        }
      ]
    },
    "id": 622,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with a weight greater than 3500?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Weight  >  3500;",
    "db_id": "car_1",
    "table_description": "CARS_DATA contains information about different car models including their horsepower, weight, and year of manufacture.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Weight",
          "match_type": "大于",
          "condition": "3500"
        }
      ]
    },
    "id": 623,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average weight of cars with more than 300 engine displacement each year?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA WHERE Edispl > 300 GROUP BY YEAR;",
    "db_id": "car_1",
    "table_description": "Table containing data about cars including their engine displacement, weight, and year.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Edispl",
          "match_type": "大于",
          "condition": "300"
        }
      ]
    },
    "id": 624,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average weight and year for each year, but only for cars with more than 6 cylinders?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA WHERE Cylinders > 6 GROUP BY YEAR;",
    "db_id": "car_1",
    "table_description": "Table containing data about various cars including their weight and manufacturing year.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "6"
        }
      ]
    },
    "id": 625,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average horsepower of the cars with more than 300 engine displacement before 1980?",
    "SQL": "SELECT avg(horsepower) FROM CARS_DATA WHERE Edispl > 300 AND YEAR < 1980;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Edispl",
          "match_type": "大于",
          "condition": "300"
        },
        {
          "column": "YEAR",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "id": 626,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the average horsepower for all cars with 8 cylinders produced before 1980?",
    "SQL": "select avg(horsepower) from cars_data where cylinders = 8 and year < 1980;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "id": 627,
    "table_name": "cars_data"
  },
  {
    "question": "What is the maximum acceleration for cars with different numbers of cylinders, where the engine displacement is greater than 300?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA WHERE Edispl > 300 GROUP BY Cylinders;",
    "db_id": "car_1",
    "table_description": "CARS_DATA contains information about various car models including their performance metrics.",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Edispl",
          "match_type": "大于",
          "condition": "300"
        }
      ]
    },
    "id": 628,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the maximum acceleration for all the different cylinders with horsepower greater than 140?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA WHERE Horsepower > 140 GROUP BY Cylinders;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Horsepower",
          "match_type": "大于",
          "condition": "140"
        }
      ]
    },
    "id": 629,
    "table_name": "CARS_DATA"
  },
  {
    "question": "Which model has the most versions (make) of cars with a MakeId greater than 2?",
    "SQL": "SELECT Model FROM CAR_NAMES WHERE MakeId > 2 GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "Table containing car names with their respective models and makes.",
    "config": {
      "dimension": [
        {
          "column": "Model"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "MakeId",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 630,
    "table_name": "CAR_NAMES"
  },
  {
    "question": "What is the most common make among the models with the most different versions?",
    "SQL": "SELECT Make FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "Table containing car models and their makes.",
    "config": {
      "dimension": [
        {
          "column": "Make"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 631,
    "table_name": "CAR_NAMES"
  },
  {
    "question": "How many cars with an engine displacement greater than 300 have more than 4 cylinders?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4 AND Edispl  >  300;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "4"
        },
        {
          "column": "Edispl",
          "match_type": "大于",
          "condition": "300"
        }
      ]
    },
    "id": 632,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with an engine displacement greater than 300?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Edispl  >  300;",
    "db_id": "car_1",
    "table_description": "CARS_DATA contains information about various car models including their engine displacement.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Edispl",
          "match_type": "大于",
          "condition": "300"
        }
      ]
    },
    "id": 633,
    "table_name": "CARS_DATA"
  },
  {
    "question": "how many cars with 8 cylinders were produced in 1980?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980 AND Cylinders = 8;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "1980"
        },
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "8"
        }
      ]
    },
    "id": 634,
    "table_name": "CARS_DATA"
  },
  {
    "question": "How many cars had an engine displacement of 307.0?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Edispl  =  307.0;",
    "db_id": "car_1",
    "table_description": "The CARS_DATA table contains information about various car models including their engine displacement (Edispl).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Edispl",
          "match_type": "等于",
          "condition": "307.0"
        }
      ]
    },
    "id": 635,
    "table_name": "CARS_DATA"
  },
  {
    "question": "In which years cars with horsepower not less than 140 and no more than 165 were produced?",
    "SQL": "select distinct year from cars_data where horsepower between 140 and 165;",
    "db_id": "car_1",
    "table_description": "Contains information about different car models, including their year of manufacture, miles per gallon (MPG), number of cylinders, engine displacement, horsepower, weight, acceleration, and the model year.",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "horsepower",
          "match_type": "在区间",
          "condition": [
            140,
            165
          ]
        }
      ]
    },
    "id": 636,
    "table_name": "cars_data"
  },
  {
    "question": "What are the different years in which there were cars produced that had an engine displacement of more than 300?",
    "SQL": "select distinct year from cars_data where edispl > 300;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "edispl",
          "match_type": "大于",
          "condition": 300
        }
      ]
    },
    "table_name": "cars_data",
    "id": 637
  },
  {
    "question": "What is the horsepower of the car with the highest weight?",
    "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.weight DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "CARS_DATA contains information about various cars including their horsepower, weight, and acceleration.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "ORDER_BY_DESC_LIMIT_1",
          "condition": ""
        }
      ]
    },
    "id": 638,
    "table_name": "CARS_DATA AS T1"
  },
  {
    "question": "What is the horsepower of the car with the greatest acceleration that has a weight greater than 3500?",
    "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 WHERE T1.weight > 3500 ORDER BY T1.accelerate DESC LIMIT 1;",
    "db_id": "car_1",
    "table_description": "CARS_DATA AS T1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T1.horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "T1.weight",
          "match_type": "大于",
          "condition": "3500"
        }
      ]
    },
    "id": 639,
    "table_name": "CARS_DATA AS T1"
  },
  {
    "question": "How many cars have a larger acceleration time than the car with the heaviest weight?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Weight DESC LIMIT 1 );",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Accelerate",
          "match_type": "大于",
          "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Weight DESC LIMIT 1 )"
        }
      ]
    },
    "id": 640,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with a weight less than the lightest car with the most horsepower?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Weight < ( SELECT Weight FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Weight",
          "match_type": "小于",
          "condition": "( SELECT Weight FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )"
        }
      ]
    },
    "id": 641,
    "table_name": "CARS_DATA"
  },
  {
    "question": "How many cars with 8 cylinders have an engine displacement greater than 300?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders = 8 AND Edispl > 300;",
    "db_id": "car_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "Edispl",
          "match_type": "大于",
          "condition": "300"
        }
      ]
    },
    "id": 642,
    "table_name": "CARS_DATA"
  },
  {
    "question": "What is the number of cars with an engine displacement greater than 300?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Edispl > 300;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Edispl",
          "match_type": "大于",
          "condition": "300"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 643
  },
  {
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1975?",
    "SQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1975",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1975"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 644
  },
  {
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that had an engine displacement greater than 300?",
    "SQL": "select max(mpg) from cars_data where cylinders  =  8 or edispl  >  300",
    "db_id": "car_1",
    "table_description": "cars_data",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "edispl",
          "match_type": "大于",
          "condition": "300"
        }
      ]
    },
    "id": 645,
    "table_name": "cars_data"
  },
  {
    "question": "Which country does Airline with abbreviation 'Delta' belong to?",
    "SQL": "SELECT Country FROM AIRLINES WHERE Abbreviation = 'Delta'",
    "db_id": "flight_2",
    "table_description": "Table containing information about airlines including their unique ID, full name, abbreviation, and country of origin.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "Delta"
        }
      ]
    },
    "id": 646,
    "table_name": "AIRLINES"
  },
  {
    "question": "Which airline is associated with the abbreviation 'JetB'?",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'JetB'",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "JetB"
        }
      ]
    },
    "id": 647,
    "table_name": "AIRLINES"
  },
  {
    "question": "What is the abbreviation of Airline starting with 'U'?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline LIKE 'U%'",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "模糊匹配",
          "condition": "U%"
        }
      ]
    },
    "id": 648,
    "table_name": "AIRLINES"
  },
  {
    "question": "What is the abbreviation for Southwest Airlines?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'Southwest Airlines'",
    "db_id": "flight_2",
    "table_description": "Table containing airline information including unique ID, full airline name, abbreviation, and country.",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "Southwest Airlines"
        }
      ]
    },
    "id": 649,
    "table_name": "AIRLINES"
  },
  {
    "question": "List all airline names and their abbreviations for airlines that are not 'United Airlines'.",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Airline != 'United Airlines'",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "不等于",
          "condition": "United Airlines"
        }
      ]
    },
    "id": 650,
    "table_name": "AIRLINES"
  },
  {
    "question": "What are the airline names and abbreviations for airlines with 'A' in their names?",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Airline LIKE \"%A%\"",
    "db_id": "flight_2",
    "table_description": "This table contains information about various airlines including their unique ID, full name, abbreviation, and country of origin.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "模糊匹配",
          "condition": "%A%"
        }
      ]
    },
    "id": 651,
    "table_name": "AIRLINES"
  },
  {
    "question": "List the airport code and name in the country of United States.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE Country  =  \"United States\"",
    "db_id": "flight_2",
    "table_description": "Table contains information about airports including their codes, names, cities, countries, and country abbreviations.",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 652
  },
  {
    "question": "Give the airport code and airport name corresponding to the city Aberdeen.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE City  =  \"Aberdeen\"",
    "db_id": "flight_2",
    "table_description": "Table containing information about airports including their codes, names, cities, countries, and country abbreviations.",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Aberdeen"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 653
  },
  {
    "question": "How many airlines are there in the USA?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = 'USA'",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 654,
    "table_name": "AIRLINES"
  },
  {
    "question": "What is the total number of airlines in the USA?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = 'USA'",
    "db_id": "flight_2",
    "table_description": "The table contains information about different airlines including their unique ID, full name, abbreviation, and country of operation.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 655,
    "table_name": "AIRLINES"
  },
  {
    "question": "How many airports are there in the United States?",
    "SQL": "SELECT count(*) FROM AIRPORTS WHERE Country = 'United States'",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "id": 656,
    "table_name": "AIRPORTS"
  },
  {
    "question": "Return the number of airports in the United States.",
    "SQL": "SELECT count(*) FROM AIRPORTS WHERE Country = 'United States'",
    "db_id": "flight_2",
    "table_description": "The table contains information about airports including city, airport code, airport name, country, and country abbreviation.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "id": 657,
    "table_name": "AIRPORTS"
  },
  {
    "question": "How many flights do we have from the airport 'APG'?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "id": 658,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Return the number of flights from airport APG.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'",
    "db_id": "flight_2",
    "table_description": "The FLIGHTS table contains information about flights including airline, flight number, source airport, and destination airport.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "id": 659,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Which airline is abbreviated as 'USAir'?",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"USAir\"",
    "db_id": "flight_2",
    "table_description": "Table containing information about different airlines including their unique ID, full name, abbreviation, and country.",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "USAir"
        }
      ]
    },
    "id": 660,
    "table_name": "AIRLINES"
  },
  {
    "question": "How many airlines have the abbreviation 'UAL'?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Abbreviation = 'UAL'",
    "db_id": "flight_2",
    "table_description": "The AIRLINES table contains information about different airlines including their unique identifier (uid), full name (Airline), abbreviation (Abbreviation), and country of origin (Country).",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "UAL"
        }
      ]
    },
    "id": 662,
    "table_name": "AIRLINES"
  },
  {
    "question": "Return the number of airlines with the abbreviation 'UAL'.",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Abbreviation = 'UAL'",
    "db_id": "flight_2",
    "table_description": "The table contains information about airlines including their unique ID, name, abbreviation, and country.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "UAL"
        }
      ]
    },
    "id": 663,
    "table_name": "AIRLINES"
  },
  {
    "question": "Which city and country is the Municipal airport at in Aberdeen?",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Municipal\" AND City = \"Aberdeen\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "精确匹配",
          "condition": "Municipal"
        },
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Aberdeen"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 664
  },
  {
    "question": "Give the city and country for the Municipal airport in Aberdeen.",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Municipal\" AND City = \"Aberdeen\"",
    "db_id": "flight_2",
    "table_description": "The table contains information about airports, including the city, airport code, airport name, country, and country abbreviation.",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "精确匹配",
          "condition": "Municipal"
        },
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Aberdeen"
        }
      ]
    },
    "id": 665,
    "table_name": "AIRPORTS"
  },
  {
    "question": "What is the airport name for airport 'ABI' in Abilene?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"ABI\"",
    "db_id": "flight_2",
    "table_description": "Table containing information about airports, including city, airport code, airport name, country, and country abbreviation.",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "ABI"
        }
      ]
    },
    "id": 666,
    "table_name": "AIRPORTS"
  },
  {
    "question": "Return the name of the airport located in Aberdeen with code 'ABR'.",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen' AND AirportCode = 'ABR'",
    "db_id": "flight_2",
    "table_description": "Table containing information about airports including their city, code, name, country, and country abbreviation.",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Aberdeen"
        },
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "ABR"
        }
      ]
    },
    "id": 667,
    "table_name": "AIRPORTS"
  },
  {
    "question": "What are airport names at City 'Abilene'?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Abilene\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Abilene"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 668
  },
  {
    "question": "What are the names of airports with the code starting with 'A' in Aberdeen?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen' AND AirportCode LIKE 'A%'",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Aberdeen"
        },
        {
          "column": "AirportCode",
          "match_type": "模糊匹配",
          "condition": "A%"
        }
      ]
    },
    "id": 669,
    "table_name": "AIRPORTS"
  },
  {
    "question": "How many flights depart from 'ASY'?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"ASY\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "ASY"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 670
  },
  {
    "question": "Count the number of flights departing from 'ASY'.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"ASY\"",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "ASY"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 671
  },
  {
    "question": "How many flights have source airport AHD?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'AHD'",
    "db_id": "flight_2",
    "table_description": "FLIGHTS table contains flight information including airline, flight number, source airport, and destination airport.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "AHD"
        }
      ]
    },
    "id": 672,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Count the number of flights from CVO.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'CVO'",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "CVO"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 673
  },
  {
    "question": "What are flight numbers of flights departing from Airport \"ASY\"?",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"ASY\"",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "ASY"
        }
      ]
    },
    "id": 674,
    "table_name": "FLIGHTS"
  },
  {
    "question": "Give the flight numbers of flights arriving at ASY.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'ASY'",
    "db_id": "flight_2",
    "table_description": "FLIGHTS table contains flight information including flight number, source airport, and destination airport.",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "ASY"
        }
      ]
    },
    "id": 675,
    "table_name": "FLIGHTS"
  },
  {
    "question": "What are flight numbers of flights departing from Airport 'ASY'?",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'ASY'",
    "db_id": "flight_2",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "ASY"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 676
  },
  {
    "question": "Give the flight numbers of flights landing at ASY.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"ASY\"",
    "db_id": "flight_2",
    "table_description": "表FLIGHTS包含航班信息，列有航空公司(Airline)、航班号(FlightNo)、出发机场(SourceAirport)和到达机场(DestAirport)。",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "ASY"
        }
      ]
    },
    "id": 677,
    "table_name": "FLIGHTS"
  },
  {
    "question": "How many employees are there in Bristol?",
    "SQL": "SELECT count(*) FROM employee WHERE City = 'Bristol'",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Bristol"
        }
      ]
    },
    "id": 678,
    "table_name": "employee"
  },
  {
    "question": "Count the number of employees in Bristol",
    "SQL": "SELECT count(*) FROM employee WHERE City = 'Bristol'",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Bristol"
        }
      ]
    },
    "id": 679,
    "table_name": "employee"
  },
  {
    "question": "Sort employee names by their age in ascending order for employees from Bristol.",
    "SQL": "SELECT name FROM employee WHERE City = 'Bristol' ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table containing employee information such as ID, name, age, and city.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "exact_match",
          "condition": "Bristol"
        }
      ]
    },
    "id": 680,
    "table_name": "employee"
  },
  {
    "question": "List the names of employees from Bristol and sort in ascending order of age.",
    "SQL": "SELECT name FROM employee WHERE City = 'Bristol' ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "table_description": "The employee table contains information about employees including their ID, name, age, and city.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "exact_match",
          "condition": "Bristol"
        }
      ]
    },
    "id": 681,
    "table_name": "employee"
  },
  {
    "question": "What is the number of employees from each city who are older than 25?",
    "SQL": "SELECT count(*) ,  city FROM employee WHERE age > 25 GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "table_description": "This table contains information about employees, including their ID, name, age, and city.",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "25"
        }
      ]
    },
    "id": 682,
    "table_name": "employee"
  },
  {
    "question": "Count the number of employees for each city where the age is greater than 25.",
    "SQL": "SELECT count(*), city FROM employee WHERE age > 25 GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "25"
        }
      ]
    },
    "id": 683,
    "table_name": "employee"
  },
  {
    "question": "Which cities do employees under the age of 35 come from, with more than one employee in each city?",
    "SQL": "SELECT city FROM employee WHERE age < 35 GROUP BY city HAVING count(*) > 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "35"
        },
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 684,
    "table_name": "employee"
  },
  {
    "question": "Find the cities that have employees younger than 28 years old and more than one employee.",
    "SQL": "SELECT city FROM employee WHERE age < 28 GROUP BY city HAVING count(*) > 1",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "28"
        },
        {
          "column": "*",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 685,
    "table_name": "employee"
  },
  {
    "question": "Find the number of shops in each district.",
    "SQL": "SELECT count(*), District FROM shop GROUP BY District",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "id": 686,
    "table_name": "shop"
  },
  {
    "question": "How many shops are there in each location that have more than 5000 products?",
    "SQL": "SELECT count(*) ,  LOCATION FROM shop WHERE Number_products > 5000 GROUP BY LOCATION",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table shop contains information about various shops including their ID, name, location, district, number of products, and manager's name.",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "id": 687,
    "table_name": "shop"
  },
  {
    "question": "Find the manager name and district of the shop whose number of products is greater than 5000.",
    "SQL": "SELECT manager_name ,  district FROM shop WHERE number_products > 5000",
    "db_id": "employee_hire_evaluation",
    "table_description": "The shop table contains information about shops, including their ID, name, location, district, number of products, and manager name.",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "id": 688,
    "table_name": "shop"
  },
  {
    "question": "What are the manager name and district of the shop located in Helsinki that sells the largest number of products?",
    "SQL": "SELECT manager_name, district FROM shop WHERE location = 'Helsinki' ORDER BY number_products DESC LIMIT 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "Helsinki"
        }
      ]
    },
    "id": 689,
    "table_name": "shop"
  },
  {
    "question": "find the minimum and maximum number of products of all stores located in Helsinki.",
    "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop WHERE Location = 'Helsinki'",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "Helsinki"
        }
      ]
    },
    "id": 690,
    "table_name": "shop"
  },
  {
    "question": "What are the minimum and maximum number of products for shops located in Helsinki or Turku?",
    "SQL": "SELECT min(Number_products), max(Number_products) FROM shop WHERE Location IN ('Helsinki', 'Turku')",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table containing information about shops including their location and number of products.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Location",
          "match_type": "in",
          "condition": "['Helsinki', 'Turku']"
        }
      ]
    },
    "id": 691,
    "table_name": "shop"
  },
  {
    "question": "Return the name, location and district of all shops with more than 5000 products in descending order of number of products.",
    "SQL": "SELECT name ,  LOCATION ,  district FROM shop WHERE number_products > 5000 ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "LOCATION"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "id": 692,
    "table_name": "shop"
  },
  {
    "question": "Sort all the shops located in Helsinki or Espoo by number of products in descending order, and return the name, location, and district of each shop.",
    "SQL": "SELECT name, location, district FROM shop WHERE location IN ('Helsinki', 'Espoo') ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table containing information about shops including their ID, name, location, district, number of products, and manager name.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "location"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "Helsinki, Espoo"
        }
      ]
    },
    "id": 693,
    "table_name": "shop"
  },
  {
    "question": "Find the names of stores whose number of products is greater than 8000.",
    "SQL": "SELECT name FROM shop WHERE number_products  >  8000",
    "db_id": "employee_hire_evaluation",
    "table_description": "This table contains information about shops, including their name, location, district, number of products, and manager's name.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "AVG"
        },
        {
          "column": "number_products",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "8000"
        }
      ]
    },
    "id": 694,
    "table_name": "shop"
  },
  {
    "question": "Which shops located in Helsinki have a number of products above the average? Give me the shop names.",
    "SQL": "SELECT name FROM shop WHERE location = 'Helsinki' AND number_products > (SELECT avg(number_products) FROM shop)",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "AVG"
        },
        {
          "column": "number_products",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "location",
          "match_type": "精确匹配",
          "condition": "Helsinki"
        },
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "(SELECT avg(number_products) FROM shop)"
        }
      ]
    },
    "id": 695,
    "table_name": "shop"
  },
  {
    "question": "What is the total bonus given in evaluations for the year 2016?",
    "SQL": "SELECT sum(bonus) FROM evaluation WHERE Year_awarded = 2016",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Year_awarded",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "id": 696,
    "table_name": "evaluation"
  },
  {
    "question": "Find the total amount of bonus given in all the evaluations for the year 2016.",
    "SQL": "SELECT sum(bonus) FROM evaluation WHERE Year_awarded = 2016",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table containing employee evaluations with their respective bonus amounts and the year they were awarded.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Year_awarded",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "id": 697,
    "table_name": "evaluation"
  },
  {
    "question": "Give me all the information about hiring where the employee is full-time.",
    "SQL": "SELECT * FROM hiring WHERE Is_full_time = 'T'",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "Is_full_time",
          "match_type": "精确匹配",
          "condition": "T"
        }
      ]
    },
    "id": 698,
    "table_name": "hiring"
  },
  {
    "question": "What is all the information about full-time hiring?",
    "SQL": "SELECT * FROM hiring WHERE Is_full_time = 'T'",
    "db_id": "employee_hire_evaluation",
    "table_description": "Table containing information about employee hiring, including shop ID, employee ID, start year, and full-time status.",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "Is_full_time",
          "match_type": "精确匹配",
          "condition": "T"
        }
      ]
    },
    "id": 699,
    "table_name": "hiring"
  },
  {
    "question": "Which district has both stores with less than 3516 products and stores with more than 10770 products?",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  3516 INTERSECT SELECT district FROM shop WHERE Number_products  >  10770",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "3516"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "10770"
        }
      ]
    },
    "table_name": "shop",
    "id": 700
  },
  {
    "question": "Find the districts in which there are both shops selling fewer than 5000 products and shops selling more than 8000 products.",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  5000 INTERSECT SELECT district FROM shop WHERE Number_products  >  8000",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "5000"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "8000"
        }
      ]
    },
    "id": 701,
    "table_name": "shop"
  },
  {
    "question": "How many different store locations are there in Helsinki or Turku?",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop WHERE Location IN ('Helsinki', 'Turku')",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Location",
          "match_type": "精确匹配",
          "condition": "Helsinki,Turku"
        }
      ]
    },
    "id": 702,
    "table_name": "shop"
  },
  {
    "question": "Count the number of distinct store locations in Espoo.",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop WHERE District = 'Espoo'",
    "db_id": "employee_hire_evaluation",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "District",
          "match_type": "精确匹配",
          "condition": "Espoo"
        }
      ]
    },
    "id": 703,
    "table_name": "shop"
  },
  {
    "question": "How many documents are related to the template with ID 7?",
    "SQL": "SELECT count(*) FROM Documents WHERE Template_ID = 7",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Template_ID",
          "match_type": "等于",
          "condition": "7"
        }
      ]
    },
    "id": 704,
    "table_name": "Documents"
  },
  {
    "question": "Count the number of documents with a template ID of 25.",
    "SQL": "SELECT count(*) FROM Documents WHERE Template_ID = 25",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Template_ID",
          "match_type": "等于",
          "condition": "25"
        }
      ]
    },
    "id": 705,
    "table_name": "Documents"
  },
  {
    "question": "What are the ids, names, and descriptions for all documents with Template ID 25?",
    "SQL": "SELECT document_id ,  document_name ,  document_description FROM Documents WHERE template_id = 25",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "document_name"
        },
        {
          "column": "document_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_id",
          "match_type": "等于",
          "condition": "25"
        }
      ]
    },
    "id": 706,
    "table_name": "Documents"
  },
  {
    "question": "What is the document name and template id for documents with 'u' in the other details?",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Other_Details LIKE \"%u%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their names, template IDs, descriptions, and other details.",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Other_Details",
          "match_type": "模糊匹配",
          "condition": "%u%"
        }
      ]
    },
    "table_name": "Documents",
    "id": 707
  },
  {
    "question": "Return the names and template ids for documents that have a template id of 25.",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Template_ID = 25",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Template_ID",
          "match_type": "等于",
          "condition": "25"
        }
      ]
    },
    "id": 708,
    "table_name": "Documents"
  },
  {
    "question": "What is the document id, template id and description for documents related to 'CV'?",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name LIKE \"%CV%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their IDs, template IDs, names, descriptions, and other details.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "模糊匹配",
          "condition": "%CV%"
        }
      ]
    },
    "id": 709,
    "table_name": "Documents"
  },
  {
    "question": "Return the document id, template id, and description for the document with the name Understanding DB.",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Understanding DB'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "精确匹配",
          "condition": "Understanding DB"
        }
      ]
    },
    "table_name": "Documents",
    "id": 710
  },
  {
    "question": "How many different templates are used by documents with a description of 'y'?",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents WHERE Document_Description = 'y'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about different documents and their associated templates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "精确匹配",
          "condition": "y"
        }
      ]
    },
    "id": 711,
    "table_name": "Documents"
  },
  {
    "question": "Count the number of different templates used for documents with the document description 'y'.",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents WHERE Document_Description = 'y'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their IDs, template IDs, names, descriptions, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "精确匹配",
          "condition": "y"
        }
      ]
    },
    "id": 712,
    "table_name": "Documents"
  },
  {
    "question": "Show all template ids and number of documents using each template where the document description is 'y'.",
    "SQL": "SELECT template_id ,  count(*) FROM Documents WHERE Document_Description = 'y' GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "The Documents table contains information about various documents including their IDs, template IDs, names, descriptions, and other details.",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "精确匹配",
          "condition": "y"
        }
      ]
    },
    "id": 713,
    "table_name": "Documents"
  },
  {
    "question": "What are all different template ids used for documents with a document description of 'y', and how many times were each of them used?",
    "SQL": "SELECT template_id ,  count(*) FROM Documents WHERE Document_Description = 'y' GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their IDs, template IDs, names, descriptions, and other details.",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "精确匹配",
          "condition": "y"
        }
      ]
    },
    "id": 714,
    "table_name": "Documents"
  },
  {
    "question": "Show ids for all templates that have at least two documents with a 'y' in the Document_Description field.",
    "SQL": "SELECT template_id FROM Documents WHERE Document_Description = 'y' GROUP BY template_id HAVING count(*) >= 2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Documents table contains information about various documents including their template IDs and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "等于",
          "condition": "y"
        },
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 715,
    "table_name": "Documents"
  },
  {
    "question": "What are the template ids of any templates used in more than two documents?",
    "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "table_name": "Documents",
    "id": 716
  },
  {
    "question": "How many templates of type 'PPT' do we have?",
    "SQL": "SELECT count(*) FROM Templates WHERE Template_Type_Code = 'PPT'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Template_Type_Code",
          "match_type": "精确匹配",
          "condition": "PPT"
        }
      ]
    },
    "id": 717,
    "table_name": "Templates"
  },
  {
    "question": "Count the number of templates that are effective after 2000-01-01.",
    "SQL": "SELECT count(*) FROM Templates WHERE Date_Effective_From > '2000-01-01'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "大于",
          "condition": "2000-01-01"
        }
      ]
    },
    "id": 718,
    "table_name": "Templates"
  },
  {
    "question": "Show template ids, version numbers, and template type codes for templates effective from 1990-01-01 to 2000-12-31.",
    "SQL": "SELECT template_id ,  version_number ,  template_type_code FROM Templates WHERE Date_Effective_From BETWEEN '1990-01-01' AND '2000-12-31'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        },
        {
          "column": "version_number"
        },
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "绝对时间",
          "condition": [
            "1990-01-01",
            "2000-12-31"
          ]
        }
      ]
    },
    "table_name": "Templates",
    "id": 719
  },
  {
    "question": "Show all distinct template type codes for templates effective from 1990-01-01 to 2000-01-01.",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates WHERE Date_Effective_From BETWEEN '1990-01-01' AND '2000-01-01'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Templates table contains information about different document templates including their type codes and effective dates.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "绝对时间",
          "condition": [
            "1990-01-01",
            "2000-01-01"
          ]
        }
      ]
    },
    "id": 720,
    "table_name": "Templates"
  },
  {
    "question": "What are the different template type codes that have been effective since 2000?",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates WHERE Date_Effective_From >= '2000-01-01'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Templates table contains information about document templates including their type, version, and effective dates.",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "绝对时间",
          "condition": "['2000-01-01', null]"
        }
      ]
    },
    "id": 721,
    "table_name": "Templates"
  },
  {
    "question": "Return the ids of templates that have the type code PP or are effective from 1975-05-20 to 1992-05-02.",
    "SQL": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR (Date_Effective_From >= '1975-05-20' AND Date_Effective_From <= '1992-05-02')",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "PP"
        },
        {
          "column": "Date_Effective_From",
          "match_type": "在区间",
          "condition": [
            "1975-05-20",
            "1992-05-02"
          ]
        }
      ]
    },
    "table_name": "Templates",
    "id": 722
  },
  {
    "question": "How many templates are effective on or after 2005-11-12?",
    "SQL": "SELECT count(*) FROM Templates WHERE Date_Effective_From >= '2005-11-12'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "大于等于",
          "condition": "2005-11-12"
        }
      ]
    },
    "id": 723,
    "table_name": "Templates"
  },
  {
    "question": "Count the number of templates that are effective on or after 2005-11-12.",
    "SQL": "SELECT count(*) FROM Templates WHERE Date_Effective_From >= '2005-11-12'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "大于等于",
          "condition": "2005-11-12"
        }
      ]
    },
    "id": 724,
    "table_name": "Templates"
  },
  {
    "question": "What is the version number and template type code for the template with an effective date of '2010-09-24' or later?",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE Date_Effective_From  >=  '2010-09-24'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Templates table contains information about document templates including their version numbers, type codes, and effective dates.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "None"
        }
      ],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "大于等于",
          "condition": "2010-09-24"
        }
      ]
    },
    "id": 725,
    "table_name": "Templates"
  },
  {
    "question": "Return the version numbers and template type codes of templates with a template type code of 'BK'.",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE template_type_code  =  'BK'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "BK"
        }
      ]
    },
    "id": 726,
    "table_name": "Templates"
  },
  {
    "question": "Show all template type codes and the number of templates for each, but only for templates that are effective from 2005 to 2010.",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates WHERE Date_Effective_From BETWEEN '2005-01-01' AND '2010-12-31' GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Templates table contains information about different document templates including their type codes and effective dates.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "绝对时间",
          "condition": [
            "2005-01-01",
            "2010-12-31"
          ]
        }
      ]
    },
    "id": 727,
    "table_name": "Templates"
  },
  {
    "question": "What are the different template type codes, and how many templates correspond to each for templates effective from 2005-01-01 to 2010-12-31?",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates WHERE Date_Effective_From BETWEEN '2005-01-01' AND '2010-12-31' GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "absolute_time",
          "condition": [
            "2005-01-01",
            "2010-12-31"
          ]
        }
      ]
    },
    "id": 728,
    "table_name": "Templates"
  },
  {
    "question": "What is the template type code that has the most templates created after 2000?",
    "SQL": "SELECT template_type_code FROM Templates WHERE Date_Effective_From > '2000-01-01' GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing details about document templates.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "大于",
          "condition": "2000-01-01"
        }
      ]
    },
    "id": 729,
    "table_name": "Templates"
  },
  {
    "question": "Return the type code of the template type that the most templates belong to, where the template details are not empty.",
    "SQL": "SELECT template_type_code FROM Templates WHERE Template_Details != '' GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "Template_Details",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "id": 730,
    "table_name": "Templates"
  },
  {
    "question": "Show all template type codes with more than two templates.",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  >  2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 731,
    "table_name": "Templates"
  },
  {
    "question": "What are the codes of template types that have fewer than 3 templates created after 2000?",
    "SQL": "SELECT template_type_code FROM Templates WHERE Date_Effective_From > '2000-01-01' GROUP BY template_type_code HAVING COUNT(*) < 3",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "大于",
          "condition": "2000-01-01"
        },
        {
          "column": "COUNT(*)",
          "match_type": "小于",
          "condition": "3"
        }
      ]
    },
    "id": 732,
    "table_name": "Templates"
  },
  {
    "question": "What is the smallest version number for the template type code 'BK'?",
    "SQL": "SELECT min(Version_Number) FROM Templates WHERE Template_Type_Code = 'BK'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing information about document templates.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Template_Type_Code",
          "match_type": "精确匹配",
          "condition": "BK"
        }
      ]
    },
    "id": 733,
    "table_name": "Templates"
  },
  {
    "question": "Return the lowest version number of templates effective before 2000, along with its corresponding template type code.",
    "SQL": "SELECT min(Version_Number), template_type_code FROM Templates WHERE Date_Effective_From < '2000-01-01' GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing document templates with their version numbers, type codes, and effective dates.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "min"
        }
      ],
      "filter": [
        {
          "column": "Date_Effective_From",
          "match_type": "绝对时间",
          "condition": [
            "",
            "2000-01-01"
          ]
        }
      ]
    },
    "id": 734,
    "table_name": "Templates"
  },
  {
    "question": "Show all template type codes and descriptions that are related to 'Presentation'.",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types WHERE template_type_description LIKE '%Presentation%'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "模糊匹配",
          "condition": "Presentation"
        }
      ]
    },
    "id": 735,
    "table_name": "Ref_template_types"
  },
  {
    "question": "What are the type codes and descriptions for all template types related to 'Presentation'?",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types WHERE template_type_description LIKE '%Presentation%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Reference table for document template types",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "模糊匹配",
          "condition": "%Presentation%"
        }
      ]
    },
    "id": 736,
    "table_name": "Ref_template_types"
  },
  {
    "question": "What is the template type description for template type code \"CV\".",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "CV"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 737
  },
  {
    "question": "Return the template type description of the template type with the code CV.",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Reference table for document template types",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "CV"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 738
  },
  {
    "question": "What is the template type code for template type description containing the word \"Presentation\"?",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description LIKE '%Presentation%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Ref_template_types table contains template types with their codes and descriptions.",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "模糊匹配",
          "condition": "Presentation"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 739
  },
  {
    "question": "Return the type code of the template type with the description similar to \"Presentation\".",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  LIKE  \"%Presentation%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "模糊匹配",
          "condition": "%Presentation%"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 740
  },
  {
    "question": "How many paragraphs are there for Document ID 3?",
    "SQL": "SELECT count(*) FROM Paragraphs WHERE Document_ID = 3",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Document_ID",
          "match_type": "等于",
          "condition": "3"
        }
      ]
    },
    "id": 741,
    "table_name": "Paragraphs"
  },
  {
    "question": "Count the number of paragraphs with Document ID 3.",
    "SQL": "SELECT count(*) FROM Paragraphs WHERE Document_ID = 3",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Document_ID",
          "match_type": "等于",
          "condition": "3"
        }
      ]
    },
    "id": 742,
    "table_name": "Paragraphs"
  },
  {
    "question": "What are the details for the paragraph that mentions 'Palestinian Territory'?",
    "SQL": "select other_details from paragraphs where paragraph_text like '%Palestinian Territory%'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "模糊匹配",
          "condition": "Palestinian Territory"
        }
      ]
    },
    "id": 743,
    "table_name": "paragraphs"
  },
  {
    "question": "Show all document ids with more than 1 paragraph and the number of paragraphs in each document. Order by document id.",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id HAVING count(*) > 1 ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing paragraphs of documents with their IDs and text content.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "document_id",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "id": 744,
    "table_name": "Paragraphs"
  },
  {
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, where the document ID is greater than 5000, ordered by id.",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs WHERE document_id > 5000 GROUP BY document_id ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "document_id",
          "match_type": "大于",
          "condition": "5000"
        }
      ]
    },
    "id": 745,
    "table_name": "Paragraphs"
  },
  {
    "question": "List all document ids with at least one paragraph related to the UK.",
    "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text LIKE '%UK%' GROUP BY document_id HAVING count(*)  >=  1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing paragraphs of documents with their details.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "Paragraph_Text",
          "match_type": "模糊匹配",
          "condition": "UK"
        },
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "1"
        }
      ]
    },
    "id": 746,
    "table_name": "Paragraphs"
  },
  {
    "question": "What are the ids of documents that contain the word 'UK' in any paragraph?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text LIKE '%UK%' GROUP BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Paragraph_Text",
          "match_type": "模糊匹配",
          "condition": "UK"
        }
      ]
    },
    "id": 747,
    "table_name": "Paragraphs"
  },
  {
    "question": "What is the document id with the least number of paragraphs that contain the word 'Somalia'?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text LIKE '%Somalia%' GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "Paragraph_Text",
          "match_type": "模糊匹配",
          "condition": "Somalia"
        }
      ]
    },
    "id": 748,
    "table_name": "Paragraphs"
  },
  {
    "question": "Return the id of the document that contains the paragraph 'UK'.",
    "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text = 'UK' LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing paragraphs of different documents.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Paragraph_Text",
          "match_type": "精确匹配",
          "condition": "UK"
        }
      ]
    },
    "id": 749,
    "table_name": "Paragraphs"
  },
  {
    "question": "What is the document id with 1 to 2 paragraphs that contain the word 'Korea'?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%' GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "Paragraph_Text",
          "match_type": "模糊匹配",
          "condition": "Korea"
        },
        {
          "column": "count(*)",
          "match_type": "在区间",
          "condition": [
            1,
            2
          ]
        }
      ]
    },
    "id": 750,
    "table_name": "Paragraphs"
  },
  {
    "question": "Give the ids of documents that have more than two paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) > 2",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing paragraphs of documents with their respective document IDs.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": 2
        }
      ]
    },
    "id": 751,
    "table_name": "Paragraphs"
  },
  {
    "question": "Show the document id with paragraph text containing 'Korea' and 'UK'.",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Korea%' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%UK%'",
    "db_id": "cre_Doc_Template_Mgt",
    "table_description": "Table containing paragraphs of documents with their respective document IDs.",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "模糊匹配",
          "condition": "Korea"
        },
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Ireland"
        }
      ]
    },
    "id": 752,
    "table_name": "Paragraphs"
  },
  {
    "question": "What are the ids of documents that contain the paragraph text related to 'Korea' and 'Ireland'?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Korea%' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Ireland%'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "模糊匹配",
          "condition": "Korea"
        },
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Ireland"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 753
  },
  {
    "question": "How many teachers are there who are from Bolton County Borough?",
    "SQL": "SELECT count(*) FROM teacher WHERE Hometown = 'Bolton County Borough'",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about the teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "exact_match",
          "condition": "Bolton County Borough"
        }
      ]
    },
    "id": 754,
    "table_name": "teacher"
  },
  {
    "question": "What is the total count of teachers who are older than 30?",
    "SQL": "SELECT count(*) FROM teacher WHERE Age > 30",
    "db_id": "course_teach",
    "table_description": "Table containing information about teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 755,
    "table_name": "teacher"
  },
  {
    "question": "List the names of teachers from Kearsley Urban District in ascending order of age.",
    "SQL": "SELECT Name FROM teacher WHERE Hometown = 'Kearsley Urban District' ORDER BY Age ASC",
    "db_id": "course_teach",
    "table_description": "Table containing information about teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "精确匹配",
          "condition": "Kearsley Urban District"
        }
      ]
    },
    "id": 756,
    "table_name": "teacher"
  },
  {
    "question": "What are the names of the teachers from Kearsley Urban District ordered by ascending age?",
    "SQL": "SELECT Name FROM teacher WHERE Hometown = 'Kearsley Urban District' ORDER BY Age ASC",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "精确匹配",
          "condition": "Kearsley Urban District"
        }
      ]
    },
    "id": 757,
    "table_name": "teacher"
  },
  {
    "question": "What are the age and hometown of teachers from Kearsley Urban District?",
    "SQL": "SELECT Age ,  Hometown FROM teacher WHERE Hometown = 'Kearsley Urban District'",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "精确匹配",
          "condition": "Kearsley Urban District"
        }
      ]
    },
    "id": 758,
    "table_name": "teacher"
  },
  {
    "question": "What is the age and hometown of every teacher who is older than 30?",
    "SQL": "SELECT Age ,  Hometown FROM teacher WHERE Age > 30",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 759,
    "table_name": "teacher"
  },
  {
    "question": "List the name of teachers whose age is not 32.",
    "SQL": "select name from teacher where age != 32",
    "db_id": "course_teach",
    "table_description": "The teacher table contains information about teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "不等于",
          "condition": "32"
        }
      ]
    },
    "id": 760,
    "table_name": "teacher"
  },
  {
    "question": "What are the names of the teachers whose age is greater than 30?",
    "SQL": "select name from teacher where age > 30",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "table_name": "teacher",
    "id": 761
  },
  {
    "question": "Show the name of teachers from Blackrod Urban District or Horwich Urban District?",
    "SQL": "SELECT Name FROM teacher WHERE Hometown  =  'Blackrod Urban District' OR Hometown  =  'Horwich Urban District'",
    "db_id": "course_teach",
    "table_description": "Table contains information about teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "等于",
          "condition": "Blackrod Urban District"
        },
        {
          "column": "Hometown",
          "match_type": "等于",
          "condition": "Horwich Urban District"
        }
      ]
    },
    "id": 762,
    "table_name": "teacher"
  },
  {
    "question": "What are the names of the teachers who are aged either 29 or 33?",
    "SQL": "SELECT Name FROM teacher WHERE Age  =  29 OR Age  =  33",
    "db_id": "course_teach",
    "table_description": "This table contains information about teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "29"
        },
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "33"
        }
      ]
    },
    "id": 763,
    "table_name": "teacher"
  },
  {
    "question": "What is the hometown of the oldest teacher?",
    "SQL": "SELECT Hometown FROM teacher ORDER BY Age DESC LIMIT 1",
    "db_id": "course_teach",
    "table_description": "Table containing information about teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "最大值",
          "condition": ""
        }
      ]
    },
    "id": 764,
    "table_name": "teacher"
  },
  {
    "question": "Where is the teacher who is 26 years old from?",
    "SQL": "SELECT Hometown FROM teacher WHERE Age = 26",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "26"
        }
      ]
    },
    "id": 765,
    "table_name": "teacher"
  },
  {
    "question": "Show different hometowns of teachers and the number of teachers from each hometown, excluding those from Kearsley Urban District.",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher WHERE Hometown != 'Kearsley Urban District' GROUP BY Hometown",
    "db_id": "course_teach",
    "table_description": "Table containing information about teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Hometown",
          "match_type": "不等于",
          "condition": "Kearsley Urban District"
        }
      ]
    },
    "id": 766,
    "table_name": "teacher"
  },
  {
    "question": "For each hometown, how many teachers who are older than 30 are there?",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher WHERE Age > 30 GROUP BY Hometown",
    "db_id": "course_teach",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 767,
    "table_name": "teacher"
  },
  {
    "question": "List the most common hometown of teachers who are older than 30.",
    "SQL": "SELECT Hometown FROM teacher WHERE Age > 30 GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "table_description": "Table 'teacher' contains information about teachers including their ID, name, age, and hometown.",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 768,
    "table_name": "teacher"
  },
  {
    "question": "What is the most common hometown for teachers who are younger than 35?",
    "SQL": "SELECT Hometown FROM teacher WHERE Age < 35 GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "小于",
          "condition": "35"
        }
      ]
    },
    "id": 769,
    "table_name": "teacher"
  },
  {
    "question": "Show the hometowns shared by at least three teachers.",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  3",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "3"
        }
      ]
    },
    "table_name": "teacher",
    "id": 770
  },
  {
    "question": "What are the towns from which at least two teachers younger than 30 come from?",
    "SQL": "SELECT Hometown FROM teacher WHERE Age < 30 GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Age",
          "match_type": "小于",
          "condition": "30"
        },
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 771,
    "table_name": "teacher"
  },
  {
    "question": "How many visitors with a membership level of 5 or higher are there?",
    "SQL": "SELECT count(*) FROM visitor WHERE Level_of_membership >= 5",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "大于等于",
          "condition": "5"
        }
      ]
    },
    "id": 772,
    "table_name": "visitor"
  },
  {
    "question": "Find the names of the visitors whose age is greater than 30, and order the results by the level from high to low.",
    "SQL": "SELECT name FROM visitor WHERE Age  >  30 ORDER BY Level_of_membership DESC",
    "db_id": "museum_visit",
    "table_description": "The visitor table contains information about museum visitors including their ID, name, membership level, and age.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 773,
    "table_name": "visitor"
  },
  {
    "question": "What is the average age of the visitors whose membership level is not lower than 5?",
    "SQL": "SELECT avg(age) FROM visitor WHERE Level_of_membership  >=  5",
    "db_id": "museum_visit",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "大于等于",
          "condition": "5"
        }
      ]
    },
    "id": 774,
    "table_name": "visitor"
  },
  {
    "question": "Find the name and membership level of the visitors whose age is less than 30, and sort by their age from old to young.",
    "SQL": "SELECT name ,  Level_of_membership FROM visitor WHERE Age  <  30 ORDER BY age DESC",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "Level_of_membership"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "小于",
          "condition": "30"
        }
      ]
    },
    "table_name": "visitor",
    "id": 775
  },
  {
    "question": "Find the id and name of the museum that opened before 2010 and has the most staff members?",
    "SQL": "SELECT museum_id ,  name FROM museum WHERE open_year < 2010 ORDER BY num_of_staff DESC LIMIT 1",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "museum_id"
        },
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "小于",
          "condition": "2010"
        }
      ]
    },
    "id": 776,
    "table_name": "museum"
  },
  {
    "question": "Find the average number of staff working for the museums that were opened in 2008.",
    "SQL": "SELECT avg(num_of_staff) FROM museum WHERE open_year = 2008",
    "db_id": "museum_visit",
    "table_description": "Table containing information about various museums including their ID, name, number of staff, and year they opened.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "等于",
          "condition": "2008"
        }
      ]
    },
    "id": 777,
    "table_name": "museum"
  },
  {
    "question": "What are the opening year and staff number of the museum that has more than 20 staff members?",
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE Num_of_Staff  >  20",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "Open_Year"
        },
        {
          "column": "Num_of_Staff"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Num_of_Staff",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "table_name": "museum",
    "id": 778
  },
  {
    "question": "find the names of museums which have more staff than the minimum staff number of all museums with an odd number of staff opened after 2010.",
    "SQL": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010 AND MOD(num_of_staff, 2) = 1)",
    "db_id": "museum_visit",
    "table_description": "A table containing information about different museums, including their ID, name, number of staff, and opening year.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "NONE"
        },
        {
          "column": "num_of_staff",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2010"
        },
        {
          "column": "num_of_staff",
          "match_type": "大于",
          "condition": "(SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010 AND MOD(num_of_staff, 2) = 1)"
        }
      ]
    },
    "id": 779,
    "table_name": "museum"
  },
  {
    "question": "What are the average and maximum number of tickets bought in all visits where the total spent is greater than 100?",
    "SQL": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit WHERE Total_spent > 100",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_ticket",
          "aggregate_function": "avg"
        },
        {
          "column": "num_of_ticket",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Total_spent",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 780,
    "table_name": "visit"
  },
  {
    "question": "How many museums have more than 20 staff members or were opened before 2008?",
    "SQL": "SELECT count(*) FROM museum WHERE Num_of_Staff  >  20 OR open_year  <  2008",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Num_of_Staff",
          "match_type": "大于",
          "condition": "20"
        },
        {
          "column": "open_year",
          "match_type": "小于",
          "condition": "2008"
        }
      ]
    },
    "table_name": "museum",
    "id": 781
  },
  {
    "question": "Find the total number of right-handed players.",
    "SQL": "SELECT count(*) FROM players WHERE hand = 'R'",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their player ID, first name, last name, hand (left or right), birth date, and country code.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 782,
    "table_name": "players"
  },
  {
    "question": "How many right-handed players are there?",
    "SQL": "SELECT count(*) FROM players WHERE hand = 'R'",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their ID, first name, last name, playing hand, birth date, and country code.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 783,
    "table_name": "players"
  },
  {
    "question": "Find the total number of matches where the tournament level is 'W'.",
    "SQL": "SELECT count(*) FROM matches WHERE tourney_level = 'W'",
    "db_id": "wta_1",
    "table_description": "Table matches contains detailed information about tennis matches including players, scores, and tournament details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "tourney_level",
          "match_type": "精确匹配",
          "condition": "W"
        }
      ]
    },
    "id": 784,
    "table_name": "matches"
  },
  {
    "question": "Count the number of matches where the winner is Serena Williams.",
    "SQL": "SELECT count(*) FROM matches WHERE winner_name = 'Serena Williams'",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "winner_name",
          "match_type": "精确匹配",
          "condition": "Serena Williams"
        }
      ]
    },
    "id": 785,
    "table_name": "matches"
  },
  {
    "question": "List the first name and birth date of all players from the country with code AUS.",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'AUS'",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "AUS"
        }
      ]
    },
    "table_name": "players",
    "id": 786
  },
  {
    "question": "What are the first names and birth dates of players born after 1980 from the USA?",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA' AND birth_date > '1980-01-01'",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "USA"
        },
        {
          "column": "birth_date",
          "match_type": "大于",
          "condition": "1980-01-01"
        }
      ]
    },
    "table_name": "players",
    "id": 787
  },
  {
    "question": "Find the average age of losers and winners of all matches where the tournament level is 'W'.",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches WHERE tourney_level = 'W'",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches, including details about the players, the tournament, and the match results.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "tourney_level",
          "match_type": "等于",
          "condition": "W"
        }
      ]
    },
    "id": 788,
    "table_name": "matches"
  },
  {
    "question": "What are the average ages of losers and winners across matches where the tournament level is 'W'?",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches WHERE tourney_level = 'W'",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "tourney_level",
          "match_type": "等于",
          "condition": "W"
        }
      ]
    },
    "id": 789,
    "table_name": "matches"
  },
  {
    "question": "Find the average rank of winners in all matches where the winner's age is greater than 30.",
    "SQL": "SELECT avg(winner_rank) FROM matches WHERE winner_age > 30",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains match details including player information, match results, and tournament details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "winner_age",
          "match_type": "大于",
          "condition": "30"
        }
      ]
    },
    "id": 790,
    "table_name": "matches"
  },
  {
    "question": "What is the average rank for winners in matches where the tournament level is W?",
    "SQL": "SELECT avg(winner_rank) FROM matches WHERE tourney_level = 'W'",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "tourney_level",
          "match_type": "精确匹配",
          "condition": "W"
        }
      ]
    },
    "id": 791,
    "table_name": "matches"
  },
  {
    "question": "Find the highest rank of losers in all matches where the tournament level is W.",
    "SQL": "SELECT min(loser_rank) FROM matches WHERE tourney_level = 'W'",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "tourney_level",
          "match_type": "精确匹配",
          "condition": "W"
        }
      ]
    },
    "id": 792,
    "table_name": "matches"
  },
  {
    "question": "What is the best rank of losers across all matches in the WTA Championships tournament?",
    "SQL": "SELECT min(loser_rank) FROM matches WHERE tourney_name = 'WTA Championships'",
    "db_id": "wta_1",
    "table_description": "Table containing match details including players' ranks, scores, and tournament information.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        }
      ]
    },
    "id": 793,
    "table_name": "matches"
  },
  {
    "question": "find the number of distinct country codes of all right-handed players.",
    "SQL": "SELECT count(DISTINCT country_code) FROM players WHERE hand = 'R'",
    "db_id": "wta_1",
    "table_description": "players table contains player information including their unique ID, first name, last name, hand (L for left, R for right), birth date, and country code.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 794,
    "table_name": "players"
  },
  {
    "question": "How many distinct countries do right-handed players come from?",
    "SQL": "SELECT count(DISTINCT country_code) FROM players WHERE hand = 'R'",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their player ID, first name, last name, hand (left or right), birth date, and country code.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 795,
    "table_name": "players"
  },
  {
    "question": "Find the number of distinct name of losers with a loser rank less than 10.",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches WHERE loser_rank < 10",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "loser_rank",
          "match_type": "less_than",
          "condition": "10"
        }
      ]
    },
    "id": 796,
    "table_name": "matches"
  },
  {
    "question": "How many different loser names are there for matches where the winner is Serena Williams?",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches WHERE winner_name = 'Serena Williams'",
    "db_id": "wta_1",
    "table_description": "matches table contains information about tennis matches including the winner and loser details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "winner_name",
          "match_type": "精确匹配",
          "condition": "Serena Williams"
        }
      ]
    },
    "id": 797,
    "table_name": "matches"
  },
  {
    "question": "Find the name of tourney that has more than 5 matches with Serena Williams as a participant.",
    "SQL": "SELECT tourney_name FROM matches WHERE winner_name = 'Serena Williams' OR loser_name = 'Serena Williams' GROUP BY tourney_name HAVING COUNT(*) > 5",
    "db_id": "wta_1",
    "table_description": "The matches table contains information about tennis matches including the tournament name, players, and match details.",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "winner_name",
          "match_type": "等于",
          "condition": "Serena Williams"
        },
        {
          "column": "loser_name",
          "match_type": "等于",
          "condition": "Serena Williams"
        },
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 798,
    "table_name": "matches"
  },
  {
    "question": "What are the names of tournaments that have more than 5 rounds?",
    "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(DISTINCT round) > 5",
    "db_id": "wta_1",
    "table_description": "The table 'matches' contains information about tennis matches, including the tournament name, date, and details about the players and the match.",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "round",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "COUNT(DISTINCT round)",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 799,
    "table_name": "matches"
  },
  {
    "question": "List the names of all winners who played in the WTA Championships and in 2016.",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains information about tennis matches including tournament details, player information, and match outcomes.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "id": 800,
    "table_name": "matches"
  },
  {
    "question": "What are the names of players who won in 2013 and have a winner rank of 1?",
    "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 AND winner_rank  =  1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "winner_rank",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "id": 801,
    "table_name": "matches"
  },
  {
    "question": "List the number of all matches that took place on hard surfaces in years of 2013 or 2016.",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016 AND surface  =  'Hard'",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "surface",
          "match_type": "等于",
          "condition": "Hard"
        }
      ]
    },
    "table_name": "matches",
    "id": 802
  },
  {
    "question": "How many matches were played in the WTA Championships tournament in 2013 or 2016?",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR IN (2013, 2016) AND tourney_name = 'WTA Championships'",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        }
      ]
    },
    "id": 803,
    "table_name": "matches"
  },
  {
    "question": "Find the first name and country code of the oldest player from Australia.",
    "SQL": "SELECT first_name ,  country_code FROM players WHERE country_code = 'AUS' ORDER BY birth_date LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "AUS"
        }
      ]
    },
    "id": 804,
    "table_name": "players"
  },
  {
    "question": "What is the first name and country code of the player born on 1972-12-04?",
    "SQL": "SELECT first_name ,  country_code FROM players WHERE birth_date = '1972-12-04'",
    "db_id": "wta_1",
    "table_description": "players table contains information about players including their first name, last name, hand, birth date, and country code.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "birth_date",
          "match_type": "等于",
          "condition": "1972-12-04"
        }
      ]
    },
    "id": 805,
    "table_name": "players"
  },
  {
    "question": "List the first and last name of all right-handed players in the order of birth date.",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand = 'R' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "Table containing player information including their first name, last name, hand, birth date, and country code.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 806,
    "table_name": "players"
  },
  {
    "question": "What are the full names of all right-handed players, sorted by birth date?",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand = 'R' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 807,
    "table_name": "players"
  },
  {
    "question": "List the first and last name of all players who are from Switzerland in the order of birth date.",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE country_code  =  'SUI' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "SUI"
        }
      ]
    },
    "id": 808,
    "table_name": "players"
  },
  {
    "question": "What are the full names of all right handed players, in order of birth date?",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'R' ORDER BY birth_date",
    "db_id": "wta_1",
    "table_description": "The table contains player information including their first name, last name, hand, birth date, and country code.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 809,
    "table_name": "players"
  },
  {
    "question": "Find the year that has the most number of matches in WTA Championships.",
    "SQL": "SELECT YEAR FROM matches WHERE tourney_name = 'WTA Championships' GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        }
      ]
    },
    "id": 810,
    "table_name": "matches"
  },
  {
    "question": "Which year had the most matches with Serena Williams as the winner?",
    "SQL": "SELECT YEAR FROM matches WHERE winner_name = 'Serena Williams' GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "The matches table contains detailed information about each tennis match played, including the year, tournament details, and player information for both the winner and the loser.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "winner_name",
          "match_type": "精确匹配",
          "condition": "Serena Williams"
        }
      ]
    },
    "id": 811,
    "table_name": "matches"
  },
  {
    "question": "Find the name and rank points of the winner who won the most times in 2013.",
    "SQL": "SELECT winner_name ,  winner_rank_points FROM matches WHERE tourney_date BETWEEN '2013-01-01' AND '2013-12-31' GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "This table contains information about tennis matches, including details such as the tournament date, winner's name, and rank points.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank_points"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "tourney_date",
          "match_type": "absolute_time",
          "condition": [
            "2013-01-01",
            "2013-12-31"
          ]
        }
      ]
    },
    "id": 812,
    "table_name": "matches"
  },
  {
    "question": "What is the name of the winner who has won the most matches in the WTA Championships, and how many rank points does this player have?",
    "SQL": "SELECT winner_name, winner_rank_points FROM matches WHERE tourney_name = 'WTA Championships' GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "Table 'matches' contains match details including winner and loser information, tournament details, and match results.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        }
      ]
    },
    "id": 813,
    "table_name": "matches"
  },
  {
    "question": "Find the name of the winner who has the highest rank points and participated in the WTA Championships tourney.",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        }
      ]
    },
    "table_name": "matches",
    "id": 814
  },
  {
    "question": "What is the name of the winner with the most rank points who participated in the WTA Championships tournament?",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "This table contains match data for various tennis tournaments including the winner's name, rank points, and tournament details.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        }
      ]
    },
    "id": 815,
    "table_name": "matches"
  },
  {
    "question": "find the names of loser and winner who played in the match that lasted more than 80 minutes.",
    "SQL": "SELECT winner_name ,  loser_name FROM matches WHERE minutes > 80",
    "db_id": "wta_1",
    "table_description": "matches",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "minutes",
          "match_type": "大于",
          "condition": "80"
        }
      ]
    },
    "id": 816,
    "table_name": "matches"
  },
  {
    "question": "What are the names of the winner and loser who played in the longest match in 2013?",
    "SQL": "SELECT winner_name, loser_name FROM matches WHERE tourney_date LIKE '2013%' ORDER BY minutes DESC LIMIT 1",
    "db_id": "wta_1",
    "table_description": "This table contains information about tennis matches, including the winner and loser names, match duration, tournament details, and more.",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [
        {
          "column": "minutes",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_date",
          "match_type": "模糊匹配",
          "condition": "2013%"
        }
      ]
    },
    "id": 817,
    "table_name": "matches"
  },
  {
    "question": "find the number of right-handed players for each country.",
    "SQL": "SELECT count(*) ,  country_code FROM players WHERE hand = 'R' GROUP BY country_code",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 818,
    "table_name": "players"
  },
  {
    "question": "How many right-handed players are from each country?",
    "SQL": "SELECT count(*), country_code FROM players WHERE hand = 'R' GROUP BY country_code",
    "db_id": "wta_1",
    "table_description": "players table contains player information including player ID, first name, last name, hand (dominant hand for playing), birth date, and country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "R"
        }
      ]
    },
    "id": 819,
    "table_name": "players"
  },
  {
    "question": "find the code of the country where has the greatest number of players and is not the United States.",
    "SQL": "SELECT country_code FROM players WHERE country_code != 'USA' GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "不等于",
          "condition": "USA"
        }
      ]
    },
    "table_name": "players",
    "id": 820
  },
  {
    "question": "What is the code of the country with more than 2 players?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 2",
    "db_id": "wta_1",
    "table_description": "The players table contains information about tennis players including their ID, first name, last name, hand, birth date, and country code.",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "country_code",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 821,
    "table_name": "players"
  },
  {
    "question": "What are the codes of countries with at least 30 players?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) >= 30",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "30"
        }
      ]
    },
    "table_name": "players",
    "id": 823
  },
  {
    "question": "Find the total number of tours for each ranking date where the ranking is greater than 10.",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings WHERE ranking > 10 GROUP BY ranking_date",
    "db_id": "wta_1",
    "table_description": "Table 'rankings' contains information about player rankings, including the ranking date, ranking position, player ID, ranking points, and number of tours.",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "ranking",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 824,
    "table_name": "rankings"
  },
  {
    "question": "How many total tours were there for each ranking date after January 1, 2000?",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings WHERE ranking_date > '2000-01-01' GROUP BY ranking_date",
    "db_id": "wta_1",
    "table_description": "Ranking information for players in the WTA.",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "ranking_date",
          "match_type": "大于",
          "condition": "2000-01-01"
        }
      ]
    },
    "id": 825,
    "table_name": "rankings"
  },
  {
    "question": "Find the number of matches that Serena Williams won in each year.",
    "SQL": "SELECT count(*), YEAR FROM matches WHERE winner_name = 'Serena Williams' GROUP BY YEAR",
    "db_id": "wta_1",
    "table_description": "Table matches contains detailed information about tennis matches including players, scores, and tournament details.",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "winner_name",
          "match_type": "精确匹配",
          "condition": "Serena Williams"
        }
      ]
    },
    "id": 826,
    "table_name": "matches"
  },
  {
    "question": "How many players are there for each hand type, excluding players born before 1980?",
    "SQL": "SELECT count(*), hand FROM players WHERE birth_date >= '1980-01-01' GROUP BY hand",
    "db_id": "wta_1",
    "table_description": "Table containing player information including player ID, first name, last name, hand, birth date, and country code.",
    "config": {
      "dimension": [
        {
          "column": "hand"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "birth_date",
          "match_type": "大于等于",
          "condition": "1980-01-01"
        }
      ]
    },
    "id": 833,
    "table_name": "players"
  },
  {
    "question": "How many ships ended up being 'Wrecked'?",
    "SQL": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Wrecked'",
    "db_id": "battle_death",
    "table_description": "Table containing information about ships and their dispositions after battles.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "disposition_of_ship",
          "match_type": "精确匹配",
          "condition": "Wrecked"
        }
      ]
    },
    "id": 834,
    "table_name": "ship"
  },
  {
    "question": "List the name, date and result of each battle where the Bulgarian commander was Kaloyan.",
    "SQL": "SELECT name, date, result FROM battle WHERE bulgarian_commander = 'Kaloyan'",
    "db_id": "battle_death",
    "table_description": "The battle table contains information about various battles, including their names, dates, commanders, and results.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "date"
        },
        {
          "column": "result"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "精确匹配",
          "condition": "Kaloyan"
        }
      ]
    },
    "id": 835,
    "table_name": "battle"
  },
  {
    "question": "What is the maximum and minimum death toll caused by each ship ID?",
    "SQL": "SELECT caused_by_ship_id, max(killed), min(killed) FROM death GROUP BY caused_by_ship_id",
    "db_id": "battle_death",
    "table_description": "Table 'death' contains information about deaths caused in battles, including the ship ID that caused them.",
    "config": {
      "dimension": [
        {
          "column": "caused_by_ship_id"
        }
      ],
      "measure": [
        {
          "column": "killed",
          "aggregate_function": "max"
        },
        {
          "column": "killed",
          "aggregate_function": "min"
        }
      ],
      "filter": [
        {
          "column": "caused_by_ship_id",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "id": 836,
    "table_name": "death"
  },
  {
    "question": "What is the average number of injuries caused each time in East Champaran, Bihar?",
    "SQL": "SELECT avg(injured) FROM death WHERE note = 'East Champaran, Bihar'",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "injured",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "note",
          "match_type": "精确匹配",
          "condition": "East Champaran, Bihar"
        }
      ]
    },
    "id": 837,
    "table_name": "death"
  },
  {
    "question": "What are the name and results of the battles when the latin commander is 'Baldwin I'",
    "SQL": "SELECT name ,  RESULT FROM battle WHERE latin_commander = 'Baldwin I'",
    "db_id": "battle_death",
    "table_description": "Table containing details about historical battles including their names, dates, Bulgarian and Latin commanders, and results.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "RESULT"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "latin_commander",
          "match_type": "等于",
          "condition": "Baldwin I"
        }
      ]
    },
    "id": 838,
    "table_name": "battle"
  },
  {
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and any latin commander?",
    "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander IS NOT NULL",
    "db_id": "battle_death",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "精确匹配",
          "condition": "Kaloyan"
        },
        {
          "column": "latin_commander",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "table_name": "battle",
    "id": 839
  },
  {
    "question": "How many different results are there for the battles where the Bulgarian commander was Kaloyan?",
    "SQL": "SELECT count(DISTINCT RESULT) FROM battle WHERE bulgarian_commander = 'Kaloyan'",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "RESULT",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "exact_match",
          "condition": "Kaloyan"
        }
      ]
    },
    "id": 840,
    "table_name": "battle"
  },
  {
    "question": "What are the notes of the death events which have the word 'Champaran'?",
    "SQL": "SELECT note FROM death WHERE note LIKE '%Champaran%'",
    "db_id": "battle_death",
    "table_description": "Table containing information about death events including notes and casualties.",
    "config": {
      "dimension": [
        {
          "column": "note"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "note",
          "match_type": "模糊匹配",
          "condition": "Champaran"
        }
      ]
    },
    "id": 841,
    "table_name": "death"
  },
  {
    "question": "What are all the addresses including line 1, line 2, and city?",
    "SQL": "SELECT line_1, line_2, city FROM addresses",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        },
        {
          "column": "city"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "addresses",
    "id": 842
  },
  {
    "question": "What is the first and second line for all addresses in Virginia?",
    "SQL": "SELECT line_1 ,  line_2 FROM addresses WHERE state_province_county = 'Virginia'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state_province_county",
          "match_type": "精确匹配",
          "condition": "Virginia"
        }
      ]
    },
    "id": 843,
    "table_name": "addresses"
  },
  {
    "question": "How many courses with descriptions related to 'v' are listed?",
    "SQL": "SELECT count(*) FROM Courses WHERE course_description LIKE '%v%'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "course_description",
          "match_type": "模糊匹配",
          "condition": "v"
        }
      ]
    },
    "id": 844,
    "table_name": "Courses"
  },
  {
    "question": "How many courses related to 'math' are there?",
    "SQL": "SELECT count(*) FROM Courses WHERE course_name LIKE '%math%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about courses.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "course_name",
          "match_type": "模糊匹配",
          "condition": "math"
        }
      ]
    },
    "id": 845,
    "table_name": "Courses"
  },
  {
    "question": "What is the description of the os course?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'os'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "精确匹配",
          "condition": "os"
        }
      ]
    },
    "table_name": "Courses",
    "id": 846
  },
  {
    "question": "What are the descriptions for all the math-related courses?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "course_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "模糊匹配",
          "condition": "%math%"
        }
      ]
    },
    "table_name": "Courses",
    "id": 847
  },
  {
    "question": "What is the zip code of the address in the state Virginia?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE state_province_county  =  'Virginia'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing address information including city, state, and zip code.",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state_province_county",
          "match_type": "精确匹配",
          "condition": "Virginia"
        }
      ]
    },
    "table_name": "Addresses",
    "id": 848
  },
  {
    "question": "What is the zip code for addresses in Virginia?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE state_province_county = 'Virginia'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state_province_county",
          "match_type": "精确匹配",
          "condition": "Virginia"
        }
      ]
    },
    "table_name": "Addresses",
    "id": 849
  },
  {
    "question": "How many departments offer a Master's degree?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE degree_summary_name = 'Master'",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about degree programs offered by various departments.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "COUNT_DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "degree_summary_name",
          "match_type": "exact_match",
          "condition": "Master"
        }
      ]
    },
    "id": 850,
    "table_name": "Degree_Programs"
  },
  {
    "question": "How many different departments offer Bachelor's degrees?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "degree_summary_name",
          "match_type": "精确匹配",
          "condition": "Bachelor"
        }
      ]
    },
    "id": 851,
    "table_name": "Degree_Programs"
  },
  {
    "question": "How many different degree names are offered in the department with ID 13?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs WHERE department_id = 13",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "department_id",
          "match_type": "等于",
          "condition": "13"
        }
      ]
    },
    "id": 852,
    "table_name": "Degree_Programs"
  },
  {
    "question": "How many different degrees are offered in the Department with ID 13?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs WHERE department_id = 13",
    "db_id": "student_transcripts_tracking",
    "table_description": "Degree_Programs table contains information about degree programs including their IDs, department IDs, summary names, descriptions, and other details.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "department_id",
          "match_type": "等于",
          "condition": "13"
        }
      ]
    },
    "id": 853,
    "table_name": "Degree_Programs"
  },
  {
    "question": "What are the names and descriptions of all the sections with a course ID of 8?",
    "SQL": "SELECT section_name, section_description FROM Sections WHERE course_id = 8",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "course_id",
          "match_type": "等于",
          "condition": "8"
        }
      ]
    },
    "id": 854,
    "table_name": "Sections"
  },
  {
    "question": "What are the names and descriptions for all the sections with a course ID of 1?",
    "SQL": "SELECT section_name ,  section_description FROM Sections WHERE course_id = 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about different sections of courses.",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "course_id",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "id": 855,
    "table_name": "Sections"
  },
  {
    "question": "List the section_name where the course_id is greater than 5 in reversed lexicographical order.",
    "SQL": "SELECT section_name FROM Sections WHERE course_id > 5 ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about different sections of courses.",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "course_id",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 856,
    "table_name": "Sections"
  },
  {
    "question": "What are the names of the sections with a course ID greater than 5 in reverse alphabetical order?",
    "SQL": "SELECT section_name FROM Sections WHERE course_id > 5 ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Sections table contains information about different sections including their IDs, associated course IDs, names, descriptions, and other details.",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "course_id",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "id": 857,
    "table_name": "Sections"
  },
  {
    "question": "What is the description of the department whose name is 'science'?",
    "SQL": "SELECT department_description FROM Departments WHERE department_name = 'science'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Departments table contains information about various departments including their ID, name, description, and other details.",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "department_name",
          "match_type": "精确匹配",
          "condition": "science"
        }
      ]
    },
    "id": 858,
    "table_name": "Departments"
  },
  {
    "question": "What is the department description for the one whose other details contain the word 'None'?",
    "SQL": "SELECT department_description FROM Departments WHERE other_details LIKE '%None%'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Departments table contains information about different departments including their ID, name, description, and other details.",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "other_details",
          "match_type": "模糊匹配",
          "condition": "None"
        }
      ]
    },
    "id": 859,
    "table_name": "Departments"
  },
  {
    "question": "What is the phone number of the man with the first name Milton and the last name Christiansen?",
    "SQL": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Milton' AND last_name  =  'Christiansen'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cell_mobile_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Milton"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Christiansen"
        }
      ]
    },
    "id": 860,
    "table_name": "Students"
  },
  {
    "question": "What is the mobile phone number of the student whose ID is 1?",
    "SQL": "select cell_mobile_number from students where student_id = 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "cell_mobile_number"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "student_id",
          "match_type": "等于",
          "condition": "1"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "ward"
        }
      ]
    },
    "id": 861,
    "table_name": "students"
  },
  {
    "question": "Who is the first student to register from the permanent address ID 5? List the first name, middle name and last name.",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE permanent_address_id = 5 ORDER BY date_first_registered ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "permanent_address_id",
          "match_type": "equals",
          "condition": 5
        },
        {
          "column": "date_first_registered",
          "match_type": "absolute_time",
          "condition": [
            "1970-01-01",
            null
          ]
        }
      ]
    },
    "id": 862,
    "table_name": "Students"
  },
  {
    "question": "What is the first, middle, and last name of the student who registered on February 5, 1971?",
    "SQL": "SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = '1971-02-05 07:28:23' LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_first_registered",
          "match_type": "等于",
          "condition": "1971-02-05 07:28:23"
        }
      ]
    },
    "id": 863,
    "table_name": "Students"
  },
  {
    "question": "Who is the earliest graduate of the school who has a specific SSN number? List the first name, middle name, and last name.",
    "SQL": "SELECT first_name, middle_name, last_name FROM Students WHERE ssn = '965' ORDER BY date_left ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks information about students including their names, contact details, and dates of registration and graduation.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "ssn",
          "match_type": "等于",
          "condition": "965"
        },
        {
          "column": "date_left",
          "match_type": "最早",
          "condition": "ASC LIMIT 1"
        }
      ]
    },
    "id": 864,
    "table_name": "Students"
  },
  {
    "question": "What is the first, middle, and last name of the student who registered on the earliest date and left the school after 2007-01-01?",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE date_left > '2007-01-01' ORDER BY date_first_registered ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_left",
          "match_type": "大于",
          "condition": "2007-01-01"
        }
      ]
    },
    "id": 865,
    "table_name": "Students"
  },
  {
    "question": "List the first name of students whose middle name is 'Anna'.",
    "SQL": "SELECT first_name FROM Students WHERE middle_name = 'Anna'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "middle_name",
          "match_type": "等于",
          "condition": "Anna"
        }
      ]
    },
    "table_name": "Students",
    "id": 866
  },
  {
    "question": "What is the first name of the student whose middle name is 'Anna' and whose permanent address is different from his or her current one?",
    "SQL": "SELECT first_name FROM Students WHERE middle_name = 'Anna' AND current_address_id != permanent_address_id",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks information about students including their addresses and personal details.",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "middle_name",
          "match_type": "等于",
          "condition": "Anna"
        },
        {
          "column": "current_address_id",
          "match_type": "不等于",
          "condition": "permanent_address_id"
        }
      ]
    },
    "id": 867,
    "table_name": "Students"
  },
  {
    "question": "On average, when were the transcripts printed after 1990-01-01?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts WHERE transcript_date > '1990-01-01'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "大于",
          "condition": "1990-01-01"
        }
      ]
    },
    "id": 868,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the average transcript date for transcripts after 1990?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts WHERE transcript_date > '1990-01-01'",
    "db_id": "student_transcripts_tracking",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "大于",
          "condition": "1990-01-01"
        }
      ]
    },
    "id": 869,
    "table_name": "Transcripts"
  },
  {
    "question": "When is the first transcript released in 1999 or later? List the date and details.",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts WHERE YEAR(transcript_date) >= 1999 ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student transcripts with release dates and additional details.",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": [
            "1999-01-01",
            null
          ]
        }
      ]
    },
    "id": 870,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the earliest transcript release date before 1990, and what details can you tell me?",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts WHERE DATE(transcript_date) < '1990-01-01' ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing information about student transcripts.",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": [
            "null",
            "1990-01-01"
          ]
        }
      ]
    },
    "id": 871,
    "table_name": "Transcripts"
  },
  {
    "question": "How many transcripts were released today?",
    "SQL": "SELECT count(*) FROM Transcripts WHERE DATE(transcript_date) = CURDATE()",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks the release of student transcripts.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": [
            "CURDATE()",
            "CURDATE()"
          ]
        }
      ]
    },
    "id": 872,
    "table_name": "Transcripts"
  },
  {
    "question": "How many transcripts were listed before 1990?",
    "SQL": "SELECT count(*) FROM Transcripts WHERE transcript_date < '1990-01-01'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": [
            "1970-01-01",
            "1990-01-01"
          ]
        }
      ]
    },
    "id": 873,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the latest transcript release date in the year 2013?",
    "SQL": "SELECT transcript_date FROM Transcripts WHERE DATE(transcript_date) >= '2013-01-01' AND DATE(transcript_date) <= '2013-12-31' ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "绝对时间",
          "condition": [
            "2013-01-01",
            "2013-12-31"
          ]
        }
      ]
    },
    "id": 874,
    "table_name": "Transcripts"
  },
  {
    "question": "What is the latest transcript date before 2000?",
    "SQL": "SELECT transcript_date FROM Transcripts WHERE transcript_date < '2000-01-01' ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_name": "Transcripts",
    "id": 875,
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "transcript_date",
          "match_type": "小于",
          "condition": "2000-01-01"
        }
      ]
    }
  },
  {
    "question": "How many times at most can a course enrollment with a specific transcript ID show in different transcripts? Also show the course enrollment id and the transcript ID.",
    "SQL": "SELECT count(*), student_course_id, transcript_id FROM Transcript_Contents WHERE transcript_id = 8 GROUP BY student_course_id, transcript_id ORDER BY count(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "This table tracks the contents of student transcripts, including the course enrollment IDs and the transcript IDs.",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        },
        {
          "column": "transcript_id"
        }
      ],
      "measure": [
        {
          "column": "student_course_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "transcript_id",
          "match_type": "等于",
          "condition": "8"
        }
      ]
    },
    "id": 876,
    "table_name": "Transcript_Contents"
  },
  {
    "question": "What is the maximum number of times that a specific course (with student_course_id 76) shows up in different transcripts and what is that course's enrollment id?",
    "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents WHERE student_course_id = 76 GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "table_description": "The Transcript_Contents table contains records of courses taken by students, including the student_course_id and transcript_id.",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "student_course_id",
          "match_type": "等于",
          "condition": "76"
        }
      ]
    },
    "id": 877,
    "table_name": "Transcript_Contents"
  },
  {
    "question": "How many different addresses do the students who have not left the institution currently live?",
    "SQL": "SELECT count(DISTINCT current_address_id) FROM Students WHERE date_left IS NULL",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks student transcripts and related information.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "current_address_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "date_left",
          "match_type": "is null",
          "condition": "NULL"
        }
      ]
    },
    "id": 878,
    "table_name": "Students"
  },
  {
    "question": "How many different addresses do students have as their permanent address?",
    "SQL": "SELECT count(DISTINCT permanent_address_id) FROM Students",
    "db_id": "student_transcripts_tracking",
    "table_description": "Tracks student information including their current and permanent addresses.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "permanent_address_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Students",
    "id": 879
  },
  {
    "question": "List all the student details where the first name is 'Warren' in reversed lexicographical order.",
    "SQL": "SELECT other_student_details FROM Students WHERE first_name = 'Warren' ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "table_description": "Table containing student details including their personal information and contact details.",
    "config": {
      "dimension": [
        {
          "column": "other_student_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Warren"
        }
      ]
    },
    "id": 880,
    "table_name": "Students"
  },
  {
    "question": "What are the first names of students whose last name is Ward in reverse alphabetical order of their first names?",
    "SQL": "SELECT first_name FROM Students WHERE last_name = 'Ward' ORDER BY first_name DESC",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Ward"
        }
      ]
    },
    "id": 881,
    "table_name": "Students"
  },
  {
    "question": "Describe the section with the ID of 3.",
    "SQL": "SELECT section_description FROM Sections WHERE section_id  =  3",
    "db_id": "student_transcripts_tracking",
    "table_description": "This table contains information about different sections of courses, including their IDs, names, descriptions, and other details.",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "section_id",
          "match_type": "等于",
          "condition": "3"
        }
      ]
    },
    "id": 882,
    "table_name": "Sections"
  },
  {
    "question": "What is the description for the section named d?",
    "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'd'",
    "db_id": "student_transcripts_tracking",
    "table_description": "The table contains information about different sections of courses, including section ID, course ID, section name, section description, and other details.",
    "config": {
      "dimension": [
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "精确匹配",
          "condition": "d"
        }
      ]
    },
    "table_name": "Sections",
    "id": 883
  },
  {
    "question": "List the title of all cartoons directed by Ben Jones in alphabetical order.",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' ORDER BY title",
    "db_id": "tvshow",
    "table_description": "Cartoon table contains information about various cartoon episodes including their titles, directors, writers, air dates, production codes, and channels.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        }
      ]
    },
    "id": 884,
    "table_name": "Cartoon"
  },
  {
    "question": "What are the titles of the cartoons directed by Ben Jones, sorted alphabetically?",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' ORDER BY title",
    "db_id": "tvshow",
    "table_description": "Cartoon table contains information about cartoon episodes including their titles, directors, writers, air dates, production codes, and channels.",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        }
      ]
    },
    "id": 885,
    "table_name": "Cartoon"
  },
  {
    "question": "List all cartoons produced on 'November 14, 2008'.",
    "SQL": "SELECT Title FROM Cartoon WHERE Original_air_date = 'November14,2008';",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Original_air_date",
          "match_type": "精确匹配",
          "condition": "November14,2008"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 886
  },
  {
    "question": "What are the names of all cartoons written by Michael Jelenic?",
    "SQL": "SELECT Title FROM Cartoon WHERE Written_by = 'Michael Jelenic';",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "精确匹配",
          "condition": "Michael Jelenic"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 887
  },
  {
    "question": "How many cartoons were directed by 'Ben Jones'?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Directed_by = 'Ben Jones';",
    "db_id": "tvshow",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        }
      ]
    },
    "id": 888,
    "table_name": "Cartoon"
  },
  {
    "question": "What is the number of cartoons written by Michael Jelenic or directed by Ben Jones?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Michael Jelenic' OR Directed_by = 'Ben Jones';",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "精确匹配",
          "condition": "Michael Jelenic"
        },
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 889
  },
  {
    "question": "list all cartoon titles and their directors that aired before December 1, 2008, ordered by their air date",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon WHERE Original_air_date < '2008-12-01' ORDER BY Original_air_date",
    "db_id": "tvshow",
    "table_description": "A table containing information about cartoons including title, director, air date, etc.",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Original_air_date",
          "match_type": "绝对时间",
          "condition": [
            "null",
            "2008-12-01"
          ]
        }
      ]
    },
    "id": 890,
    "table_name": "Cartoon"
  },
  {
    "question": "What is the name and directors of all the cartoons that aired after December 1, 2008?",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon WHERE Original_air_date > '2008-12-01' ORDER BY Original_air_date",
    "db_id": "tvshow",
    "table_description": "Table containing information about cartoons including their titles, directors, air dates, and other details.",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Original_air_date",
          "match_type": "绝对时间",
          "condition": "2008-12-01"
        }
      ]
    },
    "id": 891,
    "table_name": "Cartoon"
  },
  {
    "question": "List the title of all cartoon written by \"Michael Jelenic\" or directed by \"Brandon Vietti\".",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Brandon Vietti\" OR Written_by = \"Michael Jelenic\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Brandon Vietti"
        },
        {
          "column": "Written_by",
          "match_type": "精确匹配",
          "condition": "Michael Jelenic"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 892
  },
  {
    "question": "What are the titles of all cartoons directed by Ben Jones or aired on December 5, 2008?",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Original_air_date = 'December5,2008';",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Original_air_date",
          "match_type": "精确匹配",
          "condition": "December5,2008"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 893
  },
  {
    "question": "Which country has the most TV Channels that are in the 'Sky Famiglia' package option? List the country and the number of TV Channels it has.",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel WHERE Package_Option = 'Sky Famiglia' GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "Table TV_Channel contains information about different TV channels including their country, language, content, pixel aspect ratio, high definition status, pay per view status, and package option.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Package_Option",
          "match_type": "精确匹配",
          "condition": "Sky Famiglia"
        }
      ]
    },
    "id": 894,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the country with the most number of TV Channels that are in High Definition and how many does it have?",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel WHERE Hight_definition_TV = 'yes' GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "This table contains information about TV channels including their ID, series name, country, language, content type, pixel aspect ratio, high definition status, pay-per-view status, and package option.",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Hight_definition_TV",
          "match_type": "等于",
          "condition": "yes"
        }
      ]
    },
    "id": 895,
    "table_name": "TV_Channel"
  },
  {
    "question": "List the number of different series names and contents in the TV Channel table for the 'Sky Famiglia' package option.",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel WHERE Package_Option = 'Sky Famiglia';",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about different TV channels including their series names, contents, and package options.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Package_Option",
          "match_type": "精确匹配",
          "condition": "Sky Famiglia"
        }
      ]
    },
    "id": 896,
    "table_name": "TV_Channel"
  },
  {
    "question": "How many different series and contents are listed in the TV Channel table for the package option 'Sky Famiglia'?",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel WHERE Package_Option = 'Sky Famiglia';",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about various TV channels including their series name, country, language, content, pixel aspect ratio, high definition, pay per view, and package option.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Package_Option",
          "match_type": "精确匹配",
          "condition": "Sky Famiglia"
        }
      ]
    },
    "id": 897,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the content of TV Channel with series name similar to \"Sky Music\"?",
    "SQL": "SELECT Content FROM TV_Channel WHERE series_name LIKE '%Sky Music%';",
    "db_id": "tvshow",
    "table_name": "TV_Channel",
    "id": 898,
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "模糊匹配",
          "condition": "Sky Music"
        }
      ]
    }
  },
  {
    "question": "What is the content of the series with package option Sky Famiglia?",
    "SQL": "SELECT Content FROM TV_Channel WHERE Package_Option = \"Sky Famiglia\";",
    "db_id": "tvshow",
    "table_description": "The TV_Channel table contains information about different TV series including their country, language, content, and package options.",
    "config": {
      "dimension": [
        {
          "column": "Content"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Package_Option",
          "match_type": "精确匹配",
          "condition": "Sky Famiglia"
        }
      ]
    },
    "id": 899,
    "table_name": "TV_Channel"
  },
  {
    "question": "What is the Package Option of TV Channel with content type 'music'?",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE Content = 'music';",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Content",
          "match_type": "精确匹配",
          "condition": "music"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 900
  },
  {
    "question": "What are the Package Options of the TV Channels whose Content is music?",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE Content = 'music';",
    "db_id": "tvshow",
    "table_description": "Table TV_Channel contains information about TV channels including their series names, countries, languages, content types, pixel aspect ratios, high definition status, pay-per-view options, and package options.",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Content",
          "match_type": "精确匹配",
          "condition": "music"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 901
  },
  {
    "question": "How many TV Channel using language Italian?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE Language = 'Italian';",
    "db_id": "tvshow",
    "table_description": "Table for TV Channels with their details such as series name, country, language, content, pixel aspect ratio, high definition TV, pay per view, and package option.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Language",
          "match_type": "精确匹配",
          "condition": "Italian"
        }
      ]
    },
    "id": 902,
    "table_name": "TV_Channel"
  },
  {
    "question": "How many TV Channels are available in the Sky Famiglia package option?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE Package_Option = 'Sky Famiglia';",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Package_Option",
          "match_type": "精确匹配",
          "condition": "Sky Famiglia"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 903
  },
  {
    "question": "List the language used least number of TV Channel in Italy. List language and number of TV Channel.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE Country = 'Italy' GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "Italy"
        }
      ]
    },
    "id": 904,
    "table_name": "TV_Channel"
  },
  {
    "question": "What are the languages used by the least number of TV Channels and how many channels use it, specifically those with content related to music?",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE Content LIKE '%music%' GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV Channels including their ID, series name, country, language, content, pixel aspect ratio, high definition TV support, pay per view support, and package option.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Content",
          "match_type": "模糊匹配",
          "condition": "%music%"
        }
      ]
    },
    "id": 905,
    "table_name": "TV_Channel"
  },
  {
    "question": "List each language and the number of TV Channels using it, but only for channels that offer music content.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE Content = 'music' GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "table_description": "TV_Channel table contains information about TV channels including their language, content type, and other details.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "Content",
          "match_type": "精确匹配",
          "condition": "music"
        }
      ]
    },
    "id": 906,
    "table_name": "TV_Channel"
  },
  {
    "question": "For each language, list the number of TV Channels that use it, excluding channels with the content 'music'.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE Content != 'music' GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "table_description": "TV_Channel table contains information about TV channels including their ID, series name, country, language, content, pixel aspect ratio, high definition TV, pay per view, and package option.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Content",
          "match_type": "不等于",
          "condition": "music"
        }
      ]
    },
    "id": 907,
    "table_name": "TV_Channel"
  },
  {
    "question": "List the Episode of all TV series with a Rating greater than 4.0, sorted by rating.",
    "SQL": "SELECT Episode FROM TV_series WHERE Rating > 4.0 ORDER BY Rating",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV series episodes including their ratings.",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Rating",
          "match_type": "大于",
          "condition": "4.0"
        }
      ]
    },
    "id": 908,
    "table_name": "TV_series"
  },
  {
    "question": "What are all of the episodes with a share greater than 8, ordered by ratings?",
    "SQL": "SELECT Episode FROM TV_series WHERE Share > 8 ORDER BY Rating",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV series episodes, including episode title, air date, rating, share, and viewers.",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Share",
          "match_type": "大于",
          "condition": "8"
        }
      ]
    },
    "id": 909,
    "table_name": "TV_series"
  },
  {
    "question": "List top 3 highest Rating TV series with a Share greater than 7. List the TV series's Episode and Rating.",
    "SQL": "SELECT Episode ,  Rating FROM TV_series WHERE Share > 7 ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Share",
          "match_type": "大于",
          "condition": "7"
        }
      ]
    },
    "id": 910,
    "table_name": "TV_series"
  },
  {
    "question": "What are 3 most highly rated episodes that aired on channel 700 in the TV series table and what were those ratings?",
    "SQL": "SELECT Episode ,  Rating FROM TV_series WHERE Channel = '700' ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "table_description": "This table contains information about TV series episodes including their episode title, air date, rating, share, demographic ratings, viewership, weekly rank, and channel.",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Channel",
          "match_type": "精确匹配",
          "condition": "700"
        }
      ]
    },
    "id": 911,
    "table_name": "TV_series"
  },
  {
    "question": "What is the minimum and maximum share of TV series with a rating greater than 4?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series WHERE Rating > 4;",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV series episodes including ratings and shares.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Rating",
          "match_type": "greater than",
          "condition": "4"
        }
      ]
    },
    "id": 912,
    "table_name": "TV_series"
  },
  {
    "question": "What is the maximum and minimum share for the TV series with a rating greater than 4.5?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series WHERE Rating > 4.5;",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV series episodes including their ratings and shares.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Rating",
          "match_type": "大于",
          "condition": "4.5"
        }
      ]
    },
    "id": 913,
    "table_name": "TV_series"
  },
  {
    "question": "What is the air date of TV series with Episode 'Friendly Skies'?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Episode = 'Friendly Skies';",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV series episodes including their air dates, ratings, and viewership.",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "精确匹配",
          "condition": "Friendly Skies"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 914
  },
  {
    "question": "When did the episode with the weekly rank of 43 air?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Weekly_Rank = 43;",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV series episodes including their air date, rating, share, and other metrics.",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Weekly_Rank",
          "match_type": "等于",
          "condition": "43"
        }
      ]
    },
    "id": 915,
    "table_name": "TV_series"
  },
  {
    "question": "What is the Weekly Rank of TV series with an Air Date of October 1, 2007?",
    "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Air_Date = 'October 1, 2007';",
    "db_id": "tvshow",
    "table_description": "Table containing information about TV series episodes including their air dates, ratings, and weekly ranks.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Weekly_Rank",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Air_Date",
          "match_type": "精确匹配",
          "condition": "October 1, 2007"
        }
      ]
    },
    "id": 916,
    "table_name": "TV_series"
  },
  {
    "question": "What is the weekly rank for the episode on October 1, 2007?",
    "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Air_Date = 'October 1, 2007';",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Weekly_Rank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Air_Date",
          "match_type": "精确匹配",
          "condition": "October 1, 2007"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 917
  },
  {
    "question": "Find the number of cartoons directed by each of the listed directors, but only for those cartoons that aired in November 2008.",
    "SQL": "SELECT count(*), Directed_by FROM cartoon WHERE Original_air_date LIKE '%November 2008%' GROUP BY Directed_by",
    "db_id": "tvshow",
    "table_description": "Table containing information about cartoons, including title, director, writer, air date, production code, and channel.",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Original_air_date",
          "match_type": "模糊匹配",
          "condition": "%November 2008%"
        }
      ]
    },
    "id": 918,
    "table_name": "cartoon"
  },
  {
    "question": "How many cartoons directed by Ben Jones were created in 2008?",
    "SQL": "SELECT COUNT(*) FROM cartoon WHERE Directed_by = 'Ben Jones' AND YEAR(Original_air_date) = 2008",
    "db_id": "tvshow",
    "table_description": "A table containing information about TV shows, including their titles, directors, writers, air dates, production codes, and channels.",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Original_air_date",
          "match_type": "绝对时间",
          "condition": [
            "2008-01-01",
            "2008-12-31"
          ]
        }
      ]
    },
    "id": 919,
    "table_name": "cartoon"
  },
  {
    "question": "Find the production code and channel of the most recently aired cartoon that was directed by Ben Jones.",
    "SQL": "select production_code ,  channel from cartoon where Directed_by = 'Ben Jones' order by Original_air_date desc limit 1",
    "db_id": "tvshow",
    "table_description": "Table containing information about cartoons including their title, director, writer, air date, production code, and channel.",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        }
      ]
    },
    "id": 920,
    "table_name": "cartoon"
  },
  {
    "question": "What is the production code and channel of the cartoon that aired on December 5, 2008?",
    "SQL": "select production_code, channel from cartoon where original_air_date = '2008-12-05'",
    "db_id": "tvshow",
    "table_description": "Table containing information about cartoons including their air dates, production codes, and channels.",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "original_air_date",
          "match_type": "absolute_time",
          "condition": "2008-12-05"
        }
      ]
    },
    "table_name": "cartoon",
    "id": 921
  },
  {
    "question": "Find the package choice and series name of the TV channel that has music content.",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE Content  =  'music'",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Content",
          "match_type": "精确匹配",
          "condition": "music"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 922
  },
  {
    "question": "What are the package options and the name of the series for the TV Channel that has a 16:9 pixel aspect ratio?",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE Pixel_aspect_ratio_PAR  =  '16:9'",
    "db_id": "tvshow",
    "table_description": "TV_Channel table contains information about various TV channels including their series names, countries, languages, content types, pixel aspect ratios, high definition support, pay-per-view options, and package options.",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Pixel_aspect_ratio_PAR",
          "match_type": "精确匹配",
          "condition": "16:9"
        }
      ]
    },
    "id": 923,
    "table_name": "TV_Channel"
  },
  {
    "question": "find the pixel aspect ratio and nation of the tv channels that are in the Sky Famiglia package option.",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE Package_Option = 'Sky Famiglia'",
    "db_id": "tvshow",
    "table_description": "The table 'tv_channel' contains information about various TV channels including their series name, country, language, content, pixel aspect ratio, high definition TV, pay per view, and package option.",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Package_Option",
          "match_type": "等于",
          "condition": "Sky Famiglia"
        }
      ]
    },
    "id": 924,
    "table_name": "tv_channel"
  },
  {
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that are not in the Sky Famiglia package option?",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE Package_Option != 'Sky Famiglia'",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Package_Option",
          "match_type": "不等于",
          "condition": "Sky Famiglia"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 925
  },
  {
    "question": "find id of the tv channels that from the countries with high definition TV.",
    "SQL": "SELECT id FROM tv_channel WHERE Hight_definition_TV = 'yes'",
    "db_id": "tvshow",
    "table_description": "The table contains information about TV channels including their ID, series name, country, language, content type, pixel aspect ratio, whether they offer high definition TV, pay-per-view options, and package options.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Hight_definition_TV",
          "match_type": "等于",
          "condition": "yes"
        }
      ]
    },
    "id": 926,
    "table_name": "tv_channel"
  },
  {
    "question": "What are the ids of all TV channels that have more than 2 TV channels with the content type as music?",
    "SQL": "SELECT id FROM tv_channel WHERE Content = 'music' GROUP BY country HAVING count(*)  >  2",
    "db_id": "tvshow",
    "table_description": "This table contains information about TV channels, including their IDs, series names, countries, languages, content types, pixel aspect ratios, high definition status, pay-per-view options, and package options.",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "Content",
          "match_type": "精确匹配",
          "condition": "music"
        },
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "id": 927,
    "table_name": "tv_channel"
  },
  {
    "question": "How many poker players have made it to the final table more than 20 times?",
    "SQL": "SELECT count(*) FROM poker_player WHERE Final_Table_Made > 20",
    "db_id": "poker_player",
    "table_description": "Table containing information about poker players.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Final_Table_Made",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "id": 928,
    "table_name": "poker_player"
  },
  {
    "question": "Count the number of poker players who have made it to the final table more than 20 times.",
    "SQL": "SELECT count(*) FROM poker_player WHERE Final_Table_Made > 20",
    "db_id": "poker_player",
    "table_description": "poker_player table contains information about poker players including their final table appearances and earnings.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Final_Table_Made",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "id": 929,
    "table_name": "poker_player"
  },
  {
    "question": "List the earnings of poker players with a best finish better than 2 in descending order.",
    "SQL": "SELECT Earnings FROM poker_player WHERE Best_Finish < 2 ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "table_description": "Table containing poker player details including earnings and best finish.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Best_Finish",
          "match_type": "小于",
          "condition": "2"
        }
      ]
    },
    "id": 930,
    "table_name": "poker_player"
  },
  {
    "question": "What are the earnings of poker players with a money rank greater than 50, ordered descending by value?",
    "SQL": "SELECT Earnings FROM poker_player WHERE Money_Rank > 50 ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "table_description": "Table containing information about poker players including their earnings and rankings.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Money_Rank",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "id": 931,
    "table_name": "poker_player"
  },
  {
    "question": "List the final tables made by poker players with the best finish of 1.",
    "SQL": "SELECT Final_Table_Made FROM poker_player WHERE Best_Finish = 1.0",
    "db_id": "poker_player",
    "table_description": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Final_Table_Made"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Best_Finish",
          "match_type": "等于",
          "condition": "1.0"
        }
      ]
    },
    "id": 932,
    "table_name": "poker_player"
  },
  {
    "question": "Find the name, population and expected life length of asian country with the largest population?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY Population DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "country table contains information about countries including their names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, local names, government forms, heads of state, capitals, and codes.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "id": 990,
    "table_name": "country"
  },
  {
    "question": "What are the name, population, and life expectancy of the African country with the highest population?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Africa\" ORDER BY Population DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "country table contains information about countries including their name, continent, region, surface area, independence year, population, life expectancy, GNP, local name, government form, head of state, capital, and code.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "table_name": "country",
    "id": 991
  },
  {
    "question": "What are the countries that have a larger population than any country in Europe?",
    "SQL": "SELECT Name FROM country WHERE Population  >  (SELECT max(Population) FROM country WHERE Continent  =  'Europe')",
    "db_id": "world_1",
    "table_description": "This table contains information about countries including their code, name, continent, region, surface area, independence year, population, life expectancy, GNP, government form, head of state, capital, and more.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "(SELECT max(Population) FROM country WHERE Continent = 'Europe')"
        }
      ]
    },
    "id": 992,
    "table_name": "country"
  },
  {
    "question": "Which countries outside Europe have a larger population than any country in Europe?",
    "SQL": "SELECT Name FROM country WHERE Population  >  (SELECT max(Population) FROM country WHERE Continent  =  'Europe')",
    "db_id": "world_1",
    "table_description": "This table contains information about different countries including their names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, government forms, heads of state, capitals, and codes.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "(SELECT max(Population) FROM country WHERE Continent  =  'Europe')"
        }
      ]
    },
    "id": 993,
    "table_name": "country"
  },
  {
    "question": "What are the African countries with a population less than the maximum population of any Asian country?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  'Africa'  AND Population  <  (SELECT MAX(Population) FROM country WHERE Continent  =  'Asia')",
    "db_id": "world_1",
    "table_description": "country table contains information about different countries including their names, continents, populations, etc.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "Population",
          "match_type": "小于",
          "condition": "(SELECT MAX(Population) FROM country WHERE Continent = 'Asia')"
        }
      ]
    },
    "id": 994,
    "table_name": "country"
  },
  {
    "question": "Which African countries have a smaller population than Angola?",
    "SQL": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < 12878000",
    "db_id": "world_1",
    "table_description": "country",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "population",
          "match_type": "小于",
          "condition": "12878000"
        }
      ]
    },
    "table_name": "country",
    "id": 995
  },
  {
    "question": "Which Asian countries have a population that is larger than the average population of countries in Europe?",
    "SQL": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT AVG(population) FROM country WHERE Continent = 'Europe')",
    "db_id": "world_1",
    "table_description": "Table containing information about different countries including their names, continents, populations, etc.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "population",
          "match_type": "大于",
          "condition": "(SELECT AVG(population) FROM country WHERE Continent = 'Europe')"
        }
      ]
    },
    "id": 996,
    "table_name": "country"
  },
  {
    "question": "What are the Asian countries which have a surface area larger than that of any country in Africa?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Africa')",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about various countries including their names, continents, regions, surface areas, populations, and other details.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "(SELECT max(SurfaceArea) FROM country WHERE Continent = 'Africa')"
        }
      ]
    },
    "id": 997,
    "table_name": "country"
  },
  {
    "question": "What are the country codes for countries where Papiamento is spoken?",
    "SQL": "SELECT CountryCode FROM countrylanguage WHERE Language  =  'Papiamento'",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Language",
          "match_type": "精确匹配",
          "condition": "Papiamento"
        }
      ]
    },
    "id": 998,
    "table_name": "countrylanguage"
  },
  {
    "question": "Return the country codes for countries that have Papiamento as one of their languages.",
    "SQL": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Papiamento'",
    "db_id": "world_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Language",
          "match_type": "精确匹配",
          "condition": "Papiamento"
        }
      ]
    },
    "id": 999,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the country codes of countries where people use Papiamento?",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'Papiamento'",
    "db_id": "world_1",
    "table_description": "The table contains information about languages spoken in different countries, including the country code, language name, whether it is official, and the percentage of speakers.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Language",
          "match_type": "等于",
          "condition": "Papiamento"
        }
      ]
    },
    "id": 1000,
    "table_name": "countrylanguage"
  },
  {
    "question": "Give the country codes for countries in which people speak Papiamento.",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'Papiamento'",
    "db_id": "world_1",
    "table_description": "Table containing language information for different countries",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Language",
          "match_type": "等于",
          "condition": "Papiamento"
        }
      ]
    },
    "id": 1001,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the name, independence year, and surface area of the country with the largest GNP?",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY GNP DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "country table contains information about countries including their name, continent, region, surface area, independence year, population, life expectancy, GNP, government form, and head of state.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "IndepYear"
        },
        {
          "column": "SurfaceArea"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "GNP",
          "match_type": "大于等于",
          "condition": "0"
        }
      ]
    },
    "id": 1002,
    "table_name": "country"
  },
  {
    "question": "Give the name, year of independence, and surface area of the country that has the lowest population in Southern Europe.",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country WHERE Region = 'Southern Europe' ORDER BY Population LIMIT 1",
    "db_id": "world_1",
    "table_description": "Table contains information about countries including their code, name, continent, region, surface area, year of independence, population, life expectancy, GNP, government form, head of state, capital, and more.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "SurfaceArea"
        },
        {
          "column": "IndepYear"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Southern Europe"
        }
      ]
    },
    "id": 1003,
    "table_name": "country"
  },
  {
    "question": "What are the population, name and leader of the country with a population greater than 10 million?",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country WHERE population > 10000000",
    "db_id": "world_1",
    "table_description": "The table 'country' contains information about countries including their code, name, continent, region, surface area, independence year, population, life expectancy, GNP, government form, head of state, capital, and more.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "id": 1004,
    "table_name": "country"
  },
  {
    "question": "Give the name, population, and head of state for the country with the highest life expectancy.",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY LifeExpectancy DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their name, population, head of state, surface area, and life expectancy.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "population"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于等于",
          "condition": "78.4"
        }
      ]
    },
    "id": 1005,
    "table_name": "country"
  },
  {
    "question": "Find the number of cities in each district with a population greater than 1,000,000?",
    "SQL": "SELECT count(*) ,  District FROM city WHERE Population  >  1000000 GROUP BY District",
    "db_id": "world_1",
    "table_description": "Table containing information about cities including their ID, name, country code, district, and population.",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1006,
    "table_name": "city"
  },
  {
    "question": "How many cities in each district have a population greater than 1 million?",
    "SQL": "SELECT count(*),  District FROM city WHERE Population  >  1000000 GROUP BY District",
    "db_id": "world_1",
    "table_description": "The city table contains information about cities, including their ID, name, country code, district, and population.",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "1000000"
        }
      ]
    },
    "id": 1007,
    "table_name": "city"
  },
  {
    "question": "Find the government form name and total population for each government form whose average population is greater than 10 million.",
    "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(Population)  >  10000000",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "Population",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "10000000"
        }
      ]
    },
    "table_name": "country",
    "id": 1008
  },
  {
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 71.6?",
    "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  71.6",
    "db_id": "world_1",
    "table_description": "Table 'country' contains information about various countries including their government form, population, and life expectancy.",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于",
          "condition": "71.6"
        }
      ]
    },
    "id": 1009,
    "table_name": "country"
  },
  {
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is longer than 70?",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  >  70",
    "db_id": "world_1",
    "table_description": "Table 'country' contains information about countries including their code, name, continent, region, surface area, independence year, population, life expectancy, GNP, local name, government form, head of state, capital, and code2.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "AVG",
          "condition": "> 70"
        }
      ]
    },
    "id": 1010,
    "table_name": "country"
  },
  {
    "question": "What are the different continents and the total population and average life expectancy corresponding to each, for continents with a continent code starting with 'A'?",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country WHERE Code LIKE 'A%' GROUP BY Continent",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their codes, names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, local names, government forms, heads of state, capitals, and code2s.",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Code",
          "match_type": "LIKE",
          "condition": "A%"
        }
      ]
    },
    "id": 1011,
    "table_name": "country"
  },
  {
    "question": "What are the names and areas of countries in North America with the top 5 largest area?",
    "SQL": "SELECT Name ,  SurfaceArea FROM country WHERE Continent = 'North America' ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their names, areas, and continents.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "North America"
        }
      ]
    },
    "id": 1012,
    "table_name": "country"
  },
  {
    "question": "Return the names and surface areas of the 5 largest countries in Europe.",
    "SQL": "SELECT Name ,  SurfaceArea FROM country WHERE Continent = 'Europe' ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their names, continents, regions, surface areas, etc.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        }
      ]
    },
    "id": 1013,
    "table_name": "country"
  },
  {
    "question": "What are the names of countries in North America with the top 3 largest population?",
    "SQL": "SELECT Name FROM country WHERE Continent = 'North America' ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "table_description": "This table contains information about countries including their name, continent, population, and other details.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "North America"
        }
      ]
    },
    "id": 1014,
    "table_name": "country"
  },
  {
    "question": "Return the names of the 3 most populated countries in Asia.",
    "SQL": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their names, populations, and continents.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "id": 1015,
    "table_name": "country"
  },
  {
    "question": "What are the names of the nations with the 3 lowest populations, but only those located in the Caribbean?",
    "SQL": "SELECT Name FROM country WHERE Region = 'Caribbean' ORDER BY Population ASC LIMIT 3",
    "db_id": "world_1",
    "table_description": "Contains information about different countries including their names, populations, and regions.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Caribbean"
        }
      ]
    },
    "id": 1016,
    "table_name": "country"
  },
  {
    "question": "Return the names of the 3 countries in North America with the fewest people.",
    "SQL": "SELECT Name FROM country WHERE Continent = 'North America' ORDER BY Population ASC LIMIT 3",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their name, continent, population, etc.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "North America"
        }
      ]
    },
    "id": 1017,
    "table_name": "country"
  },
  {
    "question": "how many countries are in Southern and Central Asia?",
    "SQL": "SELECT count(*) FROM country WHERE region  =  \"Southern and Central Asia\"",
    "db_id": "world_1",
    "table_description": "The country table contains information about countries including their code, name, continent, region, surface area, year of independence, population, life expectancy, GNP, government form, head of state, capital, and more.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "region",
          "match_type": "精确匹配",
          "condition": "Southern and Central Asia"
        }
      ]
    },
    "id": 1018,
    "table_name": "country"
  },
  {
    "question": "Count the number of countries in Southern and Central Asia.",
    "SQL": "SELECT count(*) FROM country WHERE region = 'Southern and Central Asia'",
    "db_id": "world_1",
    "table_description": "Table containing information about countries including their codes, names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, local names, government forms, heads of state, capitals, and code2s.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "region",
          "match_type": "精确匹配",
          "condition": "Southern and Central Asia"
        }
      ]
    },
    "id": 1019,
    "table_name": "country"
  },
  {
    "question": "What are the names of the countries that are in the region of Southern Europe and have a population of 80000?",
    "SQL": "SELECT Name FROM country WHERE Region  =  'Southern Europe' AND Population  =  80000",
    "db_id": "world_1",
    "table_description": "country table contains information about countries including their names, continents, regions, and populations.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Southern Europe"
        },
        {
          "column": "Population",
          "match_type": "等于",
          "condition": "80000"
        }
      ]
    },
    "id": 1020,
    "table_name": "country"
  },
  {
    "question": "Give the names of countries that are in Europe and have a population greater than 80000.",
    "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  >  80000",
    "db_id": "world_1",
    "table_description": "country",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "80000"
        }
      ]
    },
    "id": 1021,
    "table_name": "country"
  },
  {
    "question": "What is the total population and average area of countries in the region of Caribbean whose area is bigger than 3000?",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where region  =  'Caribbean' and surfacearea  >  3000",
    "db_id": "world_1",
    "table_description": "country table contains information about different countries including their codes, names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, government forms, heads of state, capitals, and codes.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "region",
          "match_type": "精确匹配",
          "condition": "Caribbean"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "id": 1022,
    "table_name": "country"
  },
  {
    "question": "Give the total population and average surface area corresponding to countries in the Caribbean region that have a surface area greater than 3000.",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where region  =  'Caribbean' and surfacearea  >  3000",
    "db_id": "world_1",
    "table_description": "Table country contains information about different countries including their code, name, continent, region, surface area, independence year, population, life expectancy, GNP, government form, head of state, capital, and code2.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "region",
          "match_type": "精确匹配",
          "condition": "Caribbean"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "id": 1023,
    "table_name": "country"
  },
  {
    "question": "What are the cities with a population greater than 700000?",
    "SQL": "SELECT name FROM city WHERE Population > 700000",
    "db_id": "world_1",
    "table_description": "Table containing city information including ID, Name, CountryCode, District, and Population.",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": 700000
        }
      ]
    },
    "id": 1024,
    "table_name": "city"
  },
  {
    "question": "Return the names of cities that have a population between 200000 and 800000.",
    "SQL": "select name from city where population between 200000 and 800000",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "population",
          "match_type": "在区间",
          "condition": [
            200000,
            800000
          ]
        }
      ]
    },
    "table_name": "city",
    "id": 1025
  },
  {
    "question": "What is the most widely used official language among countries?",
    "SQL": "SELECT LANGUAGE FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY LANGUAGE ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "The table 'countrylanguage' contains information about languages spoken in different countries, including whether the language is official and the percentage of the population that speaks it.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "IsOfficial",
          "match_type": "等于",
          "condition": "T"
        }
      ]
    },
    "id": 1026,
    "table_name": "countrylanguage"
  },
  {
    "question": "Give the official language that is spoken in the most countries.",
    "SQL": "SELECT LANGUAGE FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "db_id": "world_1",
    "table_description": "This table contains information about languages spoken in different countries, including whether the language is official and the percentage of the population that speaks it.",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "IsOfficial",
          "match_type": "精确匹配",
          "condition": "T"
        }
      ]
    },
    "id": 1027,
    "table_name": "countrylanguage"
  },
  {
    "question": "What is the official language spoken by the largest percentage of people in each country?",
    "SQL": "SELECT LANGUAGE, CountryCode, max(Percentage) FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "The table 'countrylanguage' contains information about languages spoken in different countries, including the country code, language name, whether it is official, and the percentage of people who speak it.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "IsOfficial",
          "match_type": "等于",
          "condition": "T"
        }
      ]
    },
    "id": 1028,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the country codes of the different countries, and what are the official languages spoken by the greatest percentage of people for each?",
    "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "The table 'countrylanguage' contains information about the languages spoken in different countries, including the country code, language, whether it is official, and the percentage of speakers.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "IsOfficial",
          "match_type": "等于",
          "condition": "'T'"
        }
      ]
    },
    "id": 1029,
    "table_name": "countrylanguage"
  },
  {
    "question": "What is the total number of countries where Papiamento is spoken by the largest percentage of people?",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Papiamento' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "Table contains information about languages spoken in different countries, including the country code, language, whether it is official, and the percentage of people who speak the language.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        },
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Papiamento"
        }
      ]
    },
    "id": 1030,
    "table_name": "countrylanguage"
  },
  {
    "question": "Count the number of countries for which Papiamento is the predominantly spoken language.",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE Language  =  'Papiamento' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "countrylanguage table contains information about languages spoken in different countries including the percentage of the population that speaks each language and whether it is the official language.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Percentage",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Language",
          "match_type": "精确匹配",
          "condition": "Papiamento"
        }
      ]
    },
    "id": 1031,
    "table_name": "countrylanguage"
  },
  {
    "question": "What are the codes of countries where Papiamento is spoken by the largest percentage of people?",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE Language  =  \"Papiamento\" GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "This table contains information about languages spoken in different countries, including the country code, language name, whether it is official, and the percentage of the population that speaks the language.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Language",
          "match_type": "精确匹配",
          "condition": "Papiamento"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1032
  },
  {
    "question": "Return the codes of countries where Papiamento is one of the languages spoken.",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE Language  =  'Papiamento' GROUP BY CountryCode",
    "db_id": "world_1",
    "table_description": "This table contains information about the languages spoken in different countries, including whether the language is official and the percentage of the population that speaks it.",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Language",
          "match_type": "精确匹配",
          "condition": "Papiamento"
        }
      ]
    },
    "id": 1033,
    "table_name": "countrylanguage"
  },
  {
    "question": "How many conductors from the USA are there?",
    "SQL": "SELECT count(*) FROM conductor WHERE Nationality = 'USA'",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1034,
    "table_name": "conductor"
  },
  {
    "question": "Count the number of conductors who have been working for more than 10 years.",
    "SQL": "SELECT count(*) FROM conductor WHERE Year_of_Work > 10",
    "db_id": "orchestra",
    "table_description": "Table containing information about conductors including their ID, name, age, nationality, and years of work.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1035,
    "table_name": "conductor"
  },
  {
    "question": "List the names of conductors from the UK in ascending order of age.",
    "SQL": "SELECT Name FROM conductor WHERE Nationality = 'UK' ORDER BY Age ASC",
    "db_id": "orchestra",
    "table_description": "Table containing information about conductors including their ID, name, age, nationality, and years of work.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "精确匹配",
          "condition": "UK"
        }
      ]
    },
    "id": 1036,
    "table_name": "conductor"
  },
  {
    "question": "What are the names of conductors from the USA, ordered by age?",
    "SQL": "SELECT Name FROM conductor WHERE Nationality = 'USA' ORDER BY Age ASC",
    "db_id": "orchestra",
    "table_description": "Table containing information about conductors including their ID, name, age, nationality, and years of work.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1037,
    "table_name": "conductor"
  },
  {
    "question": "What are the names of conductors who have worked for more than 10 years?",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10",
    "db_id": "orchestra",
    "table_description": "This table contains information about conductors including their ID, name, age, nationality, and years of work.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1038,
    "table_name": "conductor"
  },
  {
    "question": "Return the names of conductors that have the nationality 'UK'.",
    "SQL": "SELECT Name FROM conductor WHERE Nationality = 'UK'",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "等于",
          "condition": "UK"
        }
      ]
    },
    "table_name": "conductor",
    "id": 1039
  },
  {
    "question": "What are the record companies of orchestras that have been founded after 2005, in descending order of their founding years?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2005 ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2005"
        }
      ]
    },
    "id": 1040,
    "table_name": "orchestra"
  },
  {
    "question": "Return the record companies of orchestras that use CD as their major record format, sorted descending by the years in which they were founded.",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Major_Record_Format = 'CD' ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        }
      ]
    },
    "id": 1041,
    "table_name": "orchestra"
  },
  {
    "question": "What is the average attendance of shows held at St. Mirren Park?",
    "SQL": "SELECT avg(Attendance) FROM SHOW WHERE If_first_show = 'St. Mirren Park'",
    "db_id": "orchestra",
    "table_description": "SHOW table contains information about different performances including their ID, performance location, if it's the first show, result, and attendance.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "If_first_show",
          "match_type": "精确匹配",
          "condition": "St. Mirren Park"
        }
      ]
    },
    "id": 1042,
    "table_name": "SHOW"
  },
  {
    "question": "Return the average attendance for shows at St. Mirren Park.",
    "SQL": "SELECT avg(Attendance) FROM SHOW WHERE If_first_show = 'St. Mirren Park'",
    "db_id": "orchestra",
    "table_description": "SHOW table contains details about different shows including their location and attendance.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "If_first_show",
          "match_type": "精确匹配",
          "condition": "St. Mirren Park"
        }
      ]
    },
    "id": 1043,
    "table_name": "SHOW"
  },
  {
    "question": "What are the maximum and minimum share of performances that contain 'Auditions' in their type?",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE Type LIKE '%Auditions%'",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Type",
          "match_type": "模糊匹配",
          "condition": "%Auditions%"
        }
      ]
    },
    "id": 1044,
    "table_name": "performance"
  },
  {
    "question": "Return the maximum and minimum shares for performances that have the type 'Auditions'.",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE Type = 'Auditions'",
    "db_id": "orchestra",
    "table_description": "The performance table contains information about different types of performances including their share ratings.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Type",
          "match_type": "等于",
          "condition": "Auditions"
        }
      ]
    },
    "id": 1045,
    "table_name": "performance"
  },
  {
    "question": "How many different nationalities do conductors with more than 10 years of work have?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor WHERE Year_of_Work > 10",
    "db_id": "orchestra",
    "table_description": "The conductor table contains information about orchestra conductors including their ID, name, age, nationality, and years of work.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1046,
    "table_name": "conductor"
  },
  {
    "question": "Count the number of different nationalities of conductors who have worked for more than 10 years.",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor WHERE Year_of_Work > 10",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1047,
    "table_name": "conductor"
  },
  {
    "question": "List names of conductors with more than 10 years of work in descending order of years of work.",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1048,
    "table_name": "conductor"
  },
  {
    "question": "What are the names of conductors from the USA, sorted descending by the number of years they have worked?",
    "SQL": "SELECT Name FROM conductor WHERE Nationality = 'USA' ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "table_description": "Table containing information about conductors including their ID, name, age, nationality, and years of work.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1049,
    "table_name": "conductor"
  },
  {
    "question": "List the name of the conductor with more than 10 years of work.",
    "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10",
    "db_id": "orchestra",
    "table_description": "Table contains information about conductors including their ID, name, age, nationality, and years of work.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Work",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "id": 1050,
    "table_name": "conductor"
  },
  {
    "question": "What is the name of the conductor from the USA who has worked the greatest number of years?",
    "SQL": "SELECT Name FROM conductor WHERE Nationality = 'USA' ORDER BY Year_of_Work DESC LIMIT 1",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "id": 1051,
    "table_name": "conductor"
  },
  {
    "question": "Please show the different record companies and the corresponding number of orchestras founded after 2005.",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra WHERE Year_of_Founded > 2005 GROUP BY Record_Company",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2005"
        }
      ]
    },
    "id": 1052,
    "table_name": "orchestra"
  },
  {
    "question": "How many orchestras founded after 2005 does each record company manage?",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra WHERE Year_of_Founded > 2005 GROUP BY Record_Company",
    "db_id": "orchestra",
    "table_description": "Table containing information about various orchestras including their ID, name, conductor ID, record company, year of founding, and major record format.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2005"
        }
      ]
    },
    "id": 1053,
    "table_name": "orchestra"
  },
  {
    "question": "Please show the record formats of orchestras in ascending order of count, but only for those founded after 2005.",
    "SQL": "SELECT Major_Record_Format FROM orchestra WHERE Year_of_Founded > 2005 GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "table_description": "Table containing information about orchestras, including their ID, name, conductor ID, record company, year founded, and major record format.",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2005"
        }
      ]
    },
    "id": 1054,
    "table_name": "orchestra"
  },
  {
    "question": "What are the major record formats of orchestras founded after 2005, sorted by their frequency?",
    "SQL": "SELECT Major_Record_Format FROM orchestra WHERE Year_of_Founded > 2005 GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2005"
        }
      ]
    },
    "id": 1055,
    "table_name": "orchestra"
  },
  {
    "question": "List the record company shared by the most number of orchestras founded after 2000.",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2000 GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "Table containing information about orchestras including their ID, name, conductor ID, record company, year of founding, and major record format.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2000"
        }
      ]
    },
    "id": 1056,
    "table_name": "orchestra"
  },
  {
    "question": "What is the record company used by the greatest number of orchestras founded after 2000?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2000 GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "table_description": "This table contains information about various orchestras including their ID, name, conductor ID, record company, year founded, and major record format.",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2000"
        }
      ]
    },
    "id": 1057,
    "table_name": "orchestra"
  },
  {
    "question": "Show the record companies shared by orchestras founded before 2002 and after 2002.",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2002 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  > 2002",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2002"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2002"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 1058
  },
  {
    "question": "What are the record companies that are used by both orchestras founded before 2004 and those founded after 2004?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2004 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2004",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2004"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2004"
        }
      ]
    },
    "id": 1059,
    "table_name": "orchestra"
  },
  {
    "question": "Find the number of orchestras whose major record format includes \"LP\".",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format LIKE \"%LP%\"",
    "db_id": "orchestra",
    "table_description": "Table containing information about orchestras including their ID, name, conductor ID, record company, year founded, and major record format.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "模糊匹配",
          "condition": "LP"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "DVD"
        }
      ]
    },
    "id": 1060,
    "table_name": "orchestra"
  },
  {
    "question": "Count the number of orchestras that have CD or DVD as their major record format, excluding those with LP.",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE (Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\") AND Major_Record_Format NOT LIKE \"%LP%\"",
    "db_id": "orchestra",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "模糊匹配",
          "condition": "LP"
        }
      ]
    },
    "id": 1061,
    "table_name": "orchestra"
  },
  {
    "question": "How many high schoolers are in grade 10?",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade = 10",
    "db_id": "network_1",
    "table_description": "The Highschooler table contains information about students including their ID, name, and grade.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "id": 1062,
    "table_name": "Highschooler"
  },
  {
    "question": "Count the number of high schoolers in grade 9.",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade = 9",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        }
      ]
    },
    "id": 1063,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the names and grades of each high schooler who is in 10th grade.",
    "SQL": "SELECT name ,  grade FROM Highschooler WHERE grade = 10",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "id": 1064,
    "table_name": "Highschooler"
  },
  {
    "question": "What are the names and grades for each high schooler in grade 9?",
    "SQL": "SELECT name ,  grade FROM Highschooler WHERE grade = 9",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        }
      ]
    },
    "id": 1065,
    "table_name": "Highschooler"
  },
  {
    "question": "Show all the grades of the high schoolers who are in grade 10.",
    "SQL": "SELECT grade FROM Highschooler WHERE grade = 10",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "id": 1066,
    "table_name": "Highschooler"
  },
  {
    "question": "What is the grade of each high schooler with ID greater than 1500?",
    "SQL": "SELECT grade FROM Highschooler WHERE ID > 1500",
    "db_id": "network_1",
    "table_description": "Highschooler table contains information about high school students including their ID, name, and grade.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "ID",
          "match_type": "大于",
          "condition": "1500"
        }
      ]
    },
    "id": 1067,
    "table_name": "Highschooler"
  },
  {
    "question": "What grade is Tiffany in?",
    "SQL": "SELECT grade FROM Highschooler WHERE name = 'Tiffany'",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Tiffany"
        }
      ]
    },
    "id": 1068,
    "table_name": "Highschooler"
  },
  {
    "question": "Return the grade for the high schooler named Haley.",
    "SQL": "SELECT grade FROM Highschooler WHERE name  =  \"Haley\"",
    "db_id": "network_1",
    "table_description": "Highschooler table contains information about students including their ID, name, and grade.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Haley"
        }
      ]
    },
    "id": 1069,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the names of all high schoolers whose grades are 9 or higher.",
    "SQL": "SELECT name FROM Highschooler WHERE grade >= 9",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于等于",
          "condition": "9"
        }
      ]
    },
    "id": 1070,
    "table_name": "Highschooler"
  },
  {
    "question": "What are the names of all high schoolers in grade 9?",
    "SQL": "SELECT name FROM Highschooler WHERE grade  =  9",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1071
  },
  {
    "question": "Show the ID of the high schooler named Haley.",
    "SQL": "SELECT ID FROM Highschooler WHERE name = \"Haley\"",
    "db_id": "network_1",
    "table_description": "Highschooler table contains information about high school students including their ID, name, and grade.",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Haley"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1072
  },
  {
    "question": "What is the id of the student named Tiffany?",
    "SQL": "SELECT ID FROM Highschooler WHERE name = \"Tiffany\"",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Tiffany"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1073
  },
  {
    "question": "How many high schoolers are there in grade 9 or 10, excluding those named Jordan?",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10 AND name != 'Jordan'",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        },
        {
          "column": "name",
          "match_type": "不等于",
          "condition": "Jordan"
        }
      ]
    },
    "id": 1074,
    "table_name": "Highschooler"
  },
  {
    "question": "Count the number of high schoolers named Haley or Jordan.",
    "SQL": "SELECT count(*) FROM Highschooler WHERE name  =  'Haley' OR name  =  'Jordan'",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "等于",
          "condition": "Haley"
        },
        {
          "column": "name",
          "match_type": "等于",
          "condition": "Jordan"
        }
      ]
    },
    "id": 1075,
    "table_name": "Highschooler"
  },
  {
    "question": "Show the number of high schoolers for each grade who are in grade 9 or 10.",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler WHERE grade IN (9, 10) GROUP BY grade",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "在区间",
          "condition": "[9, 10]"
        }
      ]
    },
    "id": 1076,
    "table_name": "Highschooler"
  },
  {
    "question": "How many high schoolers are in each grade above 9th grade?",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler WHERE grade > 9 GROUP BY grade",
    "db_id": "network_1",
    "table_description": "Highschooler table contains information about high school students including their ID, name, and grade.",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "大于",
          "condition": "9"
        }
      ]
    },
    "id": 1077,
    "table_name": "Highschooler"
  },
  {
    "question": "Which grade has the most high schoolers, excluding those in grade 10?",
    "SQL": "SELECT grade FROM Highschooler WHERE grade != 10 GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "不等于",
          "condition": "10"
        }
      ]
    },
    "id": 1078,
    "table_name": "Highschooler"
  },
  {
    "question": "Return the grade that has the greatest number of high schoolers with the name 'Jordan'.",
    "SQL": "SELECT grade FROM Highschooler WHERE name = 'Jordan' GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Jordan"
        }
      ]
    },
    "id": 1079,
    "table_name": "Highschooler"
  },
  {
    "question": "Show me all grades that have more than 3 students.",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >  3",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "3"
        }
      ]
    },
    "id": 1080,
    "table_name": "Highschooler"
  },
  {
    "question": "Which grades have 10 or more high schoolers?",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  10",
    "db_id": "network_1",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1081
  },
  {
    "question": "Show the student IDs and numbers of friends for students who have at least 2 friends.",
    "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id HAVING count(*) >= 2",
    "db_id": "network_1",
    "table_description": "Table 'Friend' contains columns 'student_id' and 'friend_id'. Each row represents a friendship between two students.",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "id": 1082,
    "table_name": "Friend"
  },
  {
    "question": "How many friends does each student have who has more than 2 friends?",
    "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id HAVING count(*) > 2",
    "db_id": "network_1",
    "table_description": "The Friend table contains information about the friendships between students.",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "COUNT",
          "condition": "> 2"
        }
      ]
    },
    "id": 1083,
    "table_name": "Friend"
  },
  {
    "question": "Count the number of likes for each liked_id.",
    "SQL": "SELECT liked_id ,  count(*) FROM Likes GROUP BY liked_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "liked_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Likes",
    "id": 1084
  },
  {
    "question": "How many likes correspond to each student id for students who have been liked by at least one other student?",
    "SQL": "SELECT student_id ,  count(*) FROM Likes WHERE student_id IN (SELECT DISTINCT liked_id FROM Likes) GROUP BY student_id",
    "db_id": "network_1",
    "table_description": "The Likes table contains pairs of student IDs where the first ID has liked the second ID.",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "student_id",
          "match_type": "IN",
          "condition": "(SELECT DISTINCT liked_id FROM Likes)"
        }
      ]
    },
    "id": 1085,
    "table_name": "Likes"
  },
  {
    "question": "List the emails of the professionals who live in the state of Hawaii or have the role code 'Veterenarian'.",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR role_code  =  'Veterenarian'",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about professionals including their roles and contact details.",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Hawaii"
        },
        {
          "column": "role_code",
          "match_type": "精确匹配",
          "condition": "Veterenarian"
        }
      ]
    },
    "id": 1086,
    "table_name": "Professionals"
  },
  {
    "question": "What are the emails of the professionals living in either the state of Indiana or the state of Connecticut?",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Indiana' OR state  =  'Connecticut'",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about professionals including their contact details and location.",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Indiana"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Connecticut"
        }
      ]
    },
    "id": 1087,
    "table_name": "Professionals"
  },
  {
    "question": "What are the arriving date and the departing date of all the dogs that were adopted after March 18, 2018?",
    "SQL": "SELECT date_arrived, date_departed FROM Dogs WHERE date_adopted > '2018-03-18'",
    "db_id": "dog_kennels",
    "table_description": "Dogs",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_adopted",
          "match_type": "大于",
          "condition": "2018-03-18"
        }
      ]
    },
    "id": 1088,
    "table_name": "Dogs"
  },
  {
    "question": "List the arrival date and the departure date for all the dogs that were adopted after March 18, 2018.",
    "SQL": "SELECT date_arrived, date_departed FROM Dogs WHERE date_adopted > '2018-03-18'",
    "db_id": "dog_kennels",
    "table_description": "Dogs",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_adopted",
          "match_type": "大于",
          "condition": "2018-03-18"
        }
      ]
    },
    "id": 1089,
    "table_name": "Dogs"
  },
  {
    "question": "How many dogs received the 'VAC' treatment?",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments WHERE treatment_type_code = 'VAC'",
    "db_id": "dog_kennels",
    "table_description": "This table contains information about the treatments given to dogs, including the treatment ID, dog ID, professional ID, treatment type code, date of treatment, and cost of treatment.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_type_code",
          "match_type": "精确匹配",
          "condition": "VAC"
        }
      ]
    },
    "id": 1090,
    "table_name": "Treatments"
  },
  {
    "question": "Count the number of dogs that received a 'VAC' treatment in March 2018.",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments WHERE treatment_type_code = 'VAC' AND date_of_treatment BETWEEN '2018-03-01' AND '2018-03-31'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_type_code",
          "match_type": "精确匹配",
          "condition": "VAC"
        },
        {
          "column": "date_of_treatment",
          "match_type": "绝对时间",
          "condition": [
            "2018-03-01",
            "2018-03-31"
          ]
        }
      ]
    },
    "id": 1091,
    "table_name": "Treatments"
  },
  {
    "question": "How many professionals have performed the 'VAC' treatment to dogs?",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE treatment_type_code = 'VAC'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "COUNT DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_type_code",
          "match_type": "精确匹配",
          "condition": "VAC"
        }
      ]
    },
    "id": 1092,
    "table_name": "Treatments"
  },
  {
    "question": "Find the number of professionals who have treated dogs for vaccinations (VAC).",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE treatment_type_code = 'VAC'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "treatment_type_code",
          "match_type": "精确匹配",
          "condition": "VAC"
        }
      ]
    },
    "id": 1093,
    "table_name": "Treatments"
  },
  {
    "question": "Which professionals live in a city with the exact name 'West Heidi'? List his or her role, street, city and state.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city = 'West Heidi'",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about professionals including their role, address, and contact details.",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "West Heidi"
        }
      ]
    },
    "id": 1094,
    "table_name": "professionals"
  },
  {
    "question": "Find the role, street, city and state of the professionals living in a city that starts with 'New'.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE 'New%'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "New%"
        }
      ]
    },
    "table_name": "professionals",
    "id": 1095
  },
  {
    "question": "Which owners live in the state of North Dakota? List his first name, last name and email.",
    "SQL": "SELECT first_name, last_name, email_address FROM Owners WHERE state = 'North Dakota'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "North Dakota"
        }
      ]
    },
    "table_name": "Owners",
    "id": 1096
  },
  {
    "question": "Return the first name, last name and email of the owners living in North Dakota.",
    "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state = 'North Dakota'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "North Dakota"
        }
      ]
    },
    "table_name": "Owners",
    "id": 1097
  },
  {
    "question": "How many male dogs have an age below the average?",
    "SQL": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs ) AND gender = '0'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "( SELECT avg(age) FROM Dogs )"
        },
        {
          "column": "gender",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "id": 1098,
    "table_name": "Dogs"
  },
  {
    "question": "Count the number of dogs with a weight below 5 kg.",
    "SQL": "SELECT count(*) FROM Dogs WHERE weight  <  5",
    "db_id": "dog_kennels",
    "table_description": "A table containing information about dogs in a kennel, including their ID, owner ID, whether they were abandoned, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, and date departed.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "小于",
          "condition": "5"
        }
      ]
    },
    "id": 1099,
    "table_name": "Dogs"
  },
  {
    "question": "What is the highest cost of treatments that happened in March 2018?",
    "SQL": "SELECT MAX(cost_of_treatment) FROM Treatments WHERE date_of_treatment BETWEEN '2018-03-01' AND '2018-03-31'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "date_of_treatment",
          "match_type": "绝对时间",
          "condition": [
            "2018-03-01",
            "2018-03-31"
          ]
        }
      ]
    },
    "id": 1100,
    "table_name": "Treatments"
  },
  {
    "question": "Show me the cost of the treatments performed by professional 9.",
    "SQL": "SELECT cost_of_treatment FROM Treatments WHERE professional_id = 9",
    "db_id": "dog_kennels",
    "table_description": "Treatments table contains information about the treatments given to dogs, including the professional who performed the treatment, the date of the treatment, and the cost of the treatment.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "professional_id",
          "match_type": "等于",
          "condition": "9"
        }
      ]
    },
    "id": 1101,
    "table_name": "Treatments"
  },
  {
    "question": "List the dog name, age and weight of the dogs that have not been adopted?",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE date_adopted IS NULL",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about dogs in a kennel, including their ID, owner ID, abandonment status, breed code, size code, name, age, date of birth, gender, weight, arrival date, adoption date, and departure date.",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_adopted",
          "match_type": "不为空",
          "condition": "NULL"
        }
      ]
    },
    "id": 1102,
    "table_name": "Dogs"
  },
  {
    "question": "What are the dog name, age and weight of the dogs that have been adopted? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE date_adopted IS NOT NULL",
    "db_id": "dog_kennels",
    "table_description": "Dogs",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_adopted",
          "match_type": "不为空",
          "condition": ""
        }
      ]
    },
    "id": 1103,
    "table_name": "Dogs"
  },
  {
    "question": "What is the average age of all the dogs that are larger than medium size?",
    "SQL": "SELECT avg(age) FROM Dogs WHERE size_code > 'MED'",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about dogs in a kennel.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "size_code",
          "match_type": "大于",
          "condition": "MED"
        }
      ]
    },
    "id": 1104,
    "table_name": "Dogs"
  },
  {
    "question": "Compute the average age of all the large dogs.",
    "SQL": "SELECT avg(age) FROM Dogs WHERE size_code = 'LGE'",
    "db_id": "dog_kennels",
    "table_description": "Dogs table contains information about dogs in a kennel, including their ID, owner ID, breed, size, name, age, date of birth, gender, weight, and dates of arrival, adoption, and departure.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "size_code",
          "match_type": "精确匹配",
          "condition": "LGE"
        }
      ]
    },
    "id": 1105,
    "table_name": "Dogs"
  },
  {
    "question": "What is the age of the oldest dog that has been adopted after March 1st, 2018?",
    "SQL": "SELECT max(age) FROM Dogs WHERE date_adopted >= '2018-03-01'",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about dogs in the kennel, including their age and adoption dates.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "date_adopted",
          "match_type": "absolute_time",
          "condition": [
            "2018-03-01",
            null
          ]
        }
      ]
    },
    "id": 1106,
    "table_name": "Dogs"
  },
  {
    "question": "Tell me the age of the oldest dog that is not abandoned.",
    "SQL": "SELECT max(age) FROM Dogs WHERE abandoned_yn = '0'",
    "db_id": "dog_kennels",
    "table_description": "A table containing information about dogs in a kennel, including their ID, owner ID, whether they are abandoned, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, and date departed.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "id": 1107,
    "table_name": "Dogs"
  },
  {
    "question": "What is the total cost of each charge type? List both charge type and total amount, but only for charges with an amount greater than 100.",
    "SQL": "SELECT charge_type ,  SUM(charge_amount) AS total_charge FROM Charges WHERE charge_amount > 100 GROUP BY charge_type",
    "db_id": "dog_kennels",
    "table_description": "The Charges table contains information about different types of charges and their amounts.",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "charge_amount",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1108,
    "table_name": "Charges"
  },
  {
    "question": "List each charge type and its amount for charges greater than 100.",
    "SQL": "SELECT charge_type ,  charge_amount FROM Charges WHERE charge_amount > 100",
    "db_id": "dog_kennels",
    "table_description": "The Charges table contains information about the charges made at dog kennels, including the charge type and the amount.",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "charge_amount",
          "match_type": "大于",
          "condition": "100"
        }
      ]
    },
    "id": 1109,
    "table_name": "Charges"
  },
  {
    "question": "What is the highest charge amount for 'Health Check'?",
    "SQL": "SELECT MAX(charge_amount) FROM Charges WHERE charge_type = 'Health Check'",
    "db_id": "dog_kennels",
    "table_description": "Table containing charges information for dog kennels.",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "charge_type",
          "match_type": "精确匹配",
          "condition": "Health Check"
        }
      ]
    },
    "id": 1110,
    "table_name": "Charges"
  },
  {
    "question": "What is the maximum charge amount for the charge type 'Health Check'?",
    "SQL": "SELECT MAX(charge_amount) FROM Charges WHERE charge_type = 'Health Check'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "charge_type",
          "match_type": "精确匹配",
          "condition": "Health Check"
        }
      ]
    },
    "id": 1111,
    "table_name": "Charges"
  },
  {
    "question": "List the email, cell phone and home phone of all the professionals who are employees.",
    "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals WHERE role_code = 'Employee'",
    "db_id": "dog_kennels",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "role_code",
          "match_type": "精确匹配",
          "condition": "Employee"
        }
      ]
    },
    "id": 1112,
    "table_name": "professionals"
  },
  {
    "question": "What are the email, cell phone and home phone of each professional with the role code 'Veterenarian'?",
    "SQL": "SELECT email_address, cell_number, home_phone FROM professionals WHERE role_code = 'Veterenarian'",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about professionals including their contact details and role.",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "role_code",
          "match_type": "精确匹配",
          "condition": "Veterenarian"
        }
      ]
    },
    "id": 1113,
    "table_name": "professionals"
  },
  {
    "question": "What are all the possible breed type and size type combinations for dogs that have been adopted after March 1, 2018?",
    "SQL": "SELECT DISTINCT breed_code, size_code FROM dogs WHERE date_adopted > '2018-03-01'",
    "db_id": "dog_kennels",
    "table_description": "Table containing information about dogs in the kennel.",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_adopted",
          "match_type": "绝对时间",
          "condition": "['2018-03-01', null]"
        }
      ]
    },
    "id": 1114,
    "table_name": "dogs"
  },
  {
    "question": "Find the distinct breed type and size type combinations for dogs that have not been abandoned.",
    "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs WHERE abandoned_yn = '0'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "0"
        }
      ]
    },
    "id": 1115,
    "table_name": "dogs"
  },
  {
    "question": "How many singers are there from the United States?",
    "SQL": "SELECT count(*) FROM singer WHERE Citizenship = 'United States'",
    "db_id": "singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "id": 1116,
    "table_name": "singer"
  },
  {
    "question": "What is the count of singers from the United States?",
    "SQL": "SELECT count(*) FROM singer WHERE Citizenship = 'United States'",
    "db_id": "singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "id": 1117,
    "table_name": "singer"
  },
  {
    "question": "List the name of singers from France in ascending order of net worth.",
    "SQL": "SELECT Name FROM singer WHERE Citizenship = 'France' ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "id": 1118,
    "table_name": "singer"
  },
  {
    "question": "What are the names of singers from Chile ordered by ascending net worth?",
    "SQL": "SELECT Name FROM singer WHERE Citizenship = 'Chile' ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "Chile"
        }
      ]
    },
    "id": 1119,
    "table_name": "singer"
  },
  {
    "question": "What are the birth year and citizenship of singers from Chile?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer WHERE Citizenship = 'Chile'",
    "db_id": "singer",
    "table_description": "singer table contains information about singers including their ID, name, birth year, net worth, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "Chile"
        }
      ]
    },
    "id": 1120,
    "table_name": "singer"
  },
  {
    "question": "What are the birth years and citizenships of the singers who have a net worth greater than 25 million?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer WHERE Net_Worth_Millions > 25",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "25"
        }
      ]
    },
    "id": 1121,
    "table_name": "singer"
  },
  {
    "question": "List the name of singers whose net worth is greater than 25 million.",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 25",
    "db_id": "singer",
    "table_description": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "25"
        }
      ]
    },
    "id": 1122,
    "table_name": "singer"
  },
  {
    "question": "What are the names of the singers who have a net worth greater than 20 million?",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 20",
    "db_id": "singer",
    "table_description": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "id": 1123,
    "table_name": "singer"
  },
  {
    "question": "Show the name of singers whose net worth is more than 25 million dollars?",
    "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 25",
    "db_id": "singer",
    "table_description": "This table contains information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "25"
        },
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1949"
        }
      ]
    },
    "id": 1124,
    "table_name": "singer"
  },
  {
    "question": "What are the names of the singers who are citizens of the United States and were born in 1948 or 1949?",
    "SQL": "SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949) AND Citizenship = 'United States'",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1948"
        },
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "table_name": "singer",
    "id": 1125
  },
  {
    "question": "What is the name of the singer with the largest net worth from France?",
    "SQL": "SELECT Name FROM singer WHERE Citizenship = 'France' ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their ID, name, birth year, net worth, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "id": 1126,
    "table_name": "singer"
  },
  {
    "question": "What is the name of the singer who is worth the most and is from the United States?",
    "SQL": "SELECT Name FROM singer WHERE Citizenship = 'United States' ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "id": 1127,
    "table_name": "singer"
  },
  {
    "question": "Show different citizenship of singers with a net worth greater than 20 million and the number of singers of each citizenship.",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer WHERE Net_Worth_Millions > 20 GROUP BY Citizenship",
    "db_id": "singer",
    "table_description": "Table 'singer' contains information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "id": 1128,
    "table_name": "singer"
  },
  {
    "question": "For each citizenship, how many singers with net worth greater than 20 million are from that country?",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer WHERE Net_Worth_Millions > 20 GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "id": 1129,
    "table_name": "singer"
  },
  {
    "question": "Please show the most common citizenship of singers who are from the United States.",
    "SQL": "SELECT Citizenship FROM singer WHERE Citizenship = 'United States' GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their ID, name, birth year, net worth, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "精确匹配",
          "condition": "United States"
        }
      ]
    },
    "id": 1130,
    "table_name": "singer"
  },
  {
    "question": "What is the most common singer citizenship among singers with a net worth of over 20 million dollars?",
    "SQL": "select citizenship from singer where Net_Worth_Millions > 20 group by citizenship order by count(*) desc limit 1",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "id": 1131,
    "table_name": "singer"
  },
  {
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship who were born after 1945.",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer WHERE Birth_Year > 1945 GROUP BY Citizenship",
    "db_id": "singer",
    "table_description": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1945"
        }
      ]
    },
    "id": 1132,
    "table_name": "singer"
  },
  {
    "question": "For each citizenship, what is the maximum net worth for singers born after 1945?",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer WHERE Birth_Year > 1945 GROUP BY Citizenship",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their ID, name, birth year, net worth, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1945"
        }
      ]
    },
    "id": 1133,
    "table_name": "singer"
  },
  {
    "question": "Show the citizenship shared by singers with net worth less than 20 million and more than 30 million.",
    "SQL": "SELECT Citizenship FROM singer WHERE Net_Worth_Millions  <  20 INTERSECT SELECT Citizenship FROM singer WHERE Net_Worth_Millions  > 30",
    "db_id": "singer",
    "table_description": "Table containing information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Net_Worth_Millions",
          "match_type": "小于",
          "condition": "20"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1955"
        }
      ]
    },
    "id": 1134,
    "table_name": "singer"
  },
  {
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1960?",
    "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1960",
    "db_id": "singer",
    "table_description": "The singer table contains information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1945"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1960"
        }
      ]
    },
    "id": 1135,
    "table_name": "singer"
  },
  {
    "question": "How many amenities are there in total?",
    "SQL": "SELECT count(*) FROM Other_Available_Features WHERE feature_type_code = 'Amenity'",
    "db_id": "real_estate_properties",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "feature_type_code",
          "match_type": "精确匹配",
          "condition": "Amenity"
        }
      ]
    },
    "id": 1136,
    "table_name": "Other_Available_Features"
  },
  {
    "question": "What are the names of properties that have been on the market since before 1990-01-01 and have more than 1 room?",
    "SQL": "SELECT property_name FROM Properties WHERE date_on_market < '1990-01-01' AND room_count > 1",
    "db_id": "real_estate_properties",
    "table_description": "",
    "config": {
      "dimension": [
        {
          "column": "property_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_on_market",
          "match_type": "小于",
          "condition": "1990-01-01"
        },
        {
          "column": "property_type_code",
          "match_type": "等于",
          "condition": "Apartment"
        },
        {
          "column": "room_count",
          "match_type": "大于",
          "condition": 1
        }
      ]
    },
    "id": 1137,
    "table_name": "Properties"
  },
  {
    "question": "What is the total number of singers?",
    "SQL": "SELECT count(*) FROM singer",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1138
  },
  {
    "question": "How many singers are there in total?",
    "SQL": "SELECT count(*) FROM singer",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1139
  },
  {
    "question": "Display the name, country, and age of all singers, sorted by age from oldest to youngest.",
    "SQL": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 1140
  },
  {
    "question": "List the names, countries, and ages of all singers, sorted by age in descending order.",
    "SQL": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 1141
  },
  {
    "question": "What are the average, minimum, and maximum ages of singers from France?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "table_name": "singer",
    "id": 1142
  },
  {
    "question": "What are the average, minimum, and maximum ages of singers from France?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "table_name": "singer",
    "id": 1143
  },
  {
    "question": "Display the name and release year of the song performed by the youngest singer.",
    "SQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 1144
  },
  {
    "question": "What are the names and release years of the songs by the youngest singer?",
    "SQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "最小值",
          "condition": ""
        }
      ]
    },
    "table_name": "singer",
    "id": 1145
  },
  {
    "question": "Which unique countries do singers older than 20 come from?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "table_name": "singer",
    "id": 1146
  },
  {
    "question": "Which countries have singers who are older than 20?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age > 20",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "table_name": "singer",
    "id": 1147
  },
  {
    "question": "List all countries along with the total number of singers in each.",
    "SQL": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1148
  },
  {
    "question": "What is the number of singers originating from each country?",
    "SQL": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1149
  },
  {
    "question": "Show all the song titles performed by artists older than the average age.",
    "SQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "(SELECT avg(age) FROM singer)"
        }
      ]
    },
    "table_name": "singer",
    "id": 1150
  },
  {
    "question": "List all the song titles performed by artists who are older than the average age of all artists.",
    "SQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "(SELECT avg(age) FROM singer)"
        }
      ]
    },
    "table_name": "singer",
    "id": 1151
  },
  {
    "question": "List the location and name of all stadiums that have a capacity ranging from 5000 to 10000.",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "capacity",
          "match_type": "在区间",
          "condition": [
            5000,
            10000
          ]
        }
      ]
    },
    "table_name": "stadium",
    "id": 1152
  },
  {
    "question": "Can you provide the locations and names of all stadiums that have a capacity ranging from 5000 to 10000?",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "capacity",
          "match_type": "在区间",
          "condition": [
            5000,
            10000
          ]
        }
      ]
    },
    "table_name": "stadium",
    "id": 1153
  },
  {
    "question": "What are the highest capacity and the average capacity of all stadiums?",
    "SQL": "select max(capacity), average from stadium",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        },
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "stadium",
    "id": 1154
  },
  {
    "question": "What are the average and maximum capacities across all stadiums?",
    "SQL": "select avg(capacity) ,  max(capacity) from stadium",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "AVG"
        },
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "stadium",
    "id": 1155
  },
  {
    "question": "What are the name and capacity of the stadium that has the highest average attendance?",
    "SQL": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "stadium",
    "id": 1156
  },
  {
    "question": "Which stadium has the highest average attendance, and what is its name and capacity?",
    "SQL": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "stadium",
    "id": 1157
  },
  {
    "question": "What is the total number of concerts held in 2014 and 2015?",
    "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "table_name": "concert",
    "id": 1158
  },
  {
    "question": "What is the total number of concerts that took place in 2014 and 2015?",
    "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "table_name": "concert",
    "id": 1159
  },
  {
    "question": "What is the year with the highest number of concerts?",
    "SQL": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "concert",
    "id": 1160
  },
  {
    "question": "Which year saw the highest number of concerts?",
    "SQL": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "concert",
    "id": 1161
  },
  {
    "question": "List the countries that have both singers older than 40 and singers younger than 30.",
    "SQL": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "40"
        },
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        }
      ]
    },
    "table_name": "singer",
    "id": 1162
  },
  {
    "question": "What are the name and nationality of the singers who have songs with 'Hey' in the title?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_name",
          "match_type": "模糊匹配",
          "condition": "Hey"
        }
      ]
    },
    "table_name": "singer",
    "id": 1163
  },
  {
    "question": "Can you provide the names and countries of origin for all singers who have a song titled with the word 'Hey'?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_name",
          "match_type": "模糊匹配",
          "condition": "Hey"
        }
      ]
    },
    "table_name": "singer",
    "id": 1164
  },
  {
    "question": "Count the pets that weigh more than 10.",
    "SQL": "SELECT count(*) FROM pets WHERE weight  >  10",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "pets",
    "id": 1165
  },
  {
    "question": "What is the number of pets that weigh more than 10?",
    "SQL": "SELECT count(*) FROM pets WHERE weight  >  10",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "pets",
    "id": 1166
  },
  {
    "question": "What is the weight of the youngest dog in the database?",
    "SQL": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "MIN(pet_age)"
        }
      ]
    },
    "table_name": "pets",
    "id": 1167
  },
  {
    "question": "What is the weight of the youngest pet that is a dog?",
    "SQL": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "MIN(pet_age)"
        }
      ]
    },
    "table_name": "pets",
    "id": 1168
  },
  {
    "question": "List the highest weight along with the pet type for each category of pets.",
    "SQL": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 1169
  },
  {
    "question": "For each type of pet, show the maximum weight and the pet type.",
    "SQL": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 1170
  },
  {
    "question": "Count the unique types of pets.",
    "SQL": "SELECT count(DISTINCT pettype) FROM pets",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "pettype",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 1171
  },
  {
    "question": "What is the number of unique pet types?",
    "SQL": "SELECT count(DISTINCT pettype) FROM pets",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "pettype",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 1172
  },
  {
    "question": "Identify the type and weight of the youngest pet in the database.",
    "SQL": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "pets",
    "id": 1173
  },
  {
    "question": "What is the species of the youngest pet, and what is its weight?",
    "SQL": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "pets",
    "id": 1174
  },
  {
    "question": "Retrieve the ID and weight of all pets that are older than 1 year.",
    "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "pets",
    "id": 1175
  },
  {
    "question": "Can you provide the ID and weight of all pets that are more than 1 year old?",
    "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "pets",
    "id": 1176
  },
  {
    "question": "Calculate the average and maximum age for every category of pet.",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "pet_age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 1177
  },
  {
    "question": "For each pet type, what are the average and maximum ages?",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "avg"
        },
        {
          "column": "pet_age",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 1178
  },
  {
    "question": "Calculate the average weight of pets for each type.",
    "SQL": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 1179
  },
  {
    "question": "What's the mean weight for every category of pet?",
    "SQL": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 1180
  },
  {
    "question": "What is the total number of continents?",
    "SQL": "SELECT count(*) FROM CONTINENTS;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "CONTINENTS",
    "id": 1181
  },
  {
    "question": "How many continents are there?",
    "SQL": "SELECT count(*) FROM CONTINENTS;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "CONTINENTS",
    "id": 1182
  },
  {
    "question": "What is the total number of countries in the list?",
    "SQL": "SELECT count(*) FROM COUNTRIES;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "COUNTRIES",
    "id": 1183
  },
  {
    "question": "What is the total number of countries?",
    "SQL": "SELECT count(*) FROM COUNTRIES;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "COUNTRIES",
    "id": 1184
  },
  {
    "question": "What is the mean miles per gallon (mpg) for cars that have 4 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1185
  },
  {
    "question": "What is the mean miles per gallon for cars that have 4 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1186
  },
  {
    "question": "What is the minimum weight of a car with 8 cylinders manufactured in 1974?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "等于",
          "condition": "1974"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 1187
  },
  {
    "question": "What is the lowest weight for a car with 8 cylinders that was manufactured in 1974?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "等于",
          "condition": "1974"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 1188
  },
  {
    "question": "List all the makers and their corresponding models.",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "MODEL_LIST",
    "id": 1189
  },
  {
    "question": "List all the makers and their corresponding models.",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "MODEL_LIST",
    "id": 1190
  },
  {
    "question": "How many cars have a horsepower greater than 150?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "horsepower",
          "match_type": "大于",
          "condition": "150"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1191
  },
  {
    "question": "How many cars have a horsepower exceeding 150?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "horsepower",
          "match_type": "大于",
          "condition": "150"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1192
  },
  {
    "question": "What is the yearly average weight of cars?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA",
    "id": 1193
  },
  {
    "question": "For each year, what is the average weight?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA",
    "id": 1194
  },
  {
    "question": "What is the mean horsepower for cars manufactured prior to 1980?",
    "SQL": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1195
  },
  {
    "question": "What is the mean horsepower of cars manufactured prior to 1980?",
    "SQL": "select avg(horsepower) from cars_data where year < 1980;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 1196
  },
  {
    "question": "What is the highest acceleration for each number of cylinders in the cars data?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA",
    "id": 1197
  },
  {
    "question": "What is the highest acceleration for each number of cylinders in the cars data?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA",
    "id": 1198
  },
  {
    "question": "What car model has the highest number of different versions (makes)?",
    "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Model"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "CAR_NAMES",
    "id": 1199
  },
  {
    "question": "Which car model has the highest number of distinct versions?",
    "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Model"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "CAR_NAMES",
    "id": 1200
  },
  {
    "question": "What is the number of cars with over 4 cylinders?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1201
  },
  {
    "question": "How many cars have more than 4 cylinders?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1202
  },
  {
    "question": "What is the total number of cars manufactured in 1980?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1203
  },
  {
    "question": "How many cars were manufactured in 1980?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1204
  },
  {
    "question": "Which years had cars produced with a weight ranging from 3000 to 4000?",
    "SQL": "select distinct year from cars_data where weight between 3000 and 4000;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "在区间",
          "condition": [
            3000,
            4000
          ]
        }
      ]
    },
    "table_name": "cars_data",
    "id": 1205
  },
  {
    "question": "Which years had cars produced with weights ranging from over 3000 to under 4000?",
    "SQL": "select distinct year from cars_data where weight between 3000 and 4000;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "在区间",
          "condition": [
            3000,
            4000
          ]
        }
      ]
    },
    "table_name": "cars_data",
    "id": 1206
  },
  {
    "question": "What is the horsepower of the car that accelerates the fastest?",
    "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "accelerate",
          "match_type": "ORDER_BY_DESC_LIMIT_1",
          "condition": ""
        }
      ]
    },
    "table_name": "CARS_DATA AS T1",
    "id": 1207
  },
  {
    "question": "What is the horsepower of the car that accelerates the fastest?",
    "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T1.horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA AS T1",
    "id": 1208
  },
  {
    "question": "How many vehicles have a higher acceleration rate compared to the one with the maximum horsepower?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Accelerate",
          "match_type": "大于",
          "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1209
  },
  {
    "question": "How many cars have an acceleration rate higher than the car with the highest horsepower?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Accelerate",
          "match_type": "大于",
          "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1210
  },
  {
    "question": "What is the number of cars with more than 6 cylinders?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "6"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1211
  },
  {
    "question": "How many cars have more than 6 cylinders?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "6"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 1212
  },
  {
    "question": "What is the highest miles per gallon for a car that has 8 cylinders or was manufactured before 1980?",
    "SQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 1213
  },
  {
    "question": "What is the highest miles per gallon (mpg) for cars with 8 cylinders or manufactured before 1980?",
    "SQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 1214
  },
  {
    "question": "What is the country of origin for the airline JetBlue Airways?",
    "SQL": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1215
  },
  {
    "question": "Which country is JetBlue Airways associated with?",
    "SQL": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1216
  },
  {
    "question": "Can you provide the abbreviation for the airline JetBlue Airways?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1217
  },
  {
    "question": "What is the abbreviation for JetBlue Airways?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1218
  },
  {
    "question": "Display the names and abbreviations of all airlines located in the USA.",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1219
  },
  {
    "question": "List the names and abbreviations of airlines located in the United States.",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1220
  },
  {
    "question": "Show the airport code and name for airports located in Anthony.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Anthony"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1221
  },
  {
    "question": "Provide the airport code and name for the city of Anthony.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Anthony"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1222
  },
  {
    "question": "What is the total number of airlines?",
    "SQL": "SELECT count(*) FROM AIRLINES",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "AIRLINES",
    "id": 1223
  },
  {
    "question": "How many airlines are there in total?",
    "SQL": "SELECT count(*) FROM AIRLINES",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "AIRLINES",
    "id": 1224
  },
  {
    "question": "What is the total number of airports?",
    "SQL": "SELECT count(*) FROM AIRPORTS",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "AIRPORTS",
    "id": 1225
  },
  {
    "question": "Provide the total count of airports.",
    "SQL": "SELECT count(*) FROM AIRPORTS",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "AIRPORTS",
    "id": 1226
  },
  {
    "question": "What is the total number of flights?",
    "SQL": "SELECT count(*) FROM FLIGHTS",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "FLIGHTS",
    "id": 1227
  },
  {
    "question": "Provide the total count of flights.",
    "SQL": "SELECT count(*) FROM FLIGHTS",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "FLIGHTS",
    "id": 1228
  },
  {
    "question": "What is the name of the airline with the abbreviation 'UAL'? ",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "UAL"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1229
  },
  {
    "question": "Provide the name of the airline whose abbreviation is 'UAL'.",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "UAL"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1230
  },
  {
    "question": "What is the number of airlines based in the USA?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1231
  },
  {
    "question": "How many airlines are there in the USA?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 1232
  },
  {
    "question": "What is the city and country where Alton airport is located?",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "精确匹配",
          "condition": "Alton"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1233
  },
  {
    "question": "What are the city and country of the Alton airport?",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "精确匹配",
          "condition": "Alton"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1234
  },
  {
    "question": "Can you provide the name of the airport with the code 'AKO'?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "AKO"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1235
  },
  {
    "question": "Provide the name of the airport that has the code 'AKO'.",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "AKO"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1236
  },
  {
    "question": "List the names of airports located in the city of Aberdeen.",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Aberdeen"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1237
  },
  {
    "question": "Can you provide me with the names of the airports located in Aberdeen?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Aberdeen"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 1238
  },
  {
    "question": "What is the total number of flights that depart from the airport 'APG'?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1239
  },
  {
    "question": "How many flights depart from the airport 'APG'?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1240
  },
  {
    "question": "What is the total number of flights with ATO as the destination airport?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "ATO"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1241
  },
  {
    "question": "How many flights are there with ATO as the destination airport?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ATO'",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "ATO"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1242
  },
  {
    "question": "Which flight numbers depart from Airport 'APG'? ",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1243
  },
  {
    "question": "List the flight numbers for flights that depart from APG.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1244
  },
  {
    "question": "Which flight numbers are for flights that have 'APG' as their destination airport?",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1245
  },
  {
    "question": "List the flight numbers for flights that land at APG.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 1246
  },
  {
    "question": "What is the total number of employees?",
    "SQL": "SELECT count(*) FROM employee",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "employee",
    "id": 1247
  },
  {
    "question": "Calculate the total number of employees",
    "SQL": "SELECT count(*) FROM employee",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "employee",
    "id": 1248
  },
  {
    "question": "List employee names in the order of their age from youngest to oldest.",
    "SQL": "SELECT name FROM employee ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "employee",
    "id": 1249
  },
  {
    "question": "Display the names of employees, ordered by their age in ascending order.",
    "SQL": "SELECT name FROM employee ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "employee",
    "id": 1250
  },
  {
    "question": "How many employees are there in each city?",
    "SQL": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "employee",
    "id": 1251
  },
  {
    "question": "Calculate the total number of employees in each city.",
    "SQL": "SELECT count(*), city FROM employee GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "employee",
    "id": 1252
  },
  {
    "question": "From which cities do multiple employees under the age of 30 originate?",
    "SQL": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        },
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "employee",
    "id": 1253
  },
  {
    "question": "Identify the cities with more than one employee who is under 30 years old.",
    "SQL": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        },
        {
          "column": "*",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "employee",
    "id": 1254
  },
  {
    "question": "Determine the total number of shops located in each area.",
    "SQL": "SELECT count(*), LOCATION FROM shop GROUP BY LOCATION",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1255
  },
  {
    "question": "What is the number of shops in each location?",
    "SQL": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1256
  },
  {
    "question": "Identify the manager's name and the district of the shop that has the highest number of products.",
    "SQL": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1257
  },
  {
    "question": "Which manager and district belong to the shop that has the highest number of products sold?",
    "SQL": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1258
  },
  {
    "question": "What are the lowest and highest number of products across all stores?",
    "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1259
  },
  {
    "question": "What is the range of the number of products in all shops, specifically the lowest and highest counts?",
    "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1260
  },
  {
    "question": "List the name, location, and district of all shops sorted by the number of products in descending order.",
    "SQL": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "LOCATION"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1261
  },
  {
    "question": "Return the name, location, and district of each shop, sorted by the number of products in descending order.",
    "SQL": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "LOCATION"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1262
  },
  {
    "question": "Identify the names of shops that have a higher number of products than the average number of products across all shops.",
    "SQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "AVG"
        },
        {
          "column": "number_products",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "(SELECT avg(number_products) FROM shop)"
        }
      ]
    },
    "table_name": "shop",
    "id": 1263
  },
  {
    "question": "Can you provide the names of the shops that have more products than the average number of products across all shops?",
    "SQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "AVG"
        },
        {
          "column": "number_products",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "(SELECT avg(number_products) FROM shop)"
        }
      ]
    },
    "table_name": "shop",
    "id": 1264
  },
  {
    "question": "What is the total amount of bonus distributed across all evaluations?",
    "SQL": "SELECT sum(bonus) FROM evaluation",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "evaluation",
    "id": 1265
  },
  {
    "question": "Calculate the total bonus amount distributed across all evaluations.",
    "SQL": "SELECT sum(bonus) FROM evaluation",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "evaluation",
    "id": 1266
  },
  {
    "question": "Provide all details related to hiring.",
    "SQL": "SELECT * FROM hiring",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": []
    },
    "table_name": "hiring",
    "id": 1267
  },
  {
    "question": "Can you provide all the details related to hiring?",
    "SQL": "SELECT * FROM hiring",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": []
    },
    "table_name": "hiring",
    "id": 1268
  },
  {
    "question": "What is the district that contains stores with fewer than 3000 products as well as stores with more than 10000 products?",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "3000"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "table_name": "shop",
    "id": 1269
  },
  {
    "question": "Identify the districts that have shops with fewer than 3000 products and also shops with more than 10000 products.",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "3000"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "table_name": "shop",
    "id": 1270
  },
  {
    "question": "What is the number of unique store locations?",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1271
  },
  {
    "question": "Calculate the total number of unique store locations.",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 1272
  },
  {
    "question": "What is the total number of documents we have?",
    "SQL": "SELECT count(*) FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 1273
  },
  {
    "question": "Calculate the total number of documents.",
    "SQL": "SELECT count(*) FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 1274
  },
  {
    "question": "Can you provide me with the IDs, names, and descriptions of all the documents?",
    "SQL": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "document_name"
        },
        {
          "column": "document_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Documents",
    "id": 1275
  },
  {
    "question": "Which documents contain the letter 'w' in their description, and what are their names and template IDs?",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "模糊匹配",
          "condition": "%w%"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1276
  },
  {
    "question": "Retrieve the names and template IDs of documents where the description includes the letter 'w'.",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "模糊匹配",
          "condition": "w"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1277
  },
  {
    "question": "Can you provide me with the document ID, template ID, and description for the document titled 'Robbin CV'?",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "精确匹配",
          "condition": "Robbin CV"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1278
  },
  {
    "question": "Fetch the document ID, template ID, and description for the document named Robbin CV.",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "精确匹配",
          "condition": "Robbin CV"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1279
  },
  {
    "question": "What is the total number of unique templates used across all documents?",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 1280
  },
  {
    "question": "Calculate the total number of unique templates utilized for documents.",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 1281
  },
  {
    "question": "Display all template IDs along with the number of documents that use each template.",
    "SQL": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 1282
  },
  {
    "question": "Can you list all unique template IDs used in documents along with the frequency of their usage?",
    "SQL": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 1283
  },
  {
    "question": "List the IDs of all templates that have been utilized by more than a single document.",
    "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1284
  },
  {
    "question": "Which template IDs are associated with more than one document?",
    "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Documents",
    "id": 1285
  },
  {
    "question": "What is the total number of templates we have?",
    "SQL": "SELECT count(*) FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1286
  },
  {
    "question": "Calculate the total number of templates.",
    "SQL": "SELECT count(*) FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1287
  },
  {
    "question": "List the template IDs, version numbers, and template type codes for all templates.",
    "SQL": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        },
        {
          "column": "version_number"
        },
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1288
  },
  {
    "question": "Display unique template type codes from the Templates table.",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1289
  },
  {
    "question": "Can you provide a list of all unique template type codes?",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1290
  },
  {
    "question": "Provide the IDs of templates with the type code PP or PPT.",
    "SQL": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "PP"
        },
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "PPT"
        }
      ]
    },
    "table_name": "Templates",
    "id": 1291
  },
  {
    "question": "What is the total number of templates with the template type code 'CV'?",
    "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "等于",
          "condition": "CV"
        }
      ]
    },
    "table_name": "Templates",
    "id": 1292
  },
  {
    "question": "How many templates are there of the CV type?",
    "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "CV"
        }
      ]
    },
    "table_name": "Templates",
    "id": 1293
  },
  {
    "question": "Retrieve the version number and template type code for templates where the version number is greater than 5.",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "None"
        }
      ],
      "filter": [
        {
          "column": "version_number",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "table_name": "Templates",
    "id": 1294
  },
  {
    "question": "List the version numbers and template type codes for templates that have a version number exceeding 5.",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "version_number",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "table_name": "Templates",
    "id": 1295
  },
  {
    "question": "Display the template type codes along with the count of templates for each type.",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1296
  },
  {
    "question": "Can you provide a list of unique template type codes along with the number of templates for each type?",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1297
  },
  {
    "question": "What is the template type code with the highest number of templates?",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1298
  },
  {
    "question": "Find the type code of the template type with the highest number of templates.",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1299
  },
  {
    "question": "Display all template type codes that have fewer than three templates.",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "小于",
          "condition": "3"
        }
      ]
    },
    "table_name": "Templates",
    "id": 1300
  },
  {
    "question": "Which template type codes have less than 3 templates associated with them?",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "小于",
          "condition": "3"
        }
      ]
    },
    "table_name": "Templates",
    "id": 1301
  },
  {
    "question": "What is the smallest version number along with its template type code?",
    "SQL": "SELECT min(Version_Number), template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1302
  },
  {
    "question": "Find the minimum version number and its associated template type code.",
    "SQL": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "min"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 1303
  },
  {
    "question": "Display all the template type codes along with their descriptions.",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Ref_template_types",
    "id": 1304
  },
  {
    "question": "Can you provide me with the codes and descriptions for all template types?",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Ref_template_types",
    "id": 1305
  },
  {
    "question": "Can you provide the description of the template type with the code 'AD'?",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "AD"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1306
  },
  {
    "question": "Provide the description for the template type that has the code AD.",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "AD"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1307
  },
  {
    "question": "What is the template type code associated with the template type description 'Book'?",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "精确匹配",
          "condition": "Book"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1308
  },
  {
    "question": "Get the type code for the template type that is described as 'Book'.",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "精确匹配",
          "condition": "Book"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 1309
  },
  {
    "question": "What is the total number of paragraphs?",
    "SQL": "SELECT count(*) FROM Paragraphs",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 1310
  },
  {
    "question": "Calculate the total number of paragraphs.",
    "SQL": "SELECT count(*) FROM Paragraphs",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 1311
  },
  {
    "question": "Can you provide the details for the paragraph that contains the word 'Korea'? ",
    "SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "模糊匹配",
          "condition": "korea"
        }
      ]
    },
    "table_name": "paragraphs",
    "id": 1312
  },
  {
    "question": "列出所有文档ID及其段落数量，并按文档ID排序。",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 1313
  },
  {
    "question": "提供每个不同文档ID及其对应的段落数量，并按文档ID排序。",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 1314
  },
  {
    "question": "Show document IDs that have a minimum of two paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 1315
  },
  {
    "question": "Which document IDs have at least two paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 1316
  },
  {
    "question": "Which document ID has the fewest paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 1317
  },
  {
    "question": "Find the ID of the document that has the least number of paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 1318
  },
  {
    "question": "Which document IDs have between 1 and 2 paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "在区间",
          "condition": [
            1,
            2
          ]
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 1319
  },
  {
    "question": "Provide the IDs of documents containing one or two paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "在区间",
          "condition": [
            1,
            2
          ]
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 1320
  },
  {
    "question": "Find the document ID that contains paragraphs with both 'Brazil' and 'Ireland'.",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Brazil"
        },
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Ireland"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 1321
  },
  {
    "question": "Which document IDs include paragraphs containing both 'Brazil' and 'Ireland'?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Brazil"
        },
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Ireland"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 1322
  },
  {
    "question": "What is the total number of teachers?",
    "SQL": "SELECT count(*) FROM teacher",
    "db_id": "course_teach",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1323
  },
  {
    "question": "How many teachers are there in total?",
    "SQL": "SELECT count(*) FROM teacher",
    "db_id": "course_teach",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1324
  },
  {
    "question": "Display the names of teachers sorted by their age in ascending order.",
    "SQL": "SELECT Name FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1325
  },
  {
    "question": "List the names of the teachers in ascending order of their age.",
    "SQL": "SELECT Name FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1326
  },
  {
    "question": "Can you provide the age and hometown information for the teachers?",
    "SQL": "SELECT Age ,  Hometown FROM teacher",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1327
  },
  {
    "question": "Can you provide the age and hometown for each teacher?",
    "SQL": "SELECT Age ,  Hometown FROM teacher",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1328
  },
  {
    "question": "Show the names of teachers who are not from 'Little Lever Urban District'.",
    "SQL": "select name from teacher where hometown != \"little lever urban district\"",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hometown",
          "match_type": "不等于",
          "condition": "Little Lever Urban District"
        }
      ]
    },
    "table_name": "teacher",
    "id": 1329
  },
  {
    "question": "Which teachers do not come from Little Lever Urban District?",
    "SQL": "select name from teacher where hometown != \"little lever urban district\"",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hometown",
          "match_type": "不等于",
          "condition": "Little Lever Urban District"
        }
      ]
    },
    "table_name": "teacher",
    "id": 1330
  },
  {
    "question": "Display the names of teachers who are 32 or 33 years old?",
    "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "32"
        },
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "33"
        }
      ]
    },
    "table_name": "teacher",
    "id": 1331
  },
  {
    "question": "List the names of the teachers whose ages are 32 or 33.",
    "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "32"
        },
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "33"
        }
      ]
    },
    "table_name": "teacher",
    "id": 1332
  },
  {
    "question": "Where is the hometown of the youngest teacher?",
    "SQL": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "最小值",
          "condition": ""
        }
      ]
    },
    "table_name": "teacher",
    "id": 1333
  },
  {
    "question": "What is the hometown of the youngest teacher?",
    "SQL": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "最小值",
          "condition": ""
        }
      ]
    },
    "table_name": "teacher",
    "id": 1334
  },
  {
    "question": "List the distinct hometowns of teachers along with the count of teachers from each hometown.",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1335
  },
  {
    "question": "How many teachers are there in each hometown?",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1336
  },
  {
    "question": "Identify the hometown that the majority of teachers come from.",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1337
  },
  {
    "question": "Which hometown is the most common among teachers?",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 1338
  },
  {
    "question": "Display the hometowns that are common to a minimum of two teachers.",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "teacher",
    "id": 1339
  },
  {
    "question": "Which towns have at least two teachers originating from them?",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "teacher",
    "id": 1340
  },
  {
    "question": "What is the number of visitors under the age of 30?",
    "SQL": "SELECT count(*) FROM visitor WHERE age < 30",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        }
      ]
    },
    "table_name": "visitor",
    "id": 1341
  },
  {
    "question": "List the names of visitors with a membership level greater than 4, sorted by their level in descending order.",
    "SQL": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "table_name": "visitor",
    "id": 1342
  },
  {
    "question": "What is the mean age of visitors with a membership level of 4 or lower?",
    "SQL": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "小于等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "visitor",
    "id": 1343
  },
  {
    "question": "Retrieve the names and membership levels of visitors with a membership level greater than 4, ordered by their age in descending order.",
    "SQL": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "Level_of_membership"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "table_name": "visitor",
    "id": 1344
  },
  {
    "question": "Identify the museum's ID and name with the highest number of staff members?",
    "SQL": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "museum_id"
        },
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "museum",
    "id": 1345
  },
  {
    "question": "Calculate the average number of employees in museums that opened prior to 2009.",
    "SQL": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "小于",
          "condition": "2009"
        }
      ]
    },
    "table_name": "museum",
    "id": 1346
  },
  {
    "question": "What is the opening year and number of staff for the Plaza Museum?",
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "Open_Year"
        },
        {
          "column": "Num_of_Staff"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Plaza Museum"
        }
      ]
    },
    "table_name": "museum",
    "id": 1347
  },
  {
    "question": "列出那些员工数量多于2010年后开放的所有博物馆中最小员工数量的博物馆名称。",
    "SQL": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "NONE"
        },
        {
          "column": "num_of_staff",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2010"
        },
        {
          "column": "num_of_staff",
          "match_type": "大于",
          "condition": "(SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
        }
      ]
    },
    "table_name": "museum",
    "id": 1348
  },
  {
    "question": "What is the average and highest number of tickets purchased across all visits?",
    "SQL": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_ticket",
          "aggregate_function": "avg"
        },
        {
          "column": "num_of_ticket",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "visit",
    "id": 1349
  },
  {
    "question": "What is the total number of museums that opened either after 2013 or before 2008?",
    "SQL": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2013"
        },
        {
          "column": "open_year",
          "match_type": "小于",
          "condition": "2008"
        }
      ]
    },
    "table_name": "museum",
    "id": 1350
  },
  {
    "question": "Calculate the total number of players.",
    "SQL": "SELECT count(*) FROM players",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1351
  },
  {
    "question": "What is the total number of players?",
    "SQL": "SELECT count(*) FROM players",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1352
  },
  {
    "question": "Calculate the total number of matches.",
    "SQL": "SELECT count(*) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1353
  },
  {
    "question": "Calculate the total number of matches.",
    "SQL": "SELECT count(*) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1354
  },
  {
    "question": "Show the first name and birth date of all players who are from the USA.",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "players",
    "id": 1355
  },
  {
    "question": "Can you provide me with the first names and birth dates of players who are from the United States?",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "players",
    "id": 1356
  },
  {
    "question": "Calculate the average age of both the losers and winners across all matches.",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1357
  },
  {
    "question": "What is the average age of the losers and winners in the matches?",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1358
  },
  {
    "question": "Calculate the average ranking of winners across all matches.",
    "SQL": "SELECT avg(winner_rank) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1359
  },
  {
    "question": "What is the mean rank of winners across all matches?",
    "SQL": "SELECT avg(winner_rank) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1360
  },
  {
    "question": "Determine the best ranking among all the losing players in the matches.",
    "SQL": "SELECT min(loser_rank) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1361
  },
  {
    "question": "What is the lowest rank among all the losers in the matches?",
    "SQL": "SELECT min(loser_rank) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1362
  },
  {
    "question": "What is the total number of unique country codes among all players?",
    "SQL": "SELECT count(DISTINCT country_code) FROM players",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1363
  },
  {
    "question": "From how many different countries are the players?",
    "SQL": "SELECT count(DISTINCT country_code) FROM players",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1364
  },
  {
    "question": "Count the unique names of the losers in the matches.",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1365
  },
  {
    "question": "What is the total number of unique loser names in the matches table?",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1366
  },
  {
    "question": "Identify the tournament names which have over 10 matches.",
    "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "matches",
    "id": 1367
  },
  {
    "question": "Which tournaments have over 10 matches?",
    "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "matches",
    "id": 1368
  },
  {
    "question": "Show the names of all winners who participated in both 2013 and 2016.",
    "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "table_name": "matches",
    "id": 1369
  },
  {
    "question": "Which players were victorious in both 2013 and 2016?",
    "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "table_name": "matches",
    "id": 1370
  },
  {
    "question": "Count the total number of matches that took place in the years 2013 or 2016.",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "table_name": "matches",
    "id": 1371
  },
  {
    "question": "What is the total number of matches that took place in 2013 or 2016?",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "table_name": "matches",
    "id": 1372
  },
  {
    "question": "Identify the first name and country code of the player with the earliest birth date.",
    "SQL": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "players",
    "id": 1373
  },
  {
    "question": "What are the first name and country code of the oldest player?",
    "SQL": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "players",
    "id": 1374
  },
  {
    "question": "Display the full names of all players sorted by their birth dates.",
    "SQL": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "players",
    "id": 1375
  },
  {
    "question": "List the complete names of all players, ordered by their birth dates.",
    "SQL": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "players",
    "id": 1376
  },
  {
    "question": "Display the first and last names of all players who are left-handed, sorted by their birth dates.",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "table_name": "players",
    "id": 1377
  },
  {
    "question": "List the complete names of all players who are left-handed, sorted by their date of birth.",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "table_name": "players",
    "id": 1378
  },
  {
    "question": "Identify the year with the highest number of matches.",
    "SQL": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1379
  },
  {
    "question": "What is the year with the highest number of matches?",
    "SQL": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1380
  },
  {
    "question": "Identify the name and rank points of the competitor who has the highest number of wins.",
    "SQL": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank_points"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1381
  },
  {
    "question": "Who is the most successful player in terms of match wins, and what are their rank points?",
    "SQL": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1382
  },
  {
    "question": "Identify the winner with the highest rank points from the Australian Open tournament.",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "Australian Open"
        }
      ]
    },
    "table_name": "matches",
    "id": 1383
  },
  {
    "question": "Who is the winner with the highest rank points from the Australian Open tournament?",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "Australian Open"
        }
      ]
    },
    "table_name": "matches",
    "id": 1384
  },
  {
    "question": "找出比赛时间最长的比赛中获胜者和失败者的名字。",
    "SQL": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "matches",
    "id": 1385
  },
  {
    "question": "Who were the winner and loser in the match that lasted the longest?",
    "SQL": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [
        {
          "column": "minutes",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1386
  },
  {
    "question": "count the number of players in each country.",
    "SQL": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1387
  },
  {
    "question": "What is the number of players from each country?",
    "SQL": "SELECT count(*), country_code FROM players GROUP BY country_code",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1388
  },
  {
    "question": "Identify the country code with the highest number of players.",
    "SQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1389
  },
  {
    "question": "Which country has the highest number of players, and what is its code?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1390
  },
  {
    "question": "Identify the country codes where the number of players exceeds 50.",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "table_name": "players",
    "id": 1391
  },
  {
    "question": "Which country codes have over 50 players?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "table_name": "players",
    "id": 1392
  },
  {
    "question": "Calculate the total number of tours for every ranking date.",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "rankings",
    "id": 1393
  },
  {
    "question": "What is the total number of tours for each ranking date?",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "rankings",
    "id": 1394
  },
  {
    "question": "Calculate the total number of matches that occurred each year.",
    "SQL": "SELECT count(*), YEAR FROM matches GROUP BY YEAR",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1395
  },
  {
    "question": "What is the number of matches played per year?",
    "SQL": "SELECT count(*), YEAR FROM matches GROUP BY YEAR",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 1396
  },
  {
    "question": "Identify the names and ranks of the three youngest winners from all the matches.",
    "SQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "matches",
    "id": 1397
  },
  {
    "question": "Who are the three youngest winners and what are their ranks from all the matches?",
    "SQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "matches",
    "id": 1398
  },
  {
    "question": "How many unique winners, who were left-handed, played in the WTA Championships?",
    "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        },
        {
          "column": "winner_hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "table_name": "matches",
    "id": 1399
  },
  {
    "question": "Count the distinct left-handed winners in the WTA Championships.",
    "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_name",
          "aggregate_function": "COUNT DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        },
        {
          "column": "winner_hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "table_name": "matches",
    "id": 1400
  },
  {
    "question": "Count the players for every type of hand.",
    "SQL": "SELECT count(*), hand FROM players GROUP BY hand",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "hand"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1401
  },
  {
    "question": "What is the number of players for each type of hand?",
    "SQL": "SELECT count(*), hand FROM players GROUP BY hand",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "hand"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 1402
  },
  {
    "question": "What is the total number of ships that were captured?",
    "SQL": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "disposition_of_ship",
          "match_type": "精确匹配",
          "condition": "Captured"
        }
      ]
    },
    "table_name": "ship",
    "id": 1403
  },
  {
    "question": "What are the highest and lowest number of deaths recorded in each incident?",
    "SQL": "SELECT max(killed) ,  min(killed) FROM death",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "killed",
          "aggregate_function": "max"
        },
        {
          "column": "killed",
          "aggregate_function": "min"
        }
      ],
      "filter": []
    },
    "table_name": "death",
    "id": 1405
  },
  {
    "question": "What is the average number of people injured per incident?",
    "SQL": "SELECT avg(injured) FROM death",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "injured",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "death",
    "id": 1406
  },
  {
    "question": "Which battles and their outcomes involved a Bulgarian commander who was not Boril?",
    "SQL": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "db_id": "battle_death",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "RESULT"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "不等于",
          "condition": "Boril"
        }
      ]
    },
    "table_name": "battle",
    "id": 1407
  },
  {
    "question": "What are the unique battle names where Bulgarian commander Kaloyan faced Latin commander Baldwin I?",
    "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "db_id": "battle_death",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "精确匹配",
          "condition": "Kaloyan"
        },
        {
          "column": "latin_commander",
          "match_type": "精确匹配",
          "condition": "Baldwin I"
        }
      ]
    },
    "table_name": "battle",
    "id": 1408
  },
  {
    "question": "What is the number of unique outcomes in the battles?",
    "SQL": "SELECT count(DISTINCT RESULT) FROM battle",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "RESULT",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "battle",
    "id": 1409
  },
  {
    "question": "Which death event notes contain the substring 'East'?",
    "SQL": "SELECT note FROM death WHERE note LIKE '%East%'",
    "db_id": "battle_death",
    "config": {
      "dimension": [
        {
          "column": "note"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "note",
          "match_type": "模糊匹配",
          "condition": "East"
        }
      ]
    },
    "table_name": "death",
    "id": 1410
  },
  {
    "question": "Can you provide all the addresses with line 1 and line 2 included?",
    "SQL": "SELECT line_1 ,  line_2 FROM addresses",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "addresses",
    "id": 1411
  },
  {
    "question": "Can you provide me with the first and second lines of all addresses?",
    "SQL": "SELECT line_1 ,  line_2 FROM addresses",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "addresses",
    "id": 1412
  },
  {
    "question": "What is the total number of courses listed?",
    "SQL": "SELECT count(*) FROM Courses",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Courses",
    "id": 1413
  },
  {
    "question": "What is the total number of courses?",
    "SQL": "SELECT count(*) FROM Courses",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Courses",
    "id": 1414
  },
  {
    "question": "What is the description of the math course?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "精确匹配",
          "condition": "math"
        }
      ]
    },
    "table_name": "Courses",
    "id": 1415
  },
  {
    "question": "Can you provide the descriptions of all math courses?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "course_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "精确匹配",
          "condition": "math"
        }
      ]
    },
    "table_name": "Courses",
    "id": 1416
  },
  {
    "question": "What is the postal code for the address located in Port Chelsea?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Port Chelsea"
        }
      ]
    },
    "table_name": "Addresses",
    "id": 1417
  },
  {
    "question": "Can you provide me with the zip code of Port Chelsea?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Port Chelsea"
        }
      ]
    },
    "table_name": "Addresses",
    "id": 1418
  },
  {
    "question": "How many unique departments provide at least one degree program?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "COUNT_DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Degree_Programs",
    "id": 1419
  },
  {
    "question": "What is the number of unique departments that provide degree programs?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Degree_Programs",
    "id": 1420
  },
  {
    "question": "What is the number of unique degree names available?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Degree_Programs",
    "id": 1421
  },
  {
    "question": "What is the total number of unique degrees available?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Degree_Programs",
    "id": 1422
  },
  {
    "question": "Can you provide me with the names and descriptions of all the sections?",
    "SQL": "SELECT section_name ,  section_description FROM Sections",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 1423
  },
  {
    "question": "Can you provide the names and descriptions of all the sections?",
    "SQL": "SELECT section_name ,  section_description FROM Sections",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 1424
  },
  {
    "question": "Display the section names in reverse alphabetical order.",
    "SQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 1425
  },
  {
    "question": "List the names of the sections in descending alphabetical order.",
    "SQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 1426
  },
  {
    "question": "Can you provide the description for the department that includes 'computer' in its name?",
    "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "department_name",
          "match_type": "模糊匹配",
          "condition": "computer"
        }
      ]
    },
    "table_name": "Departments",
    "id": 1427
  },
  {
    "question": "Can you provide the department description for the department with 'computer' in its name?",
    "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "department_name",
          "match_type": "模糊匹配",
          "condition": "computer"
        }
      ]
    },
    "table_name": "Departments",
    "id": 1428
  },
  {
    "question": "Can you provide the mobile phone number for the person named Timmothy Ward?",
    "SQL": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cell_mobile_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Timmothy"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Ward"
        }
      ]
    },
    "table_name": "Students",
    "id": 1429
  },
  {
    "question": "Can you provide me with the mobile phone number for the student named Timmothy Ward?",
    "SQL": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "cell_mobile_number"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "timmothy"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "ward"
        }
      ]
    },
    "table_name": "students",
    "id": 1430
  },
  {
    "question": "What is the name of the first student who registered? Include their first, middle, and last names.",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_first_registered",
          "match_type": "absolute_time",
          "condition": [
            "1970-01-01",
            null
          ]
        }
      ]
    },
    "table_name": "Students",
    "id": 1431
  },
  {
    "question": "Who is the first student that registered, by their full name?",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Students",
    "id": 1432
  },
  {
    "question": "What is the name of the earliest graduate from the school? Provide the first name, middle name, and last name.",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_left",
          "match_type": "最早",
          "condition": "ASC LIMIT 1"
        }
      ]
    },
    "table_name": "Students",
    "id": 1433
  },
  {
    "question": "Who is the earliest school graduate, by their full name?",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Students",
    "id": 1434
  },
  {
    "question": "List the first names of students whose current address differs from their permanent address.",
    "SQL": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "current_address_id",
          "match_type": "不等于",
          "condition": "permanent_address_id"
        }
      ]
    },
    "table_name": "Students",
    "id": 1435
  },
  {
    "question": "Can you provide the first name of the student whose current address does not match their permanent address?",
    "SQL": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "current_address_id",
          "match_type": "不等于",
          "condition": "permanent_address_id"
        }
      ]
    },
    "table_name": "Students",
    "id": 1436
  },
  {
    "question": "What is the average date when the transcripts were printed?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 1437
  },
  {
    "question": "What is the mean date of the transcripts?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 1438
  },
  {
    "question": "What is the date of the earliest transcript release along with its details?",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 1439
  },
  {
    "question": "Can you provide the earliest date a transcript was released along with any additional information?",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 1440
  },
  {
    "question": "What is the total number of transcripts that have been released?",
    "SQL": "SELECT count(*) FROM Transcripts",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 1441
  },
  {
    "question": "What is the total number of transcripts listed?",
    "SQL": "SELECT count(*) FROM Transcripts",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 1442
  },
  {
    "question": "When was the most recent transcript released?",
    "SQL": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 1443
  },
  {
    "question": "What is the date of the most recent transcript release?",
    "SQL": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 1444
  },
  {
    "question": "What is the maximum number of times a course enrollment appears across different transcripts, and provide the course enrollment ID?",
    "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        }
      ],
      "measure": [
        {
          "column": "student_course_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Transcript_Contents",
    "id": 1445
  },
  {
    "question": "What is the highest frequency of a course appearing across various transcripts, and which course ID has this frequency?",
    "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Transcript_Contents",
    "id": 1446
  },
  {
    "question": "What is the number of unique current addresses where students reside?",
    "SQL": "SELECT count(DISTINCT current_address_id) FROM Students",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "current_address_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Students",
    "id": 1447
  },
  {
    "question": "Display all student information in reverse alphabetical order.",
    "SQL": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "other_student_details"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Students",
    "id": 1449
  },
  {
    "question": "Can you provide other details about students sorted in descending alphabetical order?",
    "SQL": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": []
    },
    "table_name": "Students",
    "id": 1450
  },
  {
    "question": "What is the description of section h?",
    "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "精确匹配",
          "condition": "h"
        }
      ]
    },
    "table_name": "Sections",
    "id": 1451
  },
  {
    "question": "Can you provide the description of the section with the name 'h'?",
    "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "精确匹配",
          "condition": "h"
        }
      ]
    },
    "table_name": "Sections",
    "id": 1452
  },
  {
    "question": "Provide the titles of all cartoons sorted alphabetically.",
    "SQL": "SELECT Title FROM Cartoon ORDER BY title",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 1453
  },
  {
    "question": "List the titles of the cartoons in alphabetical order.",
    "SQL": "SELECT Title FROM Cartoon ORDER BY title",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 1454
  },
  {
    "question": "Show me the titles of all cartoons directed by Ben Jones.",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 1455
  },
  {
    "question": "List all cartoon titles directed by Ben Jones.",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 1456
  },
  {
    "question": "What is the total number of cartoons authored by Joseph Kuhr?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "精确匹配",
          "condition": "Joseph Kuhr"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 1457
  },
  {
    "question": "How many cartoons has Joseph Kuhr written?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "精确匹配",
          "condition": "Joseph Kuhr"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 1458
  },
  {
    "question": "display the names of all cartoons along with their directors, sorted by their original airing date",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 1459
  },
  {
    "question": "Can you provide the names and directors of all cartoons, sorted by their original air date?",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 1460
  },
  {
    "question": "Show the titles of all cartoons that were directed by either 'Ben Jones' or 'Brandon Vietti'.",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Brandon Vietti"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 1461
  },
  {
    "question": "What are the titles of all cartoons that were directed by Ben Jones or Brandon Vietti?",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Brandon Vietti"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 1462
  },
  {
    "question": "What is the country with the highest number of TV channels, and how many TV channels does it have?",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 1463
  },
  {
    "question": "Which country has the highest number of TV channels, and how many are there?",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 1464
  },
  {
    "question": "Show the count of unique series names and contents from the TV Channel table.",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 1465
  },
  {
    "question": "What is the number of unique series and contents in the TV Channel table?",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 1466
  },
  {
    "question": "What content does the TV Channel with the series name 'Sky Radio' have?",
    "SQL": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "精确匹配",
          "condition": "Sky Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1467
  },
  {
    "question": "What does the series Sky Radio include in its content?",
    "SQL": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Content"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "精确匹配",
          "condition": "Sky Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1468
  },
  {
    "question": "What is the Package Option for the TV Channel with the series name 'Sky Radio'? ",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "精确匹配",
          "condition": "Sky Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1469
  },
  {
    "question": "What Package Options are available for TV Channels with the series name 'Sky Radio'?",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "精确匹配",
          "condition": "Sky Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1470
  },
  {
    "question": "What is the number of TV Channels that use English as their language?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1471
  },
  {
    "question": "What is the number of TV Channels that use English?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1472
  },
  {
    "question": "Identify the language with the fewest TV channels, and list the language along with the number of TV channels.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 1473
  },
  {
    "question": "Which language is used by the fewest TV channels, and how many channels use this language?",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 1474
  },
  {
    "question": "列出每种语言及其使用的电视频道数量。",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 1475
  },
  {
    "question": "List the number of TV Channels for each language.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 1476
  },
  {
    "question": "Display the episodes of all TV series, ordered by their ratings.",
    "SQL": "SELECT Episode FROM TV_series ORDER BY rating",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 1477
  },
  {
    "question": "List all episodes in descending order of their ratings.",
    "SQL": "SELECT Episode FROM TV_series ORDER BY rating",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 1478
  },
  {
    "question": "Show the top 3 TV series with the highest ratings, including their episodes and ratings.",
    "SQL": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 1479
  },
  {
    "question": "Can you list the top 3 highest-rated episodes from the TV series table along with their ratings?",
    "SQL": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 1480
  },
  {
    "question": "What are the highest and lowest shares for TV series?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 1481
  },
  {
    "question": "What are the highest and lowest shares recorded for the TV series?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 1482
  },
  {
    "question": "When was the air date for the episode titled 'A Love of a Lifetime' in the TV series?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "精确匹配",
          "condition": "A Love of a Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1483
  },
  {
    "question": "What is the air date for the episode titled 'A Love of a Lifetime'?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "精确匹配",
          "condition": "A Love of a Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1484
  },
  {
    "question": "What is the weekly ranking of the TV series episode titled 'A Love of a Lifetime'?",
    "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Weekly_Rank",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Episode",
          "match_type": "精确匹配",
          "condition": "A Love of a Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1485
  },
  {
    "question": "What is the weekly ranking for the episode 'A Love of a Lifetime'? ",
    "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Weekly_Rank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "精确匹配",
          "condition": "A Love of a Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 1486
  },
  {
    "question": "Calculate the total number of cartoons for each director from the list.",
    "SQL": "SELECT count(*), Directed_by FROM cartoon GROUP BY Directed_by",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "cartoon",
    "id": 1487
  },
  {
    "question": "What is the number of cartoons created by each director?",
    "SQL": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "cartoon",
    "id": 1488
  },
  {
    "question": "Identify the production code and channel for the cartoon that was most recently broadcasted.",
    "SQL": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "cartoon",
    "id": 1489
  },
  {
    "question": "What are the production code and channel of the latest cartoon?",
    "SQL": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "original_air_date",
          "match_type": "relative_time",
          "condition": "latest_data_date"
        }
      ]
    },
    "table_name": "cartoon",
    "id": 1490
  },
  {
    "question": "Identify the package option and series name for TV channels that offer high definition TV.",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hight_definition_TV",
          "match_type": "精确匹配",
          "condition": "yes"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1491
  },
  {
    "question": "For the TV channels that support high definition, what are the available package options and series names?",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hight_definition_TV",
          "match_type": "精确匹配",
          "condition": "yes"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 1492
  },
  {
    "question": "获取不使用英语的电视频道的像素宽高比和国家。",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 1493
  },
  {
    "question": "For all TV channels that are not in English, what is their pixel aspect ratio and country of origin?",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 1494
  },
  {
    "question": "获取来自拥有超过两个电视台的国家的电视台ID。",
    "SQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 1495
  },
  {
    "question": "What is the total number of poker players?",
    "SQL": "SELECT count(*) FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1497
  },
  {
    "question": "How many poker players are there?",
    "SQL": "SELECT count(*) FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1498
  },
  {
    "question": "Show the earnings of poker players sorted from highest to lowest.",
    "SQL": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1499
  },
  {
    "question": "List the earnings of poker players in descending order.",
    "SQL": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1500
  },
  {
    "question": "Show the final tables achieved and the top finishes for poker players.",
    "SQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Final_Table_Made"
        }
      ],
      "measure": [
        {
          "column": "Best_Finish",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1501
  },
  {
    "question": "Can you provide the number of final tables made and the best finishes for each poker player?",
    "SQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Final_Table_Made"
        },
        {
          "column": "Best_Finish"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1502
  },
  {
    "question": "What are the mean earnings for poker players?",
    "SQL": "SELECT avg(Earnings) FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1503
  },
  {
    "question": "Calculate the average earnings for all poker players.",
    "SQL": "SELECT avg(Earnings) FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1504
  },
  {
    "question": "What is the money rank of the poker player who has earned the most?",
    "SQL": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Money_Rank"
        }
      ],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1505
  },
  {
    "question": "What is the money rank of the player who has the highest earnings?",
    "SQL": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Money_Rank"
        }
      ],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 1506
  },
  {
    "question": "What is the highest number of final tables achieved by poker players who have earned less than 200,000?",
    "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Final_Table_Made",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "小于",
          "condition": "200000"
        }
      ]
    },
    "table_name": "poker_player",
    "id": 1507
  },
  {
    "question": "Find the highest number of final tables made by poker players with earnings less than 200000.",
    "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Final_Table_Made",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "小于",
          "condition": "200000"
        }
      ]
    },
    "table_name": "poker_player",
    "id": 1508
  },
  {
    "question": "Can you provide a list of nationalities along with the number of individuals from each nationality?",
    "SQL": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 1509
  },
  {
    "question": "What is the count of individuals for each nationality?",
    "SQL": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 1510
  },
  {
    "question": "Which nationality is the most frequent among people?",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 1511
  },
  {
    "question": "What is the most frequent nationality among all individuals?",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 1512
  },
  {
    "question": "Which nationalities are represented by at least two individuals?",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "people",
    "id": 1513
  },
  {
    "question": "List the nationalities that have two or more individuals.",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "people",
    "id": 1514
  },
  {
    "question": "Display the names and birth dates of individuals sorted in ascending order by name.",
    "SQL": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Birth_Date"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "people",
    "id": 1515
  },
  {
    "question": "List the names and birth dates of individuals, sorted alphabetically by name.",
    "SQL": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Birth_Date"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "people",
    "id": 1516
  },
  {
    "question": "List the names of individuals who are not from Russia.",
    "SQL": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "Russia"
        }
      ]
    },
    "table_name": "people",
    "id": 1517
  },
  {
    "question": "Who are the individuals that do not have Russian nationality?",
    "SQL": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "Russia"
        }
      ]
    },
    "table_name": "people",
    "id": 1518
  },
  {
    "question": "What is the number of unique nationalities?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM people",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 1519
  },
  {
    "question": "Calculate the total number of unique nationalities.",
    "SQL": "SELECT count(DISTINCT Nationality) FROM people",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 1520
  },
  {
    "question": "What is the total number of states?",
    "SQL": "SELECT count(*) FROM area_code_state",
    "db_id": "voter_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "area_code_state",
    "id": 1521
  },
  {
    "question": "Display the contestant numbers and names in descending order of contestant names.",
    "SQL": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "db_id": "voter_1",
    "config": {
      "dimension": [
        {
          "column": "contestant_number"
        },
        {
          "column": "contestant_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "contestants",
    "id": 1522
  },
  {
    "question": "Display the vote IDs, phone numbers, and states for all records in the votes table.",
    "SQL": "SELECT vote_id ,  phone_number ,  state FROM votes",
    "db_id": "voter_1",
    "config": {
      "dimension": [
        {
          "column": "vote_id"
        },
        {
          "column": "phone_number"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "votes",
    "id": 1523
  },
  {
    "question": "What is the range of values for area codes, including both the highest and lowest?",
    "SQL": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "db_id": "voter_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "area_code",
          "aggregate_function": "max"
        },
        {
          "column": "area_code",
          "aggregate_function": "min"
        }
      ],
      "filter": []
    },
    "table_name": "area_code_state",
    "id": 1524
  },
  {
    "question": "What is the most recent creation date for votes from the state 'CA'? ",
    "SQL": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "db_id": "voter_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "created",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "CA"
        }
      ]
    },
    "table_name": "votes",
    "id": 1525
  },
  {
    "question": "List the names of all contestants except for 'Jessie Alloway'.",
    "SQL": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "db_id": "voter_1",
    "config": {
      "dimension": [
        {
          "column": "contestant_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "contestant_name",
          "match_type": "不等于",
          "condition": "Jessie Alloway"
        }
      ]
    },
    "table_name": "contestants",
    "id": 1526
  },
  {
    "question": "What are the unique states and creation times for all votes?",
    "SQL": "SELECT DISTINCT state ,  created FROM votes",
    "db_id": "voter_1",
    "config": {
      "dimension": [
        {
          "column": "state"
        },
        {
          "column": "created"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "votes",
    "id": 1527
  },
  {
    "question": "How many votes have been cast from the states 'NY' or 'CA'?",
    "SQL": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
    "db_id": "voter_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "等于",
          "condition": "NY"
        },
        {
          "column": "state",
          "match_type": "等于",
          "condition": "CA"
        }
      ]
    },
    "table_name": "votes",
    "id": 1528
  },
  {
    "question": "List the names of all countries that gained independence after 1950.",
    "SQL": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "IndepYear",
          "match_type": "大于",
          "condition": "1950"
        }
      ]
    },
    "table_name": "country",
    "id": 1529
  },
  {
    "question": "List the names of countries established after 1950.",
    "SQL": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "IndepYear",
          "match_type": "大于",
          "condition": "1950"
        }
      ]
    },
    "table_name": "country",
    "id": 1530
  },
  {
    "question": "What is the number of countries that are governed as a republic?",
    "SQL": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Republic"
        }
      ]
    },
    "table_name": "country",
    "id": 1531
  },
  {
    "question": "How many countries have a government form of republic?",
    "SQL": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Republic"
        }
      ]
    },
    "table_name": "country",
    "id": 1532
  },
  {
    "question": "What is the combined surface area of all countries in the Caribbean region?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Caribbean"
        }
      ]
    },
    "table_name": "country",
    "id": 1533
  },
  {
    "question": "What is the total surface area of the countries in the Caribbean?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Caribbean"
        }
      ]
    },
    "table_name": "country",
    "id": 1534
  },
  {
    "question": "In which continent is Anguilla located?",
    "SQL": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Anguilla"
        }
      ]
    },
    "table_name": "country",
    "id": 1535
  },
  {
    "question": "Which continent does Anguilla belong to?",
    "SQL": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Anguilla"
        }
      ]
    },
    "table_name": "country",
    "id": 1536
  },
  {
    "question": "What is the population and life expectancy of Brazil?",
    "SQL": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Brazil"
        }
      ]
    },
    "table_name": "country",
    "id": 1537
  },
  {
    "question": "What is the population and life expectancy of Brazil?",
    "SQL": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Brazil"
        }
      ]
    },
    "table_name": "country",
    "id": 1538
  },
  {
    "question": "Can you provide the population and region of Angola?",
    "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Region"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Angola"
        }
      ]
    },
    "table_name": "country",
    "id": 1539
  },
  {
    "question": "Which region is Angola located in, and what is the population of Angola?",
    "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Region"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Angola"
        }
      ]
    },
    "table_name": "country",
    "id": 1540
  },
  {
    "question": "What is the mean life expectancy for countries located in Central Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Central Africa"
        }
      ]
    },
    "table_name": "country",
    "id": 1541
  },
  {
    "question": "What is the average life expectancy of people in Central Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Central Africa"
        }
      ]
    },
    "table_name": "country",
    "id": 1542
  },
  {
    "question": "Which country in Asia has the lowest life expectancy?",
    "SQL": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 1543
  },
  {
    "question": "What is the name of the Asian country with the lowest life expectancy?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 1544
  },
  {
    "question": "What are the total population and highest GNP in Asia?",
    "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "GNP",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 1545
  },
  {
    "question": "What is the total population of Asia and what is the highest GNP in the region?",
    "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "GNP",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 1546
  },
  {
    "question": "What is the mean life expectancy for republics in Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Republic"
        }
      ]
    },
    "table_name": "country",
    "id": 1547
  },
  {
    "question": "What is the average life expectancy for republics in Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Republic"
        }
      ]
    },
    "table_name": "country",
    "id": 1548
  },
  {
    "question": "What is the combined surface area of Asia and Europe?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        }
      ]
    },
    "table_name": "country",
    "id": 1549
  },
  {
    "question": "Calculate the total surface area of countries located in Asia or Europe.",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        }
      ]
    },
    "table_name": "country",
    "id": 1550
  },
  {
    "question": "What is the total population of the Gelderland district?",
    "SQL": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "District",
          "match_type": "精确匹配",
          "condition": "Gelderland"
        }
      ]
    },
    "table_name": "city",
    "id": 1551
  },
  {
    "question": "What are the average GNP and total population of all countries that are US territories?",
    "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GNP",
          "aggregate_function": "AVG"
        },
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "US Territory"
        }
      ]
    },
    "table_name": "country",
    "id": 1553
  },
  {
    "question": "Provide the average GNP and total population of countries that are classified as US territories.",
    "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GNP",
          "aggregate_function": "AVG"
        },
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "US Territory"
        }
      ]
    },
    "table_name": "country",
    "id": 1554
  },
  {
    "question": "What is the number of distinct languages spoken globally?",
    "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LANGUAGE",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 1555
  },
  {
    "question": "How many different languages are used globally?",
    "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LANGUAGE",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 1556
  },
  {
    "question": "What is the number of different government forms found in African countries?",
    "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "GovernmentForm",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "table_name": "country",
    "id": 1557
  },
  {
    "question": "What is the number of unique government types found in African countries?",
    "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GovernmentForm",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "table_name": "country",
    "id": 1558
  },
  {
    "question": "What is the name, population, and life expectancy of the largest Asian country by area?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 1559
  },
  {
    "question": "What is the name, population, and life expectancy of the largest country in Asia by land area?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 1560
  },
  {
    "question": "Which African countries have a smaller population than the least populous country in Asia?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "population",
          "match_type": "小于",
          "condition": "(SELECT max(population) FROM country WHERE Continent = 'Asia')"
        }
      ]
    },
    "table_name": "country",
    "id": 1563
  },
  {
    "question": "What are the names of African countries with a population less than the smallest population of any country in Asia?",
    "SQL": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "population",
          "match_type": "小于",
          "condition": "(SELECT min(population) FROM country WHERE Continent = \"Asia\")"
        }
      ]
    },
    "table_name": "country",
    "id": 1564
  },
  {
    "question": "What are the names of Asian countries with a population greater than the largest population of any country in Africa?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "population",
          "match_type": "大于",
          "condition": "(SELECT max(population) FROM country WHERE Continent = 'Africa')"
        }
      ]
    },
    "table_name": "country",
    "id": 1565
  },
  {
    "question": "Which country codes belong to countries where English is not spoken?",
    "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1567
  },
  {
    "question": "Provide the country codes for countries where English is not spoken.",
    "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1568
  },
  {
    "question": "Which country codes belong to countries where languages other than English are spoken?",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1569
  },
  {
    "question": "Provide the country codes of countries where languages other than English are spoken.",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1570
  },
  {
    "question": "Can you provide the name, year of independence, and surface area for the country that has the smallest population?",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "IndepYear"
        },
        {
          "column": "SurfaceArea"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "country",
    "id": 1571
  },
  {
    "question": "Provide the name, year of independence, and surface area for the country with the smallest population.",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "SurfaceArea"
        },
        {
          "column": "IndepYear"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 1572
  },
  {
    "question": "Which country has the largest area, and what is its population, name, and head of state?",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 1573
  },
  {
    "question": "Provide the name, population, and head of state for the country with the largest area.",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "population"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "country",
    "id": 1574
  },
  {
    "question": "统计各区中人口数量超过城市平均人口的城市数目？",
    "SQL": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "(SELECT avg(Population) FROM city)"
        }
      ]
    },
    "table_name": "city",
    "id": 1575
  },
  {
    "question": "In each district, how many cities have a population greater than the average population of all cities?",
    "SQL": "SELECT count(*),  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "(SELECT avg(Population) FROM city)"
        }
      ]
    },
    "table_name": "city",
    "id": 1576
  },
  {
    "question": "List the government form and the total population for each type of government where the average life expectancy exceeds 72 years.",
    "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于",
          "condition": "72"
        }
      ]
    },
    "table_name": "country",
    "id": 1577
  },
  {
    "question": "Which government forms have an average life expectancy over 72, and what is the total population for each of these government forms?",
    "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于",
          "condition": "72"
        }
      ]
    },
    "table_name": "country",
    "id": 1578
  },
  {
    "question": "For each continent, calculate the total population and average life expectancy, but only include those continents where the average life expectancy is less than 72.",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "AVG",
          "condition": "< 72"
        }
      ]
    },
    "table_name": "country",
    "id": 1579
  },
  {
    "question": "List the continents along with their total population and average life expectancy, but only for those continents where the average life expectancy is below 72.",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "AVG",
          "condition": "< 72"
        }
      ]
    },
    "table_name": "country",
    "id": 1580
  },
  {
    "question": "List the names and surface areas of the five countries with the largest land area.",
    "SQL": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 1581
  },
  {
    "question": "Provide the names and surface areas of the top 5 largest countries.",
    "SQL": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 1582
  },
  {
    "question": "Which countries have the highest population, listing the top 3?",
    "SQL": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 1583
  },
  {
    "question": "List the names of the top 3 most populous countries.",
    "SQL": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "country",
    "id": 1584
  },
  {
    "question": "Can you provide the names of the three countries with the smallest populations?",
    "SQL": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 1585
  },
  {
    "question": "Provide the names of the three countries that have the smallest population.",
    "SQL": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 1586
  },
  {
    "question": "What is the number of countries located in Asia?",
    "SQL": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 1587
  },
  {
    "question": "How many countries are there in Asia?",
    "SQL": "SELECT count(*) FROM country WHERE continent = 'Asia'",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 1588
  },
  {
    "question": "Which countries are located in Europe and have a population of 80,000?",
    "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "等于",
          "condition": "80000"
        }
      ]
    },
    "table_name": "country",
    "id": 1589
  },
  {
    "question": "List the names of countries located in Europe with a population of 80,000.",
    "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "等于",
          "condition": "80000"
        }
      ]
    },
    "table_name": "country",
    "id": 1590
  },
  {
    "question": "What are the total population and average surface area of countries in North America with a surface area greater than 3000?",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "north america"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "table_name": "country",
    "id": 1591
  },
  {
    "question": "Calculate the total population and the average surface area for countries in North America with a surface area exceeding 3000.",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "north america"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "table_name": "country",
    "id": 1592
  },
  {
    "question": "Which cities have a population ranging from 160,000 to 900,000?",
    "SQL": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "在区间",
          "condition": [
            160000,
            900000
          ]
        }
      ]
    },
    "table_name": "city",
    "id": 1593
  },
  {
    "question": "List the names of cities with a population ranging from 160,000 to 900,000.",
    "SQL": "select name from city where population between 160000 and 900000",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "population",
          "match_type": "在区间",
          "condition": [
            160000,
            900000
          ]
        }
      ]
    },
    "table_name": "city",
    "id": 1594
  },
  {
    "question": "What is the language that is spoken in the most countries?",
    "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 1595
  },
  {
    "question": "What is the language spoken in the highest number of countries?",
    "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 1596
  },
  {
    "question": "Which language is spoken by the highest percentage of the population in each country?",
    "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 1597
  },
  {
    "question": "Can you provide the country codes for various countries along with the languages that have the highest percentage of speakers in each?",
    "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 1598
  },
  {
    "question": "How many countries have Spanish as the language with the highest percentage of speakers?",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        },
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1599
  },
  {
    "question": "How many countries have Spanish as the predominant language?",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Percentage",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1600
  },
  {
    "question": "Which country codes have the highest percentage of people speaking Spanish?",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1601
  },
  {
    "question": "Provide the country codes where Spanish is the most widely spoken language.",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 1602
  },
  {
    "question": "What is the total number of conductors?",
    "SQL": "SELECT count(*) FROM conductor",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 1603
  },
  {
    "question": "Calculate the total number of conductors.",
    "SQL": "SELECT count(*) FROM conductor",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 1604
  },
  {
    "question": "Display the names of conductors sorted by their age in ascending order.",
    "SQL": "SELECT Name FROM conductor ORDER BY Age ASC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "conductor",
    "id": 1605
  },
  {
    "question": "Which conductors do not have USA as their nationality?",
    "SQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "USA"
        }
      ]
    },
    "table_name": "conductor",
    "id": 1607
  },
  {
    "question": "List the names of conductors who are not from the USA.",
    "SQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "USA"
        }
      ]
    },
    "table_name": "conductor",
    "id": 1608
  },
  {
    "question": "List the record companies of orchestras sorted by their founding years in descending order.",
    "SQL": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 1609
  },
  {
    "question": "List the record companies of orchestras, ordered from the most recently founded to the oldest.",
    "SQL": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 1610
  },
  {
    "question": "What is the mean audience size for the performances?",
    "SQL": "SELECT avg(Attendance) FROM SHOW",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "SHOW",
    "id": 1611
  },
  {
    "question": "Calculate the average attendance for all shows.",
    "SQL": "SELECT avg(Attendance) FROM SHOW",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "SHOW",
    "id": 1612
  },
  {
    "question": "Find the highest and lowest share percentages for performances that are not categorized as 'Live final'.",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "TYPE",
          "match_type": "不等于",
          "condition": "Live final"
        }
      ]
    },
    "table_name": "performance",
    "id": 1613
  },
  {
    "question": "Find the highest and lowest shares for performances excluding those with the type 'Live final'.",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "TYPE",
          "match_type": "不等于",
          "condition": "Live final"
        }
      ]
    },
    "table_name": "performance",
    "id": 1614
  },
  {
    "question": "What is the number of unique nationalities among conductors?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 1615
  },
  {
    "question": "How many unique nationalities are there among conductors?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 1616
  },
  {
    "question": "Display the names of conductors sorted by their years of work in descending order.",
    "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 1617
  },
  {
    "question": "List the names of conductors, ordered from the most to the least experienced in terms of years worked.",
    "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 1618
  },
  {
    "question": "Identify the conductor who has worked for the longest period and provide their name.",
    "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 1619
  },
  {
    "question": "Who is the conductor with the most years of experience?",
    "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 1620
  },
  {
    "question": "Display the various record companies along with the number of orchestras they have.",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 1621
  },
  {
    "question": "What is the number of orchestras managed by each record company?",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 1622
  },
  {
    "question": "Display the major record formats of orchestras sorted by their frequency in ascending order.",
    "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 1623
  },
  {
    "question": "List the main recording formats used by orchestras, ordered by how often they appear.",
    "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 1624
  },
  {
    "question": "Identify the record company that is associated with the highest number of orchestras.",
    "SQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 1625
  },
  {
    "question": "Which record company is utilized by the highest number of orchestras?",
    "SQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 1626
  },
  {
    "question": "List the record companies that are associated with orchestras founded both before 2003 and after 2003.",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2003"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2003"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 1627
  },
  {
    "question": "Which record companies are associated with orchestras established both before and after the year 2003?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  > 2003",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2003"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2003"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 1628
  },
  {
    "question": "Count the orchestras that have a major record format of either 'CD' or 'DVD'.",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "DVD"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 1629
  },
  {
    "question": "How many orchestras use CD or DVD as their primary recording format?",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "DVD"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 1630
  },
  {
    "question": "What is the total number of high school students?",
    "SQL": "SELECT count(*) FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1631
  },
  {
    "question": "Calculate the total number of high school students.",
    "SQL": "SELECT count(*) FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1632
  },
  {
    "question": "Display the names and grades of all high school students.",
    "SQL": "SELECT name ,  grade FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1633
  },
  {
    "question": "List the names and grades of all high school students.",
    "SQL": "SELECT name ,  grade FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1634
  },
  {
    "question": "Display all the grades of the high school students.",
    "SQL": "SELECT grade FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1635
  },
  {
    "question": "What grade is each high school student in?",
    "SQL": "SELECT grade FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1636
  },
  {
    "question": "In which grade is Kyle?",
    "SQL": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Kyle"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1637
  },
  {
    "question": "What is the grade of the high school student named Kyle?",
    "SQL": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Kyle"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1638
  },
  {
    "question": "List the names of all 10th-grade high school students.",
    "SQL": "SELECT name FROM Highschooler WHERE grade = 10",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1639
  },
  {
    "question": "Can you provide the names of all 10th-grade high school students?",
    "SQL": "SELECT name FROM Highschooler WHERE grade  =  10",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1640
  },
  {
    "question": "Display the ID for the high school student named Kyle.",
    "SQL": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Kyle"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1641
  },
  {
    "question": "What is the ID of the highschooler named Kyle?",
    "SQL": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Kyle"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1642
  },
  {
    "question": "What is the total number of students in grades 9 and 10?",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        },
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1643
  },
  {
    "question": "How many students are there in 9th and 10th grades?",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        },
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1644
  },
  {
    "question": "Display the count of high school students per grade.",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1645
  },
  {
    "question": "What is the number of high school students in each grade?",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1646
  },
  {
    "question": "What is the grade with the highest number of high school students?",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1647
  },
  {
    "question": "Find the grade with the highest number of high school students.",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 1648
  },
  {
    "question": "List all grades with a minimum of 4 students.",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1649
  },
  {
    "question": "What are the grades that have at least 4 high school students?",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 1650
  },
  {
    "question": "列出每个学生的ID及其对应的朋友数量。",
    "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Friend",
    "id": 1651
  },
  {
    "question": "What is the number of friends for each student?",
    "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Friend",
    "id": 1652
  },
  {
    "question": "Calculate the total number of likes per student ID.",
    "SQL": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Likes",
    "id": 1653
  },
  {
    "question": "What is the number of likes for each student ID?",
    "SQL": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Likes",
    "id": 1654
  },
  {
    "question": "Show the email addresses of the professionals residing in Hawaii or Wisconsin.",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Hawaii"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Wisconsin"
        }
      ]
    },
    "table_name": "Professionals",
    "id": 1655
  },
  {
    "question": "Can you provide the email addresses of the professionals who reside in Hawaii or Wisconsin?",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Hawaii"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Wisconsin"
        }
      ]
    },
    "table_name": "Professionals",
    "id": 1656
  },
  {
    "question": "What are the arrival and departure dates for all the dogs?",
    "SQL": "SELECT date_arrived ,  date_departed FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 1657
  },
  {
    "question": "Show the arrival and departure dates for all dogs.",
    "SQL": "SELECT date_arrived ,  date_departed FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 1658
  },
  {
    "question": "What is the number of unique dogs that received any treatments?",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 1659
  },
  {
    "question": "How many unique dogs received treatment?",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 1660
  },
  {
    "question": "How many unique professionals have provided treatments to dogs?",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "COUNT DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 1661
  },
  {
    "question": "Determine how many professionals have provided treatments to dogs.",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 1662
  },
  {
    "question": "List the role, street, city, and state of professionals who live in a city that includes 'West' in its name.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "West"
        }
      ]
    },
    "table_name": "professionals",
    "id": 1663
  },
  {
    "question": "Identify the role, street address, city, and state of the professionals residing in cities that include 'West' as part of their name.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "%West%"
        }
      ]
    },
    "table_name": "professionals",
    "id": 1664
  },
  {
    "question": "List the first name, last name, and email of owners who live in a state with 'North' in its name.",
    "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "模糊匹配",
          "condition": "North"
        }
      ]
    },
    "table_name": "Owners",
    "id": 1665
  },
  {
    "question": "Provide the first name, last name, and email address of owners who reside in a state with 'North' in its name.",
    "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "模糊匹配",
          "condition": "North"
        }
      ]
    },
    "table_name": "Owners",
    "id": 1666
  },
  {
    "question": "What is the number of dogs whose age is less than the average age?",
    "SQL": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "( SELECT avg(age) FROM Dogs )"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1667
  },
  {
    "question": "Calculate the total number of dogs that are younger than the average age of all dogs.",
    "SQL": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "( SELECT avg(age) FROM Dogs )"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1668
  },
  {
    "question": "What is the cost of the latest treatment?",
    "SQL": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 1669
  },
  {
    "question": "What is the cost of the latest treatment that was performed?",
    "SQL": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 1670
  },
  {
    "question": "Show the names, ages, and weights of the dogs that have been abandoned (where 1 indicates yes).",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1671
  },
  {
    "question": "Can you provide me with the names, ages, and weights of the dogs that have been abandoned? In the database, 1 indicates yes and 0 indicates no.",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 1672
  },
  {
    "question": "What is the mean age of all the dogs?",
    "SQL": "SELECT avg(age) FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 1673
  },
  {
    "question": "Calculate the mean age of all the dogs.",
    "SQL": "SELECT avg(age) FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 1674
  },
  {
    "question": "What is the maximum age among the dogs?",
    "SQL": "SELECT max(age) FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 1675
  },
  {
    "question": "What is the age of the oldest dog?",
    "SQL": "SELECT max(age) FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 1676
  },
  {
    "question": "What is the cost of each charge type? Please list the charge type along with the amount.",
    "SQL": "SELECT charge_type ,  charge_amount FROM Charges",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "Charges",
    "id": 1677
  },
  {
    "question": "Display every charge type along with its corresponding amount.",
    "SQL": "SELECT charge_type ,  charge_amount FROM Charges",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "Charges",
    "id": 1678
  },
  {
    "question": "What is the cost of the most expensive charge type?",
    "SQL": "SELECT max(charge_amount) FROM Charges",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Charges",
    "id": 1679
  },
  {
    "question": "What is the highest charge amount among all charge types?",
    "SQL": "SELECT max(charge_amount) FROM Charges",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Charges",
    "id": 1680
  },
  {
    "question": "Provide the email, mobile number, and home phone for all professionals.",
    "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "professionals",
    "id": 1681
  },
  {
    "question": "Can you provide the email address, cell number, and home phone for each professional?",
    "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "professionals",
    "id": 1682
  },
  {
    "question": "List all unique combinations of breed type and size type.",
    "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "dogs",
    "id": 1683
  },
  {
    "question": "Identify unique combinations of breed and size types for dogs.",
    "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "dogs",
    "id": 1684
  },
  {
    "question": "What is the total number of singers?",
    "SQL": "SELECT count(*) FROM singer",
    "db_id": "singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1685
  },
  {
    "question": "How many singers are there?",
    "SQL": "SELECT count(*) FROM singer",
    "db_id": "singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1686
  },
  {
    "question": "Display the names of singers sorted by their net worth in ascending order.",
    "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 1687
  },
  {
    "question": "List the names of singers in ascending order of their net worth.",
    "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 1688
  },
  {
    "question": "Can you provide the birth years and citizenships of the singers?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 1689
  },
  {
    "question": "Can you provide the birth years and nationalities of the singers?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 1690
  },
  {
    "question": "Show the names of singers who are not citizens of France.",
    "SQL": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "France"
        }
      ]
    },
    "table_name": "singer",
    "id": 1691
  },
  {
    "question": "Which singers are not citizens of France?",
    "SQL": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "France"
        }
      ]
    },
    "table_name": "singer",
    "id": 1692
  },
  {
    "question": "List the names of singers born in 1948 or 1949.",
    "SQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1948"
        },
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1949"
        }
      ]
    },
    "table_name": "singer",
    "id": 1693
  },
  {
    "question": "List the names of singers born in 1948 or 1949.",
    "SQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1948"
        },
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1949"
        }
      ]
    },
    "table_name": "singer",
    "id": 1694
  },
  {
    "question": "Who is the singer with the highest net worth?",
    "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1695
  },
  {
    "question": "Who is the wealthiest singer?",
    "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1696
  },
  {
    "question": "Display the various nationalities of singers along with the count of singers for each nationality.",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1697
  },
  {
    "question": "How many singers are there for each country based on their citizenship?",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1698
  },
  {
    "question": "What is the most frequent citizenship among singers?",
    "SQL": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1699
  },
  {
    "question": "Which citizenship is the most frequent among singers?",
    "SQL": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1700
  },
  {
    "question": "Display the various citizenships along with the highest net worth of singers for each citizenship.",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1701
  },
  {
    "question": "What is the highest net worth for each citizenship?",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1702
  },
  {
    "question": "Display the citizenship that is common among singers born before 1945 and after 1955.",
    "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1955",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1945"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1955"
        }
      ]
    },
    "table_name": "singer",
    "id": 1703
  },
  {
    "question": "Which citizenships are common among singers born before 1945 and after 1955?",
    "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1955",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1945"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1955"
        }
      ]
    },
    "table_name": "singer",
    "id": 1704
  },
  {
    "question": "What is the total number of available features?",
    "SQL": "SELECT count(*) FROM Other_Available_Features",
    "db_id": "real_estate_properties",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Other_Available_Features",
    "id": 1705
  },
  {
    "question": "Which properties are either houses or apartments with more than one room?",
    "SQL": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
    "db_id": "real_estate_properties",
    "config": {
      "dimension": [
        {
          "column": "property_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "property_type_code",
          "match_type": "等于",
          "condition": "House"
        },
        {
          "column": "property_type_code",
          "match_type": "等于",
          "condition": "Apartment"
        },
        {
          "column": "room_count",
          "match_type": "大于",
          "condition": 1
        }
      ]
    },
    "table_name": "Properties",
    "id": 1706
  }
]