[
    {
        "question": "How many singers from France do we have?",
        "SQL": "SELECT count(*) FROM singer WHERE Country = 'France'",
        "db_id": "concert_singer",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "France"
                }
            ],
            "table_name": "singer",
            "id": "0"
        }
    },
    {
        "question": "What is the total number of singers from France?",
        "SQL": "SELECT count(*) FROM singer WHERE Country = 'France'",
        "db_id": "concert_singer",
        "table_description": "Table containing information about singers including their ID, name, country, song name, song release year, age, and gender.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "France"
                }
            ],
            "table_name": "singer",
            "id": "1"
        }
    },
    {
        "question": "Show name, country, age for all female singers ordered by age from the oldest to the youngest.",
        "SQL": "SELECT name ,  country ,  age FROM singer WHERE is_male = 'F' ORDER BY age DESC",
        "db_id": "concert_singer",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "country"
                },
                {
                    "column": "age"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "is_male",
                    "match_type": "等于",
                    "condition": "'F'"
                }
            ],
            "table_name": "singer",
            "id": "2"
        }
    },
    {
        "question": "What are the names, countries, and ages for every male singer in descending order of age?",
        "SQL": "SELECT name ,  country ,  age FROM singer WHERE is_male = 'T' ORDER BY age DESC",
        "db_id": "concert_singer",
        "table_description": "Table containing information about singers including their ID, name, country, song name, song release year, age, and gender.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "country"
                },
                {
                    "column": "age"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "is_male",
                    "match_type": "等于",
                    "condition": "T"
                }
            ],
            "table_name": "singer",
            "id": "3"
        }
    },
    {
        "question": "What is the average, minimum, and maximum age of all male singers from France?",
        "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France' AND is_male  =  'T'",
        "db_id": "concert_singer",
        "table_description": "Table containing information about singers including their ID, name, country, song name, song release year, age, and gender.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "age",
                    "aggregate_function": "MIN"
                },
                {
                    "column": "age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "country",
                    "match_type": "精确匹配",
                    "condition": "France"
                },
                {
                    "column": "is_male",
                    "match_type": "精确匹配",
                    "condition": "T"
                }
            ],
            "table_name": "singer",
            "id": "4"
        }
    },
    {
        "question": "What is the average, minimum, and maximum age for all male French singers?",
        "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France' AND Is_male  =  'T'",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "age",
                    "aggregate_function": "MIN"
                },
                {
                    "column": "age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "country",
                    "match_type": "精确匹配",
                    "condition": "France"
                },
                {
                    "column": "Is_male",
                    "match_type": "精确匹配",
                    "condition": "T"
                }
            ],
            "table_name": "singer",
            "id": "5"
        }
    },
    {
        "question": "Show the name and the release year of the song by the youngest singer from France.",
        "SQL": "SELECT song_name ,  song_release_year FROM singer WHERE country = 'France' ORDER BY age LIMIT 1",
        "db_id": "concert_singer",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "song_name"
                },
                {
                    "column": "song_release_year"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "country",
                    "match_type": "精确匹配",
                    "condition": "France"
                }
            ],
            "table_name": "singer",
            "id": "6"
        }
    },
    {
        "question": "What are the names and release years for all the songs of the oldest singer?",
        "SQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age DESC LIMIT 1",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "song_name"
                },
                {
                    "column": "song_release_year"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "最大值",
                    "condition": ""
                }
            ]
        },
        "table_name": "singer",
        "id": "7"
    },
    {
        "question": "What are all distinct countries where male singers above age 20 are from?",
        "SQL": "SELECT DISTINCT country FROM singer WHERE age  >  20 AND is_male = 'T'",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "20"
                },
                {
                    "column": "is_male",
                    "match_type": "等于",
                    "condition": "T"
                }
            ]
        },
        "table_name": "singer",
        "id": "8"
    },
    {
        "question": "What are the different countries with male singers above age 20?",
        "SQL": "SELECT DISTINCT country FROM singer WHERE age > 20 AND is_male = 'T'",
        "db_id": "concert_singer",
        "table_description": "singer table contains information about singers including their ID, name, country, song name, song release year, age, and gender.",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "20"
                },
                {
                    "column": "is_male",
                    "match_type": "等于",
                    "condition": "T"
                }
            ],
            "table_name": "singer",
            "id": "9"
        }
    },
    {
        "question": "Show all countries and the number of male singers in each country.",
        "SQL": "SELECT country ,  count(*) FROM singer WHERE is_male = 'T' GROUP BY country",
        "db_id": "concert_singer",
        "table_description": "The singer table contains information about singers including their ID, name, country, song name, song release year, age, and gender.",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "is_male",
                    "match_type": "等于",
                    "condition": "'T'"
                }
            ],
            "table_name": "singer",
            "id": "10"
        }
    },
    {
        "question": "How many male singers are from each country?",
        "SQL": "SELECT country ,  count(*) FROM singer WHERE is_male = 'T' GROUP BY country",
        "db_id": "concert_singer",
        "table_description": "The singer table contains information about singers including their ID, name, country, song name, song release year, age, and gender.",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "is_male",
                    "match_type": "等于",
                    "condition": "T"
                }
            ],
            "table_name": "singer",
            "id": "11"
        }
    },
    {
        "question": "List all song names by singers from France who are above the average age.",
        "SQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer) AND country = 'France'",
        "db_id": "concert_singer",
        "table_description": "Table containing information about singers and their songs.",
        "config": {
            "dimension": [
                {
                    "column": "song_name"
                }
            ],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "(SELECT avg(age) FROM singer)"
                },
                {
                    "column": "country",
                    "match_type": "精确匹配",
                    "condition": "France"
                }
            ],
            "table_name": "singer",
            "id": "12"
        }
    },
    {
        "question": "What are all the song names by singers who are younger than 40?",
        "SQL": "SELECT song_name FROM singer WHERE age < 40",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "song_name"
                }
            ],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "40"
                }
            ]
        },
        "table_name": "singer",
        "id": "13"
    },
    {
        "question": "Show location and name for all stadiums with a capacity between 2000 and 5000.",
        "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 2000 AND 5000",
        "db_id": "concert_singer",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "LOCATION"
                },
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "capacity",
                    "match_type": "在区间",
                    "condition": [
                        2000,
                        5000
                    ]
                }
            ],
            "table_name": "stadium",
            "id": "14"
        }
    },
    {
        "question": "What are the locations and names of all stations with average attendance greater than 1000?",
        "SQL": "SELECT LOCATION ,  name FROM stadium WHERE Average > 1000",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "LOCATION"
                },
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Average",
                    "match_type": "大于",
                    "condition": 1000
                }
            ]
        },
        "table_name": "stadium",
        "id": "15"
    },
    {
        "question": "What is the maximum capacity and the average attendance of all stadiums located in Raith Rovers?",
        "SQL": "SELECT MAX(capacity), AVG(average) FROM stadium WHERE location = 'Raith Rovers'",
        "db_id": "concert_singer",
        "table_description": "The stadium table contains information about different stadiums including their ID, location, name, capacity, highest attendance, lowest attendance, and average attendance.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "capacity",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "average",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "location",
                    "match_type": "精确匹配",
                    "condition": "Raith Rovers"
                }
            ],
            "table_name": "stadium",
            "id": "16"
        }
    },
    {
        "question": "What is the average and maximum capacities for all stadiums with a capacity greater than 5000?",
        "SQL": "select avg(capacity) ,  max(capacity) from stadium where capacity > 5000",
        "db_id": "concert_singer",
        "table_description": "The stadium table contains information about different stadiums including their location, name, capacity, highest attendance, lowest attendance, and average attendance.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "capacity",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "capacity",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "capacity",
                    "match_type": "大于",
                    "condition": "5000"
                }
            ],
            "table_name": "stadium",
            "id": "17"
        }
    },
    {
        "question": "What is the name and capacity for the stadium with an average attendance greater than 1000?",
        "SQL": "SELECT name ,  capacity FROM stadium WHERE average > 1000",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "capacity"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "average",
                    "match_type": "大于",
                    "condition": "1000"
                }
            ],
            "table_name": "stadium",
            "id": "18"
        }
    },
    {
        "question": "What is the name and capacity for the stadium with an average attendance greater than 1000?",
        "SQL": "SELECT name ,  capacity FROM stadium WHERE average > 1000",
        "db_id": "concert_singer",
        "table_description": "The stadium table contains information about different stadiums including their names, capacities, and average attendances.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "capacity"
                }
            ],
            "measure": [
                {
                    "column": "average",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "average",
                    "match_type": "大于",
                    "condition": "1000"
                }
            ],
            "table_name": "stadium",
            "id": "19"
        }
    },
    {
        "question": "How many concerts are there with the theme 'Bleeding Love' or 'Happy Tonight'?",
        "SQL": "SELECT count(*) FROM concert WHERE Theme  =  'Bleeding Love' OR Theme  =  'Happy Tonight'",
        "db_id": "concert_singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Theme",
                    "match_type": "等于",
                    "condition": "Bleeding Love"
                },
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2015"
                }
            ]
        },
        "table_name": "concert",
        "id": "20"
    },
    {
        "question": "How many concerts occurred in the first half of 2014?",
        "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 AND MONTH <= 6",
        "db_id": "concert_singer",
        "table_description": "Table containing information about concerts.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2014"
                },
                {
                    "column": "MONTH",
                    "match_type": "小于等于",
                    "condition": "6"
                }
            ],
            "table_name": "concert",
            "id": "21"
        }
    },
    {
        "question": "Which year after 2014 has the most number of concerts?",
        "SQL": "SELECT YEAR FROM concert WHERE Year > '2014' GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "concert_singer",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "Year",
                    "match_type": "大于",
                    "condition": "2014"
                }
            ],
            "table_name": "concert",
            "id": "22"
        }
    },
    {
        "question": "What is the year that had the most concerts with the theme 'Bleeding Love'?",
        "SQL": "SELECT YEAR FROM concert WHERE Theme = 'Bleeding Love' GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Theme",
                    "match_type": "精确匹配",
                    "condition": "Bleeding Love"
                }
            ],
            "table_name": "concert",
            "id": "23"
        }
    },
    {
        "question": "Show countries where a singer above age 40 and a singer with the song 'Sun' are from.",
        "SQL": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE Song_Name = 'Sun'",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "40"
                },
                {
                    "column": "Song_Name",
                    "match_type": "精确匹配",
                    "condition": "Sun"
                }
            ]
        },
        "table_name": "singer",
        "id": "24"
    },
    {
        "question": "What is the name and nation of the singer who has a song with 'Oh' in its name?",
        "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Oh%'",
        "db_id": "concert_singer",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "song_name",
                    "match_type": "模糊匹配",
                    "condition": "Oh"
                }
            ],
            "table_name": "singer",
            "id": "25"
        }
    },
    {
        "question": "What is the name and country of origin of every singer who has a song released in 2013?",
        "SQL": "SELECT name ,  country FROM singer WHERE song_release_year = 2013",
        "db_id": "concert_singer",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "song_release_year",
                    "match_type": "等于",
                    "condition": "2013"
                }
            ],
            "table_name": "singer",
            "id": "26"
        }
    },
    {
        "question": "Find the number of pets whose pet age is greater than 2.",
        "SQL": "SELECT count(*) FROM pets WHERE pet_age  >  2",
        "db_id": "pets_1",
        "table_description": "The pets table contains information about different pets including their ID, type, age, and weight.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "大于",
                    "condition": "2"
                }
            ],
            "table_name": "pets",
            "id": "27"
        }
    },
    {
        "question": "How many dogs have a greater weight than 9?",
        "SQL": "SELECT count(*) FROM pets WHERE weight  >  9 AND PetType = 'dog'",
        "db_id": "pets_1",
        "table_description": "A table containing information about different types of pets including their ID, type, age, and weight.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "大于",
                    "condition": "9"
                },
                {
                    "column": "PetType",
                    "match_type": "精确匹配",
                    "condition": "dog"
                }
            ],
            "table_name": "pets",
            "id": "28"
        }
    },
    {
        "question": "Find the weight of the youngest dog with an ID greater than 2001.",
        "SQL": "SELECT weight FROM pets WHERE PetID > 2001 ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "table_description": "A table containing information about different pets including their type, age, and weight.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "PetID",
                    "match_type": "大于",
                    "condition": "2001"
                },
                {
                    "column": "pet_age",
                    "match_type": "等于",
                    "condition": "MIN(pet_age)"
                }
            ],
            "table_name": "pets",
            "id": "29"
        }
    },
    {
        "question": "What is the weight of the youngest dog that is older than 1 year?",
        "SQL": "SELECT weight FROM pets WHERE pet_age > 1 ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "大于",
                    "condition": "1"
                }
            ],
            "table_name": "pets",
            "id": "30"
        }
    },
    {
        "question": "Find the maximum weight for each type of pet that is at least 2 years old. List the maximum weight and pet type.",
        "SQL": "SELECT max(weight), petType FROM pets WHERE pet_age >= 2 GROUP BY petType",
        "db_id": "pets_1",
        "table_description": "Table containing information about different types of pets including their ID, type, age, and weight.",
        "config": {
            "dimension": [
                {
                    "column": "petType"
                }
            ],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ],
            "table_name": "pets",
            "id": "31"
        }
    },
    {
        "question": "List the maximum weight and type for each type of pet with an age greater than 1.",
        "SQL": "SELECT max(weight), petType FROM pets WHERE pet_age > 1 GROUP BY petType",
        "db_id": "pets_1",
        "table_description": "The pets table contains information about different types of pets including their ID, type, age, and weight.",
        "config": {
            "dimension": [
                {
                    "column": "petType"
                }
            ],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "大于",
                    "condition": "1"
                }
            ],
            "table_name": "pets",
            "id": "32"
        }
    },
    {
        "question": "Find the number of distinct types of pets with a pet age greater than 1.",
        "SQL": "SELECT count(DISTINCT pettype) FROM pets WHERE pet_age > 1",
        "db_id": "pets_1",
        "table_description": "The pets table contains information about different types of pets including their ID, type, age, and weight.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "pettype",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "大于",
                    "condition": "1"
                }
            ],
            "table_name": "pets",
            "id": "33"
        }
    },
    {
        "question": "Find the type and weight of the pet that is exactly 1 year old.",
        "SQL": "SELECT pettype ,  weight FROM pets WHERE pet_age = 1",
        "db_id": "pets_1",
        "table_description": "The pets table contains information about different pets including their type, age, and weight.",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "等于",
                    "condition": "1"
                }
            ],
            "table_name": "pets",
            "id": "35"
        }
    },
    {
        "question": "What type of pet is the youngest animal, and how much does it weigh if the pet is a dog?",
        "SQL": "SELECT pettype ,  weight FROM pets WHERE pettype = 'dog' ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "table_description": "Table 'pets' contains information about different types of pets including their age and weight.",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "pettype",
                    "match_type": "精确匹配",
                    "condition": "dog"
                }
            ],
            "table_name": "pets",
            "id": "36"
        }
    },
    {
        "question": "Find the id and weight of all pets whose type is dog.",
        "SQL": "SELECT petid ,  weight FROM pets WHERE PetType  =  'dog'",
        "db_id": "pets_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "petid"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "PetType",
                    "match_type": "精确匹配",
                    "condition": "dog"
                }
            ],
            "table_name": "pets",
            "id": "37"
        }
    },
    {
        "question": "What is the id and weight of every pet that weighs more than 10?",
        "SQL": "SELECT petid ,  weight FROM pets WHERE weight  >  10",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "petid"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "大于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "pets",
        "id": "38"
    },
    {
        "question": "Find the average and maximum age for each type of pet with a weight greater than 10.",
        "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets WHERE weight > 10 GROUP BY pettype",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                }
            ],
            "measure": [
                {
                    "column": "pet_age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "pet_age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "大于",
                    "condition": "10"
                }
            ],
            "table_name": "pets",
            "id": "39"
        }
    },
    {
        "question": "What is the average and maximum age for each pet type where the pet's weight is greater than 10?",
        "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets WHERE weight > 10 GROUP BY pettype",
        "db_id": "pets_1",
        "table_description": "Table contains information about different types of pets including their ID, type, age, and weight.",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                }
            ],
            "measure": [
                {
                    "column": "pet_age",
                    "aggregate_function": "avg"
                },
                {
                    "column": "pet_age",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "大于",
                    "condition": "10"
                }
            ],
            "table_name": "pets",
            "id": "40"
        }
    },
    {
        "question": "Find the average weight for each pet type where the pet age is greater than 1.",
        "SQL": "SELECT AVG(weight), pettype FROM pets WHERE pet_age > 1 GROUP BY pettype",
        "db_id": "pets_1",
        "table_description": "Table containing information about different types of pets including their IDs, types, ages, and weights.",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                }
            ],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "大于",
                    "condition": "1"
                }
            ],
            "table_name": "pets",
            "id": "41"
        }
    },
    {
        "question": "What is the average weight for each type of pet older than 1 year?",
        "SQL": "SELECT avg(weight) ,  pettype FROM pets WHERE pet_age > 1 GROUP BY pettype",
        "db_id": "pets_1",
        "config": {
            "dimension": [
                {
                    "column": "pettype"
                }
            ],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "pet_age",
                    "match_type": "大于",
                    "condition": "1"
                }
            ],
            "table_name": "pets",
            "id": "42"
        }
    },
    {
        "question": "How many continents are there that contain the letter 'a'?",
        "SQL": "SELECT count(*) FROM CONTINENTS WHERE Continent LIKE '%a%';",
        "db_id": "car_1",
        "table_description": "Table containing continent information.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "模糊匹配",
                    "condition": "%a%"
                }
            ],
            "table_name": "CONTINENTS",
            "id": "43"
        }
    },
    {
        "question": "How many continents are there that contain the letter 'a'?",
        "SQL": "SELECT count(*) FROM CONTINENTS WHERE Continent LIKE '%a%';",
        "db_id": "car_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "模糊匹配",
                    "condition": "%a%"
                }
            ],
            "table_name": "CONTINENTS",
            "id": "44"
        }
    },
    {
        "question": "How many countries are listed in the continent of Europe?",
        "SQL": "SELECT count(*) FROM COUNTRIES WHERE Continent = 2;",
        "db_id": "car_1",
        "table_description": "Table contains country information including ID, name, and continent.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "等于",
                    "condition": "2"
                }
            ],
            "table_name": "COUNTRIES",
            "id": "45"
        }
    },
    {
        "question": "How many countries exist in Europe?",
        "SQL": "SELECT count(*) FROM COUNTRIES WHERE Continent = 2;",
        "db_id": "car_1",
        "table_name": "COUNTRIES",
        "id": "46",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "等于",
                    "condition": "2"
                }
            ]
        }
    },
    {
        "question": "What is the average miles per gallon (mpg) of the cars with 8 cylinders?",
        "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  8;",
        "db_id": "car_1",
        "table_description": "Contains car data including miles per gallon, number of cylinders, engine displacement, horsepower, weight, acceleration, and year.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "mpg",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "等于",
                    "condition": "8"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "47"
        }
    },
    {
        "question": "What is the average miles per gallon of all the cars with 8 cylinders?",
        "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  8;",
        "db_id": "car_1",
        "table_description": "The CARS_DATA table contains information about various cars including their miles per gallon (MPG), number of cylinders, engine displacement, horsepower, weight, acceleration time, and model year.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "mpg",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "等于",
                    "condition": "8"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "48"
        }
    },
    {
        "question": "What is the smallest weight of the car produced with 8 cylinders after 1970?",
        "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  >  1970",
        "db_id": "car_1",
        "table_description": "Contains information about various cars including their fuel efficiency (MPG), number of cylinders, engine displacement, horsepower, weight, acceleration time, and model year.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "year",
                    "match_type": "大于",
                    "condition": "1970"
                }
            ],
            "table_name": "cars_data",
            "id": "49"
        }
    },
    {
        "question": "What is the minimum weight of the car with 8 cylinders produced after 1970 ?",
        "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  >  1970",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "weight",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "year",
                    "match_type": "大于",
                    "condition": "1970"
                }
            ],
            "table_name": "cars_data",
            "id": "50"
        }
    },
    {
        "question": "What are all the makers and models for Buick?",
        "SQL": "SELECT Maker ,  Model FROM MODEL_LIST WHERE Model = 'buick';",
        "db_id": "car_1",
        "table_description": "Table contains information about car makers and their models.",
        "config": {
            "dimension": [
                {
                    "column": "Maker"
                },
                {
                    "column": "Model"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Model",
                    "match_type": "精确匹配",
                    "condition": "buick"
                }
            ],
            "table_name": "MODEL_LIST",
            "id": "51"
        }
    },
    {
        "question": "What are the makers and models for Buick?",
        "SQL": "SELECT Maker ,  Model FROM MODEL_LIST WHERE Model = 'buick';",
        "db_id": "car_1",
        "table_description": "MODEL_LIST table contains information about car models and their makers.",
        "config": {
            "dimension": [
                {
                    "column": "Maker"
                },
                {
                    "column": "Model"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Model",
                    "match_type": "精确匹配",
                    "condition": "buick"
                }
            ],
            "table_name": "MODEL_LIST",
            "id": "52"
        }
    },
    {
        "question": "What is the number of the cars with weight more than 3500?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE weight  >  3500;",
        "db_id": "car_1",
        "table_description": "Table containing data about various cars including their specifications such as MPG, Cylinders, Engine Displacement, Horsepower, Weight, Acceleration, and Year.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "大于",
                    "condition": "3500"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "53"
        }
    },
    {
        "question": "What is the number of cars with a weight greater than 3500?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE Weight  >  3500;",
        "db_id": "car_1",
        "table_description": "CARS_DATA contains information about different car models including their horsepower, weight, and year of manufacture.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Weight",
                    "match_type": "大于",
                    "condition": "3500"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "54"
        }
    },
    {
        "question": "What is the average weight of cars with more than 300 engine displacement each year?",
        "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA WHERE Edispl > 300 GROUP BY YEAR;",
        "db_id": "car_1",
        "table_description": "Table containing data about cars including their engine displacement, weight, and year.",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "Weight",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Edispl",
                    "match_type": "大于",
                    "condition": "300"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "55"
        }
    },
    {
        "question": "What is the average weight and year for each year, but only for cars with more than 6 cylinders?",
        "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA WHERE Cylinders > 6 GROUP BY YEAR;",
        "db_id": "car_1",
        "table_description": "Table containing data about various cars including their weight and manufacturing year.",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "Weight",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "大于",
                    "condition": "6"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "56"
        }
    },
    {
        "question": "What is the average horsepower of the cars with more than 300 engine displacement before 1980?",
        "SQL": "SELECT avg(horsepower) FROM CARS_DATA WHERE Edispl > 300 AND YEAR < 1980;",
        "db_id": "car_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "horsepower",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Edispl",
                    "match_type": "大于",
                    "condition": "300"
                },
                {
                    "column": "YEAR",
                    "match_type": "小于",
                    "condition": "1980"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "57"
        }
    },
    {
        "question": "What is the average horsepower for all cars with 8 cylinders produced before 1980?",
        "SQL": "select avg(horsepower) from cars_data where cylinders = 8 and year < 1980;",
        "db_id": "car_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "horsepower",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "year",
                    "match_type": "小于",
                    "condition": "1980"
                }
            ],
            "table_name": "cars_data",
            "id": "58"
        }
    },
    {
        "question": "What is the maximum acceleration for cars with different numbers of cylinders, where the engine displacement is greater than 300?",
        "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA WHERE Edispl > 300 GROUP BY Cylinders;",
        "db_id": "car_1",
        "table_description": "CARS_DATA contains information about various car models including their performance metrics.",
        "config": {
            "dimension": [
                {
                    "column": "Cylinders"
                }
            ],
            "measure": [
                {
                    "column": "Accelerate",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Edispl",
                    "match_type": "大于",
                    "condition": "300"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "59"
        }
    },
    {
        "question": "What is the maximum acceleration for all the different cylinders with horsepower greater than 140?",
        "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA WHERE Horsepower > 140 GROUP BY Cylinders;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "Cylinders"
                }
            ],
            "measure": [
                {
                    "column": "Accelerate",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Horsepower",
                    "match_type": "大于",
                    "condition": "140"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "60"
        }
    },
    {
        "question": "Which model has the most versions (make) of cars with a MakeId greater than 2?",
        "SQL": "SELECT Model FROM CAR_NAMES WHERE MakeId > 2 GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "car_1",
        "table_description": "Table containing car names with their respective models and makes.",
        "config": {
            "dimension": [
                {
                    "column": "Model"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "MakeId",
                    "match_type": "大于",
                    "condition": "2"
                }
            ],
            "table_name": "CAR_NAMES",
            "id": "61"
        }
    },
    {
        "question": "What is the most common make among the models with the most different versions?",
        "SQL": "SELECT Make FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "car_1",
        "table_description": "Table containing car models and their makes.",
        "config": {
            "dimension": [
                {
                    "column": "Make"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [],
            "table_name": "CAR_NAMES",
            "id": "62"
        }
    },
    {
        "question": "How many cars with an engine displacement greater than 300 have more than 4 cylinders?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4 AND Edispl  >  300;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "大于",
                    "condition": "4"
                },
                {
                    "column": "Edispl",
                    "match_type": "大于",
                    "condition": "300"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "63"
        }
    },
    {
        "question": "What is the number of cars with an engine displacement greater than 300?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE Edispl  >  300;",
        "db_id": "car_1",
        "table_description": "CARS_DATA contains information about various car models including their engine displacement.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Edispl",
                    "match_type": "大于",
                    "condition": "300"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "64"
        }
    },
    {
        "question": "how many cars with 8 cylinders were produced in 1980?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980 AND Cylinders = 8;",
        "db_id": "car_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "1980"
                },
                {
                    "column": "Cylinders",
                    "match_type": "等于",
                    "condition": "8"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "65"
        }
    },
    {
        "question": "How many cars had an engine displacement of 307.0?",
        "SQL": "SELECT count(*) FROM CARS_DATA WHERE Edispl  =  307.0;",
        "db_id": "car_1",
        "table_description": "The CARS_DATA table contains information about various car models including their engine displacement (Edispl).",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Edispl",
                    "match_type": "等于",
                    "condition": "307.0"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "66"
        }
    },
    {
        "question": "In which years cars with horsepower not less than 140 and no more than 165 were produced?",
        "SQL": "select distinct year from cars_data where horsepower between 140 and 165;",
        "db_id": "car_1",
        "table_description": "Contains information about different car models, including their year of manufacture, miles per gallon (MPG), number of cylinders, engine displacement, horsepower, weight, acceleration, and the model year.",
        "config": {
            "dimension": [
                {
                    "column": "year"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "horsepower",
                    "match_type": "在区间",
                    "condition": [
                        140,
                        165
                    ]
                }
            ],
            "table_name": "cars_data",
            "id": "67"
        }
    },
    {
        "question": "What are the different years in which there were cars produced that had an engine displacement of more than 300?",
        "SQL": "select distinct year from cars_data where edispl > 300;",
        "db_id": "car_1",
        "config": {
            "dimension": [
                {
                    "column": "year"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "edispl",
                    "match_type": "大于",
                    "condition": 300
                }
            ]
        },
        "table_name": "cars_data",
        "id": "68"
    },
    {
        "question": "What is the horsepower of the car with the highest weight?",
        "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.weight DESC LIMIT 1;",
        "db_id": "car_1",
        "table_description": "CARS_DATA contains information about various cars including their horsepower, weight, and acceleration.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "horsepower",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "ORDER_BY_DESC_LIMIT_1",
                    "condition": ""
                }
            ],
            "table_name": "CARS_DATA AS T1",
            "id": "69"
        }
    },
    {
        "question": "What is the horsepower of the car with the greatest acceleration that has a weight greater than 3500?",
        "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 WHERE T1.weight > 3500 ORDER BY T1.accelerate DESC LIMIT 1;",
        "db_id": "car_1",
        "table_description": "CARS_DATA AS T1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "T1.horsepower",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "T1.weight",
                    "match_type": "大于",
                    "condition": "3500"
                }
            ],
            "table_name": "CARS_DATA AS T1",
            "id": "70"
        }
    },
    {
        "question": "How many cars have a larger acceleration time than the car with the heaviest weight?",
        "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Weight DESC LIMIT 1 );",
        "db_id": "car_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Accelerate",
                    "match_type": "大于",
                    "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Weight DESC LIMIT 1 )"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "71"
        }
    },
    {
        "question": "What is the number of cars with a weight less than the lightest car with the most horsepower?",
        "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Weight < ( SELECT Weight FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "db_id": "car_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Weight",
                    "match_type": "小于",
                    "condition": "( SELECT Weight FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "72"
        }
    },
    {
        "question": "How many cars with 8 cylinders have an engine displacement greater than 300?",
        "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders = 8 AND Edispl > 300;",
        "db_id": "car_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "Edispl",
                    "match_type": "大于",
                    "condition": "300"
                }
            ],
            "table_name": "CARS_DATA",
            "id": "73"
        }
    },
    {
        "question": "What is the number of cars with an engine displacement greater than 300?",
        "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Edispl > 300;",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Edispl",
                    "match_type": "大于",
                    "condition": "300"
                }
            ]
        },
        "table_name": "CARS_DATA",
        "id": "74"
    },
    {
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1975?",
        "SQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1975",
        "db_id": "car_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "mpg",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "year",
                    "match_type": "小于",
                    "condition": "1975"
                }
            ]
        },
        "table_name": "cars_data",
        "id": "75"
    },
    {
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that had an engine displacement greater than 300?",
        "SQL": "select max(mpg) from cars_data where cylinders  =  8 or edispl  >  300",
        "db_id": "car_1",
        "table_description": "cars_data",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "mpg",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "cylinders",
                    "match_type": "等于",
                    "condition": "8"
                },
                {
                    "column": "edispl",
                    "match_type": "大于",
                    "condition": "300"
                }
            ],
            "table_name": "cars_data",
            "id": "76"
        }
    },
    {
        "question": "Which country does Airline with abbreviation 'Delta' belong to?",
        "SQL": "SELECT Country FROM AIRLINES WHERE Abbreviation = 'Delta'",
        "db_id": "flight_2",
        "table_description": "Table containing information about airlines including their unique ID, full name, abbreviation, and country of origin.",
        "config": {
            "dimension": [
                {
                    "column": "Country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Abbreviation",
                    "match_type": "精确匹配",
                    "condition": "Delta"
                }
            ],
            "table_name": "AIRLINES",
            "id": "77"
        }
    },
    {
        "question": "Which airline is associated with the abbreviation 'JetB'?",
        "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'JetB'",
        "db_id": "flight_2",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "Airline"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Abbreviation",
                    "match_type": "精确匹配",
                    "condition": "JetB"
                }
            ],
            "table_name": "AIRLINES",
            "id": "78"
        }
    },
    {
        "question": "What is the abbreviation of Airline starting with 'U'?",
        "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline LIKE 'U%'",
        "db_id": "flight_2",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "Abbreviation"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Airline",
                    "match_type": "模糊匹配",
                    "condition": "U%"
                }
            ],
            "table_name": "AIRLINES",
            "id": "79"
        }
    },
    {
        "question": "What is the abbreviation for Southwest Airlines?",
        "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'Southwest Airlines'",
        "db_id": "flight_2",
        "table_description": "Table containing airline information including unique ID, full airline name, abbreviation, and country.",
        "config": {
            "dimension": [
                {
                    "column": "Abbreviation"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Airline",
                    "match_type": "精确匹配",
                    "condition": "Southwest Airlines"
                }
            ],
            "table_name": "AIRLINES",
            "id": "80"
        }
    },
    {
        "question": "List all airline names and their abbreviations for airlines that are not 'United Airlines'.",
        "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Airline != 'United Airlines'",
        "db_id": "flight_2",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "Airline"
                },
                {
                    "column": "Abbreviation"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Airline",
                    "match_type": "不等于",
                    "condition": "United Airlines"
                }
            ],
            "table_name": "AIRLINES",
            "id": "81"
        }
    },
    {
        "question": "What are the airline names and abbreviations for airlines with 'A' in their names?",
        "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Airline LIKE \"%A%\"",
        "db_id": "flight_2",
        "table_description": "This table contains information about various airlines including their unique ID, full name, abbreviation, and country of origin.",
        "config": {
            "dimension": [
                {
                    "column": "Airline"
                },
                {
                    "column": "Abbreviation"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Airline",
                    "match_type": "模糊匹配",
                    "condition": "%A%"
                }
            ],
            "table_name": "AIRLINES",
            "id": "82"
        }
    },
    {
        "question": "List the airport code and name in the country of United States.",
        "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE Country  =  \"United States\"",
        "db_id": "flight_2",
        "table_description": "Table contains information about airports including their codes, names, cities, countries, and country abbreviations.",
        "config": {
            "dimension": [
                {
                    "column": "AirportCode"
                },
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "United States"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "83"
    },
    {
        "question": "Give the airport code and airport name corresponding to the city Aberdeen.",
        "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE City  =  \"Aberdeen\"",
        "db_id": "flight_2",
        "table_description": "Table containing information about airports including their codes, names, cities, countries, and country abbreviations.",
        "config": {
            "dimension": [
                {
                    "column": "AirportCode"
                },
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Aberdeen"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "84"
    },
    {
        "question": "How many airlines are there in the USA?",
        "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = 'USA'",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ],
            "table_name": "AIRLINES",
            "id": "85"
        }
    },
    {
        "question": "What is the total number of airlines in the USA?",
        "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = 'USA'",
        "db_id": "flight_2",
        "table_description": "The table contains information about different airlines including their unique ID, full name, abbreviation, and country of operation.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ],
            "table_name": "AIRLINES",
            "id": "86"
        }
    },
    {
        "question": "How many airports are there in the United States?",
        "SQL": "SELECT count(*) FROM AIRPORTS WHERE Country = 'United States'",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "United States"
                }
            ],
            "table_name": "AIRPORTS",
            "id": "87"
        }
    },
    {
        "question": "Return the number of airports in the United States.",
        "SQL": "SELECT count(*) FROM AIRPORTS WHERE Country = 'United States'",
        "db_id": "flight_2",
        "table_description": "The table contains information about airports including city, airport code, airport name, country, and country abbreviation.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "United States"
                }
            ],
            "table_name": "AIRPORTS",
            "id": "88"
        }
    },
    {
        "question": "How many flights do we have from the airport 'APG'?",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'",
        "db_id": "flight_2",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "APG"
                }
            ],
            "table_name": "FLIGHTS",
            "id": "89"
        }
    },
    {
        "question": "Return the number of flights from airport APG.",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'APG'",
        "db_id": "flight_2",
        "table_description": "The FLIGHTS table contains information about flights including airline, flight number, source airport, and destination airport.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "APG"
                }
            ],
            "table_name": "FLIGHTS",
            "id": "90"
        }
    },
    {
        "question": "Which airline is abbreviated as 'USAir'?",
        "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"USAir\"",
        "db_id": "flight_2",
        "table_description": "Table containing information about different airlines including their unique ID, full name, abbreviation, and country.",
        "config": {
            "dimension": [
                {
                    "column": "Airline"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Abbreviation",
                    "match_type": "精确匹配",
                    "condition": "USAir"
                }
            ],
            "table_name": "AIRLINES",
            "id": "91"
        }
    },
    {
        "question": "How many airlines have the abbreviation 'UAL'?",
        "SQL": "SELECT count(*) FROM AIRLINES WHERE Abbreviation = 'UAL'",
        "db_id": "flight_2",
        "table_description": "The AIRLINES table contains information about different airlines including their unique identifier (uid), full name (Airline), abbreviation (Abbreviation), and country of origin (Country).",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Abbreviation",
                    "match_type": "精确匹配",
                    "condition": "UAL"
                }
            ],
            "table_name": "AIRLINES",
            "id": "93"
        }
    },
    {
        "question": "Return the number of airlines with the abbreviation 'UAL'.",
        "SQL": "SELECT count(*) FROM AIRLINES WHERE Abbreviation = 'UAL'",
        "db_id": "flight_2",
        "table_description": "The table contains information about airlines including their unique ID, name, abbreviation, and country.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Abbreviation",
                    "match_type": "精确匹配",
                    "condition": "UAL"
                }
            ],
            "table_name": "AIRLINES",
            "id": "94"
        }
    },
    {
        "question": "Which city and country is the Municipal airport at in Aberdeen?",
        "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Municipal\" AND City = \"Aberdeen\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "City"
                },
                {
                    "column": "Country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "AirportName",
                    "match_type": "精确匹配",
                    "condition": "Municipal"
                },
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Aberdeen"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "95"
    },
    {
        "question": "Give the city and country for the Municipal airport in Aberdeen.",
        "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Municipal\" AND City = \"Aberdeen\"",
        "db_id": "flight_2",
        "table_description": "The table contains information about airports, including the city, airport code, airport name, country, and country abbreviation.",
        "config": {
            "dimension": [
                {
                    "column": "City"
                },
                {
                    "column": "Country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "AirportName",
                    "match_type": "精确匹配",
                    "condition": "Municipal"
                },
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Aberdeen"
                }
            ],
            "table_name": "AIRPORTS",
            "id": "96"
        }
    },
    {
        "question": "What is the airport name for airport 'ABI' in Abilene?",
        "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"ABI\"",
        "db_id": "flight_2",
        "table_description": "Table containing information about airports, including city, airport code, airport name, country, and country abbreviation.",
        "config": {
            "dimension": [
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "AirportCode",
                    "match_type": "精确匹配",
                    "condition": "ABI"
                }
            ],
            "table_name": "AIRPORTS",
            "id": "97"
        }
    },
    {
        "question": "Return the name of the airport located in Aberdeen with code 'ABR'.",
        "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen' AND AirportCode = 'ABR'",
        "db_id": "flight_2",
        "table_description": "Table containing information about airports including their city, code, name, country, and country abbreviation.",
        "config": {
            "dimension": [
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Aberdeen"
                },
                {
                    "column": "AirportCode",
                    "match_type": "精确匹配",
                    "condition": "ABR"
                }
            ],
            "table_name": "AIRPORTS",
            "id": "98"
        }
    },
    {
        "question": "What are airport names at City 'Abilene'?",
        "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Abilene\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Abilene"
                }
            ]
        },
        "table_name": "AIRPORTS",
        "id": "99"
    },
    {
        "question": "What are the names of airports with the code starting with 'A' in Aberdeen?",
        "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen' AND AirportCode LIKE 'A%'",
        "db_id": "flight_2",
        "config": {
            "dimension": [
                {
                    "column": "AirportName"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Aberdeen"
                },
                {
                    "column": "AirportCode",
                    "match_type": "模糊匹配",
                    "condition": "A%"
                }
            ],
            "table_name": "AIRPORTS",
            "id": "100"
        }
    },
    {
        "question": "How many flights depart from 'ASY'?",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"ASY\"",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "ASY"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "101"
    },
    {
        "question": "Count the number of flights departing from 'ASY'.",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"ASY\"",
        "db_id": "flight_2",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "ASY"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "102"
    },
    {
        "question": "How many flights have source airport AHD?",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'AHD'",
        "db_id": "flight_2",
        "table_description": "FLIGHTS table contains flight information including airline, flight number, source airport, and destination airport.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "AHD"
                }
            ],
            "table_name": "FLIGHTS",
            "id": "103"
        }
    },
    {
        "question": "Count the number of flights from CVO.",
        "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = 'CVO'",
        "db_id": "flight_2",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "CVO"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "104"
    },
    {
        "question": "What are flight numbers of flights departing from Airport \"ASY\"?",
        "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"ASY\"",
        "db_id": "flight_2",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "FlightNo"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "ASY"
                }
            ],
            "table_name": "FLIGHTS",
            "id": "105"
        }
    },
    {
        "question": "Give the flight numbers of flights arriving at ASY.",
        "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'ASY'",
        "db_id": "flight_2",
        "table_description": "FLIGHTS table contains flight information including flight number, source airport, and destination airport.",
        "config": {
            "dimension": [
                {
                    "column": "FlightNo"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "DestAirport",
                    "match_type": "精确匹配",
                    "condition": "ASY"
                }
            ],
            "table_name": "FLIGHTS",
            "id": "106"
        }
    },
    {
        "question": "What are flight numbers of flights departing from Airport 'ASY'?",
        "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'ASY'",
        "db_id": "flight_2",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "FlightNo"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "SourceAirport",
                    "match_type": "精确匹配",
                    "condition": "ASY"
                }
            ]
        },
        "table_name": "FLIGHTS",
        "id": "107"
    },
    {
        "question": "Give the flight numbers of flights landing at ASY.",
        "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"ASY\"",
        "db_id": "flight_2",
        "table_description": "表FLIGHTS包含航班信息，列有航空公司(Airline)、航班号(FlightNo)、出发机场(SourceAirport)和到达机场(DestAirport)。",
        "config": {
            "dimension": [
                {
                    "column": "FlightNo"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "DestAirport",
                    "match_type": "精确匹配",
                    "condition": "ASY"
                }
            ],
            "table_name": "FLIGHTS",
            "id": "108"
        }
    },
    {
        "question": "How many employees are there in Bristol?",
        "SQL": "SELECT count(*) FROM employee WHERE City = 'Bristol'",
        "db_id": "employee_hire_evaluation",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Bristol"
                }
            ],
            "table_name": "employee",
            "id": "109"
        }
    },
    {
        "question": "Count the number of employees in Bristol",
        "SQL": "SELECT count(*) FROM employee WHERE City = 'Bristol'",
        "db_id": "employee_hire_evaluation",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "City",
                    "match_type": "精确匹配",
                    "condition": "Bristol"
                }
            ],
            "table_name": "employee",
            "id": "110"
        }
    },
    {
        "question": "Sort employee names by their age in ascending order for employees from Bristol.",
        "SQL": "SELECT name FROM employee WHERE City = 'Bristol' ORDER BY age",
        "db_id": "employee_hire_evaluation",
        "table_description": "Table containing employee information such as ID, name, age, and city.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "City",
                    "match_type": "exact_match",
                    "condition": "Bristol"
                }
            ],
            "table_name": "employee",
            "id": "111"
        }
    },
    {
        "question": "List the names of employees from Bristol and sort in ascending order of age.",
        "SQL": "SELECT name FROM employee WHERE City = 'Bristol' ORDER BY age",
        "db_id": "employee_hire_evaluation",
        "table_description": "The employee table contains information about employees including their ID, name, age, and city.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "City",
                    "match_type": "exact_match",
                    "condition": "Bristol"
                }
            ],
            "table_name": "employee",
            "id": "112"
        }
    },
    {
        "question": "What is the number of employees from each city who are older than 25?",
        "SQL": "SELECT count(*) ,  city FROM employee WHERE age > 25 GROUP BY city",
        "db_id": "employee_hire_evaluation",
        "table_description": "This table contains information about employees, including their ID, name, age, and city.",
        "config": {
            "dimension": [
                {
                    "column": "city"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "25"
                }
            ],
            "table_name": "employee",
            "id": "113"
        }
    },
    {
        "question": "Count the number of employees for each city where the age is greater than 25.",
        "SQL": "SELECT count(*), city FROM employee WHERE age > 25 GROUP BY city",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "city"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "25"
                }
            ],
            "table_name": "employee",
            "id": "114"
        }
    },
    {
        "question": "Which cities do employees under the age of 35 come from, with more than one employee in each city?",
        "SQL": "SELECT city FROM employee WHERE age < 35 GROUP BY city HAVING count(*) > 1",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "city"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "35"
                },
                {
                    "column": "count(*)",
                    "match_type": "大于",
                    "condition": "1"
                }
            ],
            "table_name": "employee",
            "id": "115"
        }
    },
    {
        "question": "Find the cities that have employees younger than 28 years old and more than one employee.",
        "SQL": "SELECT city FROM employee WHERE age < 28 GROUP BY city HAVING count(*) > 1",
        "db_id": "employee_hire_evaluation",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "city"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "28"
                },
                {
                    "column": "*",
                    "match_type": "大于",
                    "condition": "1"
                }
            ],
            "table_name": "employee",
            "id": "116"
        }
    },
    {
        "question": "Find the number of shops in each district.",
        "SQL": "SELECT count(*), District FROM shop GROUP BY District",
        "db_id": "employee_hire_evaluation",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "District"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [],
            "table_name": "shop",
            "id": "117"
        }
    },
    {
        "question": "How many shops are there in each location that have more than 5000 products?",
        "SQL": "SELECT count(*) ,  LOCATION FROM shop WHERE Number_products > 5000 GROUP BY LOCATION",
        "db_id": "employee_hire_evaluation",
        "table_description": "Table shop contains information about various shops including their ID, name, location, district, number of products, and manager's name.",
        "config": {
            "dimension": [
                {
                    "column": "LOCATION"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Number_products",
                    "match_type": "大于",
                    "condition": "5000"
                }
            ],
            "table_name": "shop",
            "id": "118"
        }
    },
    {
        "question": "Find the manager name and district of the shop whose number of products is greater than 5000.",
        "SQL": "SELECT manager_name ,  district FROM shop WHERE number_products > 5000",
        "db_id": "employee_hire_evaluation",
        "table_description": "The shop table contains information about shops, including their ID, name, location, district, number of products, and manager name.",
        "config": {
            "dimension": [
                {
                    "column": "manager_name"
                },
                {
                    "column": "district"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "number_products",
                    "match_type": "大于",
                    "condition": "5000"
                }
            ],
            "table_name": "shop",
            "id": "119"
        }
    },
    {
        "question": "What are the manager name and district of the shop located in Helsinki that sells the largest number of products?",
        "SQL": "SELECT manager_name, district FROM shop WHERE location = 'Helsinki' ORDER BY number_products DESC LIMIT 1",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "manager_name"
                },
                {
                    "column": "district"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "location",
                    "match_type": "精确匹配",
                    "condition": "Helsinki"
                }
            ],
            "table_name": "shop",
            "id": "120"
        }
    },
    {
        "question": "find the minimum and maximum number of products of all stores located in Helsinki.",
        "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop WHERE Location = 'Helsinki'",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Number_products",
                    "aggregate_function": "min"
                },
                {
                    "column": "Number_products",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "Location",
                    "match_type": "精确匹配",
                    "condition": "Helsinki"
                }
            ],
            "table_name": "shop",
            "id": "121"
        }
    },
    {
        "question": "What are the minimum and maximum number of products for shops located in Helsinki or Turku?",
        "SQL": "SELECT min(Number_products), max(Number_products) FROM shop WHERE Location IN ('Helsinki', 'Turku')",
        "db_id": "employee_hire_evaluation",
        "table_description": "Table containing information about shops including their location and number of products.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Number_products",
                    "aggregate_function": "min"
                },
                {
                    "column": "Number_products",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "Location",
                    "match_type": "in",
                    "condition": "['Helsinki', 'Turku']"
                }
            ],
            "table_name": "shop",
            "id": "122"
        }
    },
    {
        "question": "Return the name, location and district of all shops with more than 5000 products in descending order of number of products.",
        "SQL": "SELECT name ,  LOCATION ,  district FROM shop WHERE number_products > 5000 ORDER BY number_products DESC",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "LOCATION"
                },
                {
                    "column": "district"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "number_products",
                    "match_type": "大于",
                    "condition": "5000"
                }
            ],
            "table_name": "shop",
            "id": "123"
        }
    },
    {
        "question": "Sort all the shops located in Helsinki or Espoo by number of products in descending order, and return the name, location, and district of each shop.",
        "SQL": "SELECT name, location, district FROM shop WHERE location IN ('Helsinki', 'Espoo') ORDER BY number_products DESC",
        "db_id": "employee_hire_evaluation",
        "table_description": "Table containing information about shops including their ID, name, location, district, number of products, and manager name.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "location"
                },
                {
                    "column": "district"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "location",
                    "match_type": "精确匹配",
                    "condition": "Helsinki, Espoo"
                }
            ],
            "table_name": "shop",
            "id": "124"
        }
    },
    {
        "question": "Find the names of stores whose number of products is greater than 8000.",
        "SQL": "SELECT name FROM shop WHERE number_products  >  8000",
        "db_id": "employee_hire_evaluation",
        "table_description": "This table contains information about shops, including their name, location, district, number of products, and manager's name.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "number_products",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "number_products",
                    "match_type": "大于",
                    "condition": "8000"
                }
            ],
            "table_name": "shop",
            "id": "125"
        }
    },
    {
        "question": "Which shops located in Helsinki have a number of products above the average? Give me the shop names.",
        "SQL": "SELECT name FROM shop WHERE location = 'Helsinki' AND number_products > (SELECT avg(number_products) FROM shop)",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "number_products",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "number_products",
                    "aggregate_function": "NONE"
                }
            ],
            "filter": [
                {
                    "column": "location",
                    "match_type": "精确匹配",
                    "condition": "Helsinki"
                },
                {
                    "column": "number_products",
                    "match_type": "大于",
                    "condition": "(SELECT avg(number_products) FROM shop)"
                }
            ],
            "table_name": "shop",
            "id": "126"
        }
    },
    {
        "question": "What is the total bonus given in evaluations for the year 2016?",
        "SQL": "SELECT sum(bonus) FROM evaluation WHERE Year_awarded = 2016",
        "db_id": "employee_hire_evaluation",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "bonus",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Year_awarded",
                    "match_type": "等于",
                    "condition": "2016"
                }
            ],
            "table_name": "evaluation",
            "id": "127"
        }
    },
    {
        "question": "Find the total amount of bonus given in all the evaluations for the year 2016.",
        "SQL": "SELECT sum(bonus) FROM evaluation WHERE Year_awarded = 2016",
        "db_id": "employee_hire_evaluation",
        "table_description": "Table containing employee evaluations with their respective bonus amounts and the year they were awarded.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "bonus",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Year_awarded",
                    "match_type": "等于",
                    "condition": "2016"
                }
            ],
            "table_name": "evaluation",
            "id": "128"
        }
    },
    {
        "question": "Give me all the information about hiring where the employee is full-time.",
        "SQL": "SELECT * FROM hiring WHERE Is_full_time = 'T'",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "Is_full_time",
                    "match_type": "精确匹配",
                    "condition": "T"
                }
            ],
            "table_name": "hiring",
            "id": "129"
        }
    },
    {
        "question": "What is all the information about full-time hiring?",
        "SQL": "SELECT * FROM hiring WHERE Is_full_time = 'T'",
        "db_id": "employee_hire_evaluation",
        "table_description": "Table containing information about employee hiring, including shop ID, employee ID, start year, and full-time status.",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "Is_full_time",
                    "match_type": "精确匹配",
                    "condition": "T"
                }
            ],
            "table_name": "hiring",
            "id": "130"
        }
    },
    {
        "question": "Which district has both stores with less than 3516 products and stores with more than 10770 products?",
        "SQL": "SELECT district FROM shop WHERE Number_products  <  3516 INTERSECT SELECT district FROM shop WHERE Number_products  >  10770",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [
                {
                    "column": "district"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Number_products",
                    "match_type": "小于",
                    "condition": "3516"
                },
                {
                    "column": "Number_products",
                    "match_type": "大于",
                    "condition": "10770"
                }
            ]
        },
        "table_name": "shop",
        "id": "131"
    },
    {
        "question": "Find the districts in which there are both shops selling fewer than 5000 products and shops selling more than 8000 products.",
        "SQL": "SELECT district FROM shop WHERE Number_products  <  5000 INTERSECT SELECT district FROM shop WHERE Number_products  >  8000",
        "db_id": "employee_hire_evaluation",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "district"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Number_products",
                    "match_type": "小于",
                    "condition": "5000"
                },
                {
                    "column": "Number_products",
                    "match_type": "大于",
                    "condition": "8000"
                }
            ],
            "table_name": "shop",
            "id": "132"
        }
    },
    {
        "question": "How many different store locations are there in Helsinki or Turku?",
        "SQL": "SELECT count(DISTINCT LOCATION) FROM shop WHERE Location IN ('Helsinki', 'Turku')",
        "db_id": "employee_hire_evaluation",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LOCATION",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "Location",
                    "match_type": "精确匹配",
                    "condition": "Helsinki,Turku"
                }
            ],
            "table_name": "shop",
            "id": "133"
        }
    },
    {
        "question": "Count the number of distinct store locations in Espoo.",
        "SQL": "SELECT count(DISTINCT LOCATION) FROM shop WHERE District = 'Espoo'",
        "db_id": "employee_hire_evaluation",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "LOCATION",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "District",
                    "match_type": "精确匹配",
                    "condition": "Espoo"
                }
            ],
            "table_name": "shop",
            "id": "134"
        }
    },
    {
        "question": "How many documents are related to the template with ID 7?",
        "SQL": "SELECT count(*) FROM Documents WHERE Template_ID = 7",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Template_ID",
                    "match_type": "等于",
                    "condition": "7"
                }
            ],
            "table_name": "Documents",
            "id": "135"
        }
    },
    {
        "question": "Count the number of documents with a template ID of 25.",
        "SQL": "SELECT count(*) FROM Documents WHERE Template_ID = 25",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Template_ID",
                    "match_type": "等于",
                    "condition": "25"
                }
            ],
            "table_name": "Documents",
            "id": "136"
        }
    },
    {
        "question": "What are the ids, names, and descriptions for all documents with Template ID 25?",
        "SQL": "SELECT document_id ,  document_name ,  document_description FROM Documents WHERE template_id = 25",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                },
                {
                    "column": "document_name"
                },
                {
                    "column": "document_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_id",
                    "match_type": "等于",
                    "condition": "25"
                }
            ],
            "table_name": "Documents",
            "id": "137"
        }
    },
    {
        "question": "What is the document name and template id for documents with 'u' in the other details?",
        "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Other_Details LIKE \"%u%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Documents table contains information about various documents including their names, template IDs, descriptions, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "document_name"
                },
                {
                    "column": "template_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Other_Details",
                    "match_type": "模糊匹配",
                    "condition": "%u%"
                }
            ]
        },
        "table_name": "Documents",
        "id": "138"
    },
    {
        "question": "Return the names and template ids for documents that have a template id of 25.",
        "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Template_ID = 25",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "document_name"
                },
                {
                    "column": "template_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Template_ID",
                    "match_type": "等于",
                    "condition": "25"
                }
            ],
            "table_name": "Documents",
            "id": "139"
        }
    },
    {
        "question": "What is the document id, template id and description for documents related to 'CV'?",
        "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name LIKE \"%CV%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Documents table contains information about various documents including their IDs, template IDs, names, descriptions, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                },
                {
                    "column": "template_id"
                },
                {
                    "column": "Document_Description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "document_name",
                    "match_type": "模糊匹配",
                    "condition": "%CV%"
                }
            ],
            "table_name": "Documents",
            "id": "140"
        }
    },
    {
        "question": "Return the document id, template id, and description for the document with the name Understanding DB.",
        "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Understanding DB'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Documents",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                },
                {
                    "column": "template_id"
                },
                {
                    "column": "Document_Description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "document_name",
                    "match_type": "精确匹配",
                    "condition": "Understanding DB"
                }
            ]
        },
        "table_name": "Documents",
        "id": "141"
    },
    {
        "question": "How many different templates are used by documents with a description of 'y'?",
        "SQL": "SELECT count(DISTINCT template_id) FROM Documents WHERE Document_Description = 'y'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Documents table contains information about different documents and their associated templates.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "template_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "Document_Description",
                    "match_type": "精确匹配",
                    "condition": "y"
                }
            ],
            "table_name": "Documents",
            "id": "142"
        }
    },
    {
        "question": "Count the number of different templates used for documents with the document description 'y'.",
        "SQL": "SELECT count(DISTINCT template_id) FROM Documents WHERE Document_Description = 'y'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Documents table contains information about various documents including their IDs, template IDs, names, descriptions, and other details.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "template_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "Document_Description",
                    "match_type": "精确匹配",
                    "condition": "y"
                }
            ],
            "table_name": "Documents",
            "id": "143"
        }
    },
    {
        "question": "Show all template ids and number of documents using each template where the document description is 'y'.",
        "SQL": "SELECT template_id ,  count(*) FROM Documents WHERE Document_Description = 'y' GROUP BY template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "The Documents table contains information about various documents including their IDs, template IDs, names, descriptions, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Document_Description",
                    "match_type": "精确匹配",
                    "condition": "y"
                }
            ],
            "table_name": "Documents",
            "id": "144"
        }
    },
    {
        "question": "What are all different template ids used for documents with a document description of 'y', and how many times were each of them used?",
        "SQL": "SELECT template_id ,  count(*) FROM Documents WHERE Document_Description = 'y' GROUP BY template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Documents table contains information about various documents including their IDs, template IDs, names, descriptions, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "Document_Description",
                    "match_type": "精确匹配",
                    "condition": "y"
                }
            ],
            "table_name": "Documents",
            "id": "145"
        }
    },
    {
        "question": "Show ids for all templates that have at least two documents with a 'y' in the Document_Description field.",
        "SQL": "SELECT template_id FROM Documents WHERE Document_Description = 'y' GROUP BY template_id HAVING count(*) >= 2",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Documents table contains information about various documents including their template IDs and descriptions.",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Document_Description",
                    "match_type": "等于",
                    "condition": "y"
                },
                {
                    "column": "COUNT(*)",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ],
            "table_name": "Documents",
            "id": "146"
        }
    },
    {
        "question": "What are the template ids of any templates used in more than two documents?",
        "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  2",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于",
                    "condition": "2"
                }
            ]
        },
        "table_name": "Documents",
        "id": "147"
    },
    {
        "question": "How many templates of type 'PPT' do we have?",
        "SQL": "SELECT count(*) FROM Templates WHERE Template_Type_Code = 'PPT'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Template_Type_Code",
                    "match_type": "精确匹配",
                    "condition": "PPT"
                }
            ],
            "table_name": "Templates",
            "id": "148"
        }
    },
    {
        "question": "Count the number of templates that are effective after 2000-01-01.",
        "SQL": "SELECT count(*) FROM Templates WHERE Date_Effective_From > '2000-01-01'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "大于",
                    "condition": "2000-01-01"
                }
            ],
            "table_name": "Templates",
            "id": "149"
        }
    },
    {
        "question": "Show template ids, version numbers, and template type codes for templates effective from 1990-01-01 to 2000-12-31.",
        "SQL": "SELECT template_id ,  version_number ,  template_type_code FROM Templates WHERE Date_Effective_From BETWEEN '1990-01-01' AND '2000-12-31'",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                },
                {
                    "column": "version_number"
                },
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "绝对时间",
                    "condition": [
                        "1990-01-01",
                        "2000-12-31"
                    ]
                }
            ]
        },
        "table_name": "Templates",
        "id": "150"
    },
    {
        "question": "Show all distinct template type codes for templates effective from 1990-01-01 to 2000-01-01.",
        "SQL": "SELECT DISTINCT template_type_code FROM Templates WHERE Date_Effective_From BETWEEN '1990-01-01' AND '2000-01-01'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Templates table contains information about different document templates including their type codes and effective dates.",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "绝对时间",
                    "condition": [
                        "1990-01-01",
                        "2000-01-01"
                    ]
                }
            ],
            "table_name": "Templates",
            "id": "151"
        }
    },
    {
        "question": "What are the different template type codes that have been effective since 2000?",
        "SQL": "SELECT DISTINCT template_type_code FROM Templates WHERE Date_Effective_From >= '2000-01-01'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Templates table contains information about document templates including their type, version, and effective dates.",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "绝对时间",
                    "condition": "['2000-01-01', null]"
                }
            ],
            "table_name": "Templates",
            "id": "152"
        }
    },
    {
        "question": "Return the ids of templates that have the type code PP or are effective from 1975-05-20 to 1992-05-02.",
        "SQL": "SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR (Date_Effective_From >= '1975-05-20' AND Date_Effective_From <= '1992-05-02')",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_code",
                    "match_type": "精确匹配",
                    "condition": "PP"
                },
                {
                    "column": "Date_Effective_From",
                    "match_type": "在区间",
                    "condition": [
                        "1975-05-20",
                        "1992-05-02"
                    ]
                }
            ]
        },
        "table_name": "Templates",
        "id": "153"
    },
    {
        "question": "How many templates are effective on or after 2005-11-12?",
        "SQL": "SELECT count(*) FROM Templates WHERE Date_Effective_From >= '2005-11-12'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "大于等于",
                    "condition": "2005-11-12"
                }
            ],
            "table_name": "Templates",
            "id": "154"
        }
    },
    {
        "question": "Count the number of templates that are effective on or after 2005-11-12.",
        "SQL": "SELECT count(*) FROM Templates WHERE Date_Effective_From >= '2005-11-12'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "大于等于",
                    "condition": "2005-11-12"
                }
            ],
            "table_name": "Templates",
            "id": "155"
        }
    },
    {
        "question": "What is the version number and template type code for the template with an effective date of '2010-09-24' or later?",
        "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE Date_Effective_From  >=  '2010-09-24'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Templates table contains information about document templates including their version numbers, type codes, and effective dates.",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "version_number",
                    "aggregate_function": "None"
                }
            ],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "大于等于",
                    "condition": "2010-09-24"
                }
            ],
            "table_name": "Templates",
            "id": "156"
        }
    },
    {
        "question": "Return the version numbers and template type codes of templates with a template type code of 'BK'.",
        "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE template_type_code  =  'BK'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "version_number",
                    "aggregate_function": "NONE"
                }
            ],
            "filter": [
                {
                    "column": "template_type_code",
                    "match_type": "精确匹配",
                    "condition": "BK"
                }
            ],
            "table_name": "Templates",
            "id": "157"
        }
    },
    {
        "question": "Show all template type codes and the number of templates for each, but only for templates that are effective from 2005 to 2010.",
        "SQL": "SELECT template_type_code ,  count(*) FROM Templates WHERE Date_Effective_From BETWEEN '2005-01-01' AND '2010-12-31' GROUP BY template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Templates table contains information about different document templates including their type codes and effective dates.",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "绝对时间",
                    "condition": [
                        "2005-01-01",
                        "2010-12-31"
                    ]
                }
            ],
            "table_name": "Templates",
            "id": "158"
        }
    },
    {
        "question": "What are the different template type codes, and how many templates correspond to each for templates effective from 2005-01-01 to 2010-12-31?",
        "SQL": "SELECT template_type_code ,  count(*) FROM Templates WHERE Date_Effective_From BETWEEN '2005-01-01' AND '2010-12-31' GROUP BY template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "absolute_time",
                    "condition": [
                        "2005-01-01",
                        "2010-12-31"
                    ]
                }
            ],
            "table_name": "Templates",
            "id": "159"
        }
    },
    {
        "question": "What is the template type code that has the most templates created after 2000?",
        "SQL": "SELECT template_type_code FROM Templates WHERE Date_Effective_From > '2000-01-01' GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Table containing details about document templates.",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "大于",
                    "condition": "2000-01-01"
                }
            ],
            "table_name": "Templates",
            "id": "160"
        }
    },
    {
        "question": "Return the type code of the template type that the most templates belong to, where the template details are not empty.",
        "SQL": "SELECT template_type_code FROM Templates WHERE Template_Details != '' GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "Template_Details",
                    "match_type": "不为空",
                    "condition": ""
                }
            ],
            "table_name": "Templates",
            "id": "161"
        }
    },
    {
        "question": "Show all template type codes with more than two templates.",
        "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  >  2",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "*",
                    "match_type": "大于",
                    "condition": "2"
                }
            ],
            "table_name": "Templates",
            "id": "162"
        }
    },
    {
        "question": "What are the codes of template types that have fewer than 3 templates created after 2000?",
        "SQL": "SELECT template_type_code FROM Templates WHERE Date_Effective_From > '2000-01-01' GROUP BY template_type_code HAVING COUNT(*) < 3",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "大于",
                    "condition": "2000-01-01"
                },
                {
                    "column": "COUNT(*)",
                    "match_type": "小于",
                    "condition": "3"
                }
            ],
            "table_name": "Templates",
            "id": "163"
        }
    },
    {
        "question": "What is the smallest version number for the template type code 'BK'?",
        "SQL": "SELECT min(Version_Number) FROM Templates WHERE Template_Type_Code = 'BK'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Table containing information about document templates.",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "Version_Number",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "Template_Type_Code",
                    "match_type": "精确匹配",
                    "condition": "BK"
                }
            ],
            "table_name": "Templates",
            "id": "164"
        }
    },
    {
        "question": "Return the lowest version number of templates effective before 2000, along with its corresponding template type code.",
        "SQL": "SELECT min(Version_Number), template_type_code FROM Templates WHERE Date_Effective_From < '2000-01-01' GROUP BY template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Table containing document templates with their version numbers, type codes, and effective dates.",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [
                {
                    "column": "Version_Number",
                    "aggregate_function": "min"
                }
            ],
            "filter": [
                {
                    "column": "Date_Effective_From",
                    "match_type": "绝对时间",
                    "condition": [
                        "",
                        "2000-01-01"
                    ]
                }
            ],
            "table_name": "Templates",
            "id": "165"
        }
    },
    {
        "question": "Show all template type codes and descriptions that are related to 'Presentation'.",
        "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types WHERE template_type_description LIKE '%Presentation%'",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                },
                {
                    "column": "template_type_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_description",
                    "match_type": "模糊匹配",
                    "condition": "Presentation"
                }
            ],
            "table_name": "Ref_template_types",
            "id": "166"
        }
    },
    {
        "question": "What are the type codes and descriptions for all template types related to 'Presentation'?",
        "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types WHERE template_type_description LIKE '%Presentation%'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Reference table for document template types",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                },
                {
                    "column": "template_type_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_description",
                    "match_type": "模糊匹配",
                    "condition": "%Presentation%"
                }
            ],
            "table_name": "Ref_template_types",
            "id": "167"
        }
    },
    {
        "question": "What is the template type description for template type code \"CV\".",
        "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_code",
                    "match_type": "精确匹配",
                    "condition": "CV"
                }
            ]
        },
        "table_name": "Ref_template_types",
        "id": "168"
    },
    {
        "question": "Return the template type description of the template type with the code CV.",
        "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"CV\"",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Reference table for document template types",
        "config": {
            "dimension": [
                {
                    "column": "template_type_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_code",
                    "match_type": "精确匹配",
                    "condition": "CV"
                }
            ]
        },
        "table_name": "Ref_template_types",
        "id": "169"
    },
    {
        "question": "What is the template type code for template type description containing the word \"Presentation\"?",
        "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description LIKE '%Presentation%'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Ref_template_types table contains template types with their codes and descriptions.",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_description",
                    "match_type": "模糊匹配",
                    "condition": "Presentation"
                }
            ]
        },
        "table_name": "Ref_template_types",
        "id": "170"
    },
    {
        "question": "Return the type code of the template type with the description similar to \"Presentation\".",
        "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  LIKE  \"%Presentation%\"",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "template_type_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "template_type_description",
                    "match_type": "模糊匹配",
                    "condition": "%Presentation%"
                }
            ]
        },
        "table_name": "Ref_template_types",
        "id": "171"
    },
    {
        "question": "How many paragraphs are there for Document ID 3?",
        "SQL": "SELECT count(*) FROM Paragraphs WHERE Document_ID = 3",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Document_ID",
                    "match_type": "等于",
                    "condition": "3"
                }
            ],
            "table_name": "Paragraphs",
            "id": "172"
        }
    },
    {
        "question": "Count the number of paragraphs with Document ID 3.",
        "SQL": "SELECT count(*) FROM Paragraphs WHERE Document_ID = 3",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Document_ID",
                    "match_type": "等于",
                    "condition": "3"
                }
            ],
            "table_name": "Paragraphs",
            "id": "173"
        }
    },
    {
        "question": "What are the details for the paragraph that mentions 'Palestinian Territory'?",
        "SQL": "select other_details from paragraphs where paragraph_text like '%Palestinian Territory%'",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "other_details"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "paragraph_text",
                    "match_type": "模糊匹配",
                    "condition": "Palestinian Territory"
                }
            ],
            "table_name": "paragraphs",
            "id": "174"
        }
    },
    {
        "question": "Show all document ids with more than 1 paragraph and the number of paragraphs in each document. Order by document id.",
        "SQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id HAVING count(*) > 1 ORDER BY document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Table containing paragraphs of documents with their IDs and text content.",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "document_id",
                    "match_type": "大于",
                    "condition": "1"
                }
            ],
            "table_name": "Paragraphs",
            "id": "175"
        }
    },
    {
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, where the document ID is greater than 5000, ordered by id.",
        "SQL": "SELECT document_id ,  count(*) FROM Paragraphs WHERE document_id > 5000 GROUP BY document_id ORDER BY document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "document_id",
                    "match_type": "大于",
                    "condition": "5000"
                }
            ],
            "table_name": "Paragraphs",
            "id": "176"
        }
    },
    {
        "question": "List all document ids with at least one paragraph related to the UK.",
        "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text LIKE '%UK%' GROUP BY document_id HAVING count(*)  >=  1",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Table containing paragraphs of documents with their details.",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "Paragraph_Text",
                    "match_type": "模糊匹配",
                    "condition": "UK"
                },
                {
                    "column": "count(*)",
                    "match_type": "大于等于",
                    "condition": "1"
                }
            ],
            "table_name": "Paragraphs",
            "id": "177"
        }
    },
    {
        "question": "What are the ids of documents that contain the word 'UK' in any paragraph?",
        "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text LIKE '%UK%' GROUP BY document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Paragraph_Text",
                    "match_type": "模糊匹配",
                    "condition": "UK"
                }
            ],
            "table_name": "Paragraphs",
            "id": "178"
        }
    },
    {
        "question": "What is the document id with the least number of paragraphs that contain the word 'Somalia'?",
        "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text LIKE '%Somalia%' GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "Paragraph_Text",
                    "match_type": "模糊匹配",
                    "condition": "Somalia"
                }
            ],
            "table_name": "Paragraphs",
            "id": "179"
        }
    },
    {
        "question": "Return the id of the document that contains the paragraph 'UK'.",
        "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text = 'UK' LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Table containing paragraphs of different documents.",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Paragraph_Text",
                    "match_type": "精确匹配",
                    "condition": "UK"
                }
            ],
            "table_name": "Paragraphs",
            "id": "180"
        }
    },
    {
        "question": "What is the document id with 1 to 2 paragraphs that contain the word 'Korea'?",
        "SQL": "SELECT document_id FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%' GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "Paragraph_Text",
                    "match_type": "模糊匹配",
                    "condition": "Korea"
                },
                {
                    "column": "count(*)",
                    "match_type": "在区间",
                    "condition": [
                        1,
                        2
                    ]
                }
            ],
            "table_name": "Paragraphs",
            "id": "181"
        }
    },
    {
        "question": "Give the ids of documents that have more than two paragraphs.",
        "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) > 2",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Table containing paragraphs of documents with their respective document IDs.",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于",
                    "condition": 2
                }
            ],
            "table_name": "Paragraphs",
            "id": "182"
        }
    },
    {
        "question": "Show the document id with paragraph text containing 'Korea' and 'UK'.",
        "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Korea%' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%UK%'",
        "db_id": "cre_Doc_Template_Mgt",
        "table_description": "Table containing paragraphs of documents with their respective document IDs.",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "paragraph_text",
                    "match_type": "模糊匹配",
                    "condition": "Korea"
                },
                {
                    "column": "paragraph_text",
                    "match_type": "精确匹配",
                    "condition": "Ireland"
                }
            ],
            "table_name": "Paragraphs",
            "id": "183"
        }
    },
    {
        "question": "What are the ids of documents that contain the paragraph text related to 'Korea' and 'Ireland'?",
        "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Korea%' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text LIKE '%Ireland%'",
        "db_id": "cre_Doc_Template_Mgt",
        "config": {
            "dimension": [
                {
                    "column": "document_id"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "paragraph_text",
                    "match_type": "模糊匹配",
                    "condition": "Korea"
                },
                {
                    "column": "paragraph_text",
                    "match_type": "精确匹配",
                    "condition": "Ireland"
                }
            ]
        },
        "table_name": "Paragraphs",
        "id": "184"
    },
    {
        "question": "How many teachers are there who are from Bolton County Borough?",
        "SQL": "SELECT count(*) FROM teacher WHERE Hometown = 'Bolton County Borough'",
        "db_id": "course_teach",
        "table_description": "The teacher table contains information about the teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Hometown",
                    "match_type": "exact_match",
                    "condition": "Bolton County Borough"
                }
            ],
            "table_name": "teacher",
            "id": "185"
        }
    },
    {
        "question": "What is the total count of teachers who are older than 30?",
        "SQL": "SELECT count(*) FROM teacher WHERE Age > 30",
        "db_id": "course_teach",
        "table_description": "Table containing information about teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "大于",
                    "condition": "30"
                }
            ],
            "table_name": "teacher",
            "id": "186"
        }
    },
    {
        "question": "List the names of teachers from Kearsley Urban District in ascending order of age.",
        "SQL": "SELECT Name FROM teacher WHERE Hometown = 'Kearsley Urban District' ORDER BY Age ASC",
        "db_id": "course_teach",
        "table_description": "Table containing information about teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Hometown",
                    "match_type": "精确匹配",
                    "condition": "Kearsley Urban District"
                }
            ],
            "table_name": "teacher",
            "id": "187"
        }
    },
    {
        "question": "What are the names of the teachers from Kearsley Urban District ordered by ascending age?",
        "SQL": "SELECT Name FROM teacher WHERE Hometown = 'Kearsley Urban District' ORDER BY Age ASC",
        "db_id": "course_teach",
        "table_description": "The teacher table contains information about teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Hometown",
                    "match_type": "精确匹配",
                    "condition": "Kearsley Urban District"
                }
            ],
            "table_name": "teacher",
            "id": "188"
        }
    },
    {
        "question": "What are the age and hometown of teachers from Kearsley Urban District?",
        "SQL": "SELECT Age ,  Hometown FROM teacher WHERE Hometown = 'Kearsley Urban District'",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Age"
                },
                {
                    "column": "Hometown"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Hometown",
                    "match_type": "精确匹配",
                    "condition": "Kearsley Urban District"
                }
            ],
            "table_name": "teacher",
            "id": "189"
        }
    },
    {
        "question": "What is the age and hometown of every teacher who is older than 30?",
        "SQL": "SELECT Age ,  Hometown FROM teacher WHERE Age > 30",
        "db_id": "course_teach",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "Age"
                },
                {
                    "column": "Hometown"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "大于",
                    "condition": "30"
                }
            ],
            "table_name": "teacher",
            "id": "190"
        }
    },
    {
        "question": "List the name of teachers whose age is not 32.",
        "SQL": "select name from teacher where age != 32",
        "db_id": "course_teach",
        "table_description": "The teacher table contains information about teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "不等于",
                    "condition": "32"
                }
            ],
            "table_name": "teacher",
            "id": "191"
        }
    },
    {
        "question": "What are the names of the teachers whose age is greater than 30?",
        "SQL": "select name from teacher where age > 30",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "age",
                    "match_type": "大于",
                    "condition": "30"
                }
            ]
        },
        "table_name": "teacher",
        "id": "192"
    },
    {
        "question": "Show the name of teachers from Blackrod Urban District or Horwich Urban District?",
        "SQL": "SELECT Name FROM teacher WHERE Hometown  =  'Blackrod Urban District' OR Hometown  =  'Horwich Urban District'",
        "db_id": "course_teach",
        "table_description": "Table contains information about teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Hometown",
                    "match_type": "等于",
                    "condition": "Blackrod Urban District"
                },
                {
                    "column": "Hometown",
                    "match_type": "等于",
                    "condition": "Horwich Urban District"
                }
            ],
            "table_name": "teacher",
            "id": "193"
        }
    },
    {
        "question": "What are the names of the teachers who are aged either 29 or 33?",
        "SQL": "SELECT Name FROM teacher WHERE Age  =  29 OR Age  =  33",
        "db_id": "course_teach",
        "table_description": "This table contains information about teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "等于",
                    "condition": "29"
                },
                {
                    "column": "Age",
                    "match_type": "等于",
                    "condition": "33"
                }
            ],
            "table_name": "teacher",
            "id": "194"
        }
    },
    {
        "question": "What is the hometown of the oldest teacher?",
        "SQL": "SELECT Hometown FROM teacher ORDER BY Age DESC LIMIT 1",
        "db_id": "course_teach",
        "table_description": "Table containing information about teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "最大值",
                    "condition": ""
                }
            ],
            "table_name": "teacher",
            "id": "195"
        }
    },
    {
        "question": "Where is the teacher who is 26 years old from?",
        "SQL": "SELECT Hometown FROM teacher WHERE Age = 26",
        "db_id": "course_teach",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "等于",
                    "condition": "26"
                }
            ],
            "table_name": "teacher",
            "id": "196"
        }
    },
    {
        "question": "Show different hometowns of teachers and the number of teachers from each hometown, excluding those from Kearsley Urban District.",
        "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher WHERE Hometown != 'Kearsley Urban District' GROUP BY Hometown",
        "db_id": "course_teach",
        "table_description": "Table containing information about teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Hometown",
                    "match_type": "不等于",
                    "condition": "Kearsley Urban District"
                }
            ],
            "table_name": "teacher",
            "id": "197"
        }
    },
    {
        "question": "For each hometown, how many teachers who are older than 30 are there?",
        "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher WHERE Age > 30 GROUP BY Hometown",
        "db_id": "course_teach",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "大于",
                    "condition": "30"
                }
            ],
            "table_name": "teacher",
            "id": "198"
        }
    },
    {
        "question": "List the most common hometown of teachers who are older than 30.",
        "SQL": "SELECT Hometown FROM teacher WHERE Age > 30 GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "course_teach",
        "table_description": "Table 'teacher' contains information about teachers including their ID, name, age, and hometown.",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "大于",
                    "condition": "30"
                }
            ],
            "table_name": "teacher",
            "id": "199"
        }
    },
    {
        "question": "What is the most common hometown for teachers who are younger than 35?",
        "SQL": "SELECT Hometown FROM teacher WHERE Age < 35 GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "小于",
                    "condition": "35"
                }
            ],
            "table_name": "teacher",
            "id": "200"
        }
    },
    {
        "question": "Show the hometowns shared by at least three teachers.",
        "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  3",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "COUNT(*)",
                    "match_type": "大于等于",
                    "condition": "3"
                }
            ]
        },
        "table_name": "teacher",
        "id": "201"
    },
    {
        "question": "What are the towns from which at least two teachers younger than 30 come from?",
        "SQL": "SELECT Hometown FROM teacher WHERE Age < 30 GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "db_id": "course_teach",
        "config": {
            "dimension": [
                {
                    "column": "Hometown"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "小于",
                    "condition": "30"
                },
                {
                    "column": "*",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ],
            "table_name": "teacher",
            "id": "202"
        }
    },
    {
        "question": "How many visitors with a membership level of 5 or higher are there?",
        "SQL": "SELECT count(*) FROM visitor WHERE Level_of_membership >= 5",
        "db_id": "museum_visit",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Level_of_membership",
                    "match_type": "大于等于",
                    "condition": "5"
                }
            ],
            "table_name": "visitor",
            "id": "203"
        }
    },
    {
        "question": "Find the names of the visitors whose age is greater than 30, and order the results by the level from high to low.",
        "SQL": "SELECT name FROM visitor WHERE Age  >  30 ORDER BY Level_of_membership DESC",
        "db_id": "museum_visit",
        "table_description": "The visitor table contains information about museum visitors including their ID, name, membership level, and age.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "大于",
                    "condition": "30"
                }
            ],
            "table_name": "visitor",
            "id": "204"
        }
    },
    {
        "question": "What is the average age of the visitors whose membership level is not lower than 5?",
        "SQL": "SELECT avg(age) FROM visitor WHERE Level_of_membership  >=  5",
        "db_id": "museum_visit",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Level_of_membership",
                    "match_type": "大于等于",
                    "condition": "5"
                }
            ],
            "table_name": "visitor",
            "id": "205"
        }
    },
    {
        "question": "Find the name and membership level of the visitors whose age is less than 30, and sort by their age from old to young.",
        "SQL": "SELECT name ,  Level_of_membership FROM visitor WHERE Age  <  30 ORDER BY age DESC",
        "db_id": "museum_visit",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "Level_of_membership"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Age",
                    "match_type": "小于",
                    "condition": "30"
                }
            ]
        },
        "table_name": "visitor",
        "id": "206"
    },
    {
        "question": "Find the id and name of the museum that opened before 2010 and has the most staff members?",
        "SQL": "SELECT museum_id ,  name FROM museum WHERE open_year < 2010 ORDER BY num_of_staff DESC LIMIT 1",
        "db_id": "museum_visit",
        "config": {
            "dimension": [
                {
                    "column": "museum_id"
                },
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "num_of_staff",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "open_year",
                    "match_type": "小于",
                    "condition": "2010"
                }
            ],
            "table_name": "museum",
            "id": "207"
        }
    },
    {
        "question": "Find the average number of staff working for the museums that were opened in 2008.",
        "SQL": "SELECT avg(num_of_staff) FROM museum WHERE open_year = 2008",
        "db_id": "museum_visit",
        "table_description": "Table containing information about various museums including their ID, name, number of staff, and year they opened.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "num_of_staff",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "open_year",
                    "match_type": "等于",
                    "condition": "2008"
                }
            ],
            "table_name": "museum",
            "id": "208"
        }
    },
    {
        "question": "What are the opening year and staff number of the museum that has more than 20 staff members?",
        "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE Num_of_Staff  >  20",
        "db_id": "museum_visit",
        "config": {
            "dimension": [
                {
                    "column": "Open_Year"
                },
                {
                    "column": "Num_of_Staff"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Num_of_Staff",
                    "match_type": "大于",
                    "condition": "20"
                }
            ]
        },
        "table_name": "museum",
        "id": "209"
    },
    {
        "question": "find the names of museums which have more staff than the minimum staff number of all museums with an odd number of staff opened after 2010.",
        "SQL": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010 AND MOD(num_of_staff, 2) = 1)",
        "db_id": "museum_visit",
        "table_description": "A table containing information about different museums, including their ID, name, number of staff, and opening year.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [
                {
                    "column": "num_of_staff",
                    "aggregate_function": "NONE"
                },
                {
                    "column": "num_of_staff",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "open_year",
                    "match_type": "大于",
                    "condition": "2010"
                },
                {
                    "column": "num_of_staff",
                    "match_type": "大于",
                    "condition": "(SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010 AND MOD(num_of_staff, 2) = 1)"
                }
            ],
            "table_name": "museum",
            "id": "210"
        }
    },
    {
        "question": "What are the average and maximum number of tickets bought in all visits where the total spent is greater than 100?",
        "SQL": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit WHERE Total_spent > 100",
        "db_id": "museum_visit",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "num_of_ticket",
                    "aggregate_function": "avg"
                },
                {
                    "column": "num_of_ticket",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "Total_spent",
                    "match_type": "大于",
                    "condition": "100"
                }
            ],
            "table_name": "visit",
            "id": "211"
        }
    },
    {
        "question": "How many museums have more than 20 staff members or were opened before 2008?",
        "SQL": "SELECT count(*) FROM museum WHERE Num_of_Staff  >  20 OR open_year  <  2008",
        "db_id": "museum_visit",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Num_of_Staff",
                    "match_type": "大于",
                    "condition": "20"
                },
                {
                    "column": "open_year",
                    "match_type": "小于",
                    "condition": "2008"
                }
            ]
        },
        "table_name": "museum",
        "id": "212"
    },
    {
        "question": "Find the total number of right-handed players.",
        "SQL": "SELECT count(*) FROM players WHERE hand = 'R'",
        "db_id": "wta_1",
        "table_description": "The players table contains information about tennis players including their player ID, first name, last name, hand (left or right), birth date, and country code.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "R"
                }
            ],
            "table_name": "players",
            "id": "213"
        }
    },
    {
        "question": "How many right-handed players are there?",
        "SQL": "SELECT count(*) FROM players WHERE hand = 'R'",
        "db_id": "wta_1",
        "table_description": "The players table contains information about tennis players including their ID, first name, last name, playing hand, birth date, and country code.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "R"
                }
            ],
            "table_name": "players",
            "id": "214"
        }
    },
    {
        "question": "Find the total number of matches where the tournament level is 'W'.",
        "SQL": "SELECT count(*) FROM matches WHERE tourney_level = 'W'",
        "db_id": "wta_1",
        "table_description": "Table matches contains detailed information about tennis matches including players, scores, and tournament details.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "tourney_level",
                    "match_type": "精确匹配",
                    "condition": "W"
                }
            ],
            "table_name": "matches",
            "id": "215"
        }
    },
    {
        "question": "Count the number of matches where the winner is Serena Williams.",
        "SQL": "SELECT count(*) FROM matches WHERE winner_name = 'Serena Williams'",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "winner_name",
                    "match_type": "精确匹配",
                    "condition": "Serena Williams"
                }
            ],
            "table_name": "matches",
            "id": "216"
        }
    },
    {
        "question": "List the first name and birth date of all players from the country with code AUS.",
        "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'AUS'",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "birth_date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "country_code",
                    "match_type": "精确匹配",
                    "condition": "AUS"
                }
            ]
        },
        "table_name": "players",
        "id": "217"
    },
    {
        "question": "What are the first names and birth dates of players born after 1980 from the USA?",
        "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA' AND birth_date > '1980-01-01'",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "birth_date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "country_code",
                    "match_type": "精确匹配",
                    "condition": "USA"
                },
                {
                    "column": "birth_date",
                    "match_type": "大于",
                    "condition": "1980-01-01"
                }
            ]
        },
        "table_name": "players",
        "id": "218"
    },
    {
        "question": "Find the average age of losers and winners of all matches where the tournament level is 'W'.",
        "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches WHERE tourney_level = 'W'",
        "db_id": "wta_1",
        "table_description": "The matches table contains information about tennis matches, including details about the players, the tournament, and the match results.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "winner_age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "tourney_level",
                    "match_type": "等于",
                    "condition": "W"
                }
            ],
            "table_name": "matches",
            "id": "219"
        }
    },
    {
        "question": "What are the average ages of losers and winners across matches where the tournament level is 'W'?",
        "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches WHERE tourney_level = 'W'",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_age",
                    "aggregate_function": "AVG"
                },
                {
                    "column": "winner_age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "tourney_level",
                    "match_type": "等于",
                    "condition": "W"
                }
            ],
            "table_name": "matches",
            "id": "220"
        }
    },
    {
        "question": "Find the average rank of winners in all matches where the winner's age is greater than 30.",
        "SQL": "SELECT avg(winner_rank) FROM matches WHERE winner_age > 30",
        "db_id": "wta_1",
        "table_description": "Table 'matches' contains match details including player information, match results, and tournament details.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "winner_rank",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "winner_age",
                    "match_type": "大于",
                    "condition": "30"
                }
            ],
            "table_name": "matches",
            "id": "221"
        }
    },
    {
        "question": "What is the average rank for winners in matches where the tournament level is W?",
        "SQL": "SELECT avg(winner_rank) FROM matches WHERE tourney_level = 'W'",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "winner_rank",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "tourney_level",
                    "match_type": "精确匹配",
                    "condition": "W"
                }
            ],
            "table_name": "matches",
            "id": "222"
        }
    },
    {
        "question": "Find the highest rank of losers in all matches where the tournament level is W.",
        "SQL": "SELECT min(loser_rank) FROM matches WHERE tourney_level = 'W'",
        "db_id": "wta_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_rank",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "tourney_level",
                    "match_type": "精确匹配",
                    "condition": "W"
                }
            ],
            "table_name": "matches",
            "id": "223"
        }
    },
    {
        "question": "What is the best rank of losers across all matches in the WTA Championships tournament?",
        "SQL": "SELECT min(loser_rank) FROM matches WHERE tourney_name = 'WTA Championships'",
        "db_id": "wta_1",
        "table_description": "Table containing match details including players' ranks, scores, and tournament information.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_rank",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "WTA Championships"
                }
            ],
            "table_name": "matches",
            "id": "224"
        }
    },
    {
        "question": "find the number of distinct country codes of all right-handed players.",
        "SQL": "SELECT count(DISTINCT country_code) FROM players WHERE hand = 'R'",
        "db_id": "wta_1",
        "table_description": "players table contains player information including their unique ID, first name, last name, hand (L for left, R for right), birth date, and country code.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "country_code",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "R"
                }
            ],
            "table_name": "players",
            "id": "225"
        }
    },
    {
        "question": "How many distinct countries do right-handed players come from?",
        "SQL": "SELECT count(DISTINCT country_code) FROM players WHERE hand = 'R'",
        "db_id": "wta_1",
        "table_description": "The players table contains information about tennis players including their player ID, first name, last name, hand (left or right), birth date, and country code.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "country_code",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "R"
                }
            ],
            "table_name": "players",
            "id": "226"
        }
    },
    {
        "question": "Find the number of distinct name of losers with a loser rank less than 10.",
        "SQL": "SELECT count(DISTINCT loser_name) FROM matches WHERE loser_rank < 10",
        "db_id": "wta_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_name",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": [
                {
                    "column": "loser_rank",
                    "match_type": "less_than",
                    "condition": "10"
                }
            ],
            "table_name": "matches",
            "id": "227"
        }
    },
    {
        "question": "How many different loser names are there for matches where the winner is Serena Williams?",
        "SQL": "SELECT count(DISTINCT loser_name) FROM matches WHERE winner_name = 'Serena Williams'",
        "db_id": "wta_1",
        "table_description": "matches table contains information about tennis matches including the winner and loser details.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "loser_name",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": [
                {
                    "column": "winner_name",
                    "match_type": "精确匹配",
                    "condition": "Serena Williams"
                }
            ],
            "table_name": "matches",
            "id": "228"
        }
    },
    {
        "question": "Find the name of tourney that has more than 5 matches with Serena Williams as a participant.",
        "SQL": "SELECT tourney_name FROM matches WHERE winner_name = 'Serena Williams' OR loser_name = 'Serena Williams' GROUP BY tourney_name HAVING COUNT(*) > 5",
        "db_id": "wta_1",
        "table_description": "The matches table contains information about tennis matches including the tournament name, players, and match details.",
        "config": {
            "dimension": [
                {
                    "column": "tourney_name"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "winner_name",
                    "match_type": "等于",
                    "condition": "Serena Williams"
                },
                {
                    "column": "loser_name",
                    "match_type": "等于",
                    "condition": "Serena Williams"
                },
                {
                    "column": "COUNT(*)",
                    "match_type": "大于",
                    "condition": "5"
                }
            ],
            "table_name": "matches",
            "id": "229"
        }
    },
    {
        "question": "What are the names of tournaments that have more than 5 rounds?",
        "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(DISTINCT round) > 5",
        "db_id": "wta_1",
        "table_description": "The table 'matches' contains information about tennis matches, including the tournament name, date, and details about the players and the match.",
        "config": {
            "dimension": [
                {
                    "column": "tourney_name"
                }
            ],
            "measure": [
                {
                    "column": "round",
                    "aggregate_function": "COUNT(DISTINCT)"
                }
            ],
            "filter": [
                {
                    "column": "COUNT(DISTINCT round)",
                    "match_type": "大于",
                    "condition": "5"
                }
            ],
            "table_name": "matches",
            "id": "230"
        }
    },
    {
        "question": "List the names of all winners who played in the WTA Championships and in 2016.",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "db_id": "wta_1",
        "table_description": "Table 'matches' contains information about tennis matches including tournament details, player information, and match outcomes.",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "WTA Championships"
                },
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2016"
                }
            ],
            "table_name": "matches",
            "id": "231"
        }
    },
    {
        "question": "What are the names of players who won in 2013 and have a winner rank of 1?",
        "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 AND winner_rank  =  1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2013"
                },
                {
                    "column": "winner_rank",
                    "match_type": "等于",
                    "condition": "1"
                }
            ],
            "table_name": "matches",
            "id": "232"
        }
    },
    {
        "question": "List the number of all matches that took place on hard surfaces in years of 2013 or 2016.",
        "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016 AND surface  =  'Hard'",
        "db_id": "wta_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2013"
                },
                {
                    "column": "surface",
                    "match_type": "等于",
                    "condition": "Hard"
                }
            ]
        },
        "table_name": "matches",
        "id": "233"
    },
    {
        "question": "How many matches were played in the WTA Championships tournament in 2013 or 2016?",
        "SQL": "SELECT count(*) FROM matches WHERE YEAR IN (2013, 2016) AND tourney_name = 'WTA Championships'",
        "db_id": "wta_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "YEAR",
                    "match_type": "等于",
                    "condition": "2013"
                },
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "WTA Championships"
                }
            ],
            "table_name": "matches",
            "id": "234"
        }
    },
    {
        "question": "Find the first name and country code of the oldest player from Australia.",
        "SQL": "SELECT first_name ,  country_code FROM players WHERE country_code = 'AUS' ORDER BY birth_date LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "country_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "country_code",
                    "match_type": "精确匹配",
                    "condition": "AUS"
                }
            ],
            "table_name": "players",
            "id": "235"
        }
    },
    {
        "question": "What is the first name and country code of the player born on 1972-12-04?",
        "SQL": "SELECT first_name ,  country_code FROM players WHERE birth_date = '1972-12-04'",
        "db_id": "wta_1",
        "table_description": "players table contains information about players including their first name, last name, hand, birth date, and country code.",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "country_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "birth_date",
                    "match_type": "等于",
                    "condition": "1972-12-04"
                }
            ],
            "table_name": "players",
            "id": "236"
        }
    },
    {
        "question": "List the first and last name of all right-handed players in the order of birth date.",
        "SQL": "SELECT first_name ,  last_name FROM players WHERE hand = 'R' ORDER BY birth_date",
        "db_id": "wta_1",
        "table_description": "Table containing player information including their first name, last name, hand, birth date, and country code.",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "R"
                }
            ],
            "table_name": "players",
            "id": "237"
        }
    },
    {
        "question": "What are the full names of all right-handed players, sorted by birth date?",
        "SQL": "SELECT first_name ,  last_name FROM players WHERE hand = 'R' ORDER BY birth_date",
        "db_id": "wta_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "R"
                }
            ],
            "table_name": "players",
            "id": "238"
        }
    },
    {
        "question": "List the first and last name of all players who are from Switzerland in the order of birth date.",
        "SQL": "SELECT first_name ,  last_name FROM players WHERE country_code  =  'SUI' ORDER BY birth_date",
        "db_id": "wta_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                },
                {
                    "column": "birth_date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "country_code",
                    "match_type": "精确匹配",
                    "condition": "SUI"
                }
            ],
            "table_name": "players",
            "id": "239"
        }
    },
    {
        "question": "What are the full names of all right handed players, in order of birth date?",
        "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'R' ORDER BY birth_date",
        "db_id": "wta_1",
        "table_description": "The table contains player information including their first name, last name, hand, birth date, and country code.",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "R"
                }
            ],
            "table_name": "players",
            "id": "240"
        }
    },
    {
        "question": "Find the year that has the most number of matches in WTA Championships.",
        "SQL": "SELECT YEAR FROM matches WHERE tourney_name = 'WTA Championships' GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "WTA Championships"
                }
            ],
            "table_name": "matches",
            "id": "241"
        }
    },
    {
        "question": "Which year had the most matches with Serena Williams as the winner?",
        "SQL": "SELECT YEAR FROM matches WHERE winner_name = 'Serena Williams' GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "table_description": "The matches table contains detailed information about each tennis match played, including the year, tournament details, and player information for both the winner and the loser.",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "winner_name",
                    "match_type": "精确匹配",
                    "condition": "Serena Williams"
                }
            ],
            "table_name": "matches",
            "id": "242"
        }
    },
    {
        "question": "Find the name and rank points of the winner who won the most times in 2013.",
        "SQL": "SELECT winner_name ,  winner_rank_points FROM matches WHERE tourney_date BETWEEN '2013-01-01' AND '2013-12-31' GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "table_description": "This table contains information about tennis matches, including details such as the tournament date, winner's name, and rank points.",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                },
                {
                    "column": "winner_rank_points"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "tourney_date",
                    "match_type": "absolute_time",
                    "condition": [
                        "2013-01-01",
                        "2013-12-31"
                    ]
                }
            ],
            "table_name": "matches",
            "id": "243"
        }
    },
    {
        "question": "What is the name of the winner who has won the most matches in the WTA Championships, and how many rank points does this player have?",
        "SQL": "SELECT winner_name, winner_rank_points FROM matches WHERE tourney_name = 'WTA Championships' GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "table_description": "Table 'matches' contains match details including winner and loser information, tournament details, and match results.",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "winner_rank_points",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "WTA Championships"
                }
            ],
            "table_name": "matches",
            "id": "244"
        }
    },
    {
        "question": "Find the name of the winner who has the highest rank points and participated in the WTA Championships tourney.",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
        "db_id": "wta_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [
                {
                    "column": "winner_rank_points",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "WTA Championships"
                }
            ]
        },
        "table_name": "matches",
        "id": "245"
    },
    {
        "question": "What is the name of the winner with the most rank points who participated in the WTA Championships tournament?",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
        "db_id": "wta_1",
        "table_description": "This table contains match data for various tennis tournaments including the winner's name, rank points, and tournament details.",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                }
            ],
            "measure": [
                {
                    "column": "winner_rank_points",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "tourney_name",
                    "match_type": "精确匹配",
                    "condition": "WTA Championships"
                }
            ],
            "table_name": "matches",
            "id": "246"
        }
    },
    {
        "question": "find the names of loser and winner who played in the match that lasted more than 80 minutes.",
        "SQL": "SELECT winner_name ,  loser_name FROM matches WHERE minutes > 80",
        "db_id": "wta_1",
        "table_description": "matches",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                },
                {
                    "column": "loser_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "minutes",
                    "match_type": "大于",
                    "condition": "80"
                }
            ],
            "table_name": "matches",
            "id": "247"
        }
    },
    {
        "question": "What are the names of the winner and loser who played in the longest match in 2013?",
        "SQL": "SELECT winner_name, loser_name FROM matches WHERE tourney_date LIKE '2013%' ORDER BY minutes DESC LIMIT 1",
        "db_id": "wta_1",
        "table_description": "This table contains information about tennis matches, including the winner and loser names, match duration, tournament details, and more.",
        "config": {
            "dimension": [
                {
                    "column": "winner_name"
                },
                {
                    "column": "loser_name"
                }
            ],
            "measure": [
                {
                    "column": "minutes",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "tourney_date",
                    "match_type": "模糊匹配",
                    "condition": "2013%"
                }
            ],
            "table_name": "matches",
            "id": "248"
        }
    },
    {
        "question": "find the number of right-handed players for each country.",
        "SQL": "SELECT count(*) ,  country_code FROM players WHERE hand = 'R' GROUP BY country_code",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "R"
                }
            ],
            "table_name": "players",
            "id": "249"
        }
    },
    {
        "question": "How many right-handed players are from each country?",
        "SQL": "SELECT count(*), country_code FROM players WHERE hand = 'R' GROUP BY country_code",
        "db_id": "wta_1",
        "table_description": "players table contains player information including player ID, first name, last name, hand (dominant hand for playing), birth date, and country code.",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "hand",
                    "match_type": "精确匹配",
                    "condition": "R"
                }
            ],
            "table_name": "players",
            "id": "250"
        }
    },
    {
        "question": "find the code of the country where has the greatest number of players and is not the United States.",
        "SQL": "SELECT country_code FROM players WHERE country_code != 'USA' GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "country_code",
                    "match_type": "不等于",
                    "condition": "USA"
                }
            ]
        },
        "table_name": "players",
        "id": "251"
    },
    {
        "question": "What is the code of the country with more than 2 players?",
        "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 2",
        "db_id": "wta_1",
        "table_description": "The players table contains information about tennis players including their ID, first name, last name, hand, birth date, and country code.",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "country_code",
                    "match_type": "大于",
                    "condition": "2"
                }
            ],
            "table_name": "players",
            "id": "252"
        }
    },
    {
        "question": "What are the codes of countries with at least 30 players?",
        "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) >= 30",
        "db_id": "wta_1",
        "config": {
            "dimension": [
                {
                    "column": "country_code"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于等于",
                    "condition": "30"
                }
            ]
        },
        "table_name": "players",
        "id": "254"
    },
    {
        "question": "Find the total number of tours for each ranking date where the ranking is greater than 10.",
        "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings WHERE ranking > 10 GROUP BY ranking_date",
        "db_id": "wta_1",
        "table_description": "Table 'rankings' contains information about player rankings, including the ranking date, ranking position, player ID, ranking points, and number of tours.",
        "config": {
            "dimension": [
                {
                    "column": "ranking_date"
                }
            ],
            "measure": [
                {
                    "column": "tours",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "ranking",
                    "match_type": "大于",
                    "condition": "10"
                }
            ],
            "table_name": "rankings",
            "id": "255"
        }
    },
    {
        "question": "How many total tours were there for each ranking date after January 1, 2000?",
        "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings WHERE ranking_date > '2000-01-01' GROUP BY ranking_date",
        "db_id": "wta_1",
        "table_description": "Ranking information for players in the WTA.",
        "config": {
            "dimension": [
                {
                    "column": "ranking_date"
                }
            ],
            "measure": [
                {
                    "column": "tours",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "ranking_date",
                    "match_type": "大于",
                    "condition": "2000-01-01"
                }
            ],
            "table_name": "rankings",
            "id": "256"
        }
    },
    {
        "question": "Find the number of matches that Serena Williams won in each year.",
        "SQL": "SELECT count(*), YEAR FROM matches WHERE winner_name = 'Serena Williams' GROUP BY YEAR",
        "db_id": "wta_1",
        "table_description": "Table matches contains detailed information about tennis matches including players, scores, and tournament details.",
        "config": {
            "dimension": [
                {
                    "column": "YEAR"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "winner_name",
                    "match_type": "精确匹配",
                    "condition": "Serena Williams"
                }
            ],
            "table_name": "matches",
            "id": "257"
        }
    },
    {
        "question": "How many players are there for each hand type, excluding players born before 1980?",
        "SQL": "SELECT count(*), hand FROM players WHERE birth_date >= '1980-01-01' GROUP BY hand",
        "db_id": "wta_1",
        "table_description": "Table containing player information including player ID, first name, last name, hand, birth date, and country code.",
        "config": {
            "dimension": [
                {
                    "column": "hand"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "birth_date",
                    "match_type": "大于等于",
                    "condition": "1980-01-01"
                }
            ],
            "table_name": "players",
            "id": "264"
        }
    },
    {
        "question": "How many ships ended up being 'Wrecked'?",
        "SQL": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Wrecked'",
        "db_id": "battle_death",
        "table_description": "Table containing information about ships and their dispositions after battles.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "disposition_of_ship",
                    "match_type": "精确匹配",
                    "condition": "Wrecked"
                }
            ],
            "table_name": "ship",
            "id": "265"
        }
    },
    {
        "question": "List the name, date and result of each battle where the Bulgarian commander was Kaloyan.",
        "SQL": "SELECT name, date, result FROM battle WHERE bulgarian_commander = 'Kaloyan'",
        "db_id": "battle_death",
        "table_description": "The battle table contains information about various battles, including their names, dates, commanders, and results.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "date"
                },
                {
                    "column": "result"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "bulgarian_commander",
                    "match_type": "精确匹配",
                    "condition": "Kaloyan"
                }
            ],
            "table_name": "battle",
            "id": "266"
        }
    },
    {
        "question": "What is the maximum and minimum death toll caused by each ship ID?",
        "SQL": "SELECT caused_by_ship_id, max(killed), min(killed) FROM death GROUP BY caused_by_ship_id",
        "db_id": "battle_death",
        "table_description": "Table 'death' contains information about deaths caused in battles, including the ship ID that caused them.",
        "config": {
            "dimension": [
                {
                    "column": "caused_by_ship_id"
                }
            ],
            "measure": [
                {
                    "column": "killed",
                    "aggregate_function": "max"
                },
                {
                    "column": "killed",
                    "aggregate_function": "min"
                }
            ],
            "filter": [
                {
                    "column": "caused_by_ship_id",
                    "match_type": "等于",
                    "condition": "1"
                }
            ],
            "table_name": "death",
            "id": "267"
        }
    },
    {
        "question": "What is the average number of injuries caused each time in East Champaran, Bihar?",
        "SQL": "SELECT avg(injured) FROM death WHERE note = 'East Champaran, Bihar'",
        "db_id": "battle_death",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "injured",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "note",
                    "match_type": "精确匹配",
                    "condition": "East Champaran, Bihar"
                }
            ],
            "table_name": "death",
            "id": "268"
        }
    },
    {
        "question": "What are the name and results of the battles when the latin commander is 'Baldwin I'",
        "SQL": "SELECT name ,  RESULT FROM battle WHERE latin_commander = 'Baldwin I'",
        "db_id": "battle_death",
        "table_description": "Table containing details about historical battles including their names, dates, Bulgarian and Latin commanders, and results.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "RESULT"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "latin_commander",
                    "match_type": "等于",
                    "condition": "Baldwin I"
                }
            ],
            "table_name": "battle",
            "id": "269"
        }
    },
    {
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and any latin commander?",
        "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander IS NOT NULL",
        "db_id": "battle_death",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "bulgarian_commander",
                    "match_type": "精确匹配",
                    "condition": "Kaloyan"
                },
                {
                    "column": "latin_commander",
                    "match_type": "不为空",
                    "condition": ""
                }
            ]
        },
        "table_name": "battle",
        "id": "270"
    },
    {
        "question": "How many different results are there for the battles where the Bulgarian commander was Kaloyan?",
        "SQL": "SELECT count(DISTINCT RESULT) FROM battle WHERE bulgarian_commander = 'Kaloyan'",
        "db_id": "battle_death",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "RESULT",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "bulgarian_commander",
                    "match_type": "exact_match",
                    "condition": "Kaloyan"
                }
            ],
            "table_name": "battle",
            "id": "271"
        }
    },
    {
        "question": "What are the notes of the death events which have the word 'Champaran'?",
        "SQL": "SELECT note FROM death WHERE note LIKE '%Champaran%'",
        "db_id": "battle_death",
        "table_description": "Table containing information about death events including notes and casualties.",
        "config": {
            "dimension": [
                {
                    "column": "note"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "note",
                    "match_type": "模糊匹配",
                    "condition": "Champaran"
                }
            ],
            "table_name": "death",
            "id": "272"
        }
    },
    {
        "question": "What are all the addresses including line 1, line 2, and city?",
        "SQL": "SELECT line_1, line_2, city FROM addresses",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "line_1"
                },
                {
                    "column": "line_2"
                },
                {
                    "column": "city"
                }
            ],
            "measure": [],
            "filter": []
        },
        "table_name": "addresses",
        "id": "273"
    },
    {
        "question": "What is the first and second line for all addresses in Virginia?",
        "SQL": "SELECT line_1 ,  line_2 FROM addresses WHERE state_province_county = 'Virginia'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "line_1"
                },
                {
                    "column": "line_2"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state_province_county",
                    "match_type": "精确匹配",
                    "condition": "Virginia"
                }
            ],
            "table_name": "addresses",
            "id": "274"
        }
    },
    {
        "question": "How many courses with descriptions related to 'v' are listed?",
        "SQL": "SELECT count(*) FROM Courses WHERE course_description LIKE '%v%'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "course_description",
                    "match_type": "模糊匹配",
                    "condition": "v"
                }
            ],
            "table_name": "Courses",
            "id": "275"
        }
    },
    {
        "question": "How many courses related to 'math' are there?",
        "SQL": "SELECT count(*) FROM Courses WHERE course_name LIKE '%math%'",
        "db_id": "student_transcripts_tracking",
        "table_description": "Table containing information about courses.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "course_name",
                    "match_type": "模糊匹配",
                    "condition": "math"
                }
            ],
            "table_name": "Courses",
            "id": "276"
        }
    },
    {
        "question": "What is the description of the os course?",
        "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'os'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "course_name",
                    "match_type": "精确匹配",
                    "condition": "os"
                }
            ]
        },
        "table_name": "Courses",
        "id": "277"
    },
    {
        "question": "What are the descriptions for all the math-related courses?",
        "SQL": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "course_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "course_name",
                    "match_type": "模糊匹配",
                    "condition": "%math%"
                }
            ]
        },
        "table_name": "Courses",
        "id": "278"
    },
    {
        "question": "What is the zip code of the address in the state Virginia?",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE state_province_county  =  'Virginia'",
        "db_id": "student_transcripts_tracking",
        "table_description": "Table containing address information including city, state, and zip code.",
        "config": {
            "dimension": [
                {
                    "column": "zip_postcode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state_province_county",
                    "match_type": "精确匹配",
                    "condition": "Virginia"
                }
            ]
        },
        "table_name": "Addresses",
        "id": "279"
    },
    {
        "question": "What is the zip code for addresses in Virginia?",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE state_province_county = 'Virginia'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "zip_postcode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state_province_county",
                    "match_type": "精确匹配",
                    "condition": "Virginia"
                }
            ]
        },
        "table_name": "Addresses",
        "id": "280"
    },
    {
        "question": "How many departments offer a Master's degree?",
        "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE degree_summary_name = 'Master'",
        "db_id": "student_transcripts_tracking",
        "table_description": "Table containing information about degree programs offered by various departments.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "department_id",
                    "aggregate_function": "COUNT_DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "degree_summary_name",
                    "match_type": "exact_match",
                    "condition": "Master"
                }
            ],
            "table_name": "Degree_Programs",
            "id": "281"
        }
    },
    {
        "question": "How many different departments offer Bachelor's degrees?",
        "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "department_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "degree_summary_name",
                    "match_type": "精确匹配",
                    "condition": "Bachelor"
                }
            ],
            "table_name": "Degree_Programs",
            "id": "282"
        }
    },
    {
        "question": "How many different degree names are offered in the department with ID 13?",
        "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs WHERE department_id = 13",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "degree_summary_name",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "department_id",
                    "match_type": "等于",
                    "condition": "13"
                }
            ],
            "table_name": "Degree_Programs",
            "id": "283"
        }
    },
    {
        "question": "How many different degrees are offered in the Department with ID 13?",
        "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs WHERE department_id = 13",
        "db_id": "student_transcripts_tracking",
        "table_description": "Degree_Programs table contains information about degree programs including their IDs, department IDs, summary names, descriptions, and other details.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "degree_summary_name",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "department_id",
                    "match_type": "等于",
                    "condition": "13"
                }
            ],
            "table_name": "Degree_Programs",
            "id": "284"
        }
    },
    {
        "question": "What are the names and descriptions of all the sections with a course ID of 8?",
        "SQL": "SELECT section_name, section_description FROM Sections WHERE course_id = 8",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "section_name"
                },
                {
                    "column": "section_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "course_id",
                    "match_type": "等于",
                    "condition": "8"
                }
            ],
            "table_name": "Sections",
            "id": "285"
        }
    },
    {
        "question": "What are the names and descriptions for all the sections with a course ID of 1?",
        "SQL": "SELECT section_name ,  section_description FROM Sections WHERE course_id = 1",
        "db_id": "student_transcripts_tracking",
        "table_description": "Table containing information about different sections of courses.",
        "config": {
            "dimension": [
                {
                    "column": "section_name"
                },
                {
                    "column": "section_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "course_id",
                    "match_type": "等于",
                    "condition": "1"
                }
            ],
            "table_name": "Sections",
            "id": "286"
        }
    },
    {
        "question": "List the section_name where the course_id is greater than 5 in reversed lexicographical order.",
        "SQL": "SELECT section_name FROM Sections WHERE course_id > 5 ORDER BY section_name DESC",
        "db_id": "student_transcripts_tracking",
        "table_description": "Table containing information about different sections of courses.",
        "config": {
            "dimension": [
                {
                    "column": "section_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "course_id",
                    "match_type": "大于",
                    "condition": "5"
                }
            ],
            "table_name": "Sections",
            "id": "287"
        }
    },
    {
        "question": "What are the names of the sections with a course ID greater than 5 in reverse alphabetical order?",
        "SQL": "SELECT section_name FROM Sections WHERE course_id > 5 ORDER BY section_name DESC",
        "db_id": "student_transcripts_tracking",
        "table_description": "The Sections table contains information about different sections including their IDs, associated course IDs, names, descriptions, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "section_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "course_id",
                    "match_type": "大于",
                    "condition": "5"
                }
            ],
            "table_name": "Sections",
            "id": "288"
        }
    },
    {
        "question": "What is the description of the department whose name is 'science'?",
        "SQL": "SELECT department_description FROM Departments WHERE department_name = 'science'",
        "db_id": "student_transcripts_tracking",
        "table_description": "The Departments table contains information about various departments including their ID, name, description, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "department_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "department_name",
                    "match_type": "精确匹配",
                    "condition": "science"
                }
            ],
            "table_name": "Departments",
            "id": "289"
        }
    },
    {
        "question": "What is the department description for the one whose other details contain the word 'None'?",
        "SQL": "SELECT department_description FROM Departments WHERE other_details LIKE '%None%'",
        "db_id": "student_transcripts_tracking",
        "table_description": "The Departments table contains information about different departments including their ID, name, description, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "department_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "other_details",
                    "match_type": "模糊匹配",
                    "condition": "None"
                }
            ],
            "table_name": "Departments",
            "id": "290"
        }
    },
    {
        "question": "What is the phone number of the man with the first name Milton and the last name Christiansen?",
        "SQL": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Milton' AND last_name  =  'Christiansen'",
        "db_id": "student_transcripts_tracking",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "cell_mobile_number",
                    "aggregate_function": "NONE"
                }
            ],
            "filter": [
                {
                    "column": "first_name",
                    "match_type": "精确匹配",
                    "condition": "Milton"
                },
                {
                    "column": "last_name",
                    "match_type": "精确匹配",
                    "condition": "Christiansen"
                }
            ],
            "table_name": "Students",
            "id": "291"
        }
    },
    {
        "question": "What is the mobile phone number of the student whose ID is 1?",
        "SQL": "select cell_mobile_number from students where student_id = 1",
        "db_id": "student_transcripts_tracking",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "cell_mobile_number"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "student_id",
                    "match_type": "等于",
                    "condition": "1"
                },
                {
                    "column": "last_name",
                    "match_type": "精确匹配",
                    "condition": "ward"
                }
            ],
            "table_name": "students",
            "id": "292"
        }
    },
    {
        "question": "Who is the first student to register from the permanent address ID 5? List the first name, middle name and last name.",
        "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE permanent_address_id = 5 ORDER BY date_first_registered ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "middle_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "permanent_address_id",
                    "match_type": "equals",
                    "condition": 5
                },
                {
                    "column": "date_first_registered",
                    "match_type": "absolute_time",
                    "condition": [
                        "1970-01-01",
                        null
                    ]
                }
            ],
            "table_name": "Students",
            "id": "293"
        }
    },
    {
        "question": "What is the first, middle, and last name of the student who registered on February 5, 1971?",
        "SQL": "SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = '1971-02-05 07:28:23' LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "middle_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_first_registered",
                    "match_type": "等于",
                    "condition": "1971-02-05 07:28:23"
                }
            ],
            "table_name": "Students",
            "id": "294"
        }
    },
    {
        "question": "Who is the earliest graduate of the school who has a specific SSN number? List the first name, middle name, and last name.",
        "SQL": "SELECT first_name, middle_name, last_name FROM Students WHERE ssn = '965' ORDER BY date_left ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "table_description": "Tracks information about students including their names, contact details, and dates of registration and graduation.",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "middle_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "ssn",
                    "match_type": "等于",
                    "condition": "965"
                },
                {
                    "column": "date_left",
                    "match_type": "最早",
                    "condition": "ASC LIMIT 1"
                }
            ],
            "table_name": "Students",
            "id": "295"
        }
    },
    {
        "question": "What is the first, middle, and last name of the student who registered on the earliest date and left the school after 2007-01-01?",
        "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students WHERE date_left > '2007-01-01' ORDER BY date_first_registered ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "middle_name"
                },
                {
                    "column": "last_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_left",
                    "match_type": "大于",
                    "condition": "2007-01-01"
                }
            ],
            "table_name": "Students",
            "id": "296"
        }
    },
    {
        "question": "List the first name of students whose middle name is 'Anna'.",
        "SQL": "SELECT first_name FROM Students WHERE middle_name = 'Anna'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "middle_name",
                    "match_type": "等于",
                    "condition": "Anna"
                }
            ]
        },
        "table_name": "Students",
        "id": "297"
    },
    {
        "question": "What is the first name of the student whose middle name is 'Anna' and whose permanent address is different from his or her current one?",
        "SQL": "SELECT first_name FROM Students WHERE middle_name = 'Anna' AND current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking",
        "table_description": "Tracks information about students including their addresses and personal details.",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "middle_name",
                    "match_type": "等于",
                    "condition": "Anna"
                },
                {
                    "column": "current_address_id",
                    "match_type": "不等于",
                    "condition": "permanent_address_id"
                }
            ],
            "table_name": "Students",
            "id": "298"
        }
    },
    {
        "question": "On average, when were the transcripts printed after 1990-01-01?",
        "SQL": "SELECT avg(transcript_date) FROM Transcripts WHERE transcript_date > '1990-01-01'",
        "db_id": "student_transcripts_tracking",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "transcript_date",
                    "match_type": "大于",
                    "condition": "1990-01-01"
                }
            ],
            "table_name": "Transcripts",
            "id": "299"
        }
    },
    {
        "question": "What is the average transcript date for transcripts after 1990?",
        "SQL": "SELECT avg(transcript_date) FROM Transcripts WHERE transcript_date > '1990-01-01'",
        "db_id": "student_transcripts_tracking",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "transcript_date",
                    "match_type": "大于",
                    "condition": "1990-01-01"
                }
            ],
            "table_name": "Transcripts",
            "id": "300"
        }
    },
    {
        "question": "When is the first transcript released in 1999 or later? List the date and details.",
        "SQL": "SELECT transcript_date ,  other_details FROM Transcripts WHERE YEAR(transcript_date) >= 1999 ORDER BY transcript_date ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "table_description": "Table containing student transcripts with release dates and additional details.",
        "config": {
            "dimension": [
                {
                    "column": "other_details"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "transcript_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "1999-01-01",
                        null
                    ]
                }
            ],
            "table_name": "Transcripts",
            "id": "301"
        }
    },
    {
        "question": "What is the earliest transcript release date before 1990, and what details can you tell me?",
        "SQL": "SELECT transcript_date ,  other_details FROM Transcripts WHERE DATE(transcript_date) < '1990-01-01' ORDER BY transcript_date ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "table_description": "Table containing information about student transcripts.",
        "config": {
            "dimension": [
                {
                    "column": "other_details"
                }
            ],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "transcript_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "null",
                        "1990-01-01"
                    ]
                }
            ],
            "table_name": "Transcripts",
            "id": "302"
        }
    },
    {
        "question": "How many transcripts were released today?",
        "SQL": "SELECT count(*) FROM Transcripts WHERE DATE(transcript_date) = CURDATE()",
        "db_id": "student_transcripts_tracking",
        "table_description": "Tracks the release of student transcripts.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "transcript_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "CURDATE()",
                        "CURDATE()"
                    ]
                }
            ],
            "table_name": "Transcripts",
            "id": "303"
        }
    },
    {
        "question": "How many transcripts were listed before 1990?",
        "SQL": "SELECT count(*) FROM Transcripts WHERE transcript_date < '1990-01-01'",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "transcript_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "1970-01-01",
                        "1990-01-01"
                    ]
                }
            ],
            "table_name": "Transcripts",
            "id": "304"
        }
    },
    {
        "question": "What is the latest transcript release date in the year 2013?",
        "SQL": "SELECT transcript_date FROM Transcripts WHERE DATE(transcript_date) >= '2013-01-01' AND DATE(transcript_date) <= '2013-12-31' ORDER BY transcript_date DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "transcript_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2013-01-01",
                        "2013-12-31"
                    ]
                }
            ],
            "table_name": "Transcripts",
            "id": "305"
        }
    },
    {
        "question": "What is the latest transcript date before 2000?",
        "SQL": "SELECT transcript_date FROM Transcripts WHERE transcript_date < '2000-01-01' ORDER BY transcript_date DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "table_name": "Transcripts",
        "id": "306",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "transcript_date",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "transcript_date",
                    "match_type": "小于",
                    "condition": "2000-01-01"
                }
            ]
        }
    },
    {
        "question": "How many times at most can a course enrollment with a specific transcript ID show in different transcripts? Also show the course enrollment id and the transcript ID.",
        "SQL": "SELECT count(*), student_course_id, transcript_id FROM Transcript_Contents WHERE transcript_id = 8 GROUP BY student_course_id, transcript_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "table_description": "This table tracks the contents of student transcripts, including the course enrollment IDs and the transcript IDs.",
        "config": {
            "dimension": [
                {
                    "column": "student_course_id"
                },
                {
                    "column": "transcript_id"
                }
            ],
            "measure": [
                {
                    "column": "student_course_id",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "transcript_id",
                    "match_type": "等于",
                    "condition": "8"
                }
            ],
            "table_name": "Transcript_Contents",
            "id": "307"
        }
    },
    {
        "question": "What is the maximum number of times that a specific course (with student_course_id 76) shows up in different transcripts and what is that course's enrollment id?",
        "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents WHERE student_course_id = 76 GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "table_description": "The Transcript_Contents table contains records of courses taken by students, including the student_course_id and transcript_id.",
        "config": {
            "dimension": [
                {
                    "column": "student_course_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "student_course_id",
                    "match_type": "等于",
                    "condition": "76"
                }
            ],
            "table_name": "Transcript_Contents",
            "id": "308"
        }
    },
    {
        "question": "How many different addresses do the students who have not left the institution currently live?",
        "SQL": "SELECT count(DISTINCT current_address_id) FROM Students WHERE date_left IS NULL",
        "db_id": "student_transcripts_tracking",
        "table_description": "Tracks student transcripts and related information.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "current_address_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "date_left",
                    "match_type": "is null",
                    "condition": "NULL"
                }
            ],
            "table_name": "Students",
            "id": "309"
        }
    },
    {
        "question": "How many different addresses do students have as their permanent address?",
        "SQL": "SELECT count(DISTINCT permanent_address_id) FROM Students",
        "db_id": "student_transcripts_tracking",
        "table_description": "Tracks student information including their current and permanent addresses.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "permanent_address_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": []
        },
        "table_name": "Students",
        "id": "310"
    },
    {
        "question": "List all the student details where the first name is 'Warren' in reversed lexicographical order.",
        "SQL": "SELECT other_student_details FROM Students WHERE first_name = 'Warren' ORDER BY other_student_details DESC",
        "db_id": "student_transcripts_tracking",
        "table_description": "Table containing student details including their personal information and contact details.",
        "config": {
            "dimension": [
                {
                    "column": "other_student_details"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "first_name",
                    "match_type": "精确匹配",
                    "condition": "Warren"
                }
            ],
            "table_name": "Students",
            "id": "311"
        }
    },
    {
        "question": "What are the first names of students whose last name is Ward in reverse alphabetical order of their first names?",
        "SQL": "SELECT first_name FROM Students WHERE last_name = 'Ward' ORDER BY first_name DESC",
        "db_id": "student_transcripts_tracking",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "last_name",
                    "match_type": "精确匹配",
                    "condition": "Ward"
                }
            ],
            "table_name": "Students",
            "id": "312"
        }
    },
    {
        "question": "Describe the section with the ID of 3.",
        "SQL": "SELECT section_description FROM Sections WHERE section_id  =  3",
        "db_id": "student_transcripts_tracking",
        "table_description": "This table contains information about different sections of courses, including their IDs, names, descriptions, and other details.",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "section_id",
                    "match_type": "等于",
                    "condition": "3"
                }
            ],
            "table_name": "Sections",
            "id": "313"
        }
    },
    {
        "question": "What is the description for the section named d?",
        "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'd'",
        "db_id": "student_transcripts_tracking",
        "table_description": "The table contains information about different sections of courses, including section ID, course ID, section name, section description, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "section_description"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "section_name",
                    "match_type": "精确匹配",
                    "condition": "d"
                }
            ]
        },
        "table_name": "Sections",
        "id": "314"
    },
    {
        "question": "List the title of all cartoons directed by Ben Jones in alphabetical order.",
        "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' ORDER BY title",
        "db_id": "tvshow",
        "table_description": "Cartoon table contains information about various cartoon episodes including their titles, directors, writers, air dates, production codes, and channels.",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                }
            ],
            "table_name": "Cartoon",
            "id": "315"
        }
    },
    {
        "question": "What are the titles of the cartoons directed by Ben Jones, sorted alphabetically?",
        "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' ORDER BY title",
        "db_id": "tvshow",
        "table_description": "Cartoon table contains information about cartoon episodes including their titles, directors, writers, air dates, production codes, and channels.",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                }
            ],
            "table_name": "Cartoon",
            "id": "316"
        }
    },
    {
        "question": "List all cartoons produced on 'November 14, 2008'.",
        "SQL": "SELECT Title FROM Cartoon WHERE Original_air_date = 'November14,2008';",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Original_air_date",
                    "match_type": "精确匹配",
                    "condition": "November14,2008"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "317"
    },
    {
        "question": "What are the names of all cartoons written by Michael Jelenic?",
        "SQL": "SELECT Title FROM Cartoon WHERE Written_by = 'Michael Jelenic';",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Written_by",
                    "match_type": "精确匹配",
                    "condition": "Michael Jelenic"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "318"
    },
    {
        "question": "How many cartoons were directed by 'Ben Jones'?",
        "SQL": "SELECT count(*) FROM Cartoon WHERE Directed_by = 'Ben Jones';",
        "db_id": "tvshow",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                }
            ],
            "table_name": "Cartoon",
            "id": "319"
        }
    },
    {
        "question": "What is the number of cartoons written by Michael Jelenic or directed by Ben Jones?",
        "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Michael Jelenic' OR Directed_by = 'Ben Jones';",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Written_by",
                    "match_type": "精确匹配",
                    "condition": "Michael Jelenic"
                },
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "320"
    },
    {
        "question": "list all cartoon titles and their directors that aired before December 1, 2008, ordered by their air date",
        "SQL": "SELECT title ,  Directed_by FROM Cartoon WHERE Original_air_date < '2008-12-01' ORDER BY Original_air_date",
        "db_id": "tvshow",
        "table_description": "A table containing information about cartoons including title, director, air date, etc.",
        "config": {
            "dimension": [
                {
                    "column": "title"
                },
                {
                    "column": "Directed_by"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Original_air_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "null",
                        "2008-12-01"
                    ]
                }
            ],
            "table_name": "Cartoon",
            "id": "321"
        }
    },
    {
        "question": "What is the name and directors of all the cartoons that aired after December 1, 2008?",
        "SQL": "SELECT title ,  Directed_by FROM Cartoon WHERE Original_air_date > '2008-12-01' ORDER BY Original_air_date",
        "db_id": "tvshow",
        "table_description": "Table containing information about cartoons including their titles, directors, air dates, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "title"
                },
                {
                    "column": "Directed_by"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Original_air_date",
                    "match_type": "绝对时间",
                    "condition": "2008-12-01"
                }
            ],
            "table_name": "Cartoon",
            "id": "322"
        }
    },
    {
        "question": "List the title of all cartoon written by \"Michael Jelenic\" or directed by \"Brandon Vietti\".",
        "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Brandon Vietti\" OR Written_by = \"Michael Jelenic\";",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Brandon Vietti"
                },
                {
                    "column": "Written_by",
                    "match_type": "精确匹配",
                    "condition": "Michael Jelenic"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "323"
    },
    {
        "question": "What are the titles of all cartoons directed by Ben Jones or aired on December 5, 2008?",
        "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Original_air_date = 'December5,2008';",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Title"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                },
                {
                    "column": "Original_air_date",
                    "match_type": "精确匹配",
                    "condition": "December5,2008"
                }
            ]
        },
        "table_name": "Cartoon",
        "id": "324"
    },
    {
        "question": "Which country has the most TV Channels that are in the 'Sky Famiglia' package option? List the country and the number of TV Channels it has.",
        "SQL": "SELECT Country ,  count(*) FROM TV_Channel WHERE Package_Option = 'Sky Famiglia' GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "tvshow",
        "table_description": "Table TV_Channel contains information about different TV channels including their country, language, content, pixel aspect ratio, high definition status, pay per view status, and package option.",
        "config": {
            "dimension": [
                {
                    "column": "Country"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Package_Option",
                    "match_type": "精确匹配",
                    "condition": "Sky Famiglia"
                }
            ],
            "table_name": "TV_Channel",
            "id": "325"
        }
    },
    {
        "question": "What is the country with the most number of TV Channels that are in High Definition and how many does it have?",
        "SQL": "SELECT Country ,  count(*) FROM TV_Channel WHERE Hight_definition_TV = 'yes' GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "tvshow",
        "table_description": "This table contains information about TV channels including their ID, series name, country, language, content type, pixel aspect ratio, high definition status, pay-per-view status, and package option.",
        "config": {
            "dimension": [
                {
                    "column": "Country"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Hight_definition_TV",
                    "match_type": "等于",
                    "condition": "yes"
                }
            ],
            "table_name": "TV_Channel",
            "id": "326"
        }
    },
    {
        "question": "List the number of different series names and contents in the TV Channel table for the 'Sky Famiglia' package option.",
        "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel WHERE Package_Option = 'Sky Famiglia';",
        "db_id": "tvshow",
        "table_description": "The TV_Channel table contains information about different TV channels including their series names, contents, and package options.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "series_name",
                    "aggregate_function": "DISTINCT"
                },
                {
                    "column": "content",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "Package_Option",
                    "match_type": "精确匹配",
                    "condition": "Sky Famiglia"
                }
            ],
            "table_name": "TV_Channel",
            "id": "327"
        }
    },
    {
        "question": "How many different series and contents are listed in the TV Channel table for the package option 'Sky Famiglia'?",
        "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel WHERE Package_Option = 'Sky Famiglia';",
        "db_id": "tvshow",
        "table_description": "The TV_Channel table contains information about various TV channels including their series name, country, language, content, pixel aspect ratio, high definition, pay per view, and package option.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "series_name",
                    "aggregate_function": "DISTINCT"
                },
                {
                    "column": "content",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "Package_Option",
                    "match_type": "精确匹配",
                    "condition": "Sky Famiglia"
                }
            ],
            "table_name": "TV_Channel",
            "id": "328"
        }
    },
    {
        "question": "What is the content of TV Channel with series name similar to \"Sky Music\"?",
        "SQL": "SELECT Content FROM TV_Channel WHERE series_name LIKE '%Sky Music%';",
        "db_id": "tvshow",
        "table_name": "TV_Channel",
        "id": "329",
        "config": {
            "dimension": [],
            "measure": [],
            "filter": [
                {
                    "column": "series_name",
                    "match_type": "模糊匹配",
                    "condition": "Sky Music"
                }
            ]
        }
    },
    {
        "question": "What is the content of the series with package option Sky Famiglia?",
        "SQL": "SELECT Content FROM TV_Channel WHERE Package_Option = \"Sky Famiglia\";",
        "db_id": "tvshow",
        "table_description": "The TV_Channel table contains information about different TV series including their country, language, content, and package options.",
        "config": {
            "dimension": [
                {
                    "column": "Content"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Package_Option",
                    "match_type": "精确匹配",
                    "condition": "Sky Famiglia"
                }
            ],
            "table_name": "TV_Channel",
            "id": "330"
        }
    },
    {
        "question": "What is the Package Option of TV Channel with content type 'music'?",
        "SQL": "SELECT Package_Option FROM TV_Channel WHERE Content = 'music';",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Package_Option"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Content",
                    "match_type": "精确匹配",
                    "condition": "music"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "331"
    },
    {
        "question": "What are the Package Options of the TV Channels whose Content is music?",
        "SQL": "SELECT Package_Option FROM TV_Channel WHERE Content = 'music';",
        "db_id": "tvshow",
        "table_description": "Table TV_Channel contains information about TV channels including their series names, countries, languages, content types, pixel aspect ratios, high definition status, pay-per-view options, and package options.",
        "config": {
            "dimension": [
                {
                    "column": "Package_Option"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Content",
                    "match_type": "精确匹配",
                    "condition": "music"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "332"
    },
    {
        "question": "How many TV Channel using language Italian?",
        "SQL": "SELECT count(*) FROM TV_Channel WHERE Language = 'Italian';",
        "db_id": "tvshow",
        "table_description": "Table for TV Channels with their details such as series name, country, language, content, pixel aspect ratio, high definition TV, pay per view, and package option.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Language",
                    "match_type": "精确匹配",
                    "condition": "Italian"
                }
            ],
            "table_name": "TV_Channel",
            "id": "333"
        }
    },
    {
        "question": "How many TV Channels are available in the Sky Famiglia package option?",
        "SQL": "SELECT count(*) FROM TV_Channel WHERE Package_Option = 'Sky Famiglia';",
        "db_id": "tvshow",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Package_Option",
                    "match_type": "精确匹配",
                    "condition": "Sky Famiglia"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "334"
    },
    {
        "question": "List the language used least number of TV Channel in Italy. List language and number of TV Channel.",
        "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE Country = 'Italy' GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Country",
                    "match_type": "精确匹配",
                    "condition": "Italy"
                }
            ],
            "table_name": "TV_Channel",
            "id": "335"
        }
    },
    {
        "question": "What are the languages used by the least number of TV Channels and how many channels use it, specifically those with content related to music?",
        "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE Content LIKE '%music%' GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "db_id": "tvshow",
        "table_description": "Table containing information about TV Channels including their ID, series name, country, language, content, pixel aspect ratio, high definition TV support, pay per view support, and package option.",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Content",
                    "match_type": "模糊匹配",
                    "condition": "%music%"
                }
            ],
            "table_name": "TV_Channel",
            "id": "336"
        }
    },
    {
        "question": "List each language and the number of TV Channels using it, but only for channels that offer music content.",
        "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE Content = 'music' GROUP BY LANGUAGE",
        "db_id": "tvshow",
        "table_description": "TV_Channel table contains information about TV channels including their language, content type, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "Content",
                    "match_type": "精确匹配",
                    "condition": "music"
                }
            ],
            "table_name": "TV_Channel",
            "id": "337"
        }
    },
    {
        "question": "For each language, list the number of TV Channels that use it, excluding channels with the content 'music'.",
        "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel WHERE Content != 'music' GROUP BY LANGUAGE",
        "db_id": "tvshow",
        "table_description": "TV_Channel table contains information about TV channels including their ID, series name, country, language, content, pixel aspect ratio, high definition TV, pay per view, and package option.",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Content",
                    "match_type": "不等于",
                    "condition": "music"
                }
            ],
            "table_name": "TV_Channel",
            "id": "338"
        }
    },
    {
        "question": "List the Episode of all TV series with a Rating greater than 4.0, sorted by rating.",
        "SQL": "SELECT Episode FROM TV_series WHERE Rating > 4.0 ORDER BY Rating",
        "db_id": "tvshow",
        "table_description": "Table containing information about TV series episodes including their ratings.",
        "config": {
            "dimension": [
                {
                    "column": "Episode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Rating",
                    "match_type": "大于",
                    "condition": "4.0"
                }
            ],
            "table_name": "TV_series",
            "id": "339"
        }
    },
    {
        "question": "What are all of the episodes with a share greater than 8, ordered by ratings?",
        "SQL": "SELECT Episode FROM TV_series WHERE Share > 8 ORDER BY Rating",
        "db_id": "tvshow",
        "table_description": "Table containing information about TV series episodes, including episode title, air date, rating, share, and viewers.",
        "config": {
            "dimension": [
                {
                    "column": "Episode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Share",
                    "match_type": "大于",
                    "condition": "8"
                }
            ],
            "table_name": "TV_series",
            "id": "340"
        }
    },
    {
        "question": "List top 3 highest Rating TV series with a Share greater than 7. List the TV series's Episode and Rating.",
        "SQL": "SELECT Episode ,  Rating FROM TV_series WHERE Share > 7 ORDER BY Rating DESC LIMIT 3;",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Episode"
                }
            ],
            "measure": [
                {
                    "column": "Rating",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Share",
                    "match_type": "大于",
                    "condition": "7"
                }
            ],
            "table_name": "TV_series",
            "id": "341"
        }
    },
    {
        "question": "What are 3 most highly rated episodes that aired on channel 700 in the TV series table and what were those ratings?",
        "SQL": "SELECT Episode ,  Rating FROM TV_series WHERE Channel = '700' ORDER BY Rating DESC LIMIT 3;",
        "db_id": "tvshow",
        "table_description": "This table contains information about TV series episodes including their episode title, air date, rating, share, demographic ratings, viewership, weekly rank, and channel.",
        "config": {
            "dimension": [
                {
                    "column": "Episode"
                }
            ],
            "measure": [
                {
                    "column": "Rating",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Channel",
                    "match_type": "精确匹配",
                    "condition": "700"
                }
            ],
            "table_name": "TV_series",
            "id": "342"
        }
    },
    {
        "question": "What is the minimum and maximum share of TV series with a rating greater than 4?",
        "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series WHERE Rating > 4;",
        "db_id": "tvshow",
        "table_description": "Table containing information about TV series episodes including ratings and shares.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SHARE",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "SHARE",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "Rating",
                    "match_type": "greater than",
                    "condition": "4"
                }
            ],
            "table_name": "TV_series",
            "id": "343"
        }
    },
    {
        "question": "What is the maximum and minimum share for the TV series with a rating greater than 4.5?",
        "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series WHERE Rating > 4.5;",
        "db_id": "tvshow",
        "table_description": "Table containing information about TV series episodes including their ratings and shares.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SHARE",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "SHARE",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "Rating",
                    "match_type": "大于",
                    "condition": "4.5"
                }
            ],
            "table_name": "TV_series",
            "id": "344"
        }
    },
    {
        "question": "What is the air date of TV series with Episode 'Friendly Skies'?",
        "SQL": "SELECT Air_Date FROM TV_series WHERE Episode = 'Friendly Skies';",
        "db_id": "tvshow",
        "table_description": "Table containing information about TV series episodes including their air dates, ratings, and viewership.",
        "config": {
            "dimension": [
                {
                    "column": "Air_Date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Episode",
                    "match_type": "精确匹配",
                    "condition": "Friendly Skies"
                }
            ]
        },
        "table_name": "TV_series",
        "id": "345"
    },
    {
        "question": "When did the episode with the weekly rank of 43 air?",
        "SQL": "SELECT Air_Date FROM TV_series WHERE Weekly_Rank = 43;",
        "db_id": "tvshow",
        "table_description": "Table containing information about TV series episodes including their air date, rating, share, and other metrics.",
        "config": {
            "dimension": [
                {
                    "column": "Air_Date"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Weekly_Rank",
                    "match_type": "等于",
                    "condition": "43"
                }
            ],
            "table_name": "TV_series",
            "id": "346"
        }
    },
    {
        "question": "What is the Weekly Rank of TV series with an Air Date of October 1, 2007?",
        "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Air_Date = 'October 1, 2007';",
        "db_id": "tvshow",
        "table_description": "Table containing information about TV series episodes including their air dates, ratings, and weekly ranks.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Weekly_Rank",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Air_Date",
                    "match_type": "精确匹配",
                    "condition": "October 1, 2007"
                }
            ],
            "table_name": "TV_series",
            "id": "347"
        }
    },
    {
        "question": "What is the weekly rank for the episode on October 1, 2007?",
        "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Air_Date = 'October 1, 2007';",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Weekly_Rank"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Air_Date",
                    "match_type": "精确匹配",
                    "condition": "October 1, 2007"
                }
            ]
        },
        "table_name": "TV_series",
        "id": "348"
    },
    {
        "question": "Find the number of cartoons directed by each of the listed directors, but only for those cartoons that aired in November 2008.",
        "SQL": "SELECT count(*), Directed_by FROM cartoon WHERE Original_air_date LIKE '%November 2008%' GROUP BY Directed_by",
        "db_id": "tvshow",
        "table_description": "Table containing information about cartoons, including title, director, writer, air date, production code, and channel.",
        "config": {
            "dimension": [
                {
                    "column": "Directed_by"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Original_air_date",
                    "match_type": "模糊匹配",
                    "condition": "%November 2008%"
                }
            ],
            "table_name": "cartoon",
            "id": "349"
        }
    },
    {
        "question": "How many cartoons directed by Ben Jones were created in 2008?",
        "SQL": "SELECT COUNT(*) FROM cartoon WHERE Directed_by = 'Ben Jones' AND YEAR(Original_air_date) = 2008",
        "db_id": "tvshow",
        "table_description": "A table containing information about TV shows, including their titles, directors, writers, air dates, production codes, and channels.",
        "config": {
            "dimension": [
                {
                    "column": "Directed_by"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                },
                {
                    "column": "Original_air_date",
                    "match_type": "绝对时间",
                    "condition": [
                        "2008-01-01",
                        "2008-12-31"
                    ]
                }
            ],
            "table_name": "cartoon",
            "id": "350"
        }
    },
    {
        "question": "Find the production code and channel of the most recently aired cartoon that was directed by Ben Jones.",
        "SQL": "select production_code ,  channel from cartoon where Directed_by = 'Ben Jones' order by Original_air_date desc limit 1",
        "db_id": "tvshow",
        "table_description": "Table containing information about cartoons including their title, director, writer, air date, production code, and channel.",
        "config": {
            "dimension": [
                {
                    "column": "production_code"
                },
                {
                    "column": "channel"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Directed_by",
                    "match_type": "精确匹配",
                    "condition": "Ben Jones"
                }
            ],
            "table_name": "cartoon",
            "id": "351"
        }
    },
    {
        "question": "What is the production code and channel of the cartoon that aired on December 5, 2008?",
        "SQL": "select production_code, channel from cartoon where original_air_date = '2008-12-05'",
        "db_id": "tvshow",
        "table_description": "Table containing information about cartoons including their air dates, production codes, and channels.",
        "config": {
            "dimension": [
                {
                    "column": "production_code"
                },
                {
                    "column": "channel"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "original_air_date",
                    "match_type": "absolute_time",
                    "condition": "2008-12-05"
                }
            ]
        },
        "table_name": "cartoon",
        "id": "352"
    },
    {
        "question": "Find the package choice and series name of the TV channel that has music content.",
        "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE Content  =  'music'",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "package_option"
                },
                {
                    "column": "series_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Content",
                    "match_type": "精确匹配",
                    "condition": "music"
                }
            ]
        },
        "table_name": "TV_Channel",
        "id": "353"
    },
    {
        "question": "What are the package options and the name of the series for the TV Channel that has a 16:9 pixel aspect ratio?",
        "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE Pixel_aspect_ratio_PAR  =  '16:9'",
        "db_id": "tvshow",
        "table_description": "TV_Channel table contains information about various TV channels including their series names, countries, languages, content types, pixel aspect ratios, high definition support, pay-per-view options, and package options.",
        "config": {
            "dimension": [
                {
                    "column": "package_option"
                },
                {
                    "column": "series_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Pixel_aspect_ratio_PAR",
                    "match_type": "精确匹配",
                    "condition": "16:9"
                }
            ],
            "table_name": "TV_Channel",
            "id": "354"
        }
    },
    {
        "question": "find the pixel aspect ratio and nation of the tv channels that are in the Sky Famiglia package option.",
        "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE Package_Option = 'Sky Famiglia'",
        "db_id": "tvshow",
        "table_description": "The table 'tv_channel' contains information about various TV channels including their series name, country, language, content, pixel aspect ratio, high definition TV, pay per view, and package option.",
        "config": {
            "dimension": [
                {
                    "column": "Pixel_aspect_ratio_PAR"
                },
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Package_Option",
                    "match_type": "等于",
                    "condition": "Sky Famiglia"
                }
            ],
            "table_name": "tv_channel",
            "id": "355"
        }
    },
    {
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that are not in the Sky Famiglia package option?",
        "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE Package_Option != 'Sky Famiglia'",
        "db_id": "tvshow",
        "config": {
            "dimension": [
                {
                    "column": "Pixel_aspect_ratio_PAR"
                },
                {
                    "column": "country"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Package_Option",
                    "match_type": "不等于",
                    "condition": "Sky Famiglia"
                }
            ]
        },
        "table_name": "tv_channel",
        "id": "356"
    },
    {
        "question": "find id of the tv channels that from the countries with high definition TV.",
        "SQL": "SELECT id FROM tv_channel WHERE Hight_definition_TV = 'yes'",
        "db_id": "tvshow",
        "table_description": "The table contains information about TV channels including their ID, series name, country, language, content type, pixel aspect ratio, whether they offer high definition TV, pay-per-view options, and package options.",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Hight_definition_TV",
                    "match_type": "等于",
                    "condition": "yes"
                }
            ],
            "table_name": "tv_channel",
            "id": "357"
        }
    },
    {
        "question": "What are the ids of all TV channels that have more than 2 TV channels with the content type as music?",
        "SQL": "SELECT id FROM tv_channel WHERE Content = 'music' GROUP BY country HAVING count(*)  >  2",
        "db_id": "tvshow",
        "table_description": "This table contains information about TV channels, including their IDs, series names, countries, languages, content types, pixel aspect ratios, high definition status, pay-per-view options, and package options.",
        "config": {
            "dimension": [
                {
                    "column": "country"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "Content",
                    "match_type": "精确匹配",
                    "condition": "music"
                },
                {
                    "column": "count(*)",
                    "match_type": "大于",
                    "condition": "2"
                }
            ],
            "table_name": "tv_channel",
            "id": "358"
        }
    },
    {
        "question": "How many poker players have made it to the final table more than 20 times?",
        "SQL": "SELECT count(*) FROM poker_player WHERE Final_Table_Made > 20",
        "db_id": "poker_player",
        "table_description": "Table containing information about poker players.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Final_Table_Made",
                    "match_type": "大于",
                    "condition": "20"
                }
            ],
            "table_name": "poker_player",
            "id": "359"
        }
    },
    {
        "question": "Count the number of poker players who have made it to the final table more than 20 times.",
        "SQL": "SELECT count(*) FROM poker_player WHERE Final_Table_Made > 20",
        "db_id": "poker_player",
        "table_description": "poker_player table contains information about poker players including their final table appearances and earnings.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Final_Table_Made",
                    "match_type": "大于",
                    "condition": "20"
                }
            ],
            "table_name": "poker_player",
            "id": "360"
        }
    },
    {
        "question": "List the earnings of poker players with a best finish better than 2 in descending order.",
        "SQL": "SELECT Earnings FROM poker_player WHERE Best_Finish < 2 ORDER BY Earnings DESC",
        "db_id": "poker_player",
        "table_description": "Table containing poker player details including earnings and best finish.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Earnings",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Best_Finish",
                    "match_type": "小于",
                    "condition": "2"
                }
            ],
            "table_name": "poker_player",
            "id": "361"
        }
    },
    {
        "question": "What are the earnings of poker players with a money rank greater than 50, ordered descending by value?",
        "SQL": "SELECT Earnings FROM poker_player WHERE Money_Rank > 50 ORDER BY Earnings DESC",
        "db_id": "poker_player",
        "table_description": "Table containing information about poker players including their earnings and rankings.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Earnings",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Money_Rank",
                    "match_type": "大于",
                    "condition": "50"
                }
            ],
            "table_name": "poker_player",
            "id": "362"
        }
    },
    {
        "question": "List the final tables made by poker players with the best finish of 1.",
        "SQL": "SELECT Final_Table_Made FROM poker_player WHERE Best_Finish = 1.0",
        "db_id": "poker_player",
        "table_description": "poker_player",
        "config": {
            "dimension": [
                {
                    "column": "Final_Table_Made"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Best_Finish",
                    "match_type": "等于",
                    "condition": "1.0"
                }
            ],
            "table_name": "poker_player",
            "id": "363"
        }
    },
    {
        "question": "Find the name, population and expected life length of asian country with the largest population?",
        "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY Population DESC LIMIT 1",
        "db_id": "world_1",
        "table_description": "country table contains information about countries including their names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, local names, government forms, heads of state, capitals, and codes.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "Population"
                },
                {
                    "column": "LifeExpectancy"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ],
            "table_name": "country",
            "id": "421"
        }
    },
    {
        "question": "What are the name, population, and life expectancy of the African country with the highest population?",
        "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Africa\" ORDER BY Population DESC LIMIT 1",
        "db_id": "world_1",
        "table_description": "country table contains information about countries including their name, continent, region, surface area, independence year, population, life expectancy, GNP, local name, government form, head of state, capital, and code.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "Population"
                },
                {
                    "column": "LifeExpectancy"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Africa"
                }
            ]
        },
        "table_name": "country",
        "id": "422"
    },
    {
        "question": "What are the countries that have a larger population than any country in Europe?",
        "SQL": "SELECT Name FROM country WHERE Population  >  (SELECT max(Population) FROM country WHERE Continent  =  'Europe')",
        "db_id": "world_1",
        "table_description": "This table contains information about countries including their code, name, continent, region, surface area, independence year, population, life expectancy, GNP, government form, head of state, capital, and more.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Population",
                    "match_type": "大于",
                    "condition": "(SELECT max(Population) FROM country WHERE Continent = 'Europe')"
                }
            ],
            "table_name": "country",
            "id": "423"
        }
    },
    {
        "question": "Which countries outside Europe have a larger population than any country in Europe?",
        "SQL": "SELECT Name FROM country WHERE Population  >  (SELECT max(Population) FROM country WHERE Continent  =  'Europe')",
        "db_id": "world_1",
        "table_description": "This table contains information about different countries including their names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, government forms, heads of state, capitals, and codes.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Europe"
                },
                {
                    "column": "Population",
                    "match_type": "大于",
                    "condition": "(SELECT max(Population) FROM country WHERE Continent  =  'Europe')"
                }
            ],
            "table_name": "country",
            "id": "424"
        }
    },
    {
        "question": "What are the African countries with a population less than the maximum population of any Asian country?",
        "SQL": "SELECT Name FROM country WHERE Continent  =  'Africa'  AND Population  <  (SELECT MAX(Population) FROM country WHERE Continent  =  'Asia')",
        "db_id": "world_1",
        "table_description": "country table contains information about different countries including their names, continents, populations, etc.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Africa"
                },
                {
                    "column": "Population",
                    "match_type": "小于",
                    "condition": "(SELECT MAX(Population) FROM country WHERE Continent = 'Asia')"
                }
            ],
            "table_name": "country",
            "id": "425"
        }
    },
    {
        "question": "Which African countries have a smaller population than Angola?",
        "SQL": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < 12878000",
        "db_id": "world_1",
        "table_description": "country",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Africa"
                },
                {
                    "column": "population",
                    "match_type": "小于",
                    "condition": "12878000"
                }
            ]
        },
        "table_name": "country",
        "id": "426"
    },
    {
        "question": "Which Asian countries have a population that is larger than the average population of countries in Europe?",
        "SQL": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > (SELECT AVG(population) FROM country WHERE Continent = 'Europe')",
        "db_id": "world_1",
        "table_description": "Table containing information about different countries including their names, continents, populations, etc.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "population",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                },
                {
                    "column": "population",
                    "match_type": "大于",
                    "condition": "(SELECT AVG(population) FROM country WHERE Continent = 'Europe')"
                }
            ],
            "table_name": "country",
            "id": "427"
        }
    },
    {
        "question": "What are the Asian countries which have a surface area larger than that of any country in Africa?",
        "SQL": "SELECT Name FROM country WHERE Continent  =  'Asia'  AND SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Africa')",
        "db_id": "world_1",
        "table_description": "The table 'country' contains information about various countries including their names, continents, regions, surface areas, populations, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                },
                {
                    "column": "SurfaceArea",
                    "match_type": "大于",
                    "condition": "(SELECT max(SurfaceArea) FROM country WHERE Continent = 'Africa')"
                }
            ],
            "table_name": "country",
            "id": "428"
        }
    },
    {
        "question": "What are the country codes for countries where Papiamento is spoken?",
        "SQL": "SELECT CountryCode FROM countrylanguage WHERE Language  =  'Papiamento'",
        "db_id": "world_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Language",
                    "match_type": "精确匹配",
                    "condition": "Papiamento"
                }
            ],
            "table_name": "countrylanguage",
            "id": "429"
        }
    },
    {
        "question": "Return the country codes for countries that have Papiamento as one of their languages.",
        "SQL": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Papiamento'",
        "db_id": "world_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Language",
                    "match_type": "精确匹配",
                    "condition": "Papiamento"
                }
            ],
            "table_name": "countrylanguage",
            "id": "430"
        }
    },
    {
        "question": "What are the country codes of countries where people use Papiamento?",
        "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'Papiamento'",
        "db_id": "world_1",
        "table_description": "The table contains information about languages spoken in different countries, including the country code, language name, whether it is official, and the percentage of speakers.",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Language",
                    "match_type": "等于",
                    "condition": "Papiamento"
                }
            ],
            "table_name": "countrylanguage",
            "id": "431"
        }
    },
    {
        "question": "Give the country codes for countries in which people speak Papiamento.",
        "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'Papiamento'",
        "db_id": "world_1",
        "table_description": "Table containing language information for different countries",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Language",
                    "match_type": "等于",
                    "condition": "Papiamento"
                }
            ],
            "table_name": "countrylanguage",
            "id": "432"
        }
    },
    {
        "question": "What are the name, independence year, and surface area of the country with the largest GNP?",
        "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY GNP DESC LIMIT 1",
        "db_id": "world_1",
        "table_description": "country table contains information about countries including their name, continent, region, surface area, independence year, population, life expectancy, GNP, government form, and head of state.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "IndepYear"
                },
                {
                    "column": "SurfaceArea"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "GNP",
                    "match_type": "大于等于",
                    "condition": "0"
                }
            ],
            "table_name": "country",
            "id": "433"
        }
    },
    {
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population in Southern Europe.",
        "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country WHERE Region = 'Southern Europe' ORDER BY Population LIMIT 1",
        "db_id": "world_1",
        "table_description": "Table contains information about countries including their code, name, continent, region, surface area, year of independence, population, life expectancy, GNP, government form, head of state, capital, and more.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "SurfaceArea"
                },
                {
                    "column": "IndepYear"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "Region",
                    "match_type": "精确匹配",
                    "condition": "Southern Europe"
                }
            ],
            "table_name": "country",
            "id": "434"
        }
    },
    {
        "question": "What are the population, name and leader of the country with a population greater than 10 million?",
        "SQL": "SELECT Name ,  population ,  HeadOfState FROM country WHERE population > 10000000",
        "db_id": "world_1",
        "table_description": "The table 'country' contains information about countries including their code, name, continent, region, surface area, independence year, population, life expectancy, GNP, government form, head of state, capital, and more.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "HeadOfState"
                }
            ],
            "measure": [
                {
                    "column": "population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "population",
                    "match_type": "大于",
                    "condition": "10000000"
                }
            ],
            "table_name": "country",
            "id": "435"
        }
    },
    {
        "question": "Give the name, population, and head of state for the country with the highest life expectancy.",
        "SQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY LifeExpectancy DESC LIMIT 1",
        "db_id": "world_1",
        "table_description": "Table containing information about countries including their name, population, head of state, surface area, and life expectancy.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                },
                {
                    "column": "population"
                },
                {
                    "column": "HeadOfState"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "LifeExpectancy",
                    "match_type": "大于等于",
                    "condition": "78.4"
                }
            ],
            "table_name": "country",
            "id": "436"
        }
    },
    {
        "question": "Find the number of cities in each district with a population greater than 1,000,000?",
        "SQL": "SELECT count(*) ,  District FROM city WHERE Population  >  1000000 GROUP BY District",
        "db_id": "world_1",
        "table_description": "Table containing information about cities including their ID, name, country code, district, and population.",
        "config": {
            "dimension": [
                {
                    "column": "District"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Population",
                    "match_type": "大于",
                    "condition": "1000000"
                }
            ],
            "table_name": "city",
            "id": "437"
        }
    },
    {
        "question": "How many cities in each district have a population greater than 1 million?",
        "SQL": "SELECT count(*),  District FROM city WHERE Population  >  1000000 GROUP BY District",
        "db_id": "world_1",
        "table_description": "The city table contains information about cities, including their ID, name, country code, district, and population.",
        "config": {
            "dimension": [
                {
                    "column": "District"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Population",
                    "match_type": "大于",
                    "condition": "1000000"
                }
            ],
            "table_name": "city",
            "id": "438"
        }
    },
    {
        "question": "Find the government form name and total population for each government form whose average population is greater than 10 million.",
        "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(Population)  >  10000000",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "GovernmentForm"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "Population",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Population",
                    "match_type": "大于",
                    "condition": "10000000"
                }
            ]
        },
        "table_name": "country",
        "id": "439"
    },
    {
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 71.6?",
        "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  71.6",
        "db_id": "world_1",
        "table_description": "Table 'country' contains information about various countries including their government form, population, and life expectancy.",
        "config": {
            "dimension": [
                {
                    "column": "GovernmentForm"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "LifeExpectancy",
                    "match_type": "大于",
                    "condition": "71.6"
                }
            ],
            "table_name": "country",
            "id": "440"
        }
    },
    {
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is longer than 70?",
        "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  >  70",
        "db_id": "world_1",
        "table_description": "Table 'country' contains information about countries including their code, name, continent, region, surface area, independence year, population, life expectancy, GNP, local name, government form, head of state, capital, and code2.",
        "config": {
            "dimension": [
                {
                    "column": "Continent"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "LifeExpectancy",
                    "match_type": "AVG",
                    "condition": "> 70"
                }
            ],
            "table_name": "country",
            "id": "441"
        }
    },
    {
        "question": "What are the different continents and the total population and average life expectancy corresponding to each, for continents with a continent code starting with 'A'?",
        "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country WHERE Code LIKE 'A%' GROUP BY Continent",
        "db_id": "world_1",
        "table_description": "Table containing information about countries including their codes, names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, local names, government forms, heads of state, capitals, and code2s.",
        "config": {
            "dimension": [
                {
                    "column": "Continent"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "LifeExpectancy",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "Code",
                    "match_type": "LIKE",
                    "condition": "A%"
                }
            ],
            "table_name": "country",
            "id": "442"
        }
    },
    {
        "question": "What are the names and areas of countries in North America with the top 5 largest area?",
        "SQL": "SELECT Name ,  SurfaceArea FROM country WHERE Continent = 'North America' ORDER BY SurfaceArea DESC LIMIT 5",
        "db_id": "world_1",
        "table_description": "Table containing information about countries including their names, areas, and continents.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "SurfaceArea",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "North America"
                }
            ],
            "table_name": "country",
            "id": "443"
        }
    },
    {
        "question": "Return the names and surface areas of the 5 largest countries in Europe.",
        "SQL": "SELECT Name ,  SurfaceArea FROM country WHERE Continent = 'Europe' ORDER BY SurfaceArea DESC LIMIT 5",
        "db_id": "world_1",
        "table_description": "Table containing information about countries including their names, continents, regions, surface areas, etc.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "SurfaceArea",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Europe"
                }
            ],
            "table_name": "country",
            "id": "444"
        }
    },
    {
        "question": "What are the names of countries in North America with the top 3 largest population?",
        "SQL": "SELECT Name FROM country WHERE Continent = 'North America' ORDER BY Population DESC LIMIT 3",
        "db_id": "world_1",
        "table_description": "This table contains information about countries including their name, continent, population, and other details.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "North America"
                }
            ],
            "table_name": "country",
            "id": "445"
        }
    },
    {
        "question": "Return the names of the 3 most populated countries in Asia.",
        "SQL": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3",
        "db_id": "world_1",
        "table_description": "Table containing information about countries including their names, populations, and continents.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "Asia"
                }
            ],
            "table_name": "country",
            "id": "446"
        }
    },
    {
        "question": "What are the names of the nations with the 3 lowest populations, but only those located in the Caribbean?",
        "SQL": "SELECT Name FROM country WHERE Region = 'Caribbean' ORDER BY Population ASC LIMIT 3",
        "db_id": "world_1",
        "table_description": "Contains information about different countries including their names, populations, and regions.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Region",
                    "match_type": "精确匹配",
                    "condition": "Caribbean"
                }
            ],
            "table_name": "country",
            "id": "447"
        }
    },
    {
        "question": "Return the names of the 3 countries in North America with the fewest people.",
        "SQL": "SELECT Name FROM country WHERE Continent = 'North America' ORDER BY Population ASC LIMIT 3",
        "db_id": "world_1",
        "table_description": "Table containing information about countries including their name, continent, population, etc.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Population",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Continent",
                    "match_type": "精确匹配",
                    "condition": "North America"
                }
            ],
            "table_name": "country",
            "id": "448"
        }
    },
    {
        "question": "how many countries are in Southern and Central Asia?",
        "SQL": "SELECT count(*) FROM country WHERE region  =  \"Southern and Central Asia\"",
        "db_id": "world_1",
        "table_description": "The country table contains information about countries including their code, name, continent, region, surface area, year of independence, population, life expectancy, GNP, government form, head of state, capital, and more.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "region",
                    "match_type": "精确匹配",
                    "condition": "Southern and Central Asia"
                }
            ],
            "table_name": "country",
            "id": "449"
        }
    },
    {
        "question": "Count the number of countries in Southern and Central Asia.",
        "SQL": "SELECT count(*) FROM country WHERE region = 'Southern and Central Asia'",
        "db_id": "world_1",
        "table_description": "Table containing information about countries including their codes, names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, local names, government forms, heads of state, capitals, and code2s.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "region",
                    "match_type": "精确匹配",
                    "condition": "Southern and Central Asia"
                }
            ],
            "table_name": "country",
            "id": "450"
        }
    },
    {
        "question": "What are the names of the countries that are in the region of Southern Europe and have a population of 80000?",
        "SQL": "SELECT Name FROM country WHERE Region  =  'Southern Europe' AND Population  =  80000",
        "db_id": "world_1",
        "table_description": "country table contains information about countries including their names, continents, regions, and populations.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Region",
                    "match_type": "精确匹配",
                    "condition": "Southern Europe"
                },
                {
                    "column": "Population",
                    "match_type": "等于",
                    "condition": "80000"
                }
            ],
            "table_name": "country",
            "id": "451"
        }
    },
    {
        "question": "Give the names of countries that are in Europe and have a population greater than 80000.",
        "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  >  80000",
        "db_id": "world_1",
        "table_description": "country",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "continent",
                    "match_type": "精确匹配",
                    "condition": "Europe"
                },
                {
                    "column": "Population",
                    "match_type": "大于",
                    "condition": "80000"
                }
            ],
            "table_name": "country",
            "id": "452"
        }
    },
    {
        "question": "What is the total population and average area of countries in the region of Caribbean whose area is bigger than 3000?",
        "SQL": "select sum(population) ,  avg(surfacearea) from country where region  =  'Caribbean' and surfacearea  >  3000",
        "db_id": "world_1",
        "table_description": "country table contains information about different countries including their codes, names, continents, regions, surface areas, independence years, populations, life expectancies, GNPs, government forms, heads of state, capitals, and codes.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "surfacearea",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "region",
                    "match_type": "精确匹配",
                    "condition": "Caribbean"
                },
                {
                    "column": "surfacearea",
                    "match_type": "大于",
                    "condition": "3000"
                }
            ],
            "table_name": "country",
            "id": "453"
        }
    },
    {
        "question": "Give the total population and average surface area corresponding to countries in the Caribbean region that have a surface area greater than 3000.",
        "SQL": "select sum(population) ,  avg(surfacearea) from country where region  =  'Caribbean' and surfacearea  >  3000",
        "db_id": "world_1",
        "table_description": "Table country contains information about different countries including their code, name, continent, region, surface area, independence year, population, life expectancy, GNP, government form, head of state, capital, and code2.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "population",
                    "aggregate_function": "SUM"
                },
                {
                    "column": "surfacearea",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "region",
                    "match_type": "精确匹配",
                    "condition": "Caribbean"
                },
                {
                    "column": "surfacearea",
                    "match_type": "大于",
                    "condition": "3000"
                }
            ],
            "table_name": "country",
            "id": "454"
        }
    },
    {
        "question": "What are the cities with a population greater than 700000?",
        "SQL": "SELECT name FROM city WHERE Population > 700000",
        "db_id": "world_1",
        "table_description": "Table containing city information including ID, Name, CountryCode, District, and Population.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Population",
                    "match_type": "大于",
                    "condition": 700000
                }
            ],
            "table_name": "city",
            "id": "455"
        }
    },
    {
        "question": "Return the names of cities that have a population between 200000 and 800000.",
        "SQL": "select name from city where population between 200000 and 800000",
        "db_id": "world_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "population",
                    "match_type": "在区间",
                    "condition": [
                        200000,
                        800000
                    ]
                }
            ]
        },
        "table_name": "city",
        "id": "456"
    },
    {
        "question": "What is the most widely used official language among countries?",
        "SQL": "SELECT LANGUAGE FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY LANGUAGE ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "world_1",
        "table_description": "The table 'countrylanguage' contains information about languages spoken in different countries, including whether the language is official and the percentage of the population that speaks it.",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "IsOfficial",
                    "match_type": "等于",
                    "condition": "T"
                }
            ],
            "table_name": "countrylanguage",
            "id": "457"
        }
    },
    {
        "question": "Give the official language that is spoken in the most countries.",
        "SQL": "SELECT LANGUAGE FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "db_id": "world_1",
        "table_description": "This table contains information about languages spoken in different countries, including whether the language is official and the percentage of the population that speaks it.",
        "config": {
            "dimension": [
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "IsOfficial",
                    "match_type": "精确匹配",
                    "condition": "T"
                }
            ],
            "table_name": "countrylanguage",
            "id": "458"
        }
    },
    {
        "question": "What is the official language spoken by the largest percentage of people in each country?",
        "SQL": "SELECT LANGUAGE, CountryCode, max(Percentage) FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY CountryCode",
        "db_id": "world_1",
        "table_description": "The table 'countrylanguage' contains information about languages spoken in different countries, including the country code, language name, whether it is official, and the percentage of people who speak it.",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                },
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "IsOfficial",
                    "match_type": "等于",
                    "condition": "T"
                }
            ],
            "table_name": "countrylanguage",
            "id": "459"
        }
    },
    {
        "question": "What are the country codes of the different countries, and what are the official languages spoken by the greatest percentage of people for each?",
        "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY CountryCode",
        "db_id": "world_1",
        "table_description": "The table 'countrylanguage' contains information about the languages spoken in different countries, including the country code, language, whether it is official, and the percentage of speakers.",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                },
                {
                    "column": "LANGUAGE"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "IsOfficial",
                    "match_type": "等于",
                    "condition": "'T'"
                }
            ],
            "table_name": "countrylanguage",
            "id": "460"
        }
    },
    {
        "question": "What is the total number of countries where Papiamento is spoken by the largest percentage of people?",
        "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Papiamento' GROUP BY CountryCode",
        "db_id": "world_1",
        "table_description": "Table contains information about languages spoken in different countries, including the country code, language, whether it is official, and the percentage of people who speak the language.",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                },
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "LANGUAGE",
                    "match_type": "精确匹配",
                    "condition": "Papiamento"
                }
            ],
            "table_name": "countrylanguage",
            "id": "461"
        }
    },
    {
        "question": "Count the number of countries for which Papiamento is the predominantly spoken language.",
        "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE Language  =  'Papiamento' GROUP BY CountryCode",
        "db_id": "world_1",
        "table_description": "countrylanguage table contains information about languages spoken in different countries including the percentage of the population that speaks each language and whether it is the official language.",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                },
                {
                    "column": "Percentage",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Language",
                    "match_type": "精确匹配",
                    "condition": "Papiamento"
                }
            ],
            "table_name": "countrylanguage",
            "id": "462"
        }
    },
    {
        "question": "What are the codes of countries where Papiamento is spoken by the largest percentage of people?",
        "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE Language  =  \"Papiamento\" GROUP BY CountryCode",
        "db_id": "world_1",
        "table_description": "This table contains information about languages spoken in different countries, including the country code, language name, whether it is official, and the percentage of the population that speaks the language.",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "Language",
                    "match_type": "精确匹配",
                    "condition": "Papiamento"
                }
            ]
        },
        "table_name": "countrylanguage",
        "id": "463"
    },
    {
        "question": "Return the codes of countries where Papiamento is one of the languages spoken.",
        "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE Language  =  'Papiamento' GROUP BY CountryCode",
        "db_id": "world_1",
        "table_description": "This table contains information about the languages spoken in different countries, including whether the language is official and the percentage of the population that speaks it.",
        "config": {
            "dimension": [
                {
                    "column": "CountryCode"
                }
            ],
            "measure": [
                {
                    "column": "Percentage",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "Language",
                    "match_type": "精确匹配",
                    "condition": "Papiamento"
                }
            ],
            "table_name": "countrylanguage",
            "id": "464"
        }
    },
    {
        "question": "How many conductors from the USA are there?",
        "SQL": "SELECT count(*) FROM conductor WHERE Nationality = 'USA'",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ],
            "table_name": "conductor",
            "id": "465"
        }
    },
    {
        "question": "Count the number of conductors who have been working for more than 10 years.",
        "SQL": "SELECT count(*) FROM conductor WHERE Year_of_Work > 10",
        "db_id": "orchestra",
        "table_description": "Table containing information about conductors including their ID, name, age, nationality, and years of work.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Work",
                    "match_type": "大于",
                    "condition": "10"
                }
            ],
            "table_name": "conductor",
            "id": "466"
        }
    },
    {
        "question": "List the names of conductors from the UK in ascending order of age.",
        "SQL": "SELECT Name FROM conductor WHERE Nationality = 'UK' ORDER BY Age ASC",
        "db_id": "orchestra",
        "table_description": "Table containing information about conductors including their ID, name, age, nationality, and years of work.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "精确匹配",
                    "condition": "UK"
                }
            ],
            "table_name": "conductor",
            "id": "467"
        }
    },
    {
        "question": "What are the names of conductors from the USA, ordered by age?",
        "SQL": "SELECT Name FROM conductor WHERE Nationality = 'USA' ORDER BY Age ASC",
        "db_id": "orchestra",
        "table_description": "Table containing information about conductors including their ID, name, age, nationality, and years of work.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ],
            "table_name": "conductor",
            "id": "468"
        }
    },
    {
        "question": "What are the names of conductors who have worked for more than 10 years?",
        "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10",
        "db_id": "orchestra",
        "table_description": "This table contains information about conductors including their ID, name, age, nationality, and years of work.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Year_of_Work",
                    "match_type": "大于",
                    "condition": "10"
                }
            ],
            "table_name": "conductor",
            "id": "469"
        }
    },
    {
        "question": "Return the names of conductors that have the nationality 'UK'.",
        "SQL": "SELECT Name FROM conductor WHERE Nationality = 'UK'",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "等于",
                    "condition": "UK"
                }
            ]
        },
        "table_name": "conductor",
        "id": "470"
    },
    {
        "question": "What are the record companies of orchestras that have been founded after 2005, in descending order of their founding years?",
        "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2005 ORDER BY Year_of_Founded DESC",
        "db_id": "orchestra",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2005"
                }
            ],
            "table_name": "orchestra",
            "id": "471"
        }
    },
    {
        "question": "Return the record companies of orchestras that use CD as their major record format, sorted descending by the years in which they were founded.",
        "SQL": "SELECT Record_Company FROM orchestra WHERE Major_Record_Format = 'CD' ORDER BY Year_of_Founded DESC",
        "db_id": "orchestra",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Major_Record_Format",
                    "match_type": "精确匹配",
                    "condition": "CD"
                }
            ],
            "table_name": "orchestra",
            "id": "472"
        }
    },
    {
        "question": "What is the average attendance of shows held at St. Mirren Park?",
        "SQL": "SELECT avg(Attendance) FROM SHOW WHERE If_first_show = 'St. Mirren Park'",
        "db_id": "orchestra",
        "table_description": "SHOW table contains information about different performances including their ID, performance location, if it's the first show, result, and attendance.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Attendance",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "If_first_show",
                    "match_type": "精确匹配",
                    "condition": "St. Mirren Park"
                }
            ],
            "table_name": "SHOW",
            "id": "473"
        }
    },
    {
        "question": "Return the average attendance for shows at St. Mirren Park.",
        "SQL": "SELECT avg(Attendance) FROM SHOW WHERE If_first_show = 'St. Mirren Park'",
        "db_id": "orchestra",
        "table_description": "SHOW table contains details about different shows including their location and attendance.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Attendance",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "If_first_show",
                    "match_type": "精确匹配",
                    "condition": "St. Mirren Park"
                }
            ],
            "table_name": "SHOW",
            "id": "474"
        }
    },
    {
        "question": "What are the maximum and minimum share of performances that contain 'Auditions' in their type?",
        "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE Type LIKE '%Auditions%'",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SHARE",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "SHARE",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "Type",
                    "match_type": "模糊匹配",
                    "condition": "%Auditions%"
                }
            ],
            "table_name": "performance",
            "id": "475"
        }
    },
    {
        "question": "Return the maximum and minimum shares for performances that have the type 'Auditions'.",
        "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE Type = 'Auditions'",
        "db_id": "orchestra",
        "table_description": "The performance table contains information about different types of performances including their share ratings.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "SHARE",
                    "aggregate_function": "MAX"
                },
                {
                    "column": "SHARE",
                    "aggregate_function": "MIN"
                }
            ],
            "filter": [
                {
                    "column": "Type",
                    "match_type": "等于",
                    "condition": "Auditions"
                }
            ],
            "table_name": "performance",
            "id": "476"
        }
    },
    {
        "question": "How many different nationalities do conductors with more than 10 years of work have?",
        "SQL": "SELECT count(DISTINCT Nationality) FROM conductor WHERE Year_of_Work > 10",
        "db_id": "orchestra",
        "table_description": "The conductor table contains information about orchestra conductors including their ID, name, age, nationality, and years of work.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Nationality",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Work",
                    "match_type": "大于",
                    "condition": "10"
                }
            ],
            "table_name": "conductor",
            "id": "477"
        }
    },
    {
        "question": "Count the number of different nationalities of conductors who have worked for more than 10 years.",
        "SQL": "SELECT count(DISTINCT Nationality) FROM conductor WHERE Year_of_Work > 10",
        "db_id": "orchestra",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "Nationality",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Work",
                    "match_type": "大于",
                    "condition": "10"
                }
            ],
            "table_name": "conductor",
            "id": "478"
        }
    },
    {
        "question": "List names of conductors with more than 10 years of work in descending order of years of work.",
        "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10 ORDER BY Year_of_Work DESC",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Year_of_Work",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Work",
                    "match_type": "大于",
                    "condition": "10"
                }
            ],
            "table_name": "conductor",
            "id": "479"
        }
    },
    {
        "question": "What are the names of conductors from the USA, sorted descending by the number of years they have worked?",
        "SQL": "SELECT Name FROM conductor WHERE Nationality = 'USA' ORDER BY Year_of_Work DESC",
        "db_id": "orchestra",
        "table_description": "Table containing information about conductors including their ID, name, age, nationality, and years of work.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Year_of_Work",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ],
            "table_name": "conductor",
            "id": "480"
        }
    },
    {
        "question": "List the name of the conductor with more than 10 years of work.",
        "SQL": "SELECT Name FROM conductor WHERE Year_of_Work > 10",
        "db_id": "orchestra",
        "table_description": "Table contains information about conductors including their ID, name, age, nationality, and years of work.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Year_of_Work",
                    "match_type": "大于",
                    "condition": "10"
                }
            ],
            "table_name": "conductor",
            "id": "481"
        }
    },
    {
        "question": "What is the name of the conductor from the USA who has worked the greatest number of years?",
        "SQL": "SELECT Name FROM conductor WHERE Nationality = 'USA' ORDER BY Year_of_Work DESC LIMIT 1",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Year_of_Work",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Nationality",
                    "match_type": "精确匹配",
                    "condition": "USA"
                }
            ],
            "table_name": "conductor",
            "id": "482"
        }
    },
    {
        "question": "Please show the different record companies and the corresponding number of orchestras founded after 2005.",
        "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra WHERE Year_of_Founded > 2005 GROUP BY Record_Company",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2005"
                }
            ],
            "table_name": "orchestra",
            "id": "483"
        }
    },
    {
        "question": "How many orchestras founded after 2005 does each record company manage?",
        "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra WHERE Year_of_Founded > 2005 GROUP BY Record_Company",
        "db_id": "orchestra",
        "table_description": "Table containing information about various orchestras including their ID, name, conductor ID, record company, year of founding, and major record format.",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2005"
                }
            ],
            "table_name": "orchestra",
            "id": "484"
        }
    },
    {
        "question": "Please show the record formats of orchestras in ascending order of count, but only for those founded after 2005.",
        "SQL": "SELECT Major_Record_Format FROM orchestra WHERE Year_of_Founded > 2005 GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "db_id": "orchestra",
        "table_description": "Table containing information about orchestras, including their ID, name, conductor ID, record company, year founded, and major record format.",
        "config": {
            "dimension": [
                {
                    "column": "Major_Record_Format"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2005"
                }
            ],
            "table_name": "orchestra",
            "id": "485"
        }
    },
    {
        "question": "What are the major record formats of orchestras founded after 2005, sorted by their frequency?",
        "SQL": "SELECT Major_Record_Format FROM orchestra WHERE Year_of_Founded > 2005 GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Major_Record_Format"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2005"
                }
            ],
            "table_name": "orchestra",
            "id": "486"
        }
    },
    {
        "question": "List the record company shared by the most number of orchestras founded after 2000.",
        "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2000 GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "orchestra",
        "table_description": "Table containing information about orchestras including their ID, name, conductor ID, record company, year of founding, and major record format.",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2000"
                }
            ],
            "table_name": "orchestra",
            "id": "487"
        }
    },
    {
        "question": "What is the record company used by the greatest number of orchestras founded after 2000?",
        "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2000 GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "orchestra",
        "table_description": "This table contains information about various orchestras including their ID, name, conductor ID, record company, year founded, and major record format.",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2000"
                }
            ],
            "table_name": "orchestra",
            "id": "488"
        }
    },
    {
        "question": "Show the record companies shared by orchestras founded before 2002 and after 2002.",
        "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2002 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  > 2002",
        "db_id": "orchestra",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "小于",
                    "condition": "2002"
                },
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2002"
                }
            ]
        },
        "table_name": "orchestra",
        "id": "489"
    },
    {
        "question": "What are the record companies that are used by both orchestras founded before 2004 and those founded after 2004?",
        "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2004 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2004",
        "db_id": "orchestra",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "Record_Company"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Year_of_Founded",
                    "match_type": "小于",
                    "condition": "2004"
                },
                {
                    "column": "Year_of_Founded",
                    "match_type": "大于",
                    "condition": "2004"
                }
            ],
            "table_name": "orchestra",
            "id": "490"
        }
    },
    {
        "question": "Find the number of orchestras whose major record format includes \"LP\".",
        "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format LIKE \"%LP%\"",
        "db_id": "orchestra",
        "table_description": "Table containing information about orchestras including their ID, name, conductor ID, record company, year founded, and major record format.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Major_Record_Format",
                    "match_type": "模糊匹配",
                    "condition": "LP"
                },
                {
                    "column": "Major_Record_Format",
                    "match_type": "精确匹配",
                    "condition": "DVD"
                }
            ],
            "table_name": "orchestra",
            "id": "491"
        }
    },
    {
        "question": "Count the number of orchestras that have CD or DVD as their major record format, excluding those with LP.",
        "SQL": "SELECT COUNT(*) FROM orchestra WHERE (Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\") AND Major_Record_Format NOT LIKE \"%LP%\"",
        "db_id": "orchestra",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Major_Record_Format",
                    "match_type": "精确匹配",
                    "condition": "CD"
                },
                {
                    "column": "Major_Record_Format",
                    "match_type": "模糊匹配",
                    "condition": "LP"
                }
            ],
            "table_name": "orchestra",
            "id": "492"
        }
    },
    {
        "question": "How many high schoolers are in grade 10?",
        "SQL": "SELECT count(*) FROM Highschooler WHERE grade = 10",
        "db_id": "network_1",
        "table_description": "The Highschooler table contains information about students including their ID, name, and grade.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "10"
                }
            ],
            "table_name": "Highschooler",
            "id": "493"
        }
    },
    {
        "question": "Count the number of high schoolers in grade 9.",
        "SQL": "SELECT count(*) FROM Highschooler WHERE grade = 9",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "9"
                }
            ],
            "table_name": "Highschooler",
            "id": "494"
        }
    },
    {
        "question": "Show the names and grades of each high schooler who is in 10th grade.",
        "SQL": "SELECT name ,  grade FROM Highschooler WHERE grade = 10",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "10"
                }
            ],
            "table_name": "Highschooler",
            "id": "495"
        }
    },
    {
        "question": "What are the names and grades for each high schooler in grade 9?",
        "SQL": "SELECT name ,  grade FROM Highschooler WHERE grade = 9",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "9"
                }
            ],
            "table_name": "Highschooler",
            "id": "496"
        }
    },
    {
        "question": "Show all the grades of the high schoolers who are in grade 10.",
        "SQL": "SELECT grade FROM Highschooler WHERE grade = 10",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "10"
                }
            ],
            "table_name": "Highschooler",
            "id": "497"
        }
    },
    {
        "question": "What is the grade of each high schooler with ID greater than 1500?",
        "SQL": "SELECT grade FROM Highschooler WHERE ID > 1500",
        "db_id": "network_1",
        "table_description": "Highschooler table contains information about high school students including their ID, name, and grade.",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "ID",
                    "match_type": "大于",
                    "condition": "1500"
                }
            ],
            "table_name": "Highschooler",
            "id": "498"
        }
    },
    {
        "question": "What grade is Tiffany in?",
        "SQL": "SELECT grade FROM Highschooler WHERE name = 'Tiffany'",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Tiffany"
                }
            ],
            "table_name": "Highschooler",
            "id": "499"
        }
    },
    {
        "question": "Return the grade for the high schooler named Haley.",
        "SQL": "SELECT grade FROM Highschooler WHERE name  =  \"Haley\"",
        "db_id": "network_1",
        "table_description": "Highschooler table contains information about students including their ID, name, and grade.",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Haley"
                }
            ],
            "table_name": "Highschooler",
            "id": "500"
        }
    },
    {
        "question": "Show the names of all high schoolers whose grades are 9 or higher.",
        "SQL": "SELECT name FROM Highschooler WHERE grade >= 9",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "大于等于",
                    "condition": "9"
                }
            ],
            "table_name": "Highschooler",
            "id": "501"
        }
    },
    {
        "question": "What are the names of all high schoolers in grade 9?",
        "SQL": "SELECT name FROM Highschooler WHERE grade  =  9",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "9"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "502"
    },
    {
        "question": "Show the ID of the high schooler named Haley.",
        "SQL": "SELECT ID FROM Highschooler WHERE name = \"Haley\"",
        "db_id": "network_1",
        "table_description": "Highschooler table contains information about high school students including their ID, name, and grade.",
        "config": {
            "dimension": [
                {
                    "column": "ID"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Haley"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "503"
    },
    {
        "question": "What is the id of the student named Tiffany?",
        "SQL": "SELECT ID FROM Highschooler WHERE name = \"Tiffany\"",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "ID",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Tiffany"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "504"
    },
    {
        "question": "How many high schoolers are there in grade 9 or 10, excluding those named Jordan?",
        "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10 AND name != 'Jordan'",
        "db_id": "network_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "等于",
                    "condition": "9"
                },
                {
                    "column": "name",
                    "match_type": "不等于",
                    "condition": "Jordan"
                }
            ],
            "table_name": "Highschooler",
            "id": "505"
        }
    },
    {
        "question": "Count the number of high schoolers named Haley or Jordan.",
        "SQL": "SELECT count(*) FROM Highschooler WHERE name  =  'Haley' OR name  =  'Jordan'",
        "db_id": "network_1",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "name",
                    "match_type": "等于",
                    "condition": "Haley"
                },
                {
                    "column": "name",
                    "match_type": "等于",
                    "condition": "Jordan"
                }
            ],
            "table_name": "Highschooler",
            "id": "506"
        }
    },
    {
        "question": "Show the number of high schoolers for each grade who are in grade 9 or 10.",
        "SQL": "SELECT grade ,  count(*) FROM Highschooler WHERE grade IN (9, 10) GROUP BY grade",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "在区间",
                    "condition": "[9, 10]"
                }
            ],
            "table_name": "Highschooler",
            "id": "507"
        }
    },
    {
        "question": "How many high schoolers are in each grade above 9th grade?",
        "SQL": "SELECT grade ,  count(*) FROM Highschooler WHERE grade > 9 GROUP BY grade",
        "db_id": "network_1",
        "table_description": "Highschooler table contains information about high school students including their ID, name, and grade.",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "大于",
                    "condition": "9"
                }
            ],
            "table_name": "Highschooler",
            "id": "508"
        }
    },
    {
        "question": "Which grade has the most high schoolers, excluding those in grade 10?",
        "SQL": "SELECT grade FROM Highschooler WHERE grade != 10 GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "grade",
                    "match_type": "不等于",
                    "condition": "10"
                }
            ],
            "table_name": "Highschooler",
            "id": "509"
        }
    },
    {
        "question": "Return the grade that has the greatest number of high schoolers with the name 'Jordan'.",
        "SQL": "SELECT grade FROM Highschooler WHERE name = 'Jordan' GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "count"
                }
            ],
            "filter": [
                {
                    "column": "name",
                    "match_type": "精确匹配",
                    "condition": "Jordan"
                }
            ],
            "table_name": "Highschooler",
            "id": "510"
        }
    },
    {
        "question": "Show me all grades that have more than 3 students.",
        "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >  3",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于",
                    "condition": "3"
                }
            ],
            "table_name": "Highschooler",
            "id": "511"
        }
    },
    {
        "question": "Which grades have 10 or more high schoolers?",
        "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  10",
        "db_id": "network_1",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "grade"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于等于",
                    "condition": "10"
                }
            ]
        },
        "table_name": "Highschooler",
        "id": "512"
    },
    {
        "question": "Show the student IDs and numbers of friends for students who have at least 2 friends.",
        "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id HAVING count(*) >= 2",
        "db_id": "network_1",
        "table_description": "Table 'Friend' contains columns 'student_id' and 'friend_id'. Each row represents a friendship between two students.",
        "config": {
            "dimension": [
                {
                    "column": "student_id"
                }
            ],
            "measure": [
                {
                    "column": "count(*)",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "count(*)",
                    "match_type": "大于等于",
                    "condition": "2"
                }
            ],
            "table_name": "Friend",
            "id": "513"
        }
    },
    {
        "question": "How many friends does each student have who has more than 2 friends?",
        "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id HAVING count(*) > 2",
        "db_id": "network_1",
        "table_description": "The Friend table contains information about the friendships between students.",
        "config": {
            "dimension": [
                {
                    "column": "student_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "*",
                    "match_type": "COUNT",
                    "condition": "> 2"
                }
            ],
            "table_name": "Friend",
            "id": "514"
        }
    },
    {
        "question": "Count the number of likes for each liked_id.",
        "SQL": "SELECT liked_id ,  count(*) FROM Likes GROUP BY liked_id",
        "db_id": "network_1",
        "config": {
            "dimension": [
                {
                    "column": "liked_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": []
        },
        "table_name": "Likes",
        "id": "515"
    },
    {
        "question": "How many likes correspond to each student id for students who have been liked by at least one other student?",
        "SQL": "SELECT student_id ,  count(*) FROM Likes WHERE student_id IN (SELECT DISTINCT liked_id FROM Likes) GROUP BY student_id",
        "db_id": "network_1",
        "table_description": "The Likes table contains pairs of student IDs where the first ID has liked the second ID.",
        "config": {
            "dimension": [
                {
                    "column": "student_id"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "student_id",
                    "match_type": "IN",
                    "condition": "(SELECT DISTINCT liked_id FROM Likes)"
                }
            ],
            "table_name": "Likes",
            "id": "516"
        }
    },
    {
        "question": "List the emails of the professionals who live in the state of Hawaii or have the role code 'Veterenarian'.",
        "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR role_code  =  'Veterenarian'",
        "db_id": "dog_kennels",
        "table_description": "Table containing information about professionals including their roles and contact details.",
        "config": {
            "dimension": [
                {
                    "column": "email_address"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "Hawaii"
                },
                {
                    "column": "role_code",
                    "match_type": "精确匹配",
                    "condition": "Veterenarian"
                }
            ],
            "table_name": "Professionals",
            "id": "517"
        }
    },
    {
        "question": "What are the emails of the professionals living in either the state of Indiana or the state of Connecticut?",
        "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Indiana' OR state  =  'Connecticut'",
        "db_id": "dog_kennels",
        "table_description": "Table containing information about professionals including their contact details and location.",
        "config": {
            "dimension": [
                {
                    "column": "email_address"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "Indiana"
                },
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "Connecticut"
                }
            ],
            "table_name": "Professionals",
            "id": "518"
        }
    },
    {
        "question": "What are the arriving date and the departing date of all the dogs that were adopted after March 18, 2018?",
        "SQL": "SELECT date_arrived, date_departed FROM Dogs WHERE date_adopted > '2018-03-18'",
        "db_id": "dog_kennels",
        "table_description": "Dogs",
        "config": {
            "dimension": [
                {
                    "column": "date_arrived"
                },
                {
                    "column": "date_departed"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_adopted",
                    "match_type": "大于",
                    "condition": "2018-03-18"
                }
            ],
            "table_name": "Dogs",
            "id": "519"
        }
    },
    {
        "question": "List the arrival date and the departure date for all the dogs that were adopted after March 18, 2018.",
        "SQL": "SELECT date_arrived, date_departed FROM Dogs WHERE date_adopted > '2018-03-18'",
        "db_id": "dog_kennels",
        "table_description": "Dogs",
        "config": {
            "dimension": [
                {
                    "column": "date_arrived"
                },
                {
                    "column": "date_departed"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_adopted",
                    "match_type": "大于",
                    "condition": "2018-03-18"
                }
            ],
            "table_name": "Dogs",
            "id": "520"
        }
    },
    {
        "question": "How many dogs received the 'VAC' treatment?",
        "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments WHERE treatment_type_code = 'VAC'",
        "db_id": "dog_kennels",
        "table_description": "This table contains information about the treatments given to dogs, including the treatment ID, dog ID, professional ID, treatment type code, date of treatment, and cost of treatment.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "dog_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "treatment_type_code",
                    "match_type": "精确匹配",
                    "condition": "VAC"
                }
            ],
            "table_name": "Treatments",
            "id": "521"
        }
    },
    {
        "question": "Count the number of dogs that received a 'VAC' treatment in March 2018.",
        "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments WHERE treatment_type_code = 'VAC' AND date_of_treatment BETWEEN '2018-03-01' AND '2018-03-31'",
        "db_id": "dog_kennels",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "dog_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "treatment_type_code",
                    "match_type": "精确匹配",
                    "condition": "VAC"
                },
                {
                    "column": "date_of_treatment",
                    "match_type": "绝对时间",
                    "condition": [
                        "2018-03-01",
                        "2018-03-31"
                    ]
                }
            ],
            "table_name": "Treatments",
            "id": "522"
        }
    },
    {
        "question": "How many professionals have performed the 'VAC' treatment to dogs?",
        "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE treatment_type_code = 'VAC'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "professional_id",
                    "aggregate_function": "COUNT DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "treatment_type_code",
                    "match_type": "精确匹配",
                    "condition": "VAC"
                }
            ],
            "table_name": "Treatments",
            "id": "523"
        }
    },
    {
        "question": "Find the number of professionals who have treated dogs for vaccinations (VAC).",
        "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE treatment_type_code = 'VAC'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "professional_id",
                    "aggregate_function": "DISTINCT"
                }
            ],
            "filter": [
                {
                    "column": "treatment_type_code",
                    "match_type": "精确匹配",
                    "condition": "VAC"
                }
            ],
            "table_name": "Treatments",
            "id": "524"
        }
    },
    {
        "question": "Which professionals live in a city with the exact name 'West Heidi'? List his or her role, street, city and state.",
        "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city = 'West Heidi'",
        "db_id": "dog_kennels",
        "table_description": "Table containing information about professionals including their role, address, and contact details.",
        "config": {
            "dimension": [
                {
                    "column": "role_code"
                },
                {
                    "column": "street"
                },
                {
                    "column": "city"
                },
                {
                    "column": "state"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "city",
                    "match_type": "精确匹配",
                    "condition": "West Heidi"
                }
            ],
            "table_name": "professionals",
            "id": "525"
        }
    },
    {
        "question": "Find the role, street, city and state of the professionals living in a city that starts with 'New'.",
        "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE 'New%'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "role_code"
                },
                {
                    "column": "street"
                },
                {
                    "column": "city"
                },
                {
                    "column": "state"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "city",
                    "match_type": "模糊匹配",
                    "condition": "New%"
                }
            ]
        },
        "table_name": "professionals",
        "id": "526"
    },
    {
        "question": "Which owners live in the state of North Dakota? List his first name, last name and email.",
        "SQL": "SELECT first_name, last_name, email_address FROM Owners WHERE state = 'North Dakota'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                },
                {
                    "column": "email_address"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "North Dakota"
                }
            ]
        },
        "table_name": "Owners",
        "id": "527"
    },
    {
        "question": "Return the first name, last name and email of the owners living in North Dakota.",
        "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state = 'North Dakota'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "first_name"
                },
                {
                    "column": "last_name"
                },
                {
                    "column": "email_address"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "state",
                    "match_type": "精确匹配",
                    "condition": "North Dakota"
                }
            ]
        },
        "table_name": "Owners",
        "id": "528"
    },
    {
        "question": "How many male dogs have an age below the average?",
        "SQL": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs ) AND gender = '0'",
        "db_id": "dog_kennels",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "age",
                    "match_type": "小于",
                    "condition": "( SELECT avg(age) FROM Dogs )"
                },
                {
                    "column": "gender",
                    "match_type": "等于",
                    "condition": "0"
                }
            ],
            "table_name": "Dogs",
            "id": "529"
        }
    },
    {
        "question": "Count the number of dogs with a weight below 5 kg.",
        "SQL": "SELECT count(*) FROM Dogs WHERE weight  <  5",
        "db_id": "dog_kennels",
        "table_description": "A table containing information about dogs in a kennel, including their ID, owner ID, whether they were abandoned, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, and date departed.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "weight",
                    "match_type": "小于",
                    "condition": "5"
                }
            ],
            "table_name": "Dogs",
            "id": "530"
        }
    },
    {
        "question": "What is the highest cost of treatments that happened in March 2018?",
        "SQL": "SELECT MAX(cost_of_treatment) FROM Treatments WHERE date_of_treatment BETWEEN '2018-03-01' AND '2018-03-31'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "cost_of_treatment",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "date_of_treatment",
                    "match_type": "绝对时间",
                    "condition": [
                        "2018-03-01",
                        "2018-03-31"
                    ]
                }
            ],
            "table_name": "Treatments",
            "id": "531"
        }
    },
    {
        "question": "Show me the cost of the treatments performed by professional 9.",
        "SQL": "SELECT cost_of_treatment FROM Treatments WHERE professional_id = 9",
        "db_id": "dog_kennels",
        "table_description": "Treatments table contains information about the treatments given to dogs, including the professional who performed the treatment, the date of the treatment, and the cost of the treatment.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "cost_of_treatment",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "professional_id",
                    "match_type": "等于",
                    "condition": "9"
                }
            ],
            "table_name": "Treatments",
            "id": "532"
        }
    },
    {
        "question": "List the dog name, age and weight of the dogs that have not been adopted?",
        "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE date_adopted IS NULL",
        "db_id": "dog_kennels",
        "table_description": "Table containing information about dogs in a kennel, including their ID, owner ID, abandonment status, breed code, size code, name, age, date of birth, gender, weight, arrival date, adoption date, and departure date.",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "age"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_adopted",
                    "match_type": "不为空",
                    "condition": "NULL"
                }
            ],
            "table_name": "Dogs",
            "id": "533"
        }
    },
    {
        "question": "What are the dog name, age and weight of the dogs that have been adopted? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE date_adopted IS NOT NULL",
        "db_id": "dog_kennels",
        "table_description": "Dogs",
        "config": {
            "dimension": [
                {
                    "column": "name"
                },
                {
                    "column": "age"
                },
                {
                    "column": "weight"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_adopted",
                    "match_type": "不为空",
                    "condition": ""
                }
            ],
            "table_name": "Dogs",
            "id": "534"
        }
    },
    {
        "question": "What is the average age of all the dogs that are larger than medium size?",
        "SQL": "SELECT avg(age) FROM Dogs WHERE size_code > 'MED'",
        "db_id": "dog_kennels",
        "table_description": "Table containing information about dogs in a kennel.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "size_code",
                    "match_type": "大于",
                    "condition": "MED"
                }
            ],
            "table_name": "Dogs",
            "id": "535"
        }
    },
    {
        "question": "Compute the average age of all the large dogs.",
        "SQL": "SELECT avg(age) FROM Dogs WHERE size_code = 'LGE'",
        "db_id": "dog_kennels",
        "table_description": "Dogs table contains information about dogs in a kennel, including their ID, owner ID, breed, size, name, age, date of birth, gender, weight, and dates of arrival, adoption, and departure.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "AVG"
                }
            ],
            "filter": [
                {
                    "column": "size_code",
                    "match_type": "精确匹配",
                    "condition": "LGE"
                }
            ],
            "table_name": "Dogs",
            "id": "536"
        }
    },
    {
        "question": "What is the age of the oldest dog that has been adopted after March 1st, 2018?",
        "SQL": "SELECT max(age) FROM Dogs WHERE date_adopted >= '2018-03-01'",
        "db_id": "dog_kennels",
        "table_description": "Table containing information about dogs in the kennel, including their age and adoption dates.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "date_adopted",
                    "match_type": "absolute_time",
                    "condition": [
                        "2018-03-01",
                        null
                    ]
                }
            ],
            "table_name": "Dogs",
            "id": "537"
        }
    },
    {
        "question": "Tell me the age of the oldest dog that is not abandoned.",
        "SQL": "SELECT max(age) FROM Dogs WHERE abandoned_yn = '0'",
        "db_id": "dog_kennels",
        "table_description": "A table containing information about dogs in a kennel, including their ID, owner ID, whether they are abandoned, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, and date departed.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "age",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "abandoned_yn",
                    "match_type": "等于",
                    "condition": "0"
                }
            ],
            "table_name": "Dogs",
            "id": "538"
        }
    },
    {
        "question": "What is the total cost of each charge type? List both charge type and total amount, but only for charges with an amount greater than 100.",
        "SQL": "SELECT charge_type ,  SUM(charge_amount) AS total_charge FROM Charges WHERE charge_amount > 100 GROUP BY charge_type",
        "db_id": "dog_kennels",
        "table_description": "The Charges table contains information about different types of charges and their amounts.",
        "config": {
            "dimension": [
                {
                    "column": "charge_type"
                }
            ],
            "measure": [
                {
                    "column": "charge_amount",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "charge_amount",
                    "match_type": "大于",
                    "condition": "100"
                }
            ],
            "table_name": "Charges",
            "id": "539"
        }
    },
    {
        "question": "List each charge type and its amount for charges greater than 100.",
        "SQL": "SELECT charge_type ,  charge_amount FROM Charges WHERE charge_amount > 100",
        "db_id": "dog_kennels",
        "table_description": "The Charges table contains information about the charges made at dog kennels, including the charge type and the amount.",
        "config": {
            "dimension": [
                {
                    "column": "charge_type"
                }
            ],
            "measure": [
                {
                    "column": "charge_amount",
                    "aggregate_function": "SUM"
                }
            ],
            "filter": [
                {
                    "column": "charge_amount",
                    "match_type": "大于",
                    "condition": "100"
                }
            ],
            "table_name": "Charges",
            "id": "540"
        }
    },
    {
        "question": "What is the highest charge amount for 'Health Check'?",
        "SQL": "SELECT MAX(charge_amount) FROM Charges WHERE charge_type = 'Health Check'",
        "db_id": "dog_kennels",
        "table_description": "Table containing charges information for dog kennels.",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "charge_amount",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "charge_type",
                    "match_type": "精确匹配",
                    "condition": "Health Check"
                }
            ],
            "table_name": "Charges",
            "id": "541"
        }
    },
    {
        "question": "What is the maximum charge amount for the charge type 'Health Check'?",
        "SQL": "SELECT MAX(charge_amount) FROM Charges WHERE charge_type = 'Health Check'",
        "db_id": "dog_kennels",
        "table_description": "",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "charge_amount",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "charge_type",
                    "match_type": "精确匹配",
                    "condition": "Health Check"
                }
            ],
            "table_name": "Charges",
            "id": "542"
        }
    },
    {
        "question": "List the email, cell phone and home phone of all the professionals who are employees.",
        "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals WHERE role_code = 'Employee'",
        "db_id": "dog_kennels",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "email_address"
                },
                {
                    "column": "cell_number"
                },
                {
                    "column": "home_phone"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "role_code",
                    "match_type": "精确匹配",
                    "condition": "Employee"
                }
            ],
            "table_name": "professionals",
            "id": "543"
        }
    },
    {
        "question": "What are the email, cell phone and home phone of each professional with the role code 'Veterenarian'?",
        "SQL": "SELECT email_address, cell_number, home_phone FROM professionals WHERE role_code = 'Veterenarian'",
        "db_id": "dog_kennels",
        "table_description": "Table containing information about professionals including their contact details and role.",
        "config": {
            "dimension": [
                {
                    "column": "email_address"
                },
                {
                    "column": "cell_number"
                },
                {
                    "column": "home_phone"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "role_code",
                    "match_type": "精确匹配",
                    "condition": "Veterenarian"
                }
            ],
            "table_name": "professionals",
            "id": "544"
        }
    },
    {
        "question": "What are all the possible breed type and size type combinations for dogs that have been adopted after March 1, 2018?",
        "SQL": "SELECT DISTINCT breed_code, size_code FROM dogs WHERE date_adopted > '2018-03-01'",
        "db_id": "dog_kennels",
        "table_description": "Table containing information about dogs in the kennel.",
        "config": {
            "dimension": [
                {
                    "column": "breed_code"
                },
                {
                    "column": "size_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_adopted",
                    "match_type": "绝对时间",
                    "condition": "['2018-03-01', null]"
                }
            ],
            "table_name": "dogs",
            "id": "545"
        }
    },
    {
        "question": "Find the distinct breed type and size type combinations for dogs that have not been abandoned.",
        "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs WHERE abandoned_yn = '0'",
        "db_id": "dog_kennels",
        "config": {
            "dimension": [
                {
                    "column": "breed_code"
                },
                {
                    "column": "size_code"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "abandoned_yn",
                    "match_type": "等于",
                    "condition": "0"
                }
            ],
            "table_name": "dogs",
            "id": "546"
        }
    },
    {
        "question": "How many singers are there from the United States?",
        "SQL": "SELECT count(*) FROM singer WHERE Citizenship = 'United States'",
        "db_id": "singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "精确匹配",
                    "condition": "United States"
                }
            ],
            "table_name": "singer",
            "id": "547"
        }
    },
    {
        "question": "What is the count of singers from the United States?",
        "SQL": "SELECT count(*) FROM singer WHERE Citizenship = 'United States'",
        "db_id": "singer",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "精确匹配",
                    "condition": "United States"
                }
            ],
            "table_name": "singer",
            "id": "548"
        }
    },
    {
        "question": "List the name of singers from France in ascending order of net worth.",
        "SQL": "SELECT Name FROM singer WHERE Citizenship = 'France' ORDER BY Net_Worth_Millions ASC",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "精确匹配",
                    "condition": "France"
                }
            ],
            "table_name": "singer",
            "id": "549"
        }
    },
    {
        "question": "What are the names of singers from Chile ordered by ascending net worth?",
        "SQL": "SELECT Name FROM singer WHERE Citizenship = 'Chile' ORDER BY Net_Worth_Millions ASC",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "精确匹配",
                    "condition": "Chile"
                }
            ],
            "table_name": "singer",
            "id": "550"
        }
    },
    {
        "question": "What are the birth year and citizenship of singers from Chile?",
        "SQL": "SELECT Birth_Year ,  Citizenship FROM singer WHERE Citizenship = 'Chile'",
        "db_id": "singer",
        "table_description": "singer table contains information about singers including their ID, name, birth year, net worth, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Birth_Year"
                },
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "精确匹配",
                    "condition": "Chile"
                }
            ],
            "table_name": "singer",
            "id": "551"
        }
    },
    {
        "question": "What are the birth years and citizenships of the singers who have a net worth greater than 25 million?",
        "SQL": "SELECT Birth_Year ,  Citizenship FROM singer WHERE Net_Worth_Millions > 25",
        "db_id": "singer",
        "table_description": "Table containing information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Birth_Year"
                },
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Net_Worth_Millions",
                    "match_type": "大于",
                    "condition": "25"
                }
            ],
            "table_name": "singer",
            "id": "552"
        }
    },
    {
        "question": "List the name of singers whose net worth is greater than 25 million.",
        "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 25",
        "db_id": "singer",
        "table_description": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Net_Worth_Millions",
                    "match_type": "大于",
                    "condition": "25"
                }
            ],
            "table_name": "singer",
            "id": "553"
        }
    },
    {
        "question": "What are the names of the singers who have a net worth greater than 20 million?",
        "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 20",
        "db_id": "singer",
        "table_description": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Net_Worth_Millions",
                    "match_type": "大于",
                    "condition": "20"
                }
            ],
            "table_name": "singer",
            "id": "554"
        }
    },
    {
        "question": "Show the name of singers whose net worth is more than 25 million dollars?",
        "SQL": "SELECT Name FROM singer WHERE Net_Worth_Millions > 25",
        "db_id": "singer",
        "table_description": "This table contains information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Net_Worth_Millions",
                    "match_type": "大于",
                    "condition": "25"
                },
                {
                    "column": "Birth_Year",
                    "match_type": "等于",
                    "condition": "1949"
                }
            ],
            "table_name": "singer",
            "id": "555"
        }
    },
    {
        "question": "What are the names of the singers who are citizens of the United States and were born in 1948 or 1949?",
        "SQL": "SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949) AND Citizenship = 'United States'",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Birth_Year",
                    "match_type": "等于",
                    "condition": "1948"
                },
                {
                    "column": "Citizenship",
                    "match_type": "精确匹配",
                    "condition": "United States"
                }
            ]
        },
        "table_name": "singer",
        "id": "556"
    },
    {
        "question": "What is the name of the singer with the largest net worth from France?",
        "SQL": "SELECT Name FROM singer WHERE Citizenship = 'France' ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "db_id": "singer",
        "table_description": "Table containing information about singers including their ID, name, birth year, net worth, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Net_Worth_Millions",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "精确匹配",
                    "condition": "France"
                }
            ],
            "table_name": "singer",
            "id": "557"
        }
    },
    {
        "question": "What is the name of the singer who is worth the most and is from the United States?",
        "SQL": "SELECT Name FROM singer WHERE Citizenship = 'United States' ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "db_id": "singer",
        "table_description": "Table containing information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Name"
                }
            ],
            "measure": [
                {
                    "column": "Net_Worth_Millions",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "精确匹配",
                    "condition": "United States"
                }
            ],
            "table_name": "singer",
            "id": "558"
        }
    },
    {
        "question": "Show different citizenship of singers with a net worth greater than 20 million and the number of singers of each citizenship.",
        "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer WHERE Net_Worth_Millions > 20 GROUP BY Citizenship",
        "db_id": "singer",
        "table_description": "Table 'singer' contains information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Net_Worth_Millions",
                    "match_type": "大于",
                    "condition": "20"
                }
            ],
            "table_name": "singer",
            "id": "559"
        }
    },
    {
        "question": "For each citizenship, how many singers with net worth greater than 20 million are from that country?",
        "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer WHERE Net_Worth_Millions > 20 GROUP BY Citizenship",
        "db_id": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Net_Worth_Millions",
                    "match_type": "大于",
                    "condition": "20"
                }
            ],
            "table_name": "singer",
            "id": "560"
        }
    },
    {
        "question": "Please show the most common citizenship of singers who are from the United States.",
        "SQL": "SELECT Citizenship FROM singer WHERE Citizenship = 'United States' GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "singer",
        "table_description": "Table containing information about singers including their ID, name, birth year, net worth, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Citizenship",
                    "match_type": "精确匹配",
                    "condition": "United States"
                }
            ],
            "table_name": "singer",
            "id": "561"
        }
    },
    {
        "question": "What is the most common singer citizenship among singers with a net worth of over 20 million dollars?",
        "SQL": "select citizenship from singer where Net_Worth_Millions > 20 group by citizenship order by count(*) desc limit 1",
        "db_id": "singer",
        "table_description": "Table containing information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "citizenship"
                }
            ],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "Net_Worth_Millions",
                    "match_type": "大于",
                    "condition": "20"
                }
            ],
            "table_name": "singer",
            "id": "562"
        }
    },
    {
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship who were born after 1945.",
        "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer WHERE Birth_Year > 1945 GROUP BY Citizenship",
        "db_id": "singer",
        "table_description": "singer",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "Net_Worth_Millions",
                    "aggregate_function": "max"
                }
            ],
            "filter": [
                {
                    "column": "Birth_Year",
                    "match_type": "大于",
                    "condition": "1945"
                }
            ],
            "table_name": "singer",
            "id": "563"
        }
    },
    {
        "question": "For each citizenship, what is the maximum net worth for singers born after 1945?",
        "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer WHERE Birth_Year > 1945 GROUP BY Citizenship",
        "db_id": "singer",
        "table_description": "Table containing information about singers including their ID, name, birth year, net worth, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [
                {
                    "column": "Net_Worth_Millions",
                    "aggregate_function": "MAX"
                }
            ],
            "filter": [
                {
                    "column": "Birth_Year",
                    "match_type": "大于",
                    "condition": "1945"
                }
            ],
            "table_name": "singer",
            "id": "564"
        }
    },
    {
        "question": "Show the citizenship shared by singers with net worth less than 20 million and more than 30 million.",
        "SQL": "SELECT Citizenship FROM singer WHERE Net_Worth_Millions  <  20 INTERSECT SELECT Citizenship FROM singer WHERE Net_Worth_Millions  > 30",
        "db_id": "singer",
        "table_description": "Table containing information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Net_Worth_Millions",
                    "match_type": "小于",
                    "condition": "20"
                },
                {
                    "column": "Birth_Year",
                    "match_type": "大于",
                    "condition": "1955"
                }
            ],
            "table_name": "singer",
            "id": "565"
        }
    },
    {
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1960?",
        "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1960",
        "db_id": "singer",
        "table_description": "The singer table contains information about singers including their ID, name, birth year, net worth in millions, and citizenship.",
        "config": {
            "dimension": [
                {
                    "column": "Citizenship"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "Birth_Year",
                    "match_type": "小于",
                    "condition": "1945"
                },
                {
                    "column": "Birth_Year",
                    "match_type": "大于",
                    "condition": "1960"
                }
            ],
            "table_name": "singer",
            "id": "566"
        }
    },
    {
        "question": "How many amenities are there in total?",
        "SQL": "SELECT count(*) FROM Other_Available_Features WHERE feature_type_code = 'Amenity'",
        "db_id": "real_estate_properties",
        "config": {
            "dimension": [],
            "measure": [
                {
                    "column": "*",
                    "aggregate_function": "COUNT"
                }
            ],
            "filter": [
                {
                    "column": "feature_type_code",
                    "match_type": "精确匹配",
                    "condition": "Amenity"
                }
            ],
            "table_name": "Other_Available_Features",
            "id": "567"
        }
    },
    {
        "question": "What are the names of properties that have been on the market since before 1990-01-01 and have more than 1 room?",
        "SQL": "SELECT property_name FROM Properties WHERE date_on_market < '1990-01-01' AND room_count > 1",
        "db_id": "real_estate_properties",
        "table_description": "",
        "config": {
            "dimension": [
                {
                    "column": "property_name"
                }
            ],
            "measure": [],
            "filter": [
                {
                    "column": "date_on_market",
                    "match_type": "小于",
                    "condition": "1990-01-01"
                },
                {
                    "column": "property_type_code",
                    "match_type": "等于",
                    "condition": "Apartment"
                },
                {
                    "column": "room_count",
                    "match_type": "大于",
                    "condition": 1
                }
            ],
            "table_name": "Properties",
            "id": "568"
        }
    }
]