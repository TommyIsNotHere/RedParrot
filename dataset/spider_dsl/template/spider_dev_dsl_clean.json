[
  {
    "question": "How many singers do we have?",
    "SQL": "SELECT count(*) FROM singer",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 0
  },
  {
    "question": "What is the total number of singers?",
    "SQL": "SELECT count(*) FROM singer",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 1
  },
  {
    "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
    "SQL": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 2
  },
  {
    "question": "What are the names, countries, and ages for every singer in descending order of age?",
    "SQL": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        },
        {
          "column": "age"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 3
  },
  {
    "question": "What is the average, minimum, and maximum age of all singers from France?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "table_name": "singer",
    "id": 4
  },
  {
    "question": "What is the average, minimum, and maximum age for all French singers?",
    "SQL": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        },
        {
          "column": "age",
          "aggregate_function": "MIN"
        },
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "country",
          "match_type": "精确匹配",
          "condition": "France"
        }
      ]
    },
    "table_name": "singer",
    "id": 5
  },
  {
    "question": "Show the name and the release year of the song by the youngest singer.",
    "SQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 6
  },
  {
    "question": "What are the names and release years for all the songs of the youngest singer?",
    "SQL": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        },
        {
          "column": "song_release_year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "最小值",
          "condition": ""
        }
      ]
    },
    "table_name": "singer",
    "id": 7
  },
  {
    "question": "What are all distinct countries where singers above age 20 are from?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age  >  20",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "table_name": "singer",
    "id": 8
  },
  {
    "question": "What are the different countries with singers above age 20?",
    "SQL": "SELECT DISTINCT country FROM singer WHERE age > 20",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "20"
        }
      ]
    },
    "table_name": "singer",
    "id": 9
  },
  {
    "question": "Show all countries and the number of singers in each country.",
    "SQL": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 10
  },
  {
    "question": "How many singers are from each country?",
    "SQL": "SELECT country ,  count(*) FROM singer GROUP BY country",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 11
  },
  {
    "question": "List all song names by singers above the average age.",
    "SQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "(SELECT avg(age) FROM singer)"
        }
      ]
    },
    "table_name": "singer",
    "id": 12
  },
  {
    "question": "What are all the song names by singers who are older than average?",
    "SQL": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "song_name"
        }
      ],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "(SELECT avg(age) FROM singer)"
        }
      ]
    },
    "table_name": "singer",
    "id": 13
  },
  {
    "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "capacity",
          "match_type": "在区间",
          "condition": [
            5000,
            10000
          ]
        }
      ]
    },
    "table_name": "stadium",
    "id": 14
  },
  {
    "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
    "SQL": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        },
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "capacity",
          "match_type": "在区间",
          "condition": [
            5000,
            10000
          ]
        }
      ]
    },
    "table_name": "stadium",
    "id": 15
  },
  {
    "question": "What is the maximum capacity and the average of all stadiums ?",
    "SQL": "select max(capacity), average from stadium",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        },
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "stadium",
    "id": 16
  },
  {
    "question": "What is the average and maximum capacities for all stadiums ?",
    "SQL": "select avg(capacity) ,  max(capacity) from stadium",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "capacity",
          "aggregate_function": "AVG"
        },
        {
          "column": "capacity",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "stadium",
    "id": 17
  },
  {
    "question": "What is the name and capacity for the stadium with highest average attendance?",
    "SQL": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "stadium",
    "id": 18
  },
  {
    "question": "What is the name and capacity for the stadium with the highest average attendance?",
    "SQL": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "capacity"
        }
      ],
      "measure": [
        {
          "column": "average",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "stadium",
    "id": 19
  },
  {
    "question": "How many concerts are there in year 2014 or 2015?",
    "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "table_name": "concert",
    "id": 20
  },
  {
    "question": "How many concerts occurred in 2014 or 2015?",
    "SQL": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
    "db_id": "concert_singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2014"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2015"
        }
      ]
    },
    "table_name": "concert",
    "id": 21
  },
  {
    "question": "Which year has most number of concerts?",
    "SQL": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "concert",
    "id": 22
  },
  {
    "question": "What is the year that had the most concerts?",
    "SQL": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "concert",
    "id": 23
  },
  {
    "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
    "SQL": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "age",
          "match_type": "大于",
          "condition": "40"
        },
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        }
      ]
    },
    "table_name": "singer",
    "id": 24
  },
  {
    "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_name",
          "match_type": "模糊匹配",
          "condition": "Hey"
        }
      ]
    },
    "table_name": "singer",
    "id": 25
  },
  {
    "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
    "SQL": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
    "db_id": "concert_singer",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "song_name",
          "match_type": "模糊匹配",
          "condition": "Hey"
        }
      ]
    },
    "table_name": "singer",
    "id": 26
  },
  {
    "question": "Find the number of pets whose weight is heavier than 10.",
    "SQL": "SELECT count(*) FROM pets WHERE weight  >  10",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "pets",
    "id": 27
  },
  {
    "question": "How many pets have a greater weight than 10?",
    "SQL": "SELECT count(*) FROM pets WHERE weight  >  10",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "weight",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "pets",
    "id": 28
  },
  {
    "question": "Find the weight of the youngest dog.",
    "SQL": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "MIN(pet_age)"
        }
      ]
    },
    "table_name": "pets",
    "id": 29
  },
  {
    "question": "How much does the youngest dog weigh?",
    "SQL": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "等于",
          "condition": "MIN(pet_age)"
        }
      ]
    },
    "table_name": "pets",
    "id": 30
  },
  {
    "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
    "SQL": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 31
  },
  {
    "question": "List the maximum weight and type for each type of pet.",
    "SQL": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "petType"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 32
  },
  {
    "question": "Find the number of distinct type of pets.",
    "SQL": "SELECT count(DISTINCT pettype) FROM pets",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "pettype",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 33
  },
  {
    "question": "How many different types of pet are there?",
    "SQL": "SELECT count(DISTINCT pettype) FROM pets",
    "db_id": "pets_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "pettype",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 34
  },
  {
    "question": "Find the type and weight of the youngest pet.",
    "SQL": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "pets",
    "id": 35
  },
  {
    "question": "What type of pet is the youngest animal, and how much does it weigh?",
    "SQL": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "pets",
    "id": 36
  },
  {
    "question": "Find the id and weight of all pets whose age is older than 1.",
    "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "pets",
    "id": 37
  },
  {
    "question": "What is the id and weight of every pet who is older than 1?",
    "SQL": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "petid"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "pet_age",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "pets",
    "id": 38
  },
  {
    "question": "Find the average and maximum age for each type of pet.",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "pet_age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 39
  },
  {
    "question": "What is the average and maximum age for each pet type?",
    "SQL": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "pet_age",
          "aggregate_function": "avg"
        },
        {
          "column": "pet_age",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 40
  },
  {
    "question": "Find the average weight for each pet type.",
    "SQL": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 41
  },
  {
    "question": "What is the average weight for each type of pet?",
    "SQL": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
    "db_id": "pets_1",
    "config": {
      "dimension": [
        {
          "column": "pettype"
        }
      ],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "pets",
    "id": 42
  },
  {
    "question": "How many continents are there?",
    "SQL": "SELECT count(*) FROM CONTINENTS;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "CONTINENTS",
    "id": 43
  },
  {
    "question": "What is the number of continents?",
    "SQL": "SELECT count(*) FROM CONTINENTS;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "CONTINENTS",
    "id": 44
  },
  {
    "question": "How many countries are listed?",
    "SQL": "SELECT count(*) FROM COUNTRIES;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "COUNTRIES",
    "id": 45
  },
  {
    "question": "How many countries exist?",
    "SQL": "SELECT count(*) FROM COUNTRIES;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "COUNTRIES",
    "id": 46
  },
  {
    "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 47
  },
  {
    "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
    "SQL": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 48
  },
  {
    "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "等于",
          "condition": "1974"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 49
  },
  {
    "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
    "SQL": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "weight",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "等于",
          "condition": "1974"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 50
  },
  {
    "question": "What are all the makers and models?",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "MODEL_LIST",
    "id": 51
  },
  {
    "question": "What are the makers and models?",
    "SQL": "SELECT Maker ,  Model FROM MODEL_LIST;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Maker"
        },
        {
          "column": "Model"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "MODEL_LIST",
    "id": 52
  },
  {
    "question": "What is the number of the cars with horsepower more than 150?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "horsepower",
          "match_type": "大于",
          "condition": "150"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 53
  },
  {
    "question": "What is the number of cars with a horsepower greater than 150?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "horsepower",
          "match_type": "大于",
          "condition": "150"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 54
  },
  {
    "question": "What is the average weight of cars each year?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA",
    "id": 55
  },
  {
    "question": "What is the average weight and year for each year?",
    "SQL": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "Weight",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA",
    "id": 56
  },
  {
    "question": "What is the average horsepower of the cars before 1980?",
    "SQL": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 57
  },
  {
    "question": "What is the average horsepower for all cars produced before 1980 ?",
    "SQL": "select avg(horsepower) from cars_data where year < 1980;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 58
  },
  {
    "question": "What is the maximum accelerate for different number of cylinders?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA",
    "id": 59
  },
  {
    "question": "What is the maximum accelerate for all the different cylinders?",
    "SQL": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Cylinders"
        }
      ],
      "measure": [
        {
          "column": "Accelerate",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA",
    "id": 60
  },
  {
    "question": "Which model has the most version(make) of cars?",
    "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Model"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "CAR_NAMES",
    "id": 61
  },
  {
    "question": "What model has the most different versions?",
    "SQL": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "Model"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "CAR_NAMES",
    "id": 62
  },
  {
    "question": "How many cars have more than 4 cylinders?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 63
  },
  {
    "question": "What is the number of cars with more than 4 cylinders?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 64
  },
  {
    "question": "how many cars were produced in 1980?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 65
  },
  {
    "question": "In 1980, how many cars were made?",
    "SQL": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 66
  },
  {
    "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
    "SQL": "select distinct year from cars_data where weight between 3000 and 4000;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "在区间",
          "condition": [
            3000,
            4000
          ]
        }
      ]
    },
    "table_name": "cars_data",
    "id": 67
  },
  {
    "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
    "SQL": "select distinct year from cars_data where weight between 3000 and 4000;",
    "db_id": "car_1",
    "config": {
      "dimension": [
        {
          "column": "year"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "weight",
          "match_type": "在区间",
          "condition": [
            3000,
            4000
          ]
        }
      ]
    },
    "table_name": "cars_data",
    "id": 68
  },
  {
    "question": "What is the horsepower of the car with the largest accelerate?",
    "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "accelerate",
          "match_type": "ORDER_BY_DESC_LIMIT_1",
          "condition": ""
        }
      ]
    },
    "table_name": "CARS_DATA AS T1",
    "id": 69
  },
  {
    "question": "What is the horsepower of the car with the greatest accelerate?",
    "SQL": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "T1.horsepower",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "CARS_DATA AS T1",
    "id": 70
  },
  {
    "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Accelerate",
          "match_type": "大于",
          "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 71
  },
  {
    "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Accelerate",
          "match_type": "大于",
          "condition": "( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 72
  },
  {
    "question": "How many cars has over 6 cylinders?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "6"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 73
  },
  {
    "question": "What is the number of cars with over 6 cylinders?",
    "SQL": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Cylinders",
          "match_type": "大于",
          "condition": "6"
        }
      ]
    },
    "table_name": "CARS_DATA",
    "id": 74
  },
  {
    "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
    "SQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 75
  },
  {
    "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
    "SQL": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
    "db_id": "car_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "mpg",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "cylinders",
          "match_type": "等于",
          "condition": "8"
        },
        {
          "column": "year",
          "match_type": "小于",
          "condition": "1980"
        }
      ]
    },
    "table_name": "cars_data",
    "id": 76
  },
  {
    "question": "Which country does Airline \"JetBlue Airways\" belong to?",
    "SQL": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 77
  },
  {
    "question": "What country is Jetblue Airways affiliated with?",
    "SQL": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 78
  },
  {
    "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 79
  },
  {
    "question": "Which abbreviation corresponds to Jetblue Airways?",
    "SQL": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Airline",
          "match_type": "精确匹配",
          "condition": "JetBlue Airways"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 80
  },
  {
    "question": "List all airline names and their abbreviations in \"USA\".",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 81
  },
  {
    "question": "What are the airline names and abbreviations for airlines in the USA?",
    "SQL": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        },
        {
          "column": "Abbreviation"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 82
  },
  {
    "question": "List the airport code and name in the city of Anthony.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Anthony"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 83
  },
  {
    "question": "Give the airport code and airport name corresonding to the city Anthony.",
    "SQL": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportCode"
        },
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Anthony"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 84
  },
  {
    "question": "How many airlines do we have?",
    "SQL": "SELECT count(*) FROM AIRLINES",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "AIRLINES",
    "id": 85
  },
  {
    "question": "What is the total number of airlines?",
    "SQL": "SELECT count(*) FROM AIRLINES",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "AIRLINES",
    "id": 86
  },
  {
    "question": "How many airports do we have?",
    "SQL": "SELECT count(*) FROM AIRPORTS",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "AIRPORTS",
    "id": 87
  },
  {
    "question": "Return the number of  airports.",
    "SQL": "SELECT count(*) FROM AIRPORTS",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "AIRPORTS",
    "id": 88
  },
  {
    "question": "How many flights do we have?",
    "SQL": "SELECT count(*) FROM FLIGHTS",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "FLIGHTS",
    "id": 89
  },
  {
    "question": "Return the number of flights.",
    "SQL": "SELECT count(*) FROM FLIGHTS",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "FLIGHTS",
    "id": 90
  },
  {
    "question": "Which airline has abbreviation 'UAL'?",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "UAL"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 91
  },
  {
    "question": "Give the airline with abbreviation 'UAL'.",
    "SQL": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "Airline"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Abbreviation",
          "match_type": "精确匹配",
          "condition": "UAL"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 92
  },
  {
    "question": "How many airlines are from USA?",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 93
  },
  {
    "question": "Return the number of airlines in the USA.",
    "SQL": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Country",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "AIRLINES",
    "id": 94
  },
  {
    "question": "Which city and country is the Alton airport at?",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "精确匹配",
          "condition": "Alton"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 95
  },
  {
    "question": "Give the city and country for the Alton airport.",
    "SQL": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "City"
        },
        {
          "column": "Country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportName",
          "match_type": "精确匹配",
          "condition": "Alton"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 96
  },
  {
    "question": "What is the airport name for airport 'AKO'?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "AKO"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 97
  },
  {
    "question": "Return the name of the airport with code 'AKO'.",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "AirportCode",
          "match_type": "精确匹配",
          "condition": "AKO"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 98
  },
  {
    "question": "What are airport names at City 'Aberdeen'?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Aberdeen"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 99
  },
  {
    "question": "What are the names of airports in Aberdeen?",
    "SQL": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "AirportName"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "City",
          "match_type": "精确匹配",
          "condition": "Aberdeen"
        }
      ]
    },
    "table_name": "AIRPORTS",
    "id": 100
  },
  {
    "question": "How many flights depart from 'APG'?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 101
  },
  {
    "question": "Count the number of flights departing from 'APG'.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 102
  },
  {
    "question": "How many flights have destination ATO?",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "ATO"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 103
  },
  {
    "question": "Count the number of flights into ATO.",
    "SQL": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = 'ATO'",
    "db_id": "flight_2",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "ATO"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 104
  },
  {
    "question": "What are flight numbers of flights departing from Airport \"APG\"?",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 105
  },
  {
    "question": "Give the flight numbers of flights leaving from APG.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SourceAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 106
  },
  {
    "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 107
  },
  {
    "question": "Give the flight numbers of flights landing at APG.",
    "SQL": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
    "db_id": "flight_2",
    "config": {
      "dimension": [
        {
          "column": "FlightNo"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "DestAirport",
          "match_type": "精确匹配",
          "condition": "APG"
        }
      ]
    },
    "table_name": "FLIGHTS",
    "id": 108
  },
  {
    "question": "How many employees are there?",
    "SQL": "SELECT count(*) FROM employee",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "employee",
    "id": 109
  },
  {
    "question": "Count the number of employees",
    "SQL": "SELECT count(*) FROM employee",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "employee",
    "id": 110
  },
  {
    "question": "Sort employee names by their age in ascending order.",
    "SQL": "SELECT name FROM employee ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "employee",
    "id": 111
  },
  {
    "question": "List the names of employees and sort in ascending order of age.",
    "SQL": "SELECT name FROM employee ORDER BY age",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "employee",
    "id": 112
  },
  {
    "question": "What is the number of employees from each city?",
    "SQL": "SELECT count(*) ,  city FROM employee GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "employee",
    "id": 113
  },
  {
    "question": "Count the number of employees for each city.",
    "SQL": "SELECT count(*), city FROM employee GROUP BY city",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "employee",
    "id": 114
  },
  {
    "question": "Which cities do more than one employee under age 30 come from?",
    "SQL": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        },
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "employee",
    "id": 115
  },
  {
    "question": "Find the cities that have more than one employee under age 30.",
    "SQL": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "city"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        },
        {
          "column": "*",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "employee",
    "id": 116
  },
  {
    "question": "Find the number of shops in each location.",
    "SQL": "SELECT count(*), LOCATION FROM shop GROUP BY LOCATION",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 117
  },
  {
    "question": "How many shops are there in each location?",
    "SQL": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "LOCATION"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 118
  },
  {
    "question": "Find the manager name and district of the shop whose number of products is the largest.",
    "SQL": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 119
  },
  {
    "question": "What are the manager name and district of the shop that sells the largest number of products?",
    "SQL": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "manager_name"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 120
  },
  {
    "question": "find the minimum and maximum number of products of all stores.",
    "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 121
  },
  {
    "question": "What are the minimum and maximum number of products across all the shops?",
    "SQL": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Number_products",
          "aggregate_function": "min"
        },
        {
          "column": "Number_products",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 122
  },
  {
    "question": "Return the name, location and district of all shops in descending order of number of products.",
    "SQL": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "LOCATION"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 123
  },
  {
    "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
    "SQL": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "LOCATION"
        },
        {
          "column": "district"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 124
  },
  {
    "question": "Find the names of stores whose number products is more than the average number of products.",
    "SQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "AVG"
        },
        {
          "column": "number_products",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "(SELECT avg(number_products) FROM shop)"
        }
      ]
    },
    "table_name": "shop",
    "id": 125
  },
  {
    "question": "Which shops' number products is above the average? Give me the shop names.",
    "SQL": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "number_products",
          "aggregate_function": "AVG"
        },
        {
          "column": "number_products",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "number_products",
          "match_type": "大于",
          "condition": "(SELECT avg(number_products) FROM shop)"
        }
      ]
    },
    "table_name": "shop",
    "id": 126
  },
  {
    "question": "What is total bonus given in all evaluations?",
    "SQL": "SELECT sum(bonus) FROM evaluation",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "evaluation",
    "id": 127
  },
  {
    "question": "Find the total amount of bonus given in all the evaluations.",
    "SQL": "SELECT sum(bonus) FROM evaluation",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "bonus",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "evaluation",
    "id": 128
  },
  {
    "question": "Give me all the information about hiring.",
    "SQL": "SELECT * FROM hiring",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": []
    },
    "table_name": "hiring",
    "id": 129
  },
  {
    "question": "What is all the information about hiring?",
    "SQL": "SELECT * FROM hiring",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": []
    },
    "table_name": "hiring",
    "id": 130
  },
  {
    "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "3000"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "table_name": "shop",
    "id": 131
  },
  {
    "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
    "SQL": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [
        {
          "column": "district"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Number_products",
          "match_type": "小于",
          "condition": "3000"
        },
        {
          "column": "Number_products",
          "match_type": "大于",
          "condition": "10000"
        }
      ]
    },
    "table_name": "shop",
    "id": 132
  },
  {
    "question": "How many different store locations are there?",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 133
  },
  {
    "question": "Count the number of distinct store locations.",
    "SQL": "SELECT count(DISTINCT LOCATION) FROM shop",
    "db_id": "employee_hire_evaluation",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LOCATION",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "shop",
    "id": 134
  },
  {
    "question": "How many documents do we have?",
    "SQL": "SELECT count(*) FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 135
  },
  {
    "question": "Count the number of documents.",
    "SQL": "SELECT count(*) FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 136
  },
  {
    "question": "What are the ids, names, and descriptions for all documents?",
    "SQL": "SELECT document_id ,  document_name ,  document_description FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "document_name"
        },
        {
          "column": "document_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Documents",
    "id": 137
  },
  {
    "question": "What is the document name and template id for document with description with the letter 'w' in it?",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "模糊匹配",
          "condition": "%w%"
        }
      ]
    },
    "table_name": "Documents",
    "id": 138
  },
  {
    "question": "Return the names and template ids for documents that contain the letter w in their description.",
    "SQL": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_name"
        },
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Document_Description",
          "match_type": "模糊匹配",
          "condition": "w"
        }
      ]
    },
    "table_name": "Documents",
    "id": 139
  },
  {
    "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "精确匹配",
          "condition": "Robbin CV"
        }
      ]
    },
    "table_name": "Documents",
    "id": 140
  },
  {
    "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
    "SQL": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        },
        {
          "column": "template_id"
        },
        {
          "column": "Document_Description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "document_name",
          "match_type": "精确匹配",
          "condition": "Robbin CV"
        }
      ]
    },
    "table_name": "Documents",
    "id": 141
  },
  {
    "question": "How many different templates do all document use?",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 142
  },
  {
    "question": "Count the number of different templates used for documents.",
    "SQL": "SELECT count(DISTINCT template_id) FROM Documents",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "template_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 143
  },
  {
    "question": "Show all template ids and number of documents using each template.",
    "SQL": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 144
  },
  {
    "question": "What are all different template ids used for documents, and how many times were each of them used?",
    "SQL": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Documents",
    "id": 145
  },
  {
    "question": "Show ids for all templates that are used by more than one document.",
    "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Documents",
    "id": 146
  },
  {
    "question": "What are the template ids of any templates used in more than a single document?",
    "SQL": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Documents",
    "id": 147
  },
  {
    "question": "How many templates do we have?",
    "SQL": "SELECT count(*) FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 148
  },
  {
    "question": "Count the number of templates.",
    "SQL": "SELECT count(*) FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 149
  },
  {
    "question": "Show template ids, version numbers, and template type codes for all templates.",
    "SQL": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        },
        {
          "column": "version_number"
        },
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Templates",
    "id": 150
  },
  {
    "question": "Show all distinct template type codes for all templates.",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Templates",
    "id": 151
  },
  {
    "question": "What are the different template type codes?",
    "SQL": "SELECT DISTINCT template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": []
    },
    "table_name": "Templates",
    "id": 152
  },
  {
    "question": "Return the ids of templates that have the code PP or PPT.",
    "SQL": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "PP"
        },
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "PPT"
        }
      ]
    },
    "table_name": "Templates",
    "id": 153
  },
  {
    "question": "How many templates have template type code CV?",
    "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "等于",
          "condition": "CV"
        }
      ]
    },
    "table_name": "Templates",
    "id": 154
  },
  {
    "question": "Count the number of templates of the type CV.",
    "SQL": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "CV"
        }
      ]
    },
    "table_name": "Templates",
    "id": 155
  },
  {
    "question": "What is the version number and template type code for the template with version number later than 5?",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "None"
        }
      ],
      "filter": [
        {
          "column": "version_number",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "table_name": "Templates",
    "id": 156
  },
  {
    "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
    "SQL": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "version_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "version_number",
          "match_type": "大于",
          "condition": "5"
        }
      ]
    },
    "table_name": "Templates",
    "id": 157
  },
  {
    "question": "Show all template type codes and number of templates for each.",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 158
  },
  {
    "question": "What are the different template type codes, and how many templates correspond to each?",
    "SQL": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 159
  },
  {
    "question": "Which template type code has most number of templates?",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 160
  },
  {
    "question": "Return the type code of the template type that the most templates belong to.",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 161
  },
  {
    "question": "Show all template type codes with less than three templates.",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "小于",
          "condition": "3"
        }
      ]
    },
    "table_name": "Templates",
    "id": 162
  },
  {
    "question": "What are the codes of template types that have fewer than 3 templates?",
    "SQL": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "小于",
          "condition": "3"
        }
      ]
    },
    "table_name": "Templates",
    "id": 163
  },
  {
    "question": "What the smallest version number and its template type code?",
    "SQL": "SELECT min(Version_Number), template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 164
  },
  {
    "question": "Return the lowest version number, along with its corresponding template type code.",
    "SQL": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [
        {
          "column": "Version_Number",
          "aggregate_function": "min"
        }
      ],
      "filter": []
    },
    "table_name": "Templates",
    "id": 165
  },
  {
    "question": "Show all template type codes and descriptions.",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Ref_template_types",
    "id": 166
  },
  {
    "question": "What are the type codes and descriptions for all template types?",
    "SQL": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        },
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Ref_template_types",
    "id": 167
  },
  {
    "question": "What is the template type descriptions for template type code \"AD\".",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "AD"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 168
  },
  {
    "question": "Return the template type description of the template type with the code AD.",
    "SQL": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_code",
          "match_type": "精确匹配",
          "condition": "AD"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 169
  },
  {
    "question": "What is the template type code for template type description \"Book\".",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "精确匹配",
          "condition": "Book"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 170
  },
  {
    "question": "Return the type code of the template type with the description \"Book\".",
    "SQL": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "template_type_code"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "template_type_description",
          "match_type": "精确匹配",
          "condition": "Book"
        }
      ]
    },
    "table_name": "Ref_template_types",
    "id": 171
  },
  {
    "question": "How many paragraphs in total?",
    "SQL": "SELECT count(*) FROM Paragraphs",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 172
  },
  {
    "question": "Count the number of paragraphs.",
    "SQL": "SELECT count(*) FROM Paragraphs",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 173
  },
  {
    "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "模糊匹配",
          "condition": "korea"
        }
      ]
    },
    "table_name": "paragraphs",
    "id": 174
  },
  {
    "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 175
  },
  {
    "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
    "SQL": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 176
  },
  {
    "question": "List all document ids with at least two paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 177
  },
  {
    "question": "What are the ids of documents that have 2 or more paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 178
  },
  {
    "question": "What is the document id with least number of paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 179
  },
  {
    "question": "Return the id of the document with the fewest paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Paragraphs",
    "id": 180
  },
  {
    "question": "What is the document id with 1 to 2 paragraphs?",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "在区间",
          "condition": [
            1,
            2
          ]
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 181
  },
  {
    "question": "Give the ids of documents that have between one and two paragraphs.",
    "SQL": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "在区间",
          "condition": [
            1,
            2
          ]
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 182
  },
  {
    "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Brazil"
        },
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Ireland"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 183
  },
  {
    "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
    "SQL": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
    "db_id": "cre_Doc_Template_Mgt",
    "config": {
      "dimension": [
        {
          "column": "document_id"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Brazil"
        },
        {
          "column": "paragraph_text",
          "match_type": "精确匹配",
          "condition": "Ireland"
        }
      ]
    },
    "table_name": "Paragraphs",
    "id": 184
  },
  {
    "question": "How many teachers are there?",
    "SQL": "SELECT count(*) FROM teacher",
    "db_id": "course_teach",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 185
  },
  {
    "question": "What is the total count of teachers?",
    "SQL": "SELECT count(*) FROM teacher",
    "db_id": "course_teach",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 186
  },
  {
    "question": "List the names of teachers in ascending order of age.",
    "SQL": "SELECT Name FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "teacher",
    "id": 187
  },
  {
    "question": "What are the names of the teachers ordered by ascending age?",
    "SQL": "SELECT Name FROM teacher ORDER BY Age ASC",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "teacher",
    "id": 188
  },
  {
    "question": "What are the age and hometown of teachers?",
    "SQL": "SELECT Age ,  Hometown FROM teacher",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "teacher",
    "id": 189
  },
  {
    "question": "What is the age and hometown of every teacher?",
    "SQL": "SELECT Age ,  Hometown FROM teacher",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Age"
        },
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "teacher",
    "id": 190
  },
  {
    "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
    "SQL": "select name from teacher where hometown != \"little lever urban district\"",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hometown",
          "match_type": "不等于",
          "condition": "Little Lever Urban District"
        }
      ]
    },
    "table_name": "teacher",
    "id": 191
  },
  {
    "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
    "SQL": "select name from teacher where hometown != \"little lever urban district\"",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hometown",
          "match_type": "不等于",
          "condition": "Little Lever Urban District"
        }
      ]
    },
    "table_name": "teacher",
    "id": 192
  },
  {
    "question": "Show the name of teachers aged either 32 or 33?",
    "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "32"
        },
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "33"
        }
      ]
    },
    "table_name": "teacher",
    "id": 193
  },
  {
    "question": "What are the names of the teachers who are aged either 32 or 33?",
    "SQL": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "32"
        },
        {
          "column": "Age",
          "match_type": "等于",
          "condition": "33"
        }
      ]
    },
    "table_name": "teacher",
    "id": 194
  },
  {
    "question": "What is the hometown of the youngest teacher?",
    "SQL": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "最小值",
          "condition": ""
        }
      ]
    },
    "table_name": "teacher",
    "id": 195
  },
  {
    "question": "Where is the youngest teacher from?",
    "SQL": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Age",
          "match_type": "最小值",
          "condition": ""
        }
      ]
    },
    "table_name": "teacher",
    "id": 196
  },
  {
    "question": "Show different hometown of teachers and the number of teachers from each hometown.",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 197
  },
  {
    "question": "For each hometown, how many teachers are there?",
    "SQL": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 198
  },
  {
    "question": "List the most common hometown of teachers.",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 199
  },
  {
    "question": "What is the most commmon hometowns for teachers?",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "teacher",
    "id": 200
  },
  {
    "question": "Show the hometowns shared by at least two teachers.",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "teacher",
    "id": 201
  },
  {
    "question": "What are the towns from which at least two teachers come from?",
    "SQL": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
    "db_id": "course_teach",
    "config": {
      "dimension": [
        {
          "column": "Hometown"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "teacher",
    "id": 202
  },
  {
    "question": "How many visitors below age 30 are there?",
    "SQL": "SELECT count(*) FROM visitor WHERE age < 30",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "30"
        }
      ]
    },
    "table_name": "visitor",
    "id": 203
  },
  {
    "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
    "SQL": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "table_name": "visitor",
    "id": 204
  },
  {
    "question": "What is the average age of the visitors whose membership level is not higher than 4?",
    "SQL": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "小于等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "visitor",
    "id": 205
  },
  {
    "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
    "SQL": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "Level_of_membership"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Level_of_membership",
          "match_type": "大于",
          "condition": "4"
        }
      ]
    },
    "table_name": "visitor",
    "id": 206
  },
  {
    "question": "Find the id and name of the museum that has the most staff members?",
    "SQL": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "museum_id"
        },
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "museum",
    "id": 207
  },
  {
    "question": "Find the average number of staff working for the museums that were open before 2009.",
    "SQL": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "小于",
          "condition": "2009"
        }
      ]
    },
    "table_name": "museum",
    "id": 208
  },
  {
    "question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "Open_Year"
        },
        {
          "column": "Num_of_Staff"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Plaza Museum"
        }
      ]
    },
    "table_name": "museum",
    "id": 209
  },
  {
    "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
    "SQL": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
    "db_id": "museum_visit",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [
        {
          "column": "num_of_staff",
          "aggregate_function": "NONE"
        },
        {
          "column": "num_of_staff",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2010"
        },
        {
          "column": "num_of_staff",
          "match_type": "大于",
          "condition": "(SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
        }
      ]
    },
    "table_name": "museum",
    "id": 210
  },
  {
    "question": "What are the average and maximum number of tickets bought in all visits?",
    "SQL": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "num_of_ticket",
          "aggregate_function": "avg"
        },
        {
          "column": "num_of_ticket",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "visit",
    "id": 211
  },
  {
    "question": "How many museums were opened after 2013 or before 2008?",
    "SQL": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
    "db_id": "museum_visit",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "open_year",
          "match_type": "大于",
          "condition": "2013"
        },
        {
          "column": "open_year",
          "match_type": "小于",
          "condition": "2008"
        }
      ]
    },
    "table_name": "museum",
    "id": 212
  },
  {
    "question": "Find the total number of players.",
    "SQL": "SELECT count(*) FROM players",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 213
  },
  {
    "question": "How many players are there?",
    "SQL": "SELECT count(*) FROM players",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 214
  },
  {
    "question": "Find the total number of matches.",
    "SQL": "SELECT count(*) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 215
  },
  {
    "question": "Count the number of matches.",
    "SQL": "SELECT count(*) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 216
  },
  {
    "question": "List the first name and birth date of all players from the country with code USA.",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "players",
    "id": 217
  },
  {
    "question": "What are the first names and birth dates of players from the USA?",
    "SQL": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "country_code",
          "match_type": "精确匹配",
          "condition": "USA"
        }
      ]
    },
    "table_name": "players",
    "id": 218
  },
  {
    "question": "Find the average age of losers and winners of all matches.",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 219
  },
  {
    "question": "What are the average ages of losers and winners across matches?",
    "SQL": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_age",
          "aggregate_function": "AVG"
        },
        {
          "column": "winner_age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 220
  },
  {
    "question": "Find the average rank of winners in all matches.",
    "SQL": "SELECT avg(winner_rank) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 221
  },
  {
    "question": "What is the average rank for winners in all matches?",
    "SQL": "SELECT avg(winner_rank) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_rank",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 222
  },
  {
    "question": "Find the highest rank of losers in all matches.",
    "SQL": "SELECT min(loser_rank) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 223
  },
  {
    "question": "What is the best rank of losers across all matches?",
    "SQL": "SELECT min(loser_rank) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_rank",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 224
  },
  {
    "question": "find the number of distinct country codes of all players.",
    "SQL": "SELECT count(DISTINCT country_code) FROM players",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 225
  },
  {
    "question": "How many distinct countries do players come from?",
    "SQL": "SELECT count(DISTINCT country_code) FROM players",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "country_code",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 226
  },
  {
    "question": "Find the number of distinct name of losers.",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 227
  },
  {
    "question": "How many different loser names are there?",
    "SQL": "SELECT count(DISTINCT loser_name) FROM matches",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "loser_name",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 228
  },
  {
    "question": "Find the name of tourney that has more than 10 matches.",
    "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "matches",
    "id": 229
  },
  {
    "question": "What are the names of tournaments that have more than 10 matches?",
    "SQL": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "tourney_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于",
          "condition": "10"
        }
      ]
    },
    "table_name": "matches",
    "id": 230
  },
  {
    "question": "List the names of all winners who played in both 2013 and 2016.",
    "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "table_name": "matches",
    "id": 231
  },
  {
    "question": "What are the names of players who won in both 2013 and 2016?",
    "SQL": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "table_name": "matches",
    "id": 232
  },
  {
    "question": "List the number of all matches who played in years of 2013 or 2016.",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "table_name": "matches",
    "id": 233
  },
  {
    "question": "How many matches were played in 2013 or 2016?",
    "SQL": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2013"
        },
        {
          "column": "YEAR",
          "match_type": "等于",
          "condition": "2016"
        }
      ]
    },
    "table_name": "matches",
    "id": 234
  },
  {
    "question": "Find the first name and country code of the oldest player.",
    "SQL": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "players",
    "id": 235
  },
  {
    "question": "What is the first name and country code of the oldest player?",
    "SQL": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "country_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "players",
    "id": 236
  },
  {
    "question": "List the first and last name of all players in the order of birth date.",
    "SQL": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "players",
    "id": 237
  },
  {
    "question": "What are the full names of all players, sorted by birth date?",
    "SQL": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "players",
    "id": 238
  },
  {
    "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "birth_date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "table_name": "players",
    "id": 239
  },
  {
    "question": "What are the full names of all left handed players, in order of birth date?",
    "SQL": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "table_name": "players",
    "id": 240
  },
  {
    "question": "Find the year that has the most number of matches.",
    "SQL": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 241
  },
  {
    "question": "Which year had the most matches?",
    "SQL": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 242
  },
  {
    "question": "Find the name and rank points of the winner who won the most times.",
    "SQL": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank_points"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 243
  },
  {
    "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
    "SQL": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 244
  },
  {
    "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "Australian Open"
        }
      ]
    },
    "table_name": "matches",
    "id": 245
  },
  {
    "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_rank_points",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "Australian Open"
        }
      ]
    },
    "table_name": "matches",
    "id": 246
  },
  {
    "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
    "SQL": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "matches",
    "id": 247
  },
  {
    "question": "What are the names of the winner and loser who played in the longest match?",
    "SQL": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "loser_name"
        }
      ],
      "measure": [
        {
          "column": "minutes",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 248
  },
  {
    "question": "find the number of players for each country.",
    "SQL": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 249
  },
  {
    "question": "How many players are from each country?",
    "SQL": "SELECT count(*), country_code FROM players GROUP BY country_code",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 250
  },
  {
    "question": "find the code of the country where has the greatest number of players.",
    "SQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 251
  },
  {
    "question": "What is the code of the country with the most players?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 252
  },
  {
    "question": "Find the codes of countries that have more than 50 players.",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "table_name": "players",
    "id": 253
  },
  {
    "question": "What are the codes of countries with more than 50 players?",
    "SQL": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "country_code"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "50"
        }
      ]
    },
    "table_name": "players",
    "id": 254
  },
  {
    "question": "Find the total number of tours for each ranking date.",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "rankings",
    "id": 255
  },
  {
    "question": "How many total tours were there for each ranking date?",
    "SQL": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "ranking_date"
        }
      ],
      "measure": [
        {
          "column": "tours",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "rankings",
    "id": 256
  },
  {
    "question": "Find the number of matches happened in each year.",
    "SQL": "SELECT count(*), YEAR FROM matches GROUP BY YEAR",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 257
  },
  {
    "question": "How many matches were played in each year?",
    "SQL": "SELECT count(*), YEAR FROM matches GROUP BY YEAR",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "YEAR"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "matches",
    "id": 258
  },
  {
    "question": "Find the name and rank of the 3 youngest winners across all matches.",
    "SQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "matches",
    "id": 259
  },
  {
    "question": "What are the names and ranks of the three youngest winners across all matches?",
    "SQL": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        },
        {
          "column": "winner_rank"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "matches",
    "id": 260
  },
  {
    "question": "How many different winners both participated in the WTA Championships and were left handed?",
    "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "db_id": "wta_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "winner_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        },
        {
          "column": "winner_hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "table_name": "matches",
    "id": 261
  },
  {
    "question": "Find the number of left handed winners who participated in the WTA Championships.",
    "SQL": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "winner_name"
        }
      ],
      "measure": [
        {
          "column": "winner_name",
          "aggregate_function": "COUNT DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "tourney_name",
          "match_type": "精确匹配",
          "condition": "WTA Championships"
        },
        {
          "column": "winner_hand",
          "match_type": "精确匹配",
          "condition": "L"
        }
      ]
    },
    "table_name": "matches",
    "id": 262
  },
  {
    "question": "Find the number of players for each hand type.",
    "SQL": "SELECT count(*), hand FROM players GROUP BY hand",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "hand"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 263
  },
  {
    "question": "How many players are there for each hand type?",
    "SQL": "SELECT count(*), hand FROM players GROUP BY hand",
    "db_id": "wta_1",
    "config": {
      "dimension": [
        {
          "column": "hand"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "players",
    "id": 264
  },
  {
    "question": "How many ships ended up being 'Captured'?",
    "SQL": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "disposition_of_ship",
          "match_type": "精确匹配",
          "condition": "Captured"
        }
      ]
    },
    "table_name": "ship",
    "id": 265
  },
  {
    "question": "List the name, date and result of each battle.",
    "SQL": "SELECT name ,  date FROM battle",
    "db_id": "battle_death",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "date"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "battle",
    "id": 266
  },
  {
    "question": "What is maximum and minimum death toll caused each time?",
    "SQL": "SELECT max(killed) ,  min(killed) FROM death",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "killed",
          "aggregate_function": "max"
        },
        {
          "column": "killed",
          "aggregate_function": "min"
        }
      ],
      "filter": []
    },
    "table_name": "death",
    "id": 267
  },
  {
    "question": "What is the average number of injuries caused each time?",
    "SQL": "SELECT avg(injured) FROM death",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "injured",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "death",
    "id": 268
  },
  {
    "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
    "SQL": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
    "db_id": "battle_death",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "RESULT"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "不等于",
          "condition": "Boril"
        }
      ]
    },
    "table_name": "battle",
    "id": 269
  },
  {
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "db_id": "battle_death",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "bulgarian_commander",
          "match_type": "精确匹配",
          "condition": "Kaloyan"
        },
        {
          "column": "latin_commander",
          "match_type": "精确匹配",
          "condition": "Baldwin I"
        }
      ]
    },
    "table_name": "battle",
    "id": 270
  },
  {
    "question": "How many different results are there for the battles?",
    "SQL": "SELECT count(DISTINCT RESULT) FROM battle",
    "db_id": "battle_death",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "RESULT",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "battle",
    "id": 271
  },
  {
    "question": "What are the notes of the death events which has substring 'East'?",
    "SQL": "SELECT note FROM death WHERE note LIKE '%East%'",
    "db_id": "battle_death",
    "config": {
      "dimension": [
        {
          "column": "note"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "note",
          "match_type": "模糊匹配",
          "condition": "East"
        }
      ]
    },
    "table_name": "death",
    "id": 272
  },
  {
    "question": "what are all the addresses including line 1 and line 2?",
    "SQL": "SELECT line_1 ,  line_2 FROM addresses",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "addresses",
    "id": 273
  },
  {
    "question": "What is the first and second line for all addresses?",
    "SQL": "SELECT line_1 ,  line_2 FROM addresses",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "line_1"
        },
        {
          "column": "line_2"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "addresses",
    "id": 274
  },
  {
    "question": "How many courses in total are listed?",
    "SQL": "SELECT count(*) FROM Courses",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Courses",
    "id": 275
  },
  {
    "question": "How many courses are there?",
    "SQL": "SELECT count(*) FROM Courses",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Courses",
    "id": 276
  },
  {
    "question": "How is the math course described?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "精确匹配",
          "condition": "math"
        }
      ]
    },
    "table_name": "Courses",
    "id": 277
  },
  {
    "question": "What are the descriptions for all the math courses?",
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "course_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "course_name",
          "match_type": "精确匹配",
          "condition": "math"
        }
      ]
    },
    "table_name": "Courses",
    "id": 278
  },
  {
    "question": "What is the zip code of the address in the city Port Chelsea?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Port Chelsea"
        }
      ]
    },
    "table_name": "Addresses",
    "id": 279
  },
  {
    "question": "What is the zip code for Port Chelsea?",
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "zip_postcode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "精确匹配",
          "condition": "Port Chelsea"
        }
      ]
    },
    "table_name": "Addresses",
    "id": 280
  },
  {
    "question": "How many departments offer any degree?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "COUNT_DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Degree_Programs",
    "id": 281
  },
  {
    "question": "How many different departments offer degrees?",
    "SQL": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "department_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Degree_Programs",
    "id": 282
  },
  {
    "question": "How many different degree names are offered?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Degree_Programs",
    "id": 283
  },
  {
    "question": "How many different degrees are offered?",
    "SQL": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "degree_summary_name",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Degree_Programs",
    "id": 284
  },
  {
    "question": "What are the names and descriptions of all the sections?",
    "SQL": "SELECT section_name ,  section_description FROM Sections",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 285
  },
  {
    "question": "What are the names and descriptions for all the sections?",
    "SQL": "SELECT section_name ,  section_description FROM Sections",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        },
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 286
  },
  {
    "question": "List the section_name in reversed lexicographical order.",
    "SQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 287
  },
  {
    "question": "What are the names of the sections in reverse alphabetical order?",
    "SQL": "SELECT section_name FROM Sections ORDER BY section_name DESC",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Sections",
    "id": 288
  },
  {
    "question": "What is the description of the department whose name has the substring the computer?",
    "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "department_name",
          "match_type": "模糊匹配",
          "condition": "computer"
        }
      ]
    },
    "table_name": "Departments",
    "id": 289
  },
  {
    "question": "What is the department description for the one whose name has the word computer?",
    "SQL": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "department_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "department_name",
          "match_type": "模糊匹配",
          "condition": "computer"
        }
      ]
    },
    "table_name": "Departments",
    "id": 290
  },
  {
    "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
    "SQL": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cell_mobile_number",
          "aggregate_function": "NONE"
        }
      ],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "Timmothy"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "Ward"
        }
      ]
    },
    "table_name": "Students",
    "id": 291
  },
  {
    "question": "What is the mobile phone number of the student named Timmothy Ward ?",
    "SQL": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "cell_mobile_number"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "first_name",
          "match_type": "精确匹配",
          "condition": "timmothy"
        },
        {
          "column": "last_name",
          "match_type": "精确匹配",
          "condition": "ward"
        }
      ]
    },
    "table_name": "students",
    "id": 292
  },
  {
    "question": "Who is the first student to register? List the first name, middle name and last name.",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_first_registered",
          "match_type": "absolute_time",
          "condition": [
            "1970-01-01",
            null
          ]
        }
      ]
    },
    "table_name": "Students",
    "id": 293
  },
  {
    "question": "What is the first, middle, and last name of the first student to register?",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Students",
    "id": 294
  },
  {
    "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "date_left",
          "match_type": "最早",
          "condition": "ASC LIMIT 1"
        }
      ]
    },
    "table_name": "Students",
    "id": 295
  },
  {
    "question": "What is the first, middle, and last name of the earliest school graduate?",
    "SQL": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "middle_name"
        },
        {
          "column": "last_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Students",
    "id": 296
  },
  {
    "question": "Whose permanent address is different from his or her current address? List his or her first name.",
    "SQL": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "current_address_id",
          "match_type": "不等于",
          "condition": "permanent_address_id"
        }
      ]
    },
    "table_name": "Students",
    "id": 297
  },
  {
    "question": "What is the first name of the student whose permanent address is different from his or her current one?",
    "SQL": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "current_address_id",
          "match_type": "不等于",
          "condition": "permanent_address_id"
        }
      ]
    },
    "table_name": "Students",
    "id": 298
  },
  {
    "question": "On average, when were the transcripts printed?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 299
  },
  {
    "question": "What is the average transcript date?",
    "SQL": "SELECT avg(transcript_date) FROM Transcripts",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 300
  },
  {
    "question": "When is the first transcript released? List the date and details.",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 301
  },
  {
    "question": "What is the earliest date of a transcript release, and what details can you tell me?",
    "SQL": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "other_details"
        }
      ],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 302
  },
  {
    "question": "How many transcripts are released?",
    "SQL": "SELECT count(*) FROM Transcripts",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 303
  },
  {
    "question": "How many transcripts are listed?",
    "SQL": "SELECT count(*) FROM Transcripts",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 304
  },
  {
    "question": "What is the last transcript release date?",
    "SQL": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 305
  },
  {
    "question": "When was the last transcript released?",
    "SQL": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "transcript_date",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Transcripts",
    "id": 306
  },
  {
    "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
    "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        }
      ],
      "measure": [
        {
          "column": "student_course_id",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Transcript_Contents",
    "id": 307
  },
  {
    "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
    "SQL": "SELECT count(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "student_course_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Transcript_Contents",
    "id": 308
  },
  {
    "question": "How many different addresses do the students currently live?",
    "SQL": "SELECT count(DISTINCT current_address_id) FROM Students",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "current_address_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Students",
    "id": 309
  },
  {
    "question": "What are the different addresses that have students living there?",
    "SQL": "SELECT count(DISTINCT current_address_id) FROM Students",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "current_address_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Students",
    "id": 310
  },
  {
    "question": "List all the student details in reversed lexicographical order.",
    "SQL": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "other_student_details"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Students",
    "id": 311
  },
  {
    "question": "What other details can you tell me about students in reverse alphabetical order?",
    "SQL": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": []
    },
    "table_name": "Students",
    "id": 312
  },
  {
    "question": "Describe the section h.",
    "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "精确匹配",
          "condition": "h"
        }
      ]
    },
    "table_name": "Sections",
    "id": 313
  },
  {
    "question": "What is the description for the section named h?",
    "SQL": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
    "db_id": "student_transcripts_tracking",
    "config": {
      "dimension": [
        {
          "column": "section_description"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "section_name",
          "match_type": "精确匹配",
          "condition": "h"
        }
      ]
    },
    "table_name": "Sections",
    "id": 314
  },
  {
    "question": "List the title of all cartoons in alphabetical order.",
    "SQL": "SELECT Title FROM Cartoon ORDER BY title",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 315
  },
  {
    "question": "What are the titles of the cartoons sorted alphabetically?",
    "SQL": "SELECT Title FROM Cartoon ORDER BY title",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 316
  },
  {
    "question": "List all cartoon directed by \"Ben Jones\".",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 317
  },
  {
    "question": "What are the names of all cartoons directed by Ben Jones?",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 318
  },
  {
    "question": "How many cartoons were written by \"Joseph Kuhr\"?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "精确匹配",
          "condition": "Joseph Kuhr"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 319
  },
  {
    "question": "What is the number of cartoones written by Joseph Kuhr?",
    "SQL": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Written_by",
          "match_type": "精确匹配",
          "condition": "Joseph Kuhr"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 320
  },
  {
    "question": "list all cartoon titles and their directors ordered by their air date",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 321
  },
  {
    "question": "What is the name and directors of all the cartoons that are ordered by air date?",
    "SQL": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "title"
        },
        {
          "column": "Directed_by"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Cartoon",
    "id": 322
  },
  {
    "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Brandon Vietti"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 323
  },
  {
    "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
    "SQL": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Title"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Ben Jones"
        },
        {
          "column": "Directed_by",
          "match_type": "精确匹配",
          "condition": "Brandon Vietti"
        }
      ]
    },
    "table_name": "Cartoon",
    "id": 324
  },
  {
    "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 325
  },
  {
    "question": "What is the country with the most number of TV Channels and how many does it have?",
    "SQL": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Country"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 326
  },
  {
    "question": "List the number of different series names and contents in the TV Channel table.",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 327
  },
  {
    "question": "How many different series and contents are listed in the TV Channel table?",
    "SQL": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "series_name",
          "aggregate_function": "DISTINCT"
        },
        {
          "column": "content",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 328
  },
  {
    "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
    "SQL": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "精确匹配",
          "condition": "Sky Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 329
  },
  {
    "question": "What is the content of the series Sky Radio?",
    "SQL": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Content"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "精确匹配",
          "condition": "Sky Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 330
  },
  {
    "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "精确匹配",
          "condition": "Sky Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 331
  },
  {
    "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
    "SQL": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Package_Option"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "series_name",
          "match_type": "精确匹配",
          "condition": "Sky Radio"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 332
  },
  {
    "question": "How many TV Channel using language English?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 333
  },
  {
    "question": "How many TV Channels use the English language?",
    "SQL": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 334
  },
  {
    "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 335
  },
  {
    "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 336
  },
  {
    "question": "List each language and the number of TV Channels using it.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 337
  },
  {
    "question": "For each language, list the number of TV Channels that use it.",
    "SQL": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "TV_Channel",
    "id": 338
  },
  {
    "question": "List the Episode of all TV series sorted by rating.",
    "SQL": "SELECT Episode FROM TV_series ORDER BY rating",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 339
  },
  {
    "question": "What are all of the episodes ordered by ratings?",
    "SQL": "SELECT Episode FROM TV_series ORDER BY rating",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 340
  },
  {
    "question": "List top 3 highest Rating TV series. List the TV series's Episode and Rating.",
    "SQL": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 341
  },
  {
    "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
    "SQL": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Episode"
        }
      ],
      "measure": [
        {
          "column": "Rating",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 342
  },
  {
    "question": "What is minimum and maximum share of TV series?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 343
  },
  {
    "question": "What is the maximum and minimum share for the TV series?",
    "SQL": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "TV_series",
    "id": 344
  },
  {
    "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "精确匹配",
          "condition": "A Love of a Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 345
  },
  {
    "question": "When did the episode \"A Love of a Lifetime\" air?",
    "SQL": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Air_Date"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "精确匹配",
          "condition": "A Love of a Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 346
  },
  {
    "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
    "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Weekly_Rank",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Episode",
          "match_type": "精确匹配",
          "condition": "A Love of a Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 347
  },
  {
    "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
    "SQL": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Weekly_Rank"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Episode",
          "match_type": "精确匹配",
          "condition": "A Love of a Lifetime"
        }
      ]
    },
    "table_name": "TV_series",
    "id": 348
  },
  {
    "question": "Find the number of cartoons directed by each of the listed directors.",
    "SQL": "SELECT count(*), Directed_by FROM cartoon GROUP BY Directed_by",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "cartoon",
    "id": 349
  },
  {
    "question": "How many cartoons did each director create?",
    "SQL": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Directed_by"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "cartoon",
    "id": 350
  },
  {
    "question": "Find the production code and channel of the most recently aired cartoon .",
    "SQL": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "cartoon",
    "id": 351
  },
  {
    "question": "What is the produdction code and channel of the most recent cartoon ?",
    "SQL": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "production_code"
        },
        {
          "column": "channel"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "original_air_date",
          "match_type": "relative_time",
          "condition": "latest_data_date"
        }
      ]
    },
    "table_name": "cartoon",
    "id": 352
  },
  {
    "question": "Find the package choice and series name of the TV channel that has high definition TV.",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hight_definition_TV",
          "match_type": "精确匹配",
          "condition": "yes"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 353
  },
  {
    "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
    "SQL": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "package_option"
        },
        {
          "column": "series_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "hight_definition_TV",
          "match_type": "精确匹配",
          "condition": "yes"
        }
      ]
    },
    "table_name": "TV_Channel",
    "id": 354
  },
  {
    "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 355
  },
  {
    "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
    "SQL": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "Pixel_aspect_ratio_PAR"
        },
        {
          "column": "country"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 356
  },
  {
    "question": "find id of the tv channels that from the countries where have more than two tv channels.",
    "SQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 357
  },
  {
    "question": "What are the ids of all tv channels that have more than 2 TV channels?",
    "SQL": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
    "db_id": "tvshow",
    "config": {
      "dimension": [
        {
          "column": "country"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于",
          "condition": "2"
        }
      ]
    },
    "table_name": "tv_channel",
    "id": 358
  },
  {
    "question": "How many poker players are there?",
    "SQL": "SELECT count(*) FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 359
  },
  {
    "question": "Count the number of poker players.",
    "SQL": "SELECT count(*) FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 360
  },
  {
    "question": "List the earnings of poker players in descending order.",
    "SQL": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 361
  },
  {
    "question": "What are the earnings of poker players, ordered descending by value?",
    "SQL": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 362
  },
  {
    "question": "List the final tables made and the best finishes of poker players.",
    "SQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Final_Table_Made"
        }
      ],
      "measure": [
        {
          "column": "Best_Finish",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 363
  },
  {
    "question": "What are the final tables made and best finishes for all poker players?",
    "SQL": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Final_Table_Made"
        },
        {
          "column": "Best_Finish"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 364
  },
  {
    "question": "What is the average earnings of poker players?",
    "SQL": "SELECT avg(Earnings) FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 365
  },
  {
    "question": "Return the average earnings across all poker players.",
    "SQL": "SELECT avg(Earnings) FROM poker_player",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 366
  },
  {
    "question": "What is the money rank of the poker player with the highest earnings?",
    "SQL": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Money_Rank"
        }
      ],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 367
  },
  {
    "question": "Return the money rank of the player with the greatest earnings.",
    "SQL": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Money_Rank"
        }
      ],
      "measure": [
        {
          "column": "Earnings",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "poker_player",
    "id": 368
  },
  {
    "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
    "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Final_Table_Made",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "小于",
          "condition": "200000"
        }
      ]
    },
    "table_name": "poker_player",
    "id": 369
  },
  {
    "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
    "SQL": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Final_Table_Made",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Earnings",
          "match_type": "小于",
          "condition": "200000"
        }
      ]
    },
    "table_name": "poker_player",
    "id": 370
  },
  {
    "question": "What are different nationalities of people and the corresponding number of people from each nation?",
    "SQL": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 371
  },
  {
    "question": "How many people are there of each nationality?",
    "SQL": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 372
  },
  {
    "question": "What is the most common nationality of people?",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 373
  },
  {
    "question": "Give the nationality that is most common across all people.",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 374
  },
  {
    "question": "What are the nationalities that are shared by at least two people?",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "*",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "people",
    "id": 375
  },
  {
    "question": "Return the nationalities for which there are two or more people.",
    "SQL": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Nationality"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "COUNT(*)",
          "match_type": "大于等于",
          "condition": "2"
        }
      ]
    },
    "table_name": "people",
    "id": 376
  },
  {
    "question": "List the names and birth dates of people in ascending alphabetical order of name.",
    "SQL": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Birth_Date"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "people",
    "id": 377
  },
  {
    "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
    "SQL": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Birth_Date"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "people",
    "id": 378
  },
  {
    "question": "Show names of people whose nationality is not \"Russia\".",
    "SQL": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "Russia"
        }
      ]
    },
    "table_name": "people",
    "id": 379
  },
  {
    "question": "What are the names of people who are not from Russia?",
    "SQL": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
    "db_id": "poker_player",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "Russia"
        }
      ]
    },
    "table_name": "people",
    "id": 380
  },
  {
    "question": "How many distinct nationalities are there?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM people",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 381
  },
  {
    "question": "Count the number of different nationalities.",
    "SQL": "SELECT count(DISTINCT Nationality) FROM people",
    "db_id": "poker_player",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "people",
    "id": 382
  },
  {
    "question": "How many states are there?",
    "SQL": "SELECT count(*) FROM area_code_state",
    "db_id": "voter_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "area_code_state",
    "id": 383
  },
  {
    "question": "List the contestant numbers and names, ordered by contestant name descending.",
    "SQL": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
    "db_id": "voter_1",
    "config": {
      "dimension": [
        {
          "column": "contestant_number"
        },
        {
          "column": "contestant_name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "contestants",
    "id": 384
  },
  {
    "question": "List the vote ids, phone numbers and states of all votes.",
    "SQL": "SELECT vote_id ,  phone_number ,  state FROM votes",
    "db_id": "voter_1",
    "config": {
      "dimension": [
        {
          "column": "vote_id"
        },
        {
          "column": "phone_number"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "votes",
    "id": 385
  },
  {
    "question": "What are the maximum and minimum values of area codes?",
    "SQL": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
    "db_id": "voter_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "area_code",
          "aggregate_function": "max"
        },
        {
          "column": "area_code",
          "aggregate_function": "min"
        }
      ],
      "filter": []
    },
    "table_name": "area_code_state",
    "id": 386
  },
  {
    "question": "What is last date created of votes from the state 'CA'?",
    "SQL": "SELECT max(created) FROM votes WHERE state  =  'CA'",
    "db_id": "voter_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "created",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "CA"
        }
      ]
    },
    "table_name": "votes",
    "id": 387
  },
  {
    "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
    "SQL": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
    "db_id": "voter_1",
    "config": {
      "dimension": [
        {
          "column": "contestant_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "contestant_name",
          "match_type": "不等于",
          "condition": "Jessie Alloway"
        }
      ]
    },
    "table_name": "contestants",
    "id": 388
  },
  {
    "question": "What are the distinct states and create time of all votes?",
    "SQL": "SELECT DISTINCT state ,  created FROM votes",
    "db_id": "voter_1",
    "config": {
      "dimension": [
        {
          "column": "state"
        },
        {
          "column": "created"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "votes",
    "id": 389
  },
  {
    "question": "What are the number of votes from state 'NY' or 'CA'?",
    "SQL": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
    "db_id": "voter_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "state",
          "match_type": "等于",
          "condition": "NY"
        },
        {
          "column": "state",
          "match_type": "等于",
          "condition": "CA"
        }
      ]
    },
    "table_name": "votes",
    "id": 390
  },
  {
    "question": "What are the names of all the countries that became independent after 1950?",
    "SQL": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "IndepYear",
          "match_type": "大于",
          "condition": "1950"
        }
      ]
    },
    "table_name": "country",
    "id": 391
  },
  {
    "question": "Give the names of the nations that were founded after 1950.",
    "SQL": "SELECT Name FROM country WHERE IndepYear  >  1950",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "IndepYear",
          "match_type": "大于",
          "condition": "1950"
        }
      ]
    },
    "table_name": "country",
    "id": 392
  },
  {
    "question": "How many countries have a republic as their form of government?",
    "SQL": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Republic"
        }
      ]
    },
    "table_name": "country",
    "id": 393
  },
  {
    "question": "How many countries have governments that are republics?",
    "SQL": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Republic"
        }
      ]
    },
    "table_name": "country",
    "id": 394
  },
  {
    "question": "What is the total surface area of the countries in the Caribbean region?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Caribbean"
        }
      ]
    },
    "table_name": "country",
    "id": 395
  },
  {
    "question": "How much surface area do the countires in the Carribean cover together?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Caribbean"
        }
      ]
    },
    "table_name": "country",
    "id": 396
  },
  {
    "question": "Which continent is Anguilla in?",
    "SQL": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Anguilla"
        }
      ]
    },
    "table_name": "country",
    "id": 397
  },
  {
    "question": "What is the continent name which Anguilla belongs to?",
    "SQL": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Anguilla"
        }
      ]
    },
    "table_name": "country",
    "id": 398
  },
  {
    "question": "What are the population and life expectancies in Brazil?",
    "SQL": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Brazil"
        }
      ]
    },
    "table_name": "country",
    "id": 399
  },
  {
    "question": "Give me Brazil’s population and life expectancies.",
    "SQL": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Brazil"
        }
      ]
    },
    "table_name": "country",
    "id": 400
  },
  {
    "question": "What are the region and population of Angola?",
    "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Region"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Angola"
        }
      ]
    },
    "table_name": "country",
    "id": 401
  },
  {
    "question": "What region does Angola belong to and what is its population?",
    "SQL": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Region"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Name",
          "match_type": "精确匹配",
          "condition": "Angola"
        }
      ]
    },
    "table_name": "country",
    "id": 402
  },
  {
    "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Central Africa"
        }
      ]
    },
    "table_name": "country",
    "id": 403
  },
  {
    "question": "How long is the people’s average life expectancy in Central Africa?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Region",
          "match_type": "精确匹配",
          "condition": "Central Africa"
        }
      ]
    },
    "table_name": "country",
    "id": 404
  },
  {
    "question": "What is the name of country that has the shortest life expectancy in Asia?",
    "SQL": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 405
  },
  {
    "question": "Give the name of the country in Asia with the lowest life expectancy.",
    "SQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 406
  },
  {
    "question": "What is the total population and maximum GNP in Asia?",
    "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "GNP",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 407
  },
  {
    "question": "How many people live in Asia, and what is the largest GNP among them?",
    "SQL": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "GNP",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 408
  },
  {
    "question": "What is the average life expectancy in African countries that are republics?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Republic"
        }
      ]
    },
    "table_name": "country",
    "id": 409
  },
  {
    "question": "Give the average life expectancy for countries in Africa which are republics?",
    "SQL": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "Republic"
        }
      ]
    },
    "table_name": "country",
    "id": 410
  },
  {
    "question": "What is the total surface area of the continents Asia and Europe?",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        }
      ]
    },
    "table_name": "country",
    "id": 411
  },
  {
    "question": "Give the total surface area covered by countries in Asia or Europe.",
    "SQL": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        }
      ]
    },
    "table_name": "country",
    "id": 412
  },
  {
    "question": "How many people live in Gelderland district?",
    "SQL": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "District",
          "match_type": "精确匹配",
          "condition": "Gelderland"
        }
      ]
    },
    "table_name": "city",
    "id": 413
  },
  {
    "question": "What is the total population of Gelderland district?",
    "SQL": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "District",
          "match_type": "精确匹配",
          "condition": "Gelderland"
        }
      ]
    },
    "table_name": "city",
    "id": 414
  },
  {
    "question": "What is the average GNP and total population in all nations whose government is US territory?",
    "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GNP",
          "aggregate_function": "AVG"
        },
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "US Territory"
        }
      ]
    },
    "table_name": "country",
    "id": 415
  },
  {
    "question": "Give the mean GNP and total population of nations which are considered US territory.",
    "SQL": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GNP",
          "aggregate_function": "AVG"
        },
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": [
        {
          "column": "GovernmentForm",
          "match_type": "精确匹配",
          "condition": "US Territory"
        }
      ]
    },
    "table_name": "country",
    "id": 416
  },
  {
    "question": "How many unique languages are spoken in the world?",
    "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LANGUAGE",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 417
  },
  {
    "question": "What is the number of distinct languages used around the world?",
    "SQL": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "LANGUAGE",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 418
  },
  {
    "question": "How many type of governments are in Africa?",
    "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "GovernmentForm",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "table_name": "country",
    "id": 419
  },
  {
    "question": "How many different forms of governments are there in Africa?",
    "SQL": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "GovernmentForm",
          "aggregate_function": "COUNT(DISTINCT)"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        }
      ]
    },
    "table_name": "country",
    "id": 420
  },
  {
    "question": "Find the name, population and expected life length of asian country with the largest area?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 421
  },
  {
    "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
    "SQL": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "Population"
        },
        {
          "column": "LifeExpectancy"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 422
  },
  {
    "question": "What are the countries that have greater surface area than any country in Europe?",
    "SQL": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "(SELECT min(SurfaceArea) FROM country WHERE Continent = 'Europe')"
        }
      ]
    },
    "table_name": "country",
    "id": 423
  },
  {
    "question": "Which countries have greater area than that of any country in Europe?",
    "SQL": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "SurfaceArea",
          "match_type": "大于",
          "condition": "(SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
        }
      ]
    },
    "table_name": "country",
    "id": 424
  },
  {
    "question": "What are the African countries that have a population less than any country in Asia?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "population",
          "match_type": "小于",
          "condition": "(SELECT max(population) FROM country WHERE Continent = 'Asia')"
        }
      ]
    },
    "table_name": "country",
    "id": 425
  },
  {
    "question": "Which African countries have a smaller population than that of any country in Asia?",
    "SQL": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Africa"
        },
        {
          "column": "population",
          "match_type": "小于",
          "condition": "(SELECT min(population) FROM country WHERE Continent = \"Asia\")"
        }
      ]
    },
    "table_name": "country",
    "id": 426
  },
  {
    "question": "Which Asian countries have a population that is larger than any country in Africa?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "population",
          "match_type": "大于",
          "condition": "(SELECT max(population) FROM country WHERE Continent = 'Africa')"
        }
      ]
    },
    "table_name": "country",
    "id": 427
  },
  {
    "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
    "SQL": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        },
        {
          "column": "population",
          "match_type": "大于",
          "condition": "(SELECT min(population) FROM country WHERE Continent = 'Africa')"
        }
      ]
    },
    "table_name": "country",
    "id": 428
  },
  {
    "question": "What are the country codes for countries that do not speak English?",
    "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 429
  },
  {
    "question": "Return the country codes for countries that do not speak English.",
    "SQL": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 430
  },
  {
    "question": "What are the country codes of countries where people use languages other than English?",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 431
  },
  {
    "question": "Give the country codes for countries in which people speak langauges that are not English.",
    "SQL": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "不等于",
          "condition": "English"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 432
  },
  {
    "question": "What are the name, independence year, and surface area of the country with the smallest population?",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "IndepYear"
        },
        {
          "column": "SurfaceArea"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "country",
    "id": 433
  },
  {
    "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
    "SQL": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "SurfaceArea"
        },
        {
          "column": "IndepYear"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "MIN"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 434
  },
  {
    "question": "What are the population, name and leader of the country with the largest area?",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 435
  },
  {
    "question": "Give the name, population, and head of state for the country that has the largest area.",
    "SQL": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        },
        {
          "column": "population"
        },
        {
          "column": "HeadOfState"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "country",
    "id": 436
  },
  {
    "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
    "SQL": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "(SELECT avg(Population) FROM city)"
        }
      ]
    },
    "table_name": "city",
    "id": 437
  },
  {
    "question": "How many cities in each district have a population that is above the average population across all cities?",
    "SQL": "SELECT count(*),  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "District"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Population",
          "match_type": "大于",
          "condition": "(SELECT avg(Population) FROM city)"
        }
      ]
    },
    "table_name": "city",
    "id": 438
  },
  {
    "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
    "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于",
          "condition": "72"
        }
      ]
    },
    "table_name": "country",
    "id": 439
  },
  {
    "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
    "SQL": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "GovernmentForm"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "大于",
          "condition": "72"
        }
      ]
    },
    "table_name": "country",
    "id": 440
  },
  {
    "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "AVG",
          "condition": "< 72"
        }
      ]
    },
    "table_name": "country",
    "id": 441
  },
  {
    "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
    "SQL": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Continent"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        },
        {
          "column": "LifeExpectancy",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "LifeExpectancy",
          "match_type": "AVG",
          "condition": "< 72"
        }
      ]
    },
    "table_name": "country",
    "id": 442
  },
  {
    "question": "What are the names and areas of countries with the top 5 largest area?",
    "SQL": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 443
  },
  {
    "question": "Return the names and surface areas of the 5 largest countries.",
    "SQL": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "SurfaceArea",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 444
  },
  {
    "question": "What are names of countries with the top 3 largest population?",
    "SQL": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 445
  },
  {
    "question": "Return the names of the 3 most populated countries.",
    "SQL": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "country",
    "id": 446
  },
  {
    "question": "What are the names of the nations with the 3 lowest populations?",
    "SQL": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 447
  },
  {
    "question": "Return the names of the 3 countries with the fewest people.",
    "SQL": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Population",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "country",
    "id": 448
  },
  {
    "question": "how many countries are in Asia?",
    "SQL": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 449
  },
  {
    "question": "Count the number of countries in Asia.",
    "SQL": "SELECT count(*) FROM country WHERE continent = 'Asia'",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Asia"
        }
      ]
    },
    "table_name": "country",
    "id": 450
  },
  {
    "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
    "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "等于",
          "condition": "80000"
        }
      ]
    },
    "table_name": "country",
    "id": 451
  },
  {
    "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
    "SQL": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "Europe"
        },
        {
          "column": "Population",
          "match_type": "等于",
          "condition": "80000"
        }
      ]
    },
    "table_name": "country",
    "id": 452
  },
  {
    "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "north america"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "table_name": "country",
    "id": 453
  },
  {
    "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
    "SQL": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
    "db_id": "world_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "population",
          "aggregate_function": "SUM"
        },
        {
          "column": "surfacearea",
          "aggregate_function": "AVG"
        }
      ],
      "filter": [
        {
          "column": "continent",
          "match_type": "精确匹配",
          "condition": "north america"
        },
        {
          "column": "surfacearea",
          "match_type": "大于",
          "condition": "3000"
        }
      ]
    },
    "table_name": "country",
    "id": 454
  },
  {
    "question": "What are the cities whose population is between 160000 and 900000?",
    "SQL": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Population",
          "match_type": "在区间",
          "condition": [
            160000,
            900000
          ]
        }
      ]
    },
    "table_name": "city",
    "id": 455
  },
  {
    "question": "Return the names of cities that have a population between 160000 and 900000.",
    "SQL": "select name from city where population between 160000 and 900000",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "population",
          "match_type": "在区间",
          "condition": [
            160000,
            900000
          ]
        }
      ]
    },
    "table_name": "city",
    "id": 456
  },
  {
    "question": "Which language is spoken by the largest number of countries?",
    "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 457
  },
  {
    "question": "Give the language that is spoken in the most countries.",
    "SQL": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 458
  },
  {
    "question": "What is the language spoken by the largest percentage of people in each country?",
    "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 459
  },
  {
    "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
    "SQL": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        },
        {
          "column": "LANGUAGE"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "countrylanguage",
    "id": 460
  },
  {
    "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        },
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 461
  },
  {
    "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
    "SQL": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        },
        {
          "column": "Percentage",
          "aggregate_function": "MAX"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 462
  },
  {
    "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 463
  },
  {
    "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
    "SQL": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
    "db_id": "world_1",
    "config": {
      "dimension": [
        {
          "column": "CountryCode"
        }
      ],
      "measure": [
        {
          "column": "Percentage",
          "aggregate_function": "max"
        }
      ],
      "filter": [
        {
          "column": "LANGUAGE",
          "match_type": "精确匹配",
          "condition": "Spanish"
        }
      ]
    },
    "table_name": "countrylanguage",
    "id": 464
  },
  {
    "question": "How many conductors are there?",
    "SQL": "SELECT count(*) FROM conductor",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 465
  },
  {
    "question": "Count the number of conductors.",
    "SQL": "SELECT count(*) FROM conductor",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 466
  },
  {
    "question": "List the names of conductors in ascending order of age.",
    "SQL": "SELECT Name FROM conductor ORDER BY Age ASC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "conductor",
    "id": 467
  },
  {
    "question": "What are the names of conductors, ordered by age?",
    "SQL": "SELECT Name FROM conductor ORDER BY Age ASC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "conductor",
    "id": 468
  },
  {
    "question": "What are the names of conductors whose nationalities are not \"USA\"?",
    "SQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "USA"
        }
      ]
    },
    "table_name": "conductor",
    "id": 469
  },
  {
    "question": "Return the names of conductors that do not have the nationality \"USA\".",
    "SQL": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Nationality",
          "match_type": "不等于",
          "condition": "USA"
        }
      ]
    },
    "table_name": "conductor",
    "id": 470
  },
  {
    "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
    "SQL": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 471
  },
  {
    "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
    "SQL": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 472
  },
  {
    "question": "What is the average attendance of shows?",
    "SQL": "SELECT avg(Attendance) FROM SHOW",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "SHOW",
    "id": 473
  },
  {
    "question": "Return the average attendance across all shows.",
    "SQL": "SELECT avg(Attendance) FROM SHOW",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Attendance",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "SHOW",
    "id": 474
  },
  {
    "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "TYPE",
          "match_type": "不等于",
          "condition": "Live final"
        }
      ]
    },
    "table_name": "performance",
    "id": 475
  },
  {
    "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
    "SQL": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "SHARE",
          "aggregate_function": "MAX"
        },
        {
          "column": "SHARE",
          "aggregate_function": "MIN"
        }
      ],
      "filter": [
        {
          "column": "TYPE",
          "match_type": "不等于",
          "condition": "Live final"
        }
      ]
    },
    "table_name": "performance",
    "id": 476
  },
  {
    "question": "How many different nationalities do conductors have?",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 477
  },
  {
    "question": "Count the number of different nationalities of conductors.",
    "SQL": "SELECT count(DISTINCT Nationality) FROM conductor",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "Nationality",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 478
  },
  {
    "question": "List names of conductors in descending order of years of work.",
    "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 479
  },
  {
    "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
    "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 480
  },
  {
    "question": "List the name of the conductor with the most years of work.",
    "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 481
  },
  {
    "question": "What is the name of the conductor who has worked the greatest number of years?",
    "SQL": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Year_of_Work",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "conductor",
    "id": 482
  },
  {
    "question": "Please show the different record companies and the corresponding number of orchestras.",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 483
  },
  {
    "question": "How many orchestras does each record company manage?",
    "SQL": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 484
  },
  {
    "question": "Please show the record formats of orchestras in ascending order of count.",
    "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 485
  },
  {
    "question": "What are the major record formats of orchestras, sorted by their frequency?",
    "SQL": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Major_Record_Format"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 486
  },
  {
    "question": "List the record company shared by the most number of orchestras.",
    "SQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 487
  },
  {
    "question": "What is the record company used by the greatest number of orchestras?",
    "SQL": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "orchestra",
    "id": 488
  },
  {
    "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2003"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2003"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 489
  },
  {
    "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
    "SQL": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  > 2003",
    "db_id": "orchestra",
    "config": {
      "dimension": [
        {
          "column": "Record_Company"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Year_of_Founded",
          "match_type": "小于",
          "condition": "2003"
        },
        {
          "column": "Year_of_Founded",
          "match_type": "大于",
          "condition": "2003"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 490
  },
  {
    "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "DVD"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 491
  },
  {
    "question": "Count the number of orchestras that have CD or DVD as their record format.",
    "SQL": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
    "db_id": "orchestra",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "CD"
        },
        {
          "column": "Major_Record_Format",
          "match_type": "精确匹配",
          "condition": "DVD"
        }
      ]
    },
    "table_name": "orchestra",
    "id": 492
  },
  {
    "question": "How many high schoolers are there?",
    "SQL": "SELECT count(*) FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 493
  },
  {
    "question": "Count the number of high schoolers.",
    "SQL": "SELECT count(*) FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 494
  },
  {
    "question": "Show the names and grades of each high schooler.",
    "SQL": "SELECT name ,  grade FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 495
  },
  {
    "question": "What are the names and grades for each high schooler?",
    "SQL": "SELECT name ,  grade FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 496
  },
  {
    "question": "Show all the grades of the high schoolers.",
    "SQL": "SELECT grade FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 497
  },
  {
    "question": "What is the grade of each high schooler?",
    "SQL": "SELECT grade FROM Highschooler",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 498
  },
  {
    "question": "What grade is Kyle in?",
    "SQL": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Kyle"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 499
  },
  {
    "question": "Return the grade for the high schooler named Kyle.",
    "SQL": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Kyle"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 500
  },
  {
    "question": "Show the names of all high schoolers in grade 10.",
    "SQL": "SELECT name FROM Highschooler WHERE grade = 10",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 501
  },
  {
    "question": "What are the names of all high schoolers in grade 10?",
    "SQL": "SELECT name FROM Highschooler WHERE grade  =  10",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 502
  },
  {
    "question": "Show the ID of the high schooler named Kyle.",
    "SQL": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "ID"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Kyle"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 503
  },
  {
    "question": "What is Kyle's id?",
    "SQL": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "ID",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "name",
          "match_type": "精确匹配",
          "condition": "Kyle"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 504
  },
  {
    "question": "How many high schoolers are there in grade 9 or 10?",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        },
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 505
  },
  {
    "question": "Count the number of high schoolers in grades 9 or 10.",
    "SQL": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
    "db_id": "network_1",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "9"
        },
        {
          "column": "grade",
          "match_type": "等于",
          "condition": "10"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 506
  },
  {
    "question": "Show the number of high schoolers for each grade.",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 507
  },
  {
    "question": "How many high schoolers are in each grade?",
    "SQL": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 508
  },
  {
    "question": "Which grade has the most high schoolers?",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 509
  },
  {
    "question": "Return the grade that has the greatest number of high schoolers.",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "count"
        }
      ],
      "filter": []
    },
    "table_name": "Highschooler",
    "id": 510
  },
  {
    "question": "Show me all grades that have at least 4 students.",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 511
  },
  {
    "question": "Which grades have 4 or more high schoolers?",
    "SQL": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "grade"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "count(*)",
          "match_type": "大于等于",
          "condition": "4"
        }
      ]
    },
    "table_name": "Highschooler",
    "id": 512
  },
  {
    "question": "Show the student IDs and numbers of friends corresponding to each.",
    "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "count(*)",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Friend",
    "id": 513
  },
  {
    "question": "How many friends does each student have?",
    "SQL": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Friend",
    "id": 514
  },
  {
    "question": "Count the number of likes for each student id.",
    "SQL": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Likes",
    "id": 515
  },
  {
    "question": "How many likes correspond to each student id?",
    "SQL": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
    "db_id": "network_1",
    "config": {
      "dimension": [
        {
          "column": "student_id"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Likes",
    "id": 516
  },
  {
    "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Hawaii"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Wisconsin"
        }
      ]
    },
    "table_name": "Professionals",
    "id": 517
  },
  {
    "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
    "SQL": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Hawaii"
        },
        {
          "column": "state",
          "match_type": "精确匹配",
          "condition": "Wisconsin"
        }
      ]
    },
    "table_name": "Professionals",
    "id": 518
  },
  {
    "question": "What are the arriving date and the departing date of all the dogs?",
    "SQL": "SELECT date_arrived ,  date_departed FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 519
  },
  {
    "question": "List the arrival date and the departure date for all the dogs.",
    "SQL": "SELECT date_arrived ,  date_departed FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "date_arrived"
        },
        {
          "column": "date_departed"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 520
  },
  {
    "question": "How many dogs went through any treatments?",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 521
  },
  {
    "question": "Count the number of dogs that went through a treatment.",
    "SQL": "SELECT count(DISTINCT dog_id) FROM Treatments",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "dog_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 522
  },
  {
    "question": "How many professionals have performed any treatment to dogs?",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "COUNT DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 523
  },
  {
    "question": "Find the number of professionals who have ever treated dogs.",
    "SQL": "SELECT count(DISTINCT professional_id) FROM Treatments",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "professional_id",
          "aggregate_function": "DISTINCT"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 524
  },
  {
    "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "West"
        }
      ]
    },
    "table_name": "professionals",
    "id": 525
  },
  {
    "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
    "SQL": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "role_code"
        },
        {
          "column": "street"
        },
        {
          "column": "city"
        },
        {
          "column": "state"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "city",
          "match_type": "模糊匹配",
          "condition": "%West%"
        }
      ]
    },
    "table_name": "professionals",
    "id": 526
  },
  {
    "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
    "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "模糊匹配",
          "condition": "North"
        }
      ]
    },
    "table_name": "Owners",
    "id": 527
  },
  {
    "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
    "SQL": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "first_name"
        },
        {
          "column": "last_name"
        },
        {
          "column": "email_address"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "state",
          "match_type": "模糊匹配",
          "condition": "North"
        }
      ]
    },
    "table_name": "Owners",
    "id": 528
  },
  {
    "question": "How many dogs have an age below the average?",
    "SQL": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "( SELECT avg(age) FROM Dogs )"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 529
  },
  {
    "question": "Count the number of dogs of an age below the average.",
    "SQL": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": [
        {
          "column": "age",
          "match_type": "小于",
          "condition": "( SELECT avg(age) FROM Dogs )"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 530
  },
  {
    "question": "How much does the most recent treatment cost?",
    "SQL": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 531
  },
  {
    "question": "Show me the cost of the most recently performed treatment.",
    "SQL": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "cost_of_treatment",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Treatments",
    "id": 532
  },
  {
    "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 533
  },
  {
    "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
    "SQL": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "name"
        },
        {
          "column": "age"
        },
        {
          "column": "weight"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "abandoned_yn",
          "match_type": "等于",
          "condition": "1"
        }
      ]
    },
    "table_name": "Dogs",
    "id": 534
  },
  {
    "question": "What is the average age of all the dogs?",
    "SQL": "SELECT avg(age) FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 535
  },
  {
    "question": "Compute the average age of all the dogs.",
    "SQL": "SELECT avg(age) FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "AVG"
        }
      ],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 536
  },
  {
    "question": "What is the age of the oldest dog?",
    "SQL": "SELECT max(age) FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 537
  },
  {
    "question": "Tell me the age of the oldest dog.",
    "SQL": "SELECT max(age) FROM Dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "age",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Dogs",
    "id": 538
  },
  {
    "question": "How much does each charge type costs? List both charge type and amount.",
    "SQL": "SELECT charge_type ,  charge_amount FROM Charges",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "Charges",
    "id": 539
  },
  {
    "question": "List each charge type and its amount.",
    "SQL": "SELECT charge_type ,  charge_amount FROM Charges",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "charge_type"
        }
      ],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "SUM"
        }
      ],
      "filter": []
    },
    "table_name": "Charges",
    "id": 540
  },
  {
    "question": "How much does the most expensive charge type costs?",
    "SQL": "SELECT max(charge_amount) FROM Charges",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Charges",
    "id": 541
  },
  {
    "question": "What is the charge amount of the most expensive charge type?",
    "SQL": "SELECT max(charge_amount) FROM Charges",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "charge_amount",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "Charges",
    "id": 542
  },
  {
    "question": "List the email, cell phone and home phone of all the professionals.",
    "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "professionals",
    "id": 543
  },
  {
    "question": "What are the email, cell phone and home phone of each professional?",
    "SQL": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "email_address"
        },
        {
          "column": "cell_number"
        },
        {
          "column": "home_phone"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "professionals",
    "id": 544
  },
  {
    "question": "What are all the possible breed type and size type combinations?",
    "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "dogs",
    "id": 545
  },
  {
    "question": "Find the distinct breed type and size type combinations for dogs.",
    "SQL": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
    "db_id": "dog_kennels",
    "config": {
      "dimension": [
        {
          "column": "breed_code"
        },
        {
          "column": "size_code"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "dogs",
    "id": 546
  },
  {
    "question": "How many singers are there?",
    "SQL": "SELECT count(*) FROM singer",
    "db_id": "singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 547
  },
  {
    "question": "What is the count of singers?",
    "SQL": "SELECT count(*) FROM singer",
    "db_id": "singer",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 548
  },
  {
    "question": "List the name of singers in ascending order of net worth.",
    "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 549
  },
  {
    "question": "What are the names of singers ordered by ascending net worth?",
    "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 550
  },
  {
    "question": "What are the birth year and citizenship of singers?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 551
  },
  {
    "question": "What are the birth years and citizenships of the singers?",
    "SQL": "SELECT Birth_Year ,  Citizenship FROM singer",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Birth_Year"
        },
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": []
    },
    "table_name": "singer",
    "id": 552
  },
  {
    "question": "List the name of singers whose citizenship is not \"France\".",
    "SQL": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "France"
        }
      ]
    },
    "table_name": "singer",
    "id": 553
  },
  {
    "question": "What are the names of the singers who are not French citizens?",
    "SQL": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Citizenship",
          "match_type": "不等于",
          "condition": "France"
        }
      ]
    },
    "table_name": "singer",
    "id": 554
  },
  {
    "question": "Show the name of singers whose birth year is either 1948 or 1949?",
    "SQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1948"
        },
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1949"
        }
      ]
    },
    "table_name": "singer",
    "id": 555
  },
  {
    "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
    "SQL": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1948"
        },
        {
          "column": "Birth_Year",
          "match_type": "等于",
          "condition": "1949"
        }
      ]
    },
    "table_name": "singer",
    "id": 556
  },
  {
    "question": "What is the name of the singer with the largest net worth?",
    "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 557
  },
  {
    "question": "What is the name of the singer who is worth the most?",
    "SQL": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Name"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 558
  },
  {
    "question": "Show different citizenship of singers and the number of singers of each citizenship.",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 559
  },
  {
    "question": "For each citizenship, how many singers are from that country?",
    "SQL": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 560
  },
  {
    "question": "Please show the most common citizenship of singers.",
    "SQL": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 561
  },
  {
    "question": "What is the most common singer citizenship ?",
    "SQL": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "citizenship"
        }
      ],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 562
  },
  {
    "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "max"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 563
  },
  {
    "question": "For each citizenship, what is the maximum net worth?",
    "SQL": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [
        {
          "column": "Net_Worth_Millions",
          "aggregate_function": "MAX"
        }
      ],
      "filter": []
    },
    "table_name": "singer",
    "id": 564
  },
  {
    "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
    "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1955",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1945"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1955"
        }
      ]
    },
    "table_name": "singer",
    "id": 565
  },
  {
    "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
    "SQL": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  > 1955",
    "db_id": "singer",
    "config": {
      "dimension": [
        {
          "column": "Citizenship"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "Birth_Year",
          "match_type": "小于",
          "condition": "1945"
        },
        {
          "column": "Birth_Year",
          "match_type": "大于",
          "condition": "1955"
        }
      ]
    },
    "table_name": "singer",
    "id": 566
  },
  {
    "question": "How many available features are there in total?",
    "SQL": "SELECT count(*) FROM Other_Available_Features",
    "db_id": "real_estate_properties",
    "config": {
      "dimension": [],
      "measure": [
        {
          "column": "*",
          "aggregate_function": "COUNT"
        }
      ],
      "filter": []
    },
    "table_name": "Other_Available_Features",
    "id": 567
  },
  {
    "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
    "SQL": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
    "db_id": "real_estate_properties",
    "config": {
      "dimension": [
        {
          "column": "property_name"
        }
      ],
      "measure": [],
      "filter": [
        {
          "column": "property_type_code",
          "match_type": "等于",
          "condition": "House"
        },
        {
          "column": "property_type_code",
          "match_type": "等于",
          "condition": "Apartment"
        },
        {
          "column": "room_count",
          "match_type": "大于",
          "condition": 1
        }
      ]
    },
    "table_name": "Properties",
    "id": 568
  }
]